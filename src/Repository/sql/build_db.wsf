<job id="Build Database">
  <?Job debug="true"?>

  <runtime>
    <description>This script rebuilds a database</description>
    <named name="run"
      helpstring= "Required option to make sure it doesn't run by opening"
      type = "simple"
      required="true"
    />
    <named name="db"
      helpstring= "Application database name"
      type = "simple"
      required="false"
    />
    <named name="sqldir"
      helpstring= "Path to root of SQL scripts."
      type = "simple"
      required="false"
    />
    <named name="server"
      helpstring= "Database server"
      type = "simple"
      required="false"
    />
    <named name="verbose"
      helpstring= "Verbose status reporting"
      type = "simple"
      required="false"
    />
    <named name="backup"
      helpstring= "Create a backup in sql directory"
      type = "simple"
      required="false"
    />

    <example>Example: cscript build_db.wsf /run /db:COE /server:localhost /sqldir:d:\dev\COE\src\sql /verbose</example>
  </runtime>

  <object id="shell" progid="WScript.Shell"/>
  <object id="fs" progid="Scripting.FileSystemObject"/>

  <script language="JScript">

    var g_sqldir;
    var g_cmdfile = "cmd.txt";
    var g_summary_log = "";          // summary log file name
    var g_appendflag = 8;            // flag to OpenTextFile
    var g_readflag = 1;              // flag to OpenTextFile
    var g_log_opened = false;        // set to true in start_log, used in case of unhandled error
    var g_log_closed = false;        // set to true in end_log, used in case of unhandled errors
    var g_database = "";             // the name of the database
    var g_server = "";               // the name of the database server
    var g_verbose = false;           // verbose option for displaying status
    var g_quiet = false;             // quiet option to skip all message popups
    var g_rebuild = false;           // rebuild the database
    var g_customization = "";        // location of custom scripts
    var g_backup = "";
    var g_user = "";        		 // user name to login to database used to create database and users
    var g_password = "";       		 // user password to login to database used to create database and users
    var g_app_user = "hoc";        	 	// user name to login to database used by application
    var g_app_password = "mumBleFr@tz"; // user password to login to database used by application
    var g_owner_user = "";   		// user name to login to database used for running db scripts
    var g_owner_password = ""; 		// user password to login to database used for running db scripts

    function log(msg)
    {
      var logfile = fs.OpenTextFile(g_summary_log, g_appendflag);
      logfile.WriteLine(msg);
      logfile.Close();
      if (g_verbose)
      {
        WScript.Echo("*** Log: " + msg);
      }
    }

    function pad_left_zeros(value, width)
    {
      var str = "";
      
      str += value;
      while (str.length < width)
      {
        str = "0" + str;
      }
      
      return str;
    }
    
    function get_timestamp()
    {
      var d, s = "";
      var n = 0;
      
      d = new Date();
      s += d.getYear();
      s += "-" + pad_left_zeros(d.getMonth() + 1, 2);
      s += "-" + pad_left_zeros(d.getDate(), 2);
      
      s += " " + pad_left_zeros(d.getHours(), 2);
      s += ":" + pad_left_zeros(d.getMinutes(), 2);
      s += ":" + pad_left_zeros(d.getSeconds(), 2);
      
      return(s);
    }

    function start_log()
    {
      fs.CreateTextFile(g_summary_log, true);

      log("enter start_log");

      fs.CreateTextFile(g_cmdfile, true);
      var logfile = fs.OpenTextFile(g_summary_log, g_appendflag);
      logfile.WriteLine("START DATABASE BUILD (" + get_timestamp() + ")\r\n");
      logfile.Close();
      g_log_opened = true;
    }

    function end_log()
    {
      log("enter end_log");

      var logfile = fs.OpenTextFile(g_summary_log, g_appendflag);
      logfile.WriteLine("END DATABASE BUILD (" + get_timestamp() + ")\r\n");
      logfile.Close();
      g_log_closed = true;
    }

    function process_params()
    {
	
      if (WScript.Arguments.Named.Exists("summary_log"))
      {
        g_summary_log = WScript.Arguments.Named("summary_log");
      }
      else
      {
        g_summary_log = "summary.txt";
      }	 

      start_log();

      if (!WScript.Arguments.Named.Exists("run"))
      {
        throw "must specify a /run parameter";
      }

      if (WScript.Arguments.Named.Exists("sqldir"))
      {
        g_sqldir = WScript.Arguments.Named("sqldir") + "\\";
        log("option sqldir");
      }
      else
      {
        g_sqldir = shell.CurrentDirectory + "\\";
      }

      if (WScript.Arguments.Named.Exists("server"))
      {
        log("option server");
        g_server = WScript.Arguments.Named("server");
      }
      else
      {
        g_server = ".";
      }

      if (WScript.Arguments.Named.Exists("db"))
      {
        log("option db");
        g_database = WScript.Arguments.Named("db");
      }
      else
      {
        throw "must specify a /db parameter";
      }

      if (WScript.Arguments.Named.Exists("verbose"))
      {
        log("option verbose");
        g_verbose = true;
      }

      if (WScript.Arguments.Named.Exists("quiet"))
      {
        log("option quiet");
        g_quiet = true;
      }

      if (WScript.Arguments.Named.Exists("rebuild"))
      {
        throw "must now use *really_rebuild*";
      }
      if (WScript.Arguments.Named.Exists("really_rebuild"))
      {
        log("option rebuild");
        g_rebuild = true;
      }
 	
      if (WScript.Arguments.Named.Exists("customization"))
      {
        log("option customization");
        g_customization = WScript.Arguments.Named("customization") + "\\";
      }

      if (WScript.Arguments.Named.Exists("backup")) {
            log("option backup");
            g_backup = shell.CurrentDirectory + "\\" + WScript.Arguments.Named("backup");
      } 
      if (WScript.Arguments.Named.Exists("user"))
      {
        log("option user");
        g_user = WScript.Arguments.Named("user");
      }
	  
      if (WScript.Arguments.Named.Exists("password"))
      {
        log("option password");
        g_password = WScript.Arguments.Named("password");
    }
	  
      if (WScript.Arguments.Named.Exists("app_user"))
      {
        log("option app_user");
        g_app_user = WScript.Arguments.Named("app_user");
    }
	  
      if (WScript.Arguments.Named.Exists("app_password"))
      {
        log("option app_password");
        g_app_password = WScript.Arguments.Named("app_password");
      }
	  
    }

    function append_to_log(filepath)
    {
      var srcfile = fs.OpenTextFile(filepath, g_readflag);
      var dstfile = fs.OpenTextFile(g_summary_log, g_appendflag);

      while (!srcfile.AtEndOfStream)
      {
        dstfile.WriteLine(srcfile.ReadLine());
      }

      srcfile.Close();
      dstfile.Close();
    }

    function errors_in_log(filepath)
    {
      var errors = false;
      var logfile = fs.OpenTextFile(filepath, g_readflag);
      var line, index_start;
      while (!logfile.AtEndOfStream)
      {
        line = logfile.ReadLine().toUpperCase();
        if (line.indexOf("MSG")!=-1 || line.indexOf("ERROR")!=-1)
        {
          errors = true;
          break;
        }
      }
      return errors;
    }

    function run_inner(desc, cmd, wait)
    {
      log(desc + " (" + cmd + ")");

      var retval;

      // first just echo the command
      retval = shell.Run("%COMSPEC% /c Echo " + cmd + " > " + g_cmdfile + " 2>&1", 0, wait);

      // next run the command and redirect command output to file
      retval = shell.Run("%COMSPEC% /c " + cmd + " > " + g_cmdfile + " 2>&1", 0, wait);

      // append cmd output to logfile
      append_to_log(g_cmdfile);

      if (errors_in_log(g_cmdfile) || retval != 0)
      {
        throw "run(" + cmd + ") failed.  See logfile: " + g_summary_log;
      }
    }

    function run(desc, cmd)
    {
      run_inner(desc, cmd, true);
    }

    function do_script(script)
    {
	  
      if (fs.FileExists(g_sqldir + g_customization + script))
      {
        script = g_customization + script;
      }

      log("enter do_script: " + script);
      run("run script: " + script, "sqlcmd " + g_db_login + " -S " + g_server + " -d " + g_database + " -i \"" + g_sqldir + script + "\"");
    }

    function backup() {

        script = g_customization + "init\\BackupBuildDb.sql";

        log("enter do_script: " + script);
        run("run script: " + script, "sqlcmd -E -S " + g_server + " -d " + g_database + " -i \"" + g_sqldir + script + "\" -v BackupDatabasePath=\"" + g_backup + "\"");
    }

    function do__scripts()
    {  
	  g_owner_user = g_app_user + "_owner";   		
	  g_owner_password = g_app_password + "Own3r"; 	

	  if (g_user != "" && g_password != "")
	  {
		g_db_login = "-U " + g_user + " -P " + g_password;
	  } else
	  {
	    g_db_login = "-E";
	  }
      if (g_rebuild)
      {
		  log("enter do_script: init\\RecreateDatabase.sql");
		  log("Parameter DatabaseName is equal: " + g_database);
		  run("run script: init\\RecreateDatabase.sql" , "sqlcmd " + g_db_login + " -S " + g_server + " -d master -i \"" + g_sqldir + "init\\RecreateDatabase.sql\" -v DatabaseName=\"" + g_database + "\"");

      }

	  log("enter do_script: init\\CreateDatabaseOwnerUser.sql");
	  log("Parameter UserName is equal: " + g_owner_user);
	  log("Parameter UserPassword is equal: " + g_owner_password);
	  run("run script: init\\CreateDatabaseOwnerUser.sql" , "sqlcmd " + g_db_login + " -S " + g_server + " -d " + g_database + " -i \"" + g_sqldir  + "init\\CreateDatabaseOwnerUser.sql\" -v UserName=\"" + g_owner_user + "\" -v UserPassword=\"" + g_owner_password + "\"");
		
	  log("enter do_script: init\\CreateDatabaseAppUser.sql");
	  log("Parameter UserName is equal: " + g_app_user);
	  log("Parameter UserPassword is equal: " + g_app_password);
	  run("run script: init\\CreateDatabaseAppUser.sql" , "sqlcmd " + g_db_login + " -S " + g_server + " -d " + g_database + " -i \"" + g_sqldir + "init\\CreateDatabaseAppUser.sql\" -v UserName=\"" + g_app_user + "\" -v UserPassword=\"" + g_app_password + "\"");

	  g_db_login = "-U " + g_owner_user + " -P " + g_owner_password;
	  
      if (g_rebuild)
      {
	do_script("init\\SchemaCreate.sql");
        do_script("init\\CustomData.sql");  
      }

      do_script("updates\\AddImmutableFlagToRepoItem.sql");
      do_script("updates\\AddQuotaToRepository.sql");
      do_script("updates\\InitUserRepoContextForPreExistingUsers.sql");
      do_script("updates\\JoinImmutabilityAndRefCounts.sql");

      do_script("views\\vRepositoryItem.sql");
      do_script("views\\vRepositoryFolder.sql");
      do_script("views\\vBitstream.sql");
      do_script("views\\vBundle.sql");
      do_script("views\\vUserRepoContext.sql");

      do_script("functions\\IsCollision_fn.sql");
      do_script("functions\\ItemIsUsed_fn.sql");
      do_script("functions\\ItemIsImmutable_fn.sql");
      do_script("functions\\IsBitstreamCollision_fn.sql");
 
      do_script("sprocs\\AddBitstreamToRepositoryItem.sql");
      do_script("sprocs\\AddRepoItemFromFileSystem.sql");
      do_script("sprocs\\AddBundle.sql");
      do_script("sprocs\\AddFolder.sql");
      do_script("sprocs\\AddItem.sql");
      do_script("sprocs\\AddRepositoryItemWithSingleFile.sql");
      do_script("sprocs\\ChunkInStreamData.sql");
      do_script("sprocs\\DeleteBitstream.sql");
      do_script("sprocs\\DeleteRepositoryItem.sql");
      do_script("sprocs\\DeleteRepositoryFolder.sql");
      do_script("sprocs\\EmptyRecycle.sql");
      do_script("sprocs\\FlushTrees.sql");
      do_script("sprocs\\FlushUserTree.sql");
      do_script("sprocs\\GetBitstreamById.sql");
      do_script("sprocs\\GetBitstreamData.sql");
      do_script("sprocs\\GetBitstreamForItemByName.sql");
      do_script("sprocs\\GetBitstreamsForBundle.sql");
      do_script("sprocs\\GetBundleForItem.sql");
      do_script("sprocs\\GetChildBitstreamByName.sql");
      do_script("sprocs\\GetChildFolderByName.sql");
      do_script("sprocs\\GetChildItemByName.sql");
      do_script("sprocs\\GetChildrenFolders.sql");
      do_script("sprocs\\GetChildrenItems.sql");
      do_script("sprocs\\GetChildrenNames.sql");
      do_script("sprocs\\GetDescendentItems.sql");
      do_script("sprocs\\GetDiskUsageForUser.sql");
      do_script("sprocs\\GetExtensionContentType.sql");
      do_script("sprocs\\GetFolderNode.sql");
      do_script("sprocs\\GetFolderPath.sql");
      do_script("sprocs\\GetIsItemImmutable.sql");
      do_script("sprocs\\GetIsItemUsed.sql");
      do_script("sprocs\\GetItemNode.sql");
      do_script("sprocs\\GetItemPathComponents.sql");
      do_script("sprocs\\GetItemPrimaryBitstream.sql");
      do_script("sprocs\\GetItemRefCount.sql");
      do_script("sprocs\\GetOneOff.sql");
      do_script("sprocs\\GetPrimaryBitstreamForRepositoryItem.sql");
      do_script("sprocs\\GetRepositoryFolders.sql");
      do_script("sprocs\\GetRepositoryForUser.sql");
      do_script("sprocs\\GetRepositoryItemById.sql");
      do_script("sprocs\\GetRepositoryItems.sql");
      do_script("sprocs\\GetRecycleFolderForUserTree.sql");
      do_script("sprocs\\GetRootForUserTree.sql");
      do_script("sprocs\\GetSiblingFolderIDWithSameName.sql");
      do_script("sprocs\\GetUsedRepositoryItems.sql");
      do_script("sprocs\\GetUserTree.sql");
      do_script("sprocs\\MoveBitStreamItem.sql");
      do_script("sprocs\\MoveItem.sql");
      do_script("sprocs\\MoveSubTree.sql");
      do_script("sprocs\\PutBitstreamdata.sql");
      do_script("sprocs\\RecycleFolder.sql");
      do_script("sprocs\\RecycleItem.sql");
      do_script("sprocs\\RenameBitstream.sql");
      do_script("sprocs\\RenameFolder.sql");
      do_script("sprocs\\RenameRepositoryItem.sql");
      do_script("sprocs\\ReplaceBitstreamDataFromFile.sql");
      do_script("sprocs\\ReplaceSingleBitstreamRepoItem.sql");
      do_script("sprocs\\RepoRecordCounts.sql");
      do_script("sprocs\\SearchUserRepository.sql");
      do_script("sprocs\\SetUnsetItemImmutable.sql");
      do_script("sprocs\\SetUnsetItemUsed.sql");
      do_script("sprocs\\StartTree.sql");
      do_script("sprocs\\UpdateBundle.sql");
      do_script("sprocs\\UpdateRepositoryItem.sql");
	  do_script("sprocs\\UpdateBitstreamMetaData.sql");

 

      do_script("updates\\LengthenContentType.sql");
      //do_script("updates\\AddImageType.sql");	
      //do_script("updates\\InitImageTypes.sql");
      do_script("updates\\UpdateImageTypeTable.sql");
	  do_script("updates\\LengthenUrlFieldInBitstream.sql");


      // Create backup for nunit tests
      if (g_backup) {
          backup();
      }
    }

    function do_build()
    {
      log("enter do_build");
      do__scripts();
    }

    function get_log_status(filepath)
    {
      var status = "PASSED";

      if (fs.FileExists(filepath))
      {
        if (errors_in_log(filepath))
        {
          status = "FAILED";
        }
      }

      return status;
    }

    function main()
    {     
      process_params();
      do_build();
	  if (!g_quiet)
	  {
        WScript.Echo("BUILD SUCCESSFUL.");
	  }
      end_log();
    }

    //
    // *** EXECUTION BEGINS HERE ***
    //
    try
    {
      main();
      WScript.Quit (0);
    }
    catch (e)
    {
      var msg = "ERROR: ";
      if (typeof(e) == "object")
      {
        msg += e.description;
      }
      else
      {
        msg += e;
      }

      if (g_log_opened)
      {
        log(msg);
      }

	  if (!g_quiet)
	  {
		WScript.Echo(msg);
	  }
      end_log();
      WScript.Quit (1);
    }

  </script>
</job>
