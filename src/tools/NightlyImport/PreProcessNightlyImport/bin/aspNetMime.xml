<?xml version="1.0"?>
<doc>
    <assembly>
        <name>aspNetMime</name>
    </assembly>
    <members>
        <member name="T:aspNetMime.ReportAddingRowEventHandler">
            <summary>
            The delegate used for event handling BeforeAddNDRRow
            </summary>
            <example>
            <code lang="C#">
            void MimeProcessor()
            {
            	//create the processing engine
            	MessageProcessor  engine  = new MessageProcessor();
            
            	//create a new report, and keep in memory
            	MimeReport report = new MimeReport( true, true ); 
            
            	//extend the report schema to include the Content-Type
            	//this can be done by creating new column on the underlying DataSet/Table
            	System.Type dataType= System.Type.GetType( "System.String" );
            	DataColumn dc = new DataColumn( "ContentType", dataType );
            
            	//add it to the underlying DataTable
            	report.BaseDataSet.Tables[ 0 ].Columns.Add( dc );
            
            	//wire up the AddingRow event handler -- in these event, set the ContentType column
            	report.ReportAddingRow += new ReportAddingRowEventHandler( OnBeforeAddMimeMessageRow );
            	
            
            	//set the report on the engine
            	engine.Report = report;
            	
            	string dir = "C:\\temp\\MimeFiles\\";
            	engine.ProcessDirectory( dir );
            
            	engine.Report.SaveToFile( "c:\\report.csv" );
            
            	Console.WriteLine( "done.");
            	Console.ReadLine();
            }
            
            private void OnBeforeAddMimeMessageRow( object sender, ReportAddingRowEventArgs e)
            {
            	DataRow dr = e.DataRow;
            
            	//populate our custom column, named "ContentType", with the value of the content-type of the MimeMessage
            	if( ( e.MimeMessage != null ) &amp;&amp; ( e.MimeMessage.ContentType != null ) )
            	{
            		dr[ "ContentType" ] = e.MimeMessage.ContentType.Value;
            	}
            	else
            		dr[ "ContentType" ] = "(no content-type set)";
            
            }
            </code>
            <code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               
               'extend the report schema to include the Content-Type
               'this can be done by creating new column on the underlying DataSet/Table
               Dim dataType As System.Type = System.Type.GetType("System.String")
               Dim dc As New DataColumn("ContentType", dataType)
               
               'add it to the underlying DataTable
               report.BaseDataSet.Tables(0).Columns.Add(dc)
               
               'wire up the AddingRow event handler -- in these event, set the ContentType column
               AddHandler report.ReportAddingRow, AddressOf OnBeforeAddMimeMessageRow
               
               
               'set the report on the engine
               engine.Report = report
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               engine.Report.SaveToFile("c:\report.csv")
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
            
            
            Private Sub OnBeforeAddMimeMessageRow(sender As Object, e As ReportAddingRowEventArgs)
               Dim dr As DataRow = e.DataRow
               
               'populate our custom column, named "ContentType", with the value of the content-type of the MimeMessage
               If Not (e.MimeMessage Is Nothing) And Not (e.MimeMessage.ContentType Is Nothing) Then
                  dr("ContentType") = e.MimeMessage.ContentType.Value
               Else
                  dr("ContentType") = "(no content-type set)"
               End If 
            End Sub 'OnBeforeAddMimeMessageRow
            </code>
            </example>
        </member>
        <member name="T:aspNetMime.ReportAddingRowEventArgs">
            <summary>
            The event args used when a MimeMessage is added to a MimeReport.
            </summary>
            <example>
            <code lang="C#">
            void MimeProcessor()
            {
            	//create the processing engine
            	MessageProcessor  engine  = new MessageProcessor();
            
            	//create a new report, and keep in memory
            	MimeReport report = new MimeReport( true, true ); 
            
            	//extend the report schema to include the Content-Type
            	//this can be done by creating new column on the underlying DataSet/Table
            	System.Type dataType= System.Type.GetType( "System.String" );
            	DataColumn dc = new DataColumn( "ContentType", dataType );
            
            	//add it to the underlying DataTable
            	report.BaseDataSet.Tables[ 0 ].Columns.Add( dc );
            
            	//wire up the AddingRow event handler -- in these event, set the ContentType column
            	report.ReportAddingRow += new ReportAddingRowEventHandler( OnBeforeAddMimeMessageRow );
            	
            
            	//set the report on the engine
            	engine.Report = report;
            	
            	string dir = "C:\\temp\\MimeFiles\\";
            	engine.ProcessDirectory( dir );
            
            	engine.Report.SaveToFile( "c:\\report.csv" );
            
            	Console.WriteLine( "done.");
            	Console.ReadLine();
            }
            
            private void OnBeforeAddMimeMessageRow( object sender, ReportAddingRowEventArgs e)
            {
            	DataRow dr = e.DataRow;
            
            	//populate our custom column, named "ContentType", with the value of the content-type of the MimeMessage
            	if( ( e.MimeMessage != null ) &amp;&amp; ( e.MimeMessage.ContentType != null ) )
            	{
            		dr[ "ContentType" ] = e.MimeMessage.ContentType.Value;
            	}
            	else
            		dr[ "ContentType" ] = "(no content-type set)";
            
            }
            </code>
            <code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               
               'extend the report schema to include the Content-Type
               'this can be done by creating new column on the underlying DataSet/Table
               Dim dataType As System.Type = System.Type.GetType("System.String")
               Dim dc As New DataColumn("ContentType", dataType)
               
               'add it to the underlying DataTable
               report.BaseDataSet.Tables(0).Columns.Add(dc)
               
               'wire up the AddingRow event handler -- in these event, set the ContentType column
               AddHandler report.ReportAddingRow, AddressOf OnBeforeAddMimeMessageRow
               
               
               'set the report on the engine
               engine.Report = report
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               engine.Report.SaveToFile("c:\report.csv")
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
            
            
            Private Sub OnBeforeAddMimeMessageRow(sender As Object, e As ReportAddingRowEventArgs)
               Dim dr As DataRow = e.DataRow
               
               'populate our custom column, named "ContentType", with the value of the content-type of the MimeMessage
               If Not (e.MimeMessage Is Nothing) And Not (e.MimeMessage.ContentType Is Nothing) Then
                  dr("ContentType") = e.MimeMessage.ContentType.Value
               Else
                  dr("ContentType") = "(no content-type set)"
               End If 
            End Sub 'OnBeforeAddMimeMessageRow
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.ReportAddingRowEventArgs.#ctor">
            <summary>
            Creates an instance of the ReportAddingRowEventArgs
            </summary>
            <example>
            <code lang="C#">
            void MimeProcessor()
            {
            	//create the processing engine
            	MessageProcessor  engine  = new MessageProcessor();
            
            	//create a new report, and keep in memory
            	MimeReport report = new MimeReport( true, true ); 
            
            	//extend the report schema to include the Content-Type
            	//this can be done by creating new column on the underlying DataSet/Table
            	System.Type dataType= System.Type.GetType( "System.String" );
            	DataColumn dc = new DataColumn( "ContentType", dataType );
            
            	//add it to the underlying DataTable
            	report.BaseDataSet.Tables[ 0 ].Columns.Add( dc );
            
            	//wire up the AddingRow event handler -- in these event, set the ContentType column
            	report.ReportAddingRow += new ReportAddingRowEventHandler( OnBeforeAddMimeMessageRow );
            	
            
            	//set the report on the engine
            	engine.Report = report;
            	
            	string dir = "C:\\temp\\MimeFiles\\";
            	engine.ProcessDirectory( dir );
            
            	engine.Report.SaveToFile( "c:\\report.csv" );
            
            	Console.WriteLine( "done.");
            	Console.ReadLine();
            }
            
            private void OnBeforeAddMimeMessageRow( object sender, ReportAddingRowEventArgs e)
            {
            	DataRow dr = e.DataRow;
            
            	//populate our custom column, named "ContentType", with the value of the content-type of the MimeMessage
            	if( ( e.MimeMessage != null ) &amp;&amp; ( e.MimeMessage.ContentType != null ) )
            	{
            		dr[ "ContentType" ] = e.MimeMessage.ContentType.Value;
            	}
            	else
            		dr[ "ContentType" ] = "(no content-type set)";
            
            }
            </code>
            <code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               
               'extend the report schema to include the Content-Type
               'this can be done by creating new column on the underlying DataSet/Table
               Dim dataType As System.Type = System.Type.GetType("System.String")
               Dim dc As New DataColumn("ContentType", dataType)
               
               'add it to the underlying DataTable
               report.BaseDataSet.Tables(0).Columns.Add(dc)
               
               'wire up the AddingRow event handler -- in these event, set the ContentType column
               AddHandler report.ReportAddingRow, AddressOf OnBeforeAddMimeMessageRow
               
               
               'set the report on the engine
               engine.Report = report
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               engine.Report.SaveToFile("c:\report.csv")
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
            
            
            Private Sub OnBeforeAddMimeMessageRow(sender As Object, e As ReportAddingRowEventArgs)
               Dim dr As DataRow = e.DataRow
               
               'populate our custom column, named "ContentType", with the value of the content-type of the MimeMessage
               If Not (e.MimeMessage Is Nothing) And Not (e.MimeMessage.ContentType Is Nothing) Then
                  dr("ContentType") = e.MimeMessage.ContentType.Value
               Else
                  dr("ContentType") = "(no content-type set)"
               End If 
            End Sub 'OnBeforeAddMimeMessageRow
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.ReportAddingRowEventArgs.#ctor(aspNetMime.MimeMessage,System.Data.DataRow,System.Boolean)">
            <summary>
            Creates an instance of the ReportAddingRowEventArgs
            </summary>
            <example>
            <code lang="C#">
            void MimeProcessor()
            {
            	//create the processing engine
            	MessageProcessor  engine  = new MessageProcessor();
            
            	//create a new report, and keep in memory
            	MimeReport report = new MimeReport( true, true ); 
            
            	//extend the report schema to include the Content-Type
            	//this can be done by creating new column on the underlying DataSet/Table
            	System.Type dataType= System.Type.GetType( "System.String" );
            	DataColumn dc = new DataColumn( "ContentType", dataType );
            
            	//add it to the underlying DataTable
            	report.BaseDataSet.Tables[ 0 ].Columns.Add( dc );
            
            	//wire up the AddingRow event handler -- in these event, set the ContentType column
            	report.ReportAddingRow += new ReportAddingRowEventHandler( OnBeforeAddMimeMessageRow );
            	
            
            	//set the report on the engine
            	engine.Report = report;
            	
            	string dir = "C:\\temp\\MimeFiles\\";
            	engine.ProcessDirectory( dir );
            
            	engine.Report.SaveToFile( "c:\\report.csv" );
            
            	Console.WriteLine( "done.");
            	Console.ReadLine();
            }
            
            private void OnBeforeAddMimeMessageRow( object sender, ReportAddingRowEventArgs e)
            {
            	DataRow dr = e.DataRow;
            
            	//populate our custom column, named "ContentType", with the value of the content-type of the MimeMessage
            	if( ( e.MimeMessage != null ) &amp;&amp; ( e.MimeMessage.ContentType != null ) )
            	{
            		dr[ "ContentType" ] = e.MimeMessage.ContentType.Value;
            	}
            	else
            		dr[ "ContentType" ] = "(no content-type set)";
            
            }
            </code>
            <code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               
               'extend the report schema to include the Content-Type
               'this can be done by creating new column on the underlying DataSet/Table
               Dim dataType As System.Type = System.Type.GetType("System.String")
               Dim dc As New DataColumn("ContentType", dataType)
               
               'add it to the underlying DataTable
               report.BaseDataSet.Tables(0).Columns.Add(dc)
               
               'wire up the AddingRow event handler -- in these event, set the ContentType column
               AddHandler report.ReportAddingRow, AddressOf OnBeforeAddMimeMessageRow
               
               
               'set the report on the engine
               engine.Report = report
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               engine.Report.SaveToFile("c:\report.csv")
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
            
            
            Private Sub OnBeforeAddMimeMessageRow(sender As Object, e As ReportAddingRowEventArgs)
               Dim dr As DataRow = e.DataRow
               
               'populate our custom column, named "ContentType", with the value of the content-type of the MimeMessage
               If Not (e.MimeMessage Is Nothing) And Not (e.MimeMessage.ContentType Is Nothing) Then
                  dr("ContentType") = e.MimeMessage.ContentType.Value
               Else
                  dr("ContentType") = "(no content-type set)"
               End If 
            End Sub 'OnBeforeAddMimeMessageRow
            </code>
            </example>
            <param name="cancel">Cancel's adding the row to the report</param>
            <param name="dataRow">DataRow added to the report</param>
            <param name="message">MimeMessage added to the report.</param>
        </member>
        <member name="P:aspNetMime.ReportAddingRowEventArgs.MimeMessage">
            <summary>
            The MimeMessage about to be added to the MimeReport
            </summary>
            <example>
            <code lang="C#">
            void MimeProcessor()
            {
            	//create the processing engine
            	MessageProcessor  engine  = new MessageProcessor();
            
            	//create a new report, and keep in memory
            	MimeReport report = new MimeReport( true, true ); 
            
            	//extend the report schema to include the Content-Type
            	//this can be done by creating new column on the underlying DataSet/Table
            	System.Type dataType= System.Type.GetType( "System.String" );
            	DataColumn dc = new DataColumn( "ContentType", dataType );
            
            	//add it to the underlying DataTable
            	report.BaseDataSet.Tables[ 0 ].Columns.Add( dc );
            
            	//wire up the AddingRow event handler -- in these event, set the ContentType column
            	report.ReportAddingRow += new ReportAddingRowEventHandler( OnBeforeAddMimeMessageRow );
            	
            
            	//set the report on the engine
            	engine.Report = report;
            	
            	string dir = "C:\\temp\\MimeFiles\\";
            	engine.ProcessDirectory( dir );
            
            	engine.Report.SaveToFile( "c:\\report.csv" );
            
            	Console.WriteLine( "done.");
            	Console.ReadLine();
            }
            
            private void OnBeforeAddMimeMessageRow( object sender, ReportAddingRowEventArgs e)
            {
            	DataRow dr = e.DataRow;
            
            	//populate our custom column, named "ContentType", with the value of the content-type of the MimeMessage
            	if( ( e.MimeMessage != null ) &amp;&amp; ( e.MimeMessage.ContentType != null ) )
            	{
            		dr[ "ContentType" ] = e.MimeMessage.ContentType.Value;
            	}
            	else
            		dr[ "ContentType" ] = "(no content-type set)";
            
            }
            </code>
            <code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               
               'extend the report schema to include the Content-Type
               'this can be done by creating new column on the underlying DataSet/Table
               Dim dataType As System.Type = System.Type.GetType("System.String")
               Dim dc As New DataColumn("ContentType", dataType)
               
               'add it to the underlying DataTable
               report.BaseDataSet.Tables(0).Columns.Add(dc)
               
               'wire up the AddingRow event handler -- in these event, set the ContentType column
               AddHandler report.ReportAddingRow, AddressOf OnBeforeAddMimeMessageRow
               
               
               'set the report on the engine
               engine.Report = report
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               engine.Report.SaveToFile("c:\report.csv")
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
            
            
            Private Sub OnBeforeAddMimeMessageRow(sender As Object, e As ReportAddingRowEventArgs)
               Dim dr As DataRow = e.DataRow
               
               'populate our custom column, named "ContentType", with the value of the content-type of the MimeMessage
               If Not (e.MimeMessage Is Nothing) And Not (e.MimeMessage.ContentType Is Nothing) Then
                  dr("ContentType") = e.MimeMessage.ContentType.Value
               Else
                  dr("ContentType") = "(no content-type set)"
               End If 
            End Sub 'OnBeforeAddMimeMessageRow
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.ReportAddingRowEventArgs.DataRow">
            <summary>
            The DataRow added to the Report
            </summary>
            <example>
            <code lang="C#">
            void MimeProcessor()
            {
            	//create the processing engine
            	MessageProcessor  engine  = new MessageProcessor();
            
            	//create a new report, and keep in memory
            	MimeReport report = new MimeReport( true, true ); 
            
            	//extend the report schema to include the Content-Type
            	//this can be done by creating new column on the underlying DataSet/Table
            	System.Type dataType= System.Type.GetType( "System.String" );
            	DataColumn dc = new DataColumn( "ContentType", dataType );
            
            	//add it to the underlying DataTable
            	report.BaseDataSet.Tables[ 0 ].Columns.Add( dc );
            
            	//wire up the AddingRow event handler -- in these event, set the ContentType column
            	report.ReportAddingRow += new ReportAddingRowEventHandler( OnBeforeAddMimeMessageRow );
            	
            
            	//set the report on the engine
            	engine.Report = report;
            	
            	string dir = "C:\\temp\\MimeFiles\\";
            	engine.ProcessDirectory( dir );
            
            	engine.Report.SaveToFile( "c:\\report.csv" );
            
            	Console.WriteLine( "done.");
            	Console.ReadLine();
            }
            
            private void OnBeforeAddMimeMessageRow( object sender, ReportAddingRowEventArgs e)
            {
            	DataRow dr = e.DataRow;
            
            	//populate our custom column, named "ContentType", with the value of the content-type of the MimeMessage
            	if( ( e.MimeMessage != null ) &amp;&amp; ( e.MimeMessage.ContentType != null ) )
            	{
            		dr[ "ContentType" ] = e.MimeMessage.ContentType.Value;
            	}
            	else
            		dr[ "ContentType" ] = "(no content-type set)";
            
            }
            </code>
            <code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               
               'extend the report schema to include the Content-Type
               'this can be done by creating new column on the underlying DataSet/Table
               Dim dataType As System.Type = System.Type.GetType("System.String")
               Dim dc As New DataColumn("ContentType", dataType)
               
               'add it to the underlying DataTable
               report.BaseDataSet.Tables(0).Columns.Add(dc)
               
               'wire up the AddingRow event handler -- in these event, set the ContentType column
               AddHandler report.ReportAddingRow, AddressOf OnBeforeAddMimeMessageRow
               
               
               'set the report on the engine
               engine.Report = report
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               engine.Report.SaveToFile("c:\report.csv")
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
            
            
            Private Sub OnBeforeAddMimeMessageRow(sender As Object, e As ReportAddingRowEventArgs)
               Dim dr As DataRow = e.DataRow
               
               'populate our custom column, named "ContentType", with the value of the content-type of the MimeMessage
               If Not (e.MimeMessage Is Nothing) And Not (e.MimeMessage.ContentType Is Nothing) Then
                  dr("ContentType") = e.MimeMessage.ContentType.Value
               Else
                  dr("ContentType") = "(no content-type set)"
               End If 
            End Sub 'OnBeforeAddMimeMessageRow
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.ReportAddingRowEventArgs.Cancel">
            <summary>
            Cancel's adding the row to the report.
            </summary>
        </member>
        <member name="T:aspNetMime.LookupEventHandler">
            <summary>
            The delegate used for Lookup event handling.
            </summary>
            <example>
            <code lang="C#">
            void CheckerDemo()
            {
            
            	BlackListChecker checker = new BlackListChecker();
            	//add a few DNSbl servers
            	checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            	checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            	//load an email from the filesystem
            	checker.LoadFile( "c:\\temp\\sample.eml" );
            
            
            	//wire up the events
            	checker.BeforeLookup += new BeforeLookupEventHandler( BeforeLookup );
            	checker.Lookup += new LookupEventHandler( AfterLookup );
            
            	bool result = checker.IsBlackListed();
            	Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            	//to see what server marked the message as spam, loop through the DNSBlackList servers
            	foreach( DNSBlackList server in checker.DNSBlackLists )
            	{
            		Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            	}
            
            
            	Console.WriteLine( "done" );
            	Console.ReadLine();
            
            }
            
            private void BeforeLookup( object sender, BeforeLookupEventArgs e )
            {
            	//if we wanted to change any properties, they could be done here
            	//...
            	//...
            
            	//if we wanted to cancel this lookup, set
            	// e.Cancel = true
            
            	Console.WriteLine( "BeforeLookup called." );
            }
            
            private void AfterLookup( object sender, LookupEventArgs e )
            {
            	//here we can check properties after the lookup
            
            	Console.WriteLine( "Afterlookup called." );
            }
            
            </code>
            <code lang="VB.NET">
            Sub CheckerDemo()
               
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               
               'load an email from the filesystem
               checker.LoadFile("c:\temp\sample.eml")
               
               
               'wire up the events
               AddHandler checker.BeforeLookup, AddressOf BeforeLookup
               AddHandler checker.Lookup, AddressOf AfterLookup
               
               Dim result As Boolean = checker.IsBlackListed()
               Console.WriteLine("Messaage marked as spam: {0}", result)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'CheckerDemo
             
            
            Private Sub BeforeLookup(sender As Object, e As BeforeLookupEventArgs)
               'if we wanted to change any properties, they could be done here
               '...
               '...
               'if we wanted to cancel this lookup, set
               ' e.Cancel = true
               Console.WriteLine("BeforeLookup called.")
            End Sub 'BeforeLookup
            
            
            Private  Sub AfterLookup(sender As Object, e As LookupEventArgs)
               'here we can check properties after the lookup
               Console.WriteLine("Afterlookup called.")
            End Sub 'AfterLookup
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="T:aspNetMime.BeforeLookupEventHandler">
            <summary>
            The delegate used for BeforeLookup event handling.
            </summary>
            <example>
            <code lang="C#">
            void CheckerDemo()
            {
            
            	BlackListChecker checker = new BlackListChecker();
            	//add a few DNSbl servers
            	checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            	checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            	//load an email from the filesystem
            	checker.LoadFile( "c:\\temp\\sample.eml" );
            
            
            	//wire up the events
            	checker.BeforeLookup += new BeforeLookupEventHandler( BeforeLookup );
            	checker.Lookup += new LookupEventHandler( AfterLookup );
            
            	bool result = checker.IsBlackListed();
            	Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            	//to see what server marked the message as spam, loop through the DNSBlackList servers
            	foreach( DNSBlackList server in checker.DNSBlackLists )
            	{
            		Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            	}
            
            
            	Console.WriteLine( "done" );
            	Console.ReadLine();
            
            }
            
            private void BeforeLookup( object sender, BeforeLookupEventArgs e )
            {
            	//if we wanted to change any properties, they could be done here
            	//...
            	//...
            
            	//if we wanted to cancel this lookup, set
            	// e.Cancel = true
            
            	Console.WriteLine( "BeforeLookup called." );
            }
            
            private void AfterLookup( object sender, LookupEventArgs e )
            {
            	//here we can check properties after the lookup
            
            	Console.WriteLine( "Afterlookup called." );
            }
            
            </code>
            <code lang="VB.NET">
            Sub CheckerDemo()
               
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               
               'load an email from the filesystem
               checker.LoadFile("c:\temp\sample.eml")
               
               
               'wire up the events
               AddHandler checker.BeforeLookup, AddressOf BeforeLookup
               AddHandler checker.Lookup, AddressOf AfterLookup
               
               Dim result As Boolean = checker.IsBlackListed()
               Console.WriteLine("Messaage marked as spam: {0}", result)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'CheckerDemo
             
            
            Private Sub BeforeLookup(sender As Object, e As BeforeLookupEventArgs)
               'if we wanted to change any properties, they could be done here
               '...
               '...
               'if we wanted to cancel this lookup, set
               ' e.Cancel = true
               Console.WriteLine("BeforeLookup called.")
            End Sub 'BeforeLookup
            
            
            Private  Sub AfterLookup(sender As Object, e As LookupEventArgs)
               'here we can check properties after the lookup
               Console.WriteLine("Afterlookup called.")
            End Sub 'AfterLookup
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="T:aspNetMime.BeforeLookupEventArgs">
            <summary>
            The event args raised during the BeforeLookup event just before the BlackListChecker performs a DNSbl query.
            </summary>
            <example>
            <code lang="C#">
            void CheckerDemo()
            {
            
            	BlackListChecker checker = new BlackListChecker();
            	//add a few DNSbl servers
            	checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            	checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            	//load an email from the filesystem
            	checker.LoadFile( "c:\\temp\\sample.eml" );
            
            
            	//wire up the events
            	checker.BeforeLookup += new BeforeLookupEventHandler( BeforeLookup );
            	checker.Lookup += new LookupEventHandler( AfterLookup );
            
            	bool result = checker.IsBlackListed();
            	Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            	//to see what server marked the message as spam, loop through the DNSBlackList servers
            	foreach( DNSBlackList server in checker.DNSBlackLists )
            	{
            		Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            	}
            
            
            	Console.WriteLine( "done" );
            	Console.ReadLine();
            
            }
            
            private void BeforeLookup( object sender, BeforeLookupEventArgs e )
            {
            	//if we wanted to change any properties, they could be done here
            	//...
            	//...
            
            	//if we wanted to cancel this lookup, set
            	// e.Cancel = true
            
            	Console.WriteLine( "BeforeLookup called." );
            }
            
            private void AfterLookup( object sender, LookupEventArgs e )
            {
            	//here we can check properties after the lookup
            
            	Console.WriteLine( "Afterlookup called." );
            }
            
            </code>
            <code lang="VB.NET">
            Sub CheckerDemo()
               
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               
               'load an email from the filesystem
               checker.LoadFile("c:\temp\sample.eml")
               
               
               'wire up the events
               AddHandler checker.BeforeLookup, AddressOf BeforeLookup
               AddHandler checker.Lookup, AddressOf AfterLookup
               
               Dim result As Boolean = checker.IsBlackListed()
               Console.WriteLine("Messaage marked as spam: {0}", result)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'CheckerDemo
             
            
            Private Sub BeforeLookup(sender As Object, e As BeforeLookupEventArgs)
               'if we wanted to change any properties, they could be done here
               '...
               '...
               'if we wanted to cancel this lookup, set
               ' e.Cancel = true
               Console.WriteLine("BeforeLookup called.")
            End Sub 'BeforeLookup
            
            
            Private  Sub AfterLookup(sender As Object, e As LookupEventArgs)
               'here we can check properties after the lookup
               Console.WriteLine("Afterlookup called.")
            End Sub 'AfterLookup
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.BeforeLookupEventArgs.#ctor">
            <summary>
            Creats an instance of the Lookup Event Arguments.
            </summary>
            <example>
            <code lang="C#">
            void CheckerDemo()
            {
            
            	BlackListChecker checker = new BlackListChecker();
            	//add a few DNSbl servers
            	checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            	checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            	//load an email from the filesystem
            	checker.LoadFile( "c:\\temp\\sample.eml" );
            
            
            	//wire up the events
            	checker.BeforeLookup += new BeforeLookupEventHandler( BeforeLookup );
            	checker.Lookup += new LookupEventHandler( AfterLookup );
            
            	bool result = checker.IsBlackListed();
            	Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            	//to see what server marked the message as spam, loop through the DNSBlackList servers
            	foreach( DNSBlackList server in checker.DNSBlackLists )
            	{
            		Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            	}
            
            
            	Console.WriteLine( "done" );
            	Console.ReadLine();
            
            }
            
            private void BeforeLookup( object sender, BeforeLookupEventArgs e )
            {
            	//if we wanted to change any properties, they could be done here
            	//...
            	//...
            
            	//if we wanted to cancel this lookup, set
            	// e.Cancel = true
            
            	Console.WriteLine( "BeforeLookup called." );
            }
            
            private void AfterLookup( object sender, LookupEventArgs e )
            {
            	//here we can check properties after the lookup
            
            	Console.WriteLine( "Afterlookup called." );
            }
            
            </code>
            <code lang="VB.NET">
            Sub CheckerDemo()
               
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               
               'load an email from the filesystem
               checker.LoadFile("c:\temp\sample.eml")
               
               
               'wire up the events
               AddHandler checker.BeforeLookup, AddressOf BeforeLookup
               AddHandler checker.Lookup, AddressOf AfterLookup
               
               Dim result As Boolean = checker.IsBlackListed()
               Console.WriteLine("Messaage marked as spam: {0}", result)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'CheckerDemo
             
            
            Private Sub BeforeLookup(sender As Object, e As BeforeLookupEventArgs)
               'if we wanted to change any properties, they could be done here
               '...
               '...
               'if we wanted to cancel this lookup, set
               ' e.Cancel = true
               Console.WriteLine("BeforeLookup called.")
            End Sub 'BeforeLookup
            
            
            Private  Sub AfterLookup(sender As Object, e As LookupEventArgs)
               'here we can check properties after the lookup
               Console.WriteLine("Afterlookup called.")
            End Sub 'AfterLookup
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.BeforeLookupEventArgs.Next">
            <summary>
            Moves to the next DNSbl in the BlackListChecker.
            </summary>
            <example>
            <code lang="C#">
            void CheckerDemo()
            {
            
            	BlackListChecker checker = new BlackListChecker();
            	//add a few DNSbl servers
            	checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            	checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            	//load an email from the filesystem
            	checker.LoadFile( "c:\\temp\\sample.eml" );
            
            
            	//wire up the events
            	checker.BeforeLookup += new BeforeLookupEventHandler( BeforeLookup );
            	checker.Lookup += new LookupEventHandler( AfterLookup );
            
            	bool result = checker.IsBlackListed();
            	Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            	//to see what server marked the message as spam, loop through the DNSBlackList servers
            	foreach( DNSBlackList server in checker.DNSBlackLists )
            	{
            		Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            	}
            
            
            	Console.WriteLine( "done" );
            	Console.ReadLine();
            
            }
            
            private void BeforeLookup( object sender, BeforeLookupEventArgs e )
            {
            	//if we wanted to change any properties, they could be done here
            	//...
            	//...
            
            	//if we wanted to cancel this lookup, set
            	// e.Cancel = true
            
            	Console.WriteLine( "BeforeLookup called." );
            }
            
            private void AfterLookup( object sender, LookupEventArgs e )
            {
            	//here we can check properties after the lookup
            
            	Console.WriteLine( "Afterlookup called." );
            }
            
            </code>
            <code lang="VB.NET">
            Sub CheckerDemo()
               
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               
               'load an email from the filesystem
               checker.LoadFile("c:\temp\sample.eml")
               
               
               'wire up the events
               AddHandler checker.BeforeLookup, AddressOf BeforeLookup
               AddHandler checker.Lookup, AddressOf AfterLookup
               
               Dim result As Boolean = checker.IsBlackListed()
               Console.WriteLine("Messaage marked as spam: {0}", result)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'CheckerDemo
             
            
            Private Sub BeforeLookup(sender As Object, e As BeforeLookupEventArgs)
               'if we wanted to change any properties, they could be done here
               '...
               '...
               'if we wanted to cancel this lookup, set
               ' e.Cancel = true
               Console.WriteLine("BeforeLookup called.")
            End Sub 'BeforeLookup
            
            
            Private  Sub AfterLookup(sender As Object, e As LookupEventArgs)
               'here we can check properties after the lookup
               Console.WriteLine("Afterlookup called.")
            End Sub 'AfterLookup
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.BeforeLookupEventArgs.Cancel">
            <summary>
            If set to True, cancels any DNSBlackList checking.
            </summary>
            <example>
            <code lang="C#">
            void CheckerDemo()
            {
            
            	BlackListChecker checker = new BlackListChecker();
            	//add a few DNSbl servers
            	checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            	checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            	//load an email from the filesystem
            	checker.LoadFile( "c:\\temp\\sample.eml" );
            
            
            	//wire up the events
            	checker.BeforeLookup += new BeforeLookupEventHandler( BeforeLookup );
            	checker.Lookup += new LookupEventHandler( AfterLookup );
            
            	bool result = checker.IsBlackListed();
            	Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            	//to see what server marked the message as spam, loop through the DNSBlackList servers
            	foreach( DNSBlackList server in checker.DNSBlackLists )
            	{
            		Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            	}
            
            
            	Console.WriteLine( "done" );
            	Console.ReadLine();
            
            }
            
            private void BeforeLookup( object sender, BeforeLookupEventArgs e )
            {
            	//if we wanted to change any properties, they could be done here
            	//...
            	//...
            
            	//if we wanted to cancel this lookup, set
            	// e.Cancel = true
            
            	Console.WriteLine( "BeforeLookup called." );
            }
            
            private void AfterLookup( object sender, LookupEventArgs e )
            {
            	//here we can check properties after the lookup
            
            	Console.WriteLine( "Afterlookup called." );
            }
            
            </code>
            <code lang="VB.NET">
            Sub CheckerDemo()
               
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               
               'load an email from the filesystem
               checker.LoadFile("c:\temp\sample.eml")
               
               
               'wire up the events
               AddHandler checker.BeforeLookup, AddressOf BeforeLookup
               AddHandler checker.Lookup, AddressOf AfterLookup
               
               Dim result As Boolean = checker.IsBlackListed()
               Console.WriteLine("Messaage marked as spam: {0}", result)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'CheckerDemo
             
            
            Private Sub BeforeLookup(sender As Object, e As BeforeLookupEventArgs)
               'if we wanted to change any properties, they could be done here
               '...
               '...
               'if we wanted to cancel this lookup, set
               ' e.Cancel = true
               Console.WriteLine("BeforeLookup called.")
            End Sub 'BeforeLookup
            
            
            Private  Sub AfterLookup(sender As Object, e As LookupEventArgs)
               'here we can check properties after the lookup
               Console.WriteLine("Afterlookup called.")
            End Sub 'AfterLookup
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.BeforeLookupEventArgs.DNSBlackList">
            <summary>
            The DNSBlackList that was checked.
            </summary>
            <example>
            <code lang="C#">
            void CheckerDemo()
            {
            
            	BlackListChecker checker = new BlackListChecker();
            	//add a few DNSbl servers
            	checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            	checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            	//load an email from the filesystem
            	checker.LoadFile( "c:\\temp\\sample.eml" );
            
            
            	//wire up the events
            	checker.BeforeLookup += new BeforeLookupEventHandler( BeforeLookup );
            	checker.Lookup += new LookupEventHandler( AfterLookup );
            
            	bool result = checker.IsBlackListed();
            	Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            	//to see what server marked the message as spam, loop through the DNSBlackList servers
            	foreach( DNSBlackList server in checker.DNSBlackLists )
            	{
            		Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            	}
            
            
            	Console.WriteLine( "done" );
            	Console.ReadLine();
            
            }
            
            private void BeforeLookup( object sender, BeforeLookupEventArgs e )
            {
            	//if we wanted to change any properties, they could be done here
            	//...
            	//...
            
            	//if we wanted to cancel this lookup, set
            	// e.Cancel = true
            
            	Console.WriteLine( "BeforeLookup called." );
            }
            
            private void AfterLookup( object sender, LookupEventArgs e )
            {
            	//here we can check properties after the lookup
            
            	Console.WriteLine( "Afterlookup called." );
            }
            
            </code>
            <code lang="VB.NET">
            Sub CheckerDemo()
               
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               
               'load an email from the filesystem
               checker.LoadFile("c:\temp\sample.eml")
               
               
               'wire up the events
               AddHandler checker.BeforeLookup, AddressOf BeforeLookup
               AddHandler checker.Lookup, AddressOf AfterLookup
               
               Dim result As Boolean = checker.IsBlackListed()
               Console.WriteLine("Messaage marked as spam: {0}", result)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'CheckerDemo
             
            
            Private Sub BeforeLookup(sender As Object, e As BeforeLookupEventArgs)
               'if we wanted to change any properties, they could be done here
               '...
               '...
               'if we wanted to cancel this lookup, set
               ' e.Cancel = true
               Console.WriteLine("BeforeLookup called.")
            End Sub 'BeforeLookup
            
            
            Private  Sub AfterLookup(sender As Object, e As LookupEventArgs)
               'here we can check properties after the lookup
               Console.WriteLine("Afterlookup called.")
            End Sub 'AfterLookup
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="T:aspNetMime.LookupEventArgs">
            <summary>
            The event args raised during the Lookup event when the BlackListChecker performs a DNSbl query.
            </summary>
            <example>
            <code lang="C#">
            void CheckerDemo()
            {
            
            	BlackListChecker checker = new BlackListChecker();
            	//add a few DNSbl servers
            	checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            	checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            	//load an email from the filesystem
            	checker.LoadFile( "c:\\temp\\sample.eml" );
            
            
            	//wire up the events
            	checker.BeforeLookup += new BeforeLookupEventHandler( BeforeLookup );
            	checker.Lookup += new LookupEventHandler( AfterLookup );
            
            	bool result = checker.IsBlackListed();
            	Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            	//to see what server marked the message as spam, loop through the DNSBlackList servers
            	foreach( DNSBlackList server in checker.DNSBlackLists )
            	{
            		Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            	}
            
            
            	Console.WriteLine( "done" );
            	Console.ReadLine();
            
            }
            
            private void BeforeLookup( object sender, BeforeLookupEventArgs e )
            {
            	//if we wanted to change any properties, they could be done here
            	//...
            	//...
            
            	//if we wanted to cancel this lookup, set
            	// e.Cancel = true
            
            	Console.WriteLine( "BeforeLookup called." );
            }
            
            private void AfterLookup( object sender, LookupEventArgs e )
            {
            	//here we can check properties after the lookup
            
            	Console.WriteLine( "Afterlookup called." );
            }
            
            </code>
            <code lang="VB.NET">
            Sub CheckerDemo()
               
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               
               'load an email from the filesystem
               checker.LoadFile("c:\temp\sample.eml")
               
               
               'wire up the events
               AddHandler checker.BeforeLookup, AddressOf BeforeLookup
               AddHandler checker.Lookup, AddressOf AfterLookup
               
               Dim result As Boolean = checker.IsBlackListed()
               Console.WriteLine("Messaage marked as spam: {0}", result)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'CheckerDemo
             
            
            Private Sub BeforeLookup(sender As Object, e As BeforeLookupEventArgs)
               'if we wanted to change any properties, they could be done here
               '...
               '...
               'if we wanted to cancel this lookup, set
               ' e.Cancel = true
               Console.WriteLine("BeforeLookup called.")
            End Sub 'BeforeLookup
            
            
            Private  Sub AfterLookup(sender As Object, e As LookupEventArgs)
               'here we can check properties after the lookup
               Console.WriteLine("Afterlookup called.")
            End Sub 'AfterLookup
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.LookupEventArgs.#ctor">
            <summary>
            Creats an instance of the Lookup Event Arguments.
            </summary>
            <example>
            <code lang="C#">
            void CheckerDemo()
            {
            
            	BlackListChecker checker = new BlackListChecker();
            	//add a few DNSbl servers
            	checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            	checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            	//load an email from the filesystem
            	checker.LoadFile( "c:\\temp\\sample.eml" );
            
            
            	//wire up the events
            	checker.BeforeLookup += new BeforeLookupEventHandler( BeforeLookup );
            	checker.Lookup += new LookupEventHandler( AfterLookup );
            
            	bool result = checker.IsBlackListed();
            	Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            	//to see what server marked the message as spam, loop through the DNSBlackList servers
            	foreach( DNSBlackList server in checker.DNSBlackLists )
            	{
            		Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            	}
            
            
            	Console.WriteLine( "done" );
            	Console.ReadLine();
            
            }
            
            private void BeforeLookup( object sender, BeforeLookupEventArgs e )
            {
            	//if we wanted to change any properties, they could be done here
            	//...
            	//...
            
            	//if we wanted to cancel this lookup, set
            	// e.Cancel = true
            
            	Console.WriteLine( "BeforeLookup called." );
            }
            
            private void AfterLookup( object sender, LookupEventArgs e )
            {
            	//here we can check properties after the lookup
            
            	Console.WriteLine( "Afterlookup called." );
            }
            
            </code>
            <code lang="VB.NET">
            Sub CheckerDemo()
               
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               
               'load an email from the filesystem
               checker.LoadFile("c:\temp\sample.eml")
               
               
               'wire up the events
               AddHandler checker.BeforeLookup, AddressOf BeforeLookup
               AddHandler checker.Lookup, AddressOf AfterLookup
               
               Dim result As Boolean = checker.IsBlackListed()
               Console.WriteLine("Messaage marked as spam: {0}", result)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'CheckerDemo
             
            
            Private Sub BeforeLookup(sender As Object, e As BeforeLookupEventArgs)
               'if we wanted to change any properties, they could be done here
               '...
               '...
               'if we wanted to cancel this lookup, set
               ' e.Cancel = true
               Console.WriteLine("BeforeLookup called.")
            End Sub 'BeforeLookup
            
            
            Private  Sub AfterLookup(sender As Object, e As LookupEventArgs)
               'here we can check properties after the lookup
               Console.WriteLine("Afterlookup called.")
            End Sub 'AfterLookup
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.LookupEventArgs.Cancel">
            <summary>
            If set to True, cancels any DNSBlackList checking.
            </summary>
            <example>
            <code lang="C#">
            void CheckerDemo()
            {
            
            	BlackListChecker checker = new BlackListChecker();
            	//add a few DNSbl servers
            	checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            	checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            	//load an email from the filesystem
            	checker.LoadFile( "c:\\temp\\sample.eml" );
            
            
            	//wire up the events
            	checker.BeforeLookup += new BeforeLookupEventHandler( BeforeLookup );
            	checker.Lookup += new LookupEventHandler( AfterLookup );
            
            	bool result = checker.IsBlackListed();
            	Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            	//to see what server marked the message as spam, loop through the DNSBlackList servers
            	foreach( DNSBlackList server in checker.DNSBlackLists )
            	{
            		Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            	}
            
            
            	Console.WriteLine( "done" );
            	Console.ReadLine();
            
            }
            
            private void BeforeLookup( object sender, BeforeLookupEventArgs e )
            {
            	//if we wanted to change any properties, they could be done here
            	//...
            	//...
            
            	//if we wanted to cancel this lookup, set
            	// e.Cancel = true
            
            	Console.WriteLine( "BeforeLookup called." );
            }
            
            private void AfterLookup( object sender, LookupEventArgs e )
            {
            	//here we can check properties after the lookup
            
            	Console.WriteLine( "Afterlookup called." );
            }
            
            </code>
            <code lang="VB.NET">
            Sub CheckerDemo()
               
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               
               'load an email from the filesystem
               checker.LoadFile("c:\temp\sample.eml")
               
               
               'wire up the events
               AddHandler checker.BeforeLookup, AddressOf BeforeLookup
               AddHandler checker.Lookup, AddressOf AfterLookup
               
               Dim result As Boolean = checker.IsBlackListed()
               Console.WriteLine("Messaage marked as spam: {0}", result)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'CheckerDemo
             
            
            Private Sub BeforeLookup(sender As Object, e As BeforeLookupEventArgs)
               'if we wanted to change any properties, they could be done here
               '...
               '...
               'if we wanted to cancel this lookup, set
               ' e.Cancel = true
               Console.WriteLine("BeforeLookup called.")
            End Sub 'BeforeLookup
            
            
            Private  Sub AfterLookup(sender As Object, e As LookupEventArgs)
               'here we can check properties after the lookup
               Console.WriteLine("Afterlookup called.")
            End Sub 'AfterLookup
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.LookupEventArgs.DNSBlackList">
            <summary>
            The DNSBlackList that was checked.
            </summary>
            <example>
            <code lang="C#">
            void CheckerDemo()
            {
            
            	BlackListChecker checker = new BlackListChecker();
            	//add a few DNSbl servers
            	checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            	checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            	//load an email from the filesystem
            	checker.LoadFile( "c:\\temp\\sample.eml" );
            
            
            	//wire up the events
            	checker.BeforeLookup += new BeforeLookupEventHandler( BeforeLookup );
            	checker.Lookup += new LookupEventHandler( AfterLookup );
            
            	bool result = checker.IsBlackListed();
            	Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            	//to see what server marked the message as spam, loop through the DNSBlackList servers
            	foreach( DNSBlackList server in checker.DNSBlackLists )
            	{
            		Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            	}
            
            
            	Console.WriteLine( "done" );
            	Console.ReadLine();
            
            }
            
            private void BeforeLookup( object sender, BeforeLookupEventArgs e )
            {
            	//if we wanted to change any properties, they could be done here
            	//...
            	//...
            
            	//if we wanted to cancel this lookup, set
            	// e.Cancel = true
            
            	Console.WriteLine( "BeforeLookup called." );
            }
            
            private void AfterLookup( object sender, LookupEventArgs e )
            {
            	//here we can check properties after the lookup
            
            	Console.WriteLine( "Afterlookup called." );
            }
            
            </code>
            <code lang="VB.NET">
            Sub CheckerDemo()
               
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               
               'load an email from the filesystem
               checker.LoadFile("c:\temp\sample.eml")
               
               
               'wire up the events
               AddHandler checker.BeforeLookup, AddressOf BeforeLookup
               AddHandler checker.Lookup, AddressOf AfterLookup
               
               Dim result As Boolean = checker.IsBlackListed()
               Console.WriteLine("Messaage marked as spam: {0}", result)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'CheckerDemo
             
            
            Private Sub BeforeLookup(sender As Object, e As BeforeLookupEventArgs)
               'if we wanted to change any properties, they could be done here
               '...
               '...
               'if we wanted to cancel this lookup, set
               ' e.Cancel = true
               Console.WriteLine("BeforeLookup called.")
            End Sub 'BeforeLookup
            
            
            Private  Sub AfterLookup(sender As Object, e As LookupEventArgs)
               'here we can check properties after the lookup
               Console.WriteLine("Afterlookup called.")
            End Sub 'AfterLookup
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="T:aspNetMime.HeaderCollection">
            <summary>
              Basic collection class Headers.
            </summary>
        </member>
        <member name="M:aspNetMime.HeaderCollection.#ctor">
            <summary>
              Empty constructor. 
              This will initialize the collection to 5 items.
            </summary>
        </member>
        <member name="M:aspNetMime.HeaderCollection.#ctor(System.Int32)">
            <summary>
              Initializes the container to hold the specified number of items.
            </summary>
            <param name="initialCount">
              The initial size of the collection. 
            </param>
        </member>
        <member name="M:aspNetMime.HeaderCollection.Contains(aspNetMime.Header)">
            <summary>
              Attempts to locate the Header within the collection.
            </summary>
            <param name="header">
              Header to locate.
            </param>
            <returns>
              True if the Header exists in the collection.
            </returns>
        </member>
        <member name="M:aspNetMime.HeaderCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetMime.HeaderCollection.Contains(System.String)">
            <summary>
              Returns true if the specified header is contained within the collection.
            </summary>
            <param name="name">
              Name of the header to look for in the collection.
            </param>
            <returns>
              True if the header is contained in the collection.
            </returns>
        </member>
        <member name="M:aspNetMime.HeaderCollection.CopyTo(System.Array,System.Int32)">
            <summary>
              Copies the items from this collection into the array at the specified index.
            </summary>
            <param name="array">
              Array to copy the items to.
            </param>
            <param name="index">
              Index of position within the array to being copying at.
            </param>
        </member>
        <member name="M:aspNetMime.HeaderCollection.CopyTo(aspNetMime.HeaderCollection)">
            <summary>
              Copies all the Headers from this collection to another Header Collection.
            </summary>
            <param name="headers">
              Collection to copy to.
            </param>
        </member>
        <member name="M:aspNetMime.HeaderCollection.Add(aspNetMime.Header)">
            <summary>
              Adds a header to the collection.
            </summary>
            <param name="header">
              Header to add to the collection.
            </param>
            <returns>
              Index at which the Header was added.
            </returns>
        </member>
        <member name="M:aspNetMime.HeaderCollection.System#Collections#IList#Add(System.Object)">
            <summary>
              For IList implementation only. Do Not Use.
            </summary>
        </member>
        <member name="M:aspNetMime.HeaderCollection.Add(System.String,System.String)">
            <summary>
              Adds a new Header with the Name and Value specified.
            </summary>
            <param name="headerName">
              Name of the new Header.
            </param>
            <param name="headerValue">
              Value of the new Header.
            </param>
            <returns>
              Index within the collection fo the new Header.
            </returns>
        </member>
        <member name="M:aspNetMime.HeaderCollection.Clear">
            <summary>
              Clears the collection.
            </summary>
        </member>
        <member name="M:aspNetMime.HeaderCollection.IndexOf(aspNetMime.Header)">
            <summary>
              Returns the index for the Header within the collection.
            </summary>
            <param name="header">
              Header to locate within the collection.
            </param>
            <returns>
              Index of the Header.
            </returns>
        </member>
        <member name="M:aspNetMime.HeaderCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetMime.HeaderCollection.IndexOf(System.String)">
            <summary>
              Returns the index for the Header with the given name within the collection.
            </summary>
            <param name="name">
              Name of the Header to locate within the collection.
            </param>
            <returns>
              Index of the Header with the given Name.
            </returns>
        </member>
        <member name="M:aspNetMime.HeaderCollection.Insert(System.Int32,aspNetMime.Header)">
            <summary>
              Inserts the Header into the collection at the specified position.
            </summary>
            <param name="index">
              Position at which to insert the Header.
            </param>
            <param name="header">
              Header to insert.
            </param>
        </member>
        <member name="M:aspNetMime.HeaderCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetMime.HeaderCollection.Remove(aspNetMime.Header)">
            <summary>
              Removes the first occurrence of a specific Header from the Collection.
            </summary>
            <param name="header">
              The Header to remove.
            </param>
        </member>
        <member name="M:aspNetMime.HeaderCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetMime.HeaderCollection.Remove(System.String)">
            <summary>
              Removes all Headers with the specified Name.
            </summary>
            <param name="name">
              Name of the Header to remove.
            </param>
        </member>
        <member name="M:aspNetMime.HeaderCollection.RemoveAt(System.Int32)">
            <summary>
              Removes the element at the specified index of the Collection.
            </summary>
            <param name="index">
              Index of the element to remove.
            </param>
        </member>
        <member name="M:aspNetMime.HeaderCollection.GetEnumerator">
            <summary>
              Returns an enumerator that can iterate through the Collection.
            </summary>
            <returns>
              An IEnumerator for the entire Collection.
            </returns>
        </member>
        <member name="M:aspNetMime.HeaderCollection.GetEnumerator(System.Int32,System.Int32)">
            <summary>
              Returns an enumerator that can iterate through the Collection.
            </summary>
            <param name="index">
              The zero-based starting index of the Collection section that the enumerator should refer to. 
            </param>
            <param name="count">
              The number of elements in the Collection section that the enumerator should refer to. 
            </param>
            <returns>
              An IEnumerator for the specified section of the Collection.
            </returns>
        </member>
        <member name="M:aspNetMime.HeaderCollection.ToString">
            <summary>
            Returns the raw headers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:aspNetMime.HeaderCollection.Matching(System.String)">
            <summary>
            Returns a list of Headers that have the same name.
            </summary>
            <param name="headerName">Name of the header.</param>
            <returns>List of headers</returns>
        </member>
        <member name="P:aspNetMime.HeaderCollection.Item(System.Int32)">
            <summary>
              Gets or Sets items in this collection.
            </summary>
        </member>
        <member name="P:aspNetMime.HeaderCollection.System#Collections#IList#$Item$(System.Int32)">
            <summary>
              For IList implementation purposes only.
            </summary>
        </member>
        <member name="P:aspNetMime.HeaderCollection.Item(System.String)">
            <summary>
              Returns the header with the specified name.
            </summary>
        </member>
        <member name="P:aspNetMime.HeaderCollection.Count">
            <summary>
              Returns the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:aspNetMime.HeaderCollection.IsSynchronized">
            <summary>
              Gets a value indicating whether access to the Collection is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:aspNetMime.HeaderCollection.SyncRoot">
            <summary>
              Gets an object that can be used to synchronize access to the Collection.
            </summary>
        </member>
        <member name="P:aspNetMime.HeaderCollection.IsFixedSize">
            <summary>
              Gets a value indicating whether the collection is a fixed size.
            </summary>
        </member>
        <member name="P:aspNetMime.HeaderCollection.IsReadOnly">
            <summary>
              Gets a value indicating whether the Collection is read-only.
            </summary>
        </member>
        <member name="T:aspNetMime.MimeException">
            <summary>
            MimeException raised during parsing.
            </summary>
        </member>
        <member name="M:aspNetMime.MimeException.#ctor(System.String)">
            <summary>
            Creates an instance of a MimeException
            </summary>
            <param name="errorMessage">Exception error message</param>
        </member>
        <member name="M:aspNetMime.MimeException.#ctor">
            <summary>
            Creates an instance of a MimeException
            </summary>
        </member>
        <member name="M:aspNetMime.MimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of a MimeException
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:aspNetMime.MimePartCollection">
            <summary>
              Implements a collection of aspNetMime Mime Parts.
            </summary>
        </member>
        <member name="M:aspNetMime.MimePartCollection.Add(aspNetMime.MimePart)">
            <summary>
              Adds a Mime Part to the collection.
            </summary>
            <param name="mimePart">
              Mime Part to add to the collection.
            </param>
            <returns>
              Position within the collection where the new Mime Part was placed.
            </returns>
        </member>
        <member name="M:aspNetMime.MimePartCollection.Insert(System.Int32,aspNetMime.MimePart)">
            <summary>
              Inserts the Mime Part at the specified Index within the collection.
            </summary>
            <param name="index">
              Index at which to place the Mime Part.
            </param>
            <param name="mimePart">
              Mime Part to insert.
            </param>
        </member>
        <member name="M:aspNetMime.MimePartCollection.Remove(System.String)">
            <summary>Removes a MimePart from the MimePart collection.</summary>
            <remarks>Both the filename and the name of the MimePart is checked.</remarks>
            <param name="name">Name of the MimePart to remove.</param>
        </member>
        <member name="P:aspNetMime.MimePartCollection.Item(System.Int32)">
            <summary>
              Retrieves the Mime Part at the given index within the collection.
            </summary>
        </member>
        <member name="T:aspNetMime.ParseMessageEventHandler">
            <summary>
            The delegate used for event handling.
            </summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path, "*.eml", true );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="T:aspNetMime.ParseMessageEventArgs">
            <summary>These event args are raised when a message is parsed.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path, "*.eml", true );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.ParseMessageEventArgs.#ctor">
            <summary>Creates an instance of the ParseMessageEventArgs</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path, "*.eml", true );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.ParseMessageEventArgs.#ctor(System.String,aspNetMime.MimeMessage)">
            <summary>Creates an instance of the ParseMessageEventArgs</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path, "*.eml", true );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
            <param name="filename">Path to the MimeMessage being parsed.</param>
            <param name="message">The MimeMessage.</param>
        </member>
        <member name="M:aspNetMime.ParseMessageEventArgs.Copy(System.String,System.String,System.Boolean)">
            <summary>Copy a file based message to a new location.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path, "*.eml", true );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
            <param name="destinationDirectory">Desitnation Directory</param>
            <param name="destinationFilename">Destination filename.</param>
            <param name="overwrite">Overwrite any existing file with that name.</param>
        </member>
        <member name="M:aspNetMime.ParseMessageEventArgs.Delete">
            <summary>Delete the file.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path, "*.eml", true );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.ParseMessageEventArgs.Move(System.String,System.String,System.Boolean)">
            <summary>Moves the file.</summary>
            <param name="destinationDirectory">Destination Directory</param>
            <param name="destinationFilename">Destination filename</param>
            <param name="overwrite">Overwrite any existing file.</param>
            <example>
            <code lang="C#">
            void MimeProcessor()
            {
            	//create the processing engine
            	MessageProcessor  engine  = new MessageProcessor();
            	engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
            
            
            	//create a new report, and keep in memory
            	MimeReport report = new MimeReport( true, true);
            	engine.Report = report;
            
            	//process the directory
            	string path = "C:\\temp\\MimeFiles\\";
            	engine.ProcessDirectory( path, "*.eml", true );
            
            	//output the report as a XML document
            	report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
            
            	Console.WriteLine( "done.");
            	Console.ReadLine();
            }
            
            
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
            	Console.WriteLine( "----------------" );
            	Console.WriteLine( e.Filename ); 
            
            	//if we wanted to delete this file we could call
            	//e.Delete()
            
            	//if we wanted to cancel processing we could set
            	//e.Cancel = true
            	
            	//check for any exceptions
            	if( e.ProcessingException != null )
            	{
            		Console.WriteLine( e.ProcessingException.ToString() );
            
            		//don't throw the exception
            		e.ThrowException = false;
            	}
            
            	//access the MimeMessage subject
            	if( e.MimeMessage.Subject != null )
            	{
            		Console.WriteLine( e.MimeMessage.Subject.Value );
            	}
            
            	//copy the file to another directory
            	e.Move( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
            
            }
            </code>
            <code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
            
            
            
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'move the file to another directory
               e.Move("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage 
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.ParseMessageEventArgs.Move(System.String,System.Boolean)">
            <summary>Moves the file.</summary>
            <param name="destinationDirectory">Destination directory.</param>
            <param name="overwrite">Overwrite any existing file.</param>
            <example>
            <code lang="C#">
            void MimeProcessor()
            {
            	//create the processing engine
            	MessageProcessor  engine  = new MessageProcessor();
            	engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
            
            
            	//create a new report, and keep in memory
            	MimeReport report = new MimeReport( true, true);
            	engine.Report = report;
            
            	//process the directory
            	string path = "C:\\temp\\MimeFiles\\";
            	engine.ProcessDirectory( path, "*.eml", true );
            
            	//output the report as a XML document
            	report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
            
            	Console.WriteLine( "done.");
            	Console.ReadLine();
            }
            
            
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
            	Console.WriteLine( "----------------" );
            	Console.WriteLine( e.Filename ); 
            
            	//if we wanted to delete this file we could call
            	//e.Delete()
            
            	//if we wanted to cancel processing we could set
            	//e.Cancel = true
            	
            	//check for any exceptions
            	if( e.ProcessingException != null )
            	{
            		Console.WriteLine( e.ProcessingException.ToString() );
            
            		//don't throw the exception
            		e.ThrowException = false;
            	}
            
            	//access the MimeMessage subject
            	if( e.MimeMessage.Subject != null )
            	{
            		Console.WriteLine( e.MimeMessage.Subject.Value );
            	}
            
            	//copy the file to another directory
            	e.Move( "c:\\temp\\",  true );
            
            }
            </code>
            <code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
            
            
            
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'move the file to another directory
               e.Move("c:\temp\",  True)
            End Sub 'OnParseMessage 
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.ParseMessageEventArgs.SaveToFile(System.String)">
            <summary>Saves the MimeMessage to a file.</summary>
            <param name="path">Path to the file.</param>
            <example>
            <code lang="C#">
            void MimeProcessor()
            {
            	//create the processing engine
            	MessageProcessor  engine  = new MessageProcessor();
            	engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
            
            
            	//create a new report, and keep in memory
            	MimeReport report = new MimeReport( true, true);
            	engine.Report = report;
            
            	//process the directory
            	string path = "C:\\temp\\MimeFiles\\";
            	engine.ProcessDirectory( path, "*.eml", true );
            
            	//output the report as a XML document
            	report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
            
            	Console.WriteLine( "done.");
            	Console.ReadLine();
            }
            
            
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
            	Console.WriteLine( "----------------" );
            	Console.WriteLine( e.Filename ); 
            
            	//if we wanted to delete this file we could call
            	//e.Delete()
            
            	//if we wanted to cancel processing we could set
            	//e.Cancel = true
            	
            	//check for any exceptions
            	if( e.ProcessingException != null )
            	{
            		Console.WriteLine( e.ProcessingException.ToString() );
            
            		//don't throw the exception
            		e.ThrowException = false;
            	}
            
            	//access the MimeMessage subject
            	if( e.MimeMessage.Subject != null )
            	{
            		Console.WriteLine( e.MimeMessage.Subject.Value );
            	}
            
            	//save the MimeMessag
            	e.SaveToFile( "c:\\temp\\" + Path.GetFileName( e.Filename )  );
            
            }
            </code>
            <code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
            
            
            
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'save the MimeMessag
               e.SaveToFile(("c:\temp\" + Path.GetFileName(e.Filename)))
            End Sub 'OnParseMessage 
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.ParseMessageEventArgs.Cancel">
            <summary>Cancels message processing</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path, "*.eml", true );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="P:aspNetMime.ParseMessageEventArgs.Data">
            <summary>
            Data of the MimeMessage as a binary array.
            </summary>
            <example>
            <code lang="C#">
            void MimeProcessor()
            {
            	//create the processing engine
            	MessageProcessor  engine  = new MessageProcessor();
            	engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
            
            
            	//create a new report, and keep in memory
            	MimeReport report = new MimeReport( true, true);
            	engine.Report = report;
            
            	//process the directory
            	string path = "C:\\temp\\MimeFiles\\";
            	engine.ProcessDirectory( path, "*.eml", true );
            
            	//output the report as a XML document
            	report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
            
            	Console.WriteLine( "done.");
            	Console.ReadLine();
            }
            
            
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
            	Console.WriteLine( "----------------" );
            	Console.WriteLine( e.Filename ); 
            
            	//if we wanted to delete this file we could call
            	//e.Delete()
            
            	//if we wanted to cancel processing we could set
            	//e.Cancel = true
            	
            	//check for any exceptions
            	if( e.ProcessingException != null )
            	{
            		Console.WriteLine( e.ProcessingException.ToString() );
            
            		//don't throw the exception
            		e.ThrowException = false;
            	}
            
            	//access the MimeMessage subject
            	if( e.MimeMessage.Subject != null )
            	{
            		Console.WriteLine( e.MimeMessage.Subject.Value );
            	}
            
            	//save the MimeMessag
            	byte[] data = e.Data;
            	FileStream fs = File.OpenWrite( "c:\\temp\\" + Path.GetFileName( e.Filename ) );
            	fs.Write( data, 0, data.Length );
            	fs.Flush();
            	fs.Close();
            
            }
            
            </code>
            <code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
            
            
            
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'save the MimeMessag
               Dim data As Byte() = e.Data
               Dim fs As FileStream = File.OpenWrite(("c:\temp\" + Path.GetFileName(e.Filename)))
               fs.Write(data, 0, data.Length)
               fs.Flush()
               fs.Close()
            End Sub 'OnParseMessage 
            
            
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.ParseMessageEventArgs.Filename">
            <summary>Filename (and path) of the message being processed.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path, "*.eml", true );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="P:aspNetMime.ParseMessageEventArgs.MimeMessage">
            <summary>MimeMessage being processed.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path, "*.eml", true );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="P:aspNetMime.ParseMessageEventArgs.ProcessingException">
            <summary>Any exception raised while the messaged was parsed.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path, "*.eml", true );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="P:aspNetMime.ParseMessageEventArgs.ThrowException">
            <summary>Throw any ProcessingException.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path, "*.eml", true );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="T:aspNetMime.BlackListChecker">
            <summary>
            Checks the Received IP addresses of a message and determines if the sender is on a BlackList
            </summary>
            <example>
            	<code lang="C#">
            BlackListChecker checker = new BlackListChecker();
            //add a few DNSbl servers
            checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
            checker.LoadFile( "email.txt" );
             
            bool result = checker.IsBlackListed();
            Console.WriteLine( "Messaage marked as spam: {0}", result );
             
            //to see what server marked the message as spam, loop through the DNSBlackList servers
            foreach( DNSBlackList server in checker.DNSBlackLists )
            {
                Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            }
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            Dim checker As New BlackListChecker()
            'add a few DNSbl servers
            checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
            checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
            checker.LoadFile("email.txt")
             
            Dim result As Boolean = checker.IsBlackListed()
            Console.WriteLine("Messaage marked as spam: {0}", result)
             
            'to see what server marked the message as spam, loop through the DNSBlackList servers
            Dim server As DNSBlackList
            For Each server In  checker.DNSBlackLists
               Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
            Next server
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.BlackListChecker.OnBeforeLookup(aspNetMime.BeforeLookupEventArgs)">
            <summary>
            Raises the BeforeLookup event.
            </summary>
            <param name="e"></param>
            <example>
            <code lang="C#">
            void CheckerDemo()
            {
            
            	BlackListChecker checker = new BlackListChecker();
            	//add a few DNSbl servers
            	checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            	checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            	//load an email from the filesystem
            	checker.LoadFile( "c:\\temp\\sample.eml" );
            
            
            	//wire up the events
            	checker.BeforeLookup += new BeforeLookupEventHandler( BeforeLookup );
            	checker.Lookup += new LookupEventHandler( AfterLookup );
            
            	bool result = checker.IsBlackListed();
            	Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            	//to see what server marked the message as spam, loop through the DNSBlackList servers
            	foreach( DNSBlackList server in checker.DNSBlackLists )
            	{
            		Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            	}
            
            
            	Console.WriteLine( "done" );
            	Console.ReadLine();
            
            }
            
            private void BeforeLookup( object sender, BeforeLookupEventArgs e )
            {
            	//if we wanted to change any properties, they could be done here
            	//...
            	//...
            
            	//if we wanted to cancel this lookup, set
            	// e.Cancel = true
            
            	Console.WriteLine( "BeforeLookup called." );
            }
            
            private void AfterLookup( object sender, LookupEventArgs e )
            {
            	//here we can check properties after the lookup
            
            	Console.WriteLine( "Afterlookup called." );
            }
            
            </code>
            <code lang="VB.NET">
            Sub CheckerDemo()
               
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               
               'load an email from the filesystem
               checker.LoadFile("c:\temp\sample.eml")
               
               
               'wire up the events
               AddHandler checker.BeforeLookup, AddressOf BeforeLookup
               AddHandler checker.Lookup, AddressOf AfterLookup
               
               Dim result As Boolean = checker.IsBlackListed()
               Console.WriteLine("Messaage marked as spam: {0}", result)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'CheckerDemo
             
            
            Private Sub BeforeLookup(sender As Object, e As BeforeLookupEventArgs)
               'if we wanted to change any properties, they could be done here
               '...
               '...
               'if we wanted to cancel this lookup, set
               ' e.Cancel = true
               Console.WriteLine("BeforeLookup called.")
            End Sub 'BeforeLookup
            
            
            Private  Sub AfterLookup(sender As Object, e As LookupEventArgs)
               'here we can check properties after the lookup
               Console.WriteLine("Afterlookup called.")
            End Sub 'AfterLookup
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.BlackListChecker.OnLookup(aspNetMime.LookupEventArgs)">
            <summary>
            Raises the Lookup event.
            </summary>
            <example>
            <code lang="C#">
            void CheckerDemo()
            {
            
            	BlackListChecker checker = new BlackListChecker();
            	//add a few DNSbl servers
            	checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            	checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            	//load an email from the filesystem
            	checker.LoadFile( "c:\\temp\\sample.eml" );
            
            
            	//wire up the events
            	checker.BeforeLookup += new BeforeLookupEventHandler( BeforeLookup );
            	checker.Lookup += new LookupEventHandler( AfterLookup );
            
            	bool result = checker.IsBlackListed();
            	Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            	//to see what server marked the message as spam, loop through the DNSBlackList servers
            	foreach( DNSBlackList server in checker.DNSBlackLists )
            	{
            		Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            	}
            
            
            	Console.WriteLine( "done" );
            	Console.ReadLine();
            
            }
            
            private void BeforeLookup( object sender, BeforeLookupEventArgs e )
            {
            	//if we wanted to change any properties, they could be done here
            	//...
            	//...
            
            	//if we wanted to cancel this lookup, set
            	// e.Cancel = true
            
            	Console.WriteLine( "BeforeLookup called." );
            }
            
            private void AfterLookup( object sender, LookupEventArgs e )
            {
            	//here we can check properties after the lookup
            
            	Console.WriteLine( "Afterlookup called." );
            }
            
            </code>
            <code lang="VB.NET">
            Sub CheckerDemo()
               
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               
               'load an email from the filesystem
               checker.LoadFile("c:\temp\sample.eml")
               
               
               'wire up the events
               AddHandler checker.BeforeLookup, AddressOf BeforeLookup
               AddHandler checker.Lookup, AddressOf AfterLookup
               
               Dim result As Boolean = checker.IsBlackListed()
               Console.WriteLine("Messaage marked as spam: {0}", result)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'CheckerDemo
             
            
            Private Sub BeforeLookup(sender As Object, e As BeforeLookupEventArgs)
               'if we wanted to change any properties, they could be done here
               '...
               '...
               'if we wanted to cancel this lookup, set
               ' e.Cancel = true
               Console.WriteLine("BeforeLookup called.")
            End Sub 'BeforeLookup
            
            
            Private  Sub AfterLookup(sender As Object, e As LookupEventArgs)
               'here we can check properties after the lookup
               Console.WriteLine("Afterlookup called.")
            End Sub 'AfterLookup
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.BlackListChecker.#ctor">
            <summary>
            Creates an instance of a BlackListChecker
            </summary>
            <example>
            	<code lang="C#">
            BlackListChecker checker = new BlackListChecker();
            //add a few DNSbl servers
            checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
            checker.LoadFile( "email.txt" );
             
            bool result = checker.IsBlackListed();
            Console.WriteLine( "Messaage marked as spam: {0}", result );
             
            //to see what server marked the message as spam, loop through the DNSBlackList servers
            foreach( DNSBlackList server in checker.DNSBlackLists )
            {
                Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            }
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            Dim checker As New BlackListChecker()
            'add a few DNSbl servers
            checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
            checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
            checker.LoadFile("email.txt")
             
            Dim result As Boolean = checker.IsBlackListed()
            Console.WriteLine("Messaage marked as spam: {0}", result)
             
            'to see what server marked the message as spam, loop through the DNSBlackList servers
            Dim server As DNSBlackList
            For Each server In  checker.DNSBlackLists
               Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
            Next server
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.BlackListChecker.AddDNSBlackList(aspNetMime.DNSBlackList)">
            <summary>
            Adds a DNSBlackList server to the internal DNSBlackList collection.
            </summary>
            <example>
            	<code lang="C#">
            BlackListChecker checker = new BlackListChecker();
             
            //add a few DNSbl servers
            checker.AddDNSBlackList( new DNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" ) );
            checker.AddDNSBlackList( new DNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" ) );
             
            checker.LoadFile( "email.txt" );
             
            bool result = checker.IsBlackListed();
            Console.WriteLine( "Messaage marked as spam: {0}", result );
             
            //to see what server marked the message as spam, loop through the DNSBlackList servers
            foreach( DNSBlackList server in checker.DNSBlackLists )
            {
                Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            }
             
            //show the IPs of the message that were checked
            Console.WriteLine( checker.SuspectIPs );
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            Dim checker As New BlackListChecker()
             
            'add a few DNSbl servers
            checker.AddDNSBlackList(New DNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2"))
            checker.AddDNSBlackList(New DNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12"))
             
            checker.LoadFile("email.txt")
             
            Dim result As Boolean = checker.IsBlackListed()
            Console.WriteLine("Messaage marked as spam: {0}", result)
             
            'to see what server marked the message as spam, loop through the DNSBlackList servers
            Dim server As DNSBlackList
            For Each server In  checker.DNSBlackLists
               Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
            Next server
             
            'show the IPs of the message that were checked
            Console.WriteLine(checker.SuspectIPs)
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.BlackListChecker.AddDNSBlackList(System.String,System.String)">
            <summary>
            Adds a DNSBlackList server to the internal DNSBlackList collection.
            </summary>
            <example>
            	<code lang="C#">
            BlackListChecker checker = new BlackListChecker();
            //add a few DNSbl servers
            checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
            checker.LoadFile( "email.txt" );
             
            bool result = checker.IsBlackListed();
            Console.WriteLine( "Messaage marked as spam: {0}", result );
             
            //to see what server marked the message as spam, loop through the DNSBlackList servers
            foreach( DNSBlackList server in checker.DNSBlackLists )
            {
                Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            }
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            Dim checker As New BlackListChecker()
            'add a few DNSbl servers
            checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
            checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
            checker.LoadFile("email.txt")
             
            Dim result As Boolean = checker.IsBlackListed()
            Console.WriteLine("Messaage marked as spam: {0}", result)
             
            'to see what server marked the message as spam, loop through the DNSBlackList servers
            Dim server As DNSBlackList
            For Each server In  checker.DNSBlackLists
               Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
            Next server
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.BlackListChecker.ClearBlackLists">
            <summary>
            Clears all internal BlackLists
            </summary>
            <example>
            <code lang="C#">
            BlackListChecker checker = new BlackListChecker();
            //add a few DNSbl servers
            checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            //load an email from the filesystem
            checker.LoadFile( "c:\\temp\\sample.eml" );
            
            bool result = checker.IsBlackListed();
            Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            //to see what server marked the message as spam, loop through the DNSBlackList servers
            foreach( DNSBlackList server in checker.DNSBlackLists )
            {
            	Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            }
            
            
            //clear the lists
            checker.ClearBlackLists();
            
            //add a few DNSbl servers
            checker.AddDNSBlackList( "bl.spamcop.net", "127.0.0.2" );
            checker.AddDNSBlackList( "relays.ordb.org", "127.0.0.2" );
            
            //recheck the message
            result = checker.IsBlackListed();
            Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            //to see what server marked the message as spam, loop through the DNSBlackList servers
            foreach( DNSBlackList server in checker.DNSBlackLists )
            {
            	Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            }
            
            
            Console.WriteLine( "done" );
            Console.ReadLine();
            
            
            
            
            </code>
            <code lang="VB.NET">
            Dim checker As New BlackListChecker()
            'add a few DNSbl servers
            checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
            checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
            
            'load an email from the filesystem
            checker.LoadFile("c:\temp\sample.eml")
            
            Dim result As Boolean = checker.IsBlackListed()
            Console.WriteLine("Messaage marked as spam: {0}", result)
            
            'to see what server marked the message as spam, loop through the DNSBlackList servers
            Dim server As DNSBlackList
            For Each server In  checker.DNSBlackLists
               Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
            Next server
            
            
            'clear the lists
            checker.ClearBlackLists()
            
            'add a few DNSbl servers
            checker.AddDNSBlackList("bl.spamcop.net", "127.0.0.2")
            checker.AddDNSBlackList("relays.ordb.org", "127.0.0.2")
            
            'recheck the message
            result = checker.IsBlackListed()
            Console.WriteLine("Messaage marked as spam: {0}", result)
            
            'to see what server marked the message as spam, loop through the DNSBlackList servers
            Dim server As DNSBlackList
            For Each server In  checker.DNSBlackLists
               Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
            Next server
            
            
            Console.WriteLine("done")
            Console.ReadLine()
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.BlackListChecker.LoadText(System.String)">
            <summary>Loads and parses the received IPs from message headers.</summary>
            <example>
            	<code lang="C#">
            BlackListChecker checker = new BlackListChecker();
            //add a few DNSbl servers
            checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
            checker.LoadText( GetMessageText() ); //GetMessageText() is a custom method to get the text of an email message.
             
            bool result = checker.IsBlackListed();
            Console.WriteLine( "Messaage marked as spam: {0}", result );
             
            //to see what server marked the message as spam, loop through the DNSBlackList servers
            foreach( DNSBlackList server in checker.DNSBlackLists )
            {
                Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            }
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            Dim checker As New BlackListChecker()
            'add a few DNSbl servers
            checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
            checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
            checker.LoadText( GetMessageText() ) 'GetMessageText() is a custom method to get the text of an email message.
             
            Dim result As Boolean = checker.IsBlackListed()
            Console.WriteLine("Messaage marked as spam: {0}", result)
             
            'to see what server marked the message as spam, loop through the DNSBlackList servers
            Dim server As DNSBlackList
            For Each server In  checker.DNSBlackLists
               Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
            Next server
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageText">The headers or text of the message.</param>
        </member>
        <member name="M:aspNetMime.BlackListChecker.LoadFile(System.String)">
            <summary>
            Loads the contents of an email message from a text file.
            </summary>
            <example>
            	<code lang="C#">
            BlackListChecker checker = new BlackListChecker();
            //add a few DNSbl servers
            checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
            checker.LoadFile( "email.txt" );
             
            bool result = checker.IsBlackListed();
            Console.WriteLine( "Messaage marked as spam: {0}", result );
             
            //to see what server marked the message as spam, loop through the DNSBlackList servers
            foreach( DNSBlackList server in checker.DNSBlackLists )
            {
                Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            }
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            Dim checker As New BlackListChecker()
            'add a few DNSbl servers
            checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
            checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
            checker.LoadFile("email.txt")
             
            Dim result As Boolean = checker.IsBlackListed()
            Console.WriteLine("Messaage marked as spam: {0}", result)
             
            'to see what server marked the message as spam, loop through the DNSBlackList servers
            Dim server As DNSBlackList
            For Each server In  checker.DNSBlackLists
               Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
            Next server
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
            <param name="path">Filesystem path to the text file.</param>
        </member>
        <member name="M:aspNetMime.BlackListChecker.LoadMessage(aspNetMime.MimePart)">
            <summary>
            Loads a MimeMessage for spam checking.
            </summary>
            <example>
            	<code lang="C#">
            BlackListChecker checker = new BlackListChecker();
            //add a few DNSbl servers
            checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
            checker.LoadMessage( GetMessage() ); //Where GetMessage() is a custom method that returns a MimeMessage object.
             
            bool result = checker.IsBlackListed();
            Console.WriteLine( "Messaage marked as spam: {0}", result );
             
            //to see what server marked the message as spam, loop through the DNSBlackList servers
            foreach( DNSBlackList server in checker.DNSBlackLists )
            {
                Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            }
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            Dim checker As New BlackListChecker()
            'add a few DNSbl servers
            checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
            checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
            checker.LoadMessage( GetMessage() )  'Where GetMessage() is a custom method that returns a MimeMessage object.
             
            Dim result As Boolean = checker.IsBlackListed()
            Console.WriteLine("Messaage marked as spam: {0}", result)
             
            'to see what server marked the message as spam, loop through the DNSBlackList servers
            Dim server As DNSBlackList
            For Each server In  checker.DNSBlackLists
               Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
            Next server
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
            <param name="message">MimeMessage to be checked for spam.</param>
        </member>
        <member name="M:aspNetMime.BlackListChecker.IsBlackListed(System.String)">
            <summary>
            Checks to see if the IPs, found in the message headers are black listed
            </summary>
            <returns>True if any one of the IPs found in the message headers were black listed.</returns>
            <example>
            	<code lang="C#">
            BlackListChecker checker = new BlackListChecker();
            //add a few DNSbl servers
            checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
            //load an email message's text
            StreamReader sr = new StreamReader( "email.txt" );
            string text = sr.ReadToEnd();
            sr.Close();
             
            bool result = checker.IsBlackListed( text );
            Console.WriteLine( "Messaage marked as spam: {0}", result );
             
            //to see what server marked the message as spam, loop through the DNSBlackList servers
            foreach( DNSBlackList server in checker.DNSBlackLists )
            {
                Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            }
             
            //show the IPs of the message that were checked
            Console.WriteLine( checker.SuspectIPs );
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            Dim checker As New BlackListChecker()
            'add a few DNSbl servers
            checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
            checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
            'load an email message's text
            Dim sr As New StreamReader("email.txt")
            Dim [text] As String = sr.ReadToEnd()
            sr.Close()
             
            Dim result As Boolean = checker.IsBlackListed([text])
            Console.WriteLine("Messaage marked as spam: {0}", result)
             
            'to see what server marked the message as spam, loop through the DNSBlackList servers
            Dim server As DNSBlackList
            For Each server In  checker.DNSBlackLists
               Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
            Next server
             
            'show the IPs of the message that were checked
            Console.WriteLine(checker.SuspectIPs)
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageText">Email message text or headers</param>
        </member>
        <member name="M:aspNetMime.BlackListChecker.IsBlackListedIPs(System.String)">
            <summary>Checks a comma delimited string of IP addresses.</summary>
            <example>
            	<code lang="C#">
            BlackListChecker checker = new BlackListChecker();
            //add a few DNSbl servers
            checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
             
            bool result = checker.IsBlackListedIPs( "66.249.110.24,66.249.110.25,66.249.110.26" );
            Console.WriteLine( "Messaage marked as spam: {0}", result );
             
            //to see what server marked the message as spam, loop through the DNSBlackList servers
            foreach( DNSBlackList server in checker.DNSBlackLists )
            {
                Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            }
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            Dim checker As New BlackListChecker()
            'add a few DNSbl servers
            checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
            checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
             
            Dim result As Boolean = checker.IsBlackListedIPs("66.249.110.24,66.249.110.25,66.249.110.26")
            Console.WriteLine("Messaage marked as spam: {0}", result)
             
            'to see what server marked the message as spam, loop through the DNSBlackList servers
            Dim server As DNSBlackList
            For Each server In  checker.DNSBlackLists
               Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
            Next server
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.BlackListChecker.IsBlackListed">
            <summary>Checks to see if the SuspectIPs are black listed.</summary>
            <example>
            	<code lang="C#">
            BlackListChecker checker = new BlackListChecker();
            //add a few DNSbl servers
            checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
            checker.LoadFile( "email.txt" );
             
            bool result = checker.IsBlackListed();
            Console.WriteLine( "Messaage marked as spam: {0}", result );
             
            //to see what server marked the message as spam, loop through the DNSBlackList servers
            foreach( DNSBlackList server in checker.DNSBlackLists )
            {
                Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            }
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            Dim checker As New BlackListChecker()
            'add a few DNSbl servers
            checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
            checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
            checker.LoadFile("email.txt")
             
            Dim result As Boolean = checker.IsBlackListed()
            Console.WriteLine("Messaage marked as spam: {0}", result)
             
            'to see what server marked the message as spam, loop through the DNSBlackList servers
            Dim server As DNSBlackList
            For Each server In  checker.DNSBlackLists
               Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
            Next server
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.BlackListChecker.BeginIsBlackListed(System.AsyncCallback,System.Object)">
            <summary>
            Used for asynchronous IsBlackListed completion.
            </summary>
            <returns>An IAsyncResult instance that references the asynchronous request.</returns>
            <example>
            	<code lang="C#">
            static void Main(string[] args)
            {
                BlackListChecker checker = new BlackListChecker();
                //add a few DNSbl servers
                checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
                checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
                checker.LoadFile( "email.txt" );
             
                checker.BeginIsBlackListed( new AsyncCallback( MyCallback ), checker );
             
                //simulate doing some work
                Thread.Sleep( 5000 );
             
                Console.WriteLine( "done" );
                Console.ReadLine();
            }
             
             
            public static void MyCallback( IAsyncResult result )
            {
                BlackListChecker checker = (BlackListChecker)result.AsyncState;
                bool answer = checker.EndIsBlackListed( result); 
                Console.WriteLine( "Messaage marked as spam: {0}", answer );
             
                //to see what server marked the message as spam, loop through the DNSBlackList servers
                foreach( DNSBlackList server in checker.DNSBlackLists )
                {
                    Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
                }
             
                //show the IPs of the message that were checked
                Console.WriteLine( checker.SuspectIPs );
            }
                </code>
            	<code lang="VB">
            Public Sub Main(args() As String)
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               
               checker.LoadFile("email.txt")
               
               checker.BeginIsBlackListed( AddressOf MyCallback, checker)
               
               'simulate doing some work
               Thread.Sleep(5000)
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'Main
             
             
             
            Public Sub MyCallback(result As IAsyncResult)
               Dim checker As BlackListChecker = CType(result.AsyncState, BlackListChecker)
               Dim answer As Boolean = checker.EndIsBlackListed(result)
               Console.WriteLine("Messaage marked as spam: {0}", answer)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               'show the IPs of the message that were checked
               Console.WriteLine(checker.SuspectIPs)
            End Sub 'MyCallback
                </code>
            </example>
            <param name="callback">The async callback.</param>
            <param name="blackListChecker">The BlackListChecker object</param>
        </member>
        <member name="M:aspNetMime.BlackListChecker.EndIsBlackListed(System.IAsyncResult)">
            <summary>
            Ends an asynchronous IsBlackListed.
            </summary>
            <returns>
            True or False, if the IP Addresses has been blacklisted by the specified DNSbl
            servers.
            </returns>
            <example>
            	<code lang="C#">
            static void Main(string[] args)
            {
                BlackListChecker checker = new BlackListChecker();
                //add a few DNSbl servers
                checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
                checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
                checker.LoadFile( "email.txt" );
             
                checker.BeginIsBlackListed( new AsyncCallback( MyCallback ), checker );
             
                //simulate doing some work
                Thread.Sleep( 5000 );
             
                Console.WriteLine( "done" );
                Console.ReadLine();
            }
             
             
            public static void MyCallback( IAsyncResult result )
            {
                BlackListChecker checker = (BlackListChecker)result.AsyncState;
                bool answer = checker.EndIsBlackListed( result); 
                Console.WriteLine( "Messaage marked as spam: {0}", answer );
             
                //to see what server marked the message as spam, loop through the DNSBlackList servers
                foreach( DNSBlackList server in checker.DNSBlackLists )
                {
                    Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
                }
             
                //show the IPs of the message that were checked
                Console.WriteLine( checker.SuspectIPs );
            }
                </code>
            	<code lang="VB">
            Public Sub Main(args() As String)
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               
               checker.LoadFile("email.txt")
               
               checker.BeginIsBlackListed(New AsyncCallback(MyCallback), checker)
               
               'simulate doing some work
               Thread.Sleep(5000)
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'Main
             
             
             
            Public Sub MyCallback(result As IAsyncResult)
               Dim checker As BlackListChecker = CType(result.AsyncState, BlackListChecker)
               Dim answer As Boolean = checker.EndIsBlackListed(result)
               Console.WriteLine("Messaage marked as spam: {0}", answer)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               'show the IPs of the message that were checked
               Console.WriteLine(checker.SuspectIPs)
            End Sub 'MyCallback
                </code>
            </example>
            <param name="result">The pending IsBlackListed result object.</param>
        </member>
        <member name="M:aspNetMime.BlackListChecker.ExtractIPsFromMessage(System.String)">
            <summary>
            Extracts a comma delimited string of IP addresses from a string of text.
            </summary>
            <returns>Comma delimited string of IP addresses </returns>
            <remarks>
            This is a helper method to extract Received IP addresses from a textual email
            message.
            </remarks>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            MimeMessage m = MimeMessage.ParseFile( "message1.eml" );
             
            string headers = m.Headers.ToString();
             
            string ips = BlackListChecker.ExtractIPsFromMessage( headers );
             
            Console.WriteLine( ips );
                </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim m As MimeMessage = MimeMessage.ParseFile("message1.eml")
             
            Dim headers As String = m.Headers.ToString()
             
            Dim ips As String = BlackListChecker.ExtractIPsFromMessage(headers)
             
            Console.WriteLine(ips)
                </code>
            </example>
            <param name="messageText">Email message headers or message text</param>
        </member>
        <member name="E:aspNetMime.BlackListChecker.BeforeLookup">
            <summary>
            The event raised just before the BlackListChecker performs a lookup.
            </summary>
            <example>
            <code lang="C#">
            void CheckerDemo()
            {
            
            	BlackListChecker checker = new BlackListChecker();
            	//add a few DNSbl servers
            	checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            	checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            	//load an email from the filesystem
            	checker.LoadFile( "c:\\temp\\sample.eml" );
            
            
            	//wire up the events
            	checker.BeforeLookup += new BeforeLookupEventHandler( BeforeLookup );
            	checker.Lookup += new LookupEventHandler( AfterLookup );
            
            	bool result = checker.IsBlackListed();
            	Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            	//to see what server marked the message as spam, loop through the DNSBlackList servers
            	foreach( DNSBlackList server in checker.DNSBlackLists )
            	{
            		Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            	}
            
            
            	Console.WriteLine( "done" );
            	Console.ReadLine();
            
            }
            
            private void BeforeLookup( object sender, BeforeLookupEventArgs e )
            {
            	//if we wanted to change any properties, they could be done here
            	//...
            	//...
            
            	//if we wanted to cancel this lookup, set
            	// e.Cancel = true
            
            	Console.WriteLine( "BeforeLookup called." );
            }
            
            private void AfterLookup( object sender, LookupEventArgs e )
            {
            	//here we can check properties after the lookup
            
            	Console.WriteLine( "Afterlookup called." );
            }
            
            </code>
            <code lang="VB.NET">
            Sub CheckerDemo()
               
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               
               'load an email from the filesystem
               checker.LoadFile("c:\temp\sample.eml")
               
               
               'wire up the events
               AddHandler checker.BeforeLookup, AddressOf BeforeLookup
               AddHandler checker.Lookup, AddressOf AfterLookup
               
               Dim result As Boolean = checker.IsBlackListed()
               Console.WriteLine("Messaage marked as spam: {0}", result)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'CheckerDemo
             
            
            Private Sub BeforeLookup(sender As Object, e As BeforeLookupEventArgs)
               'if we wanted to change any properties, they could be done here
               '...
               '...
               'if we wanted to cancel this lookup, set
               ' e.Cancel = true
               Console.WriteLine("BeforeLookup called.")
            End Sub 'BeforeLookup
            
            
            Private  Sub AfterLookup(sender As Object, e As LookupEventArgs)
               'here we can check properties after the lookup
               Console.WriteLine("Afterlookup called.")
            End Sub 'AfterLookup
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="E:aspNetMime.BlackListChecker.Lookup">
            <summary>
             A Lookup event has occurred.
            </summary>
            <example>
            <code lang="C#">
            void CheckerDemo()
            {
            
            	BlackListChecker checker = new BlackListChecker();
            	//add a few DNSbl servers
            	checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            	checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            	//load an email from the filesystem
            	checker.LoadFile( "c:\\temp\\sample.eml" );
            
            
            	//wire up the events
            	checker.BeforeLookup += new BeforeLookupEventHandler( BeforeLookup );
            	checker.Lookup += new LookupEventHandler( AfterLookup );
            
            	bool result = checker.IsBlackListed();
            	Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            	//to see what server marked the message as spam, loop through the DNSBlackList servers
            	foreach( DNSBlackList server in checker.DNSBlackLists )
            	{
            		Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            	}
            
            
            	Console.WriteLine( "done" );
            	Console.ReadLine();
            
            }
            
            private void BeforeLookup( object sender, BeforeLookupEventArgs e )
            {
            	//if we wanted to change any properties, they could be done here
            	//...
            	//...
            
            	//if we wanted to cancel this lookup, set
            	// e.Cancel = true
            
            	Console.WriteLine( "BeforeLookup called." );
            }
            
            private void AfterLookup( object sender, LookupEventArgs e )
            {
            	//here we can check properties after the lookup
            
            	Console.WriteLine( "Afterlookup called." );
            }
            
            </code>
            <code lang="VB.NET">
            Sub CheckerDemo()
               
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               
               'load an email from the filesystem
               checker.LoadFile("c:\temp\sample.eml")
               
               
               'wire up the events
               AddHandler checker.BeforeLookup, AddressOf BeforeLookup
               AddHandler checker.Lookup, AddressOf AfterLookup
               
               Dim result As Boolean = checker.IsBlackListed()
               Console.WriteLine("Messaage marked as spam: {0}", result)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'CheckerDemo
             
            
            Private Sub BeforeLookup(sender As Object, e As BeforeLookupEventArgs)
               'if we wanted to change any properties, they could be done here
               '...
               '...
               'if we wanted to cancel this lookup, set
               ' e.Cancel = true
               Console.WriteLine("BeforeLookup called.")
            End Sub 'BeforeLookup
            
            
            Private  Sub AfterLookup(sender As Object, e As LookupEventArgs)
               'here we can check properties after the lookup
               Console.WriteLine("Afterlookup called.")
            End Sub 'AfterLookup
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.BlackListChecker.LookupBehavior">
            <summary>Checks the DNSbl databases synchronously, or asynchronously.</summary>
            <remarks>
            	<para>The DNSblLookupBehavior can be used to control how the BlackListChecker
                object checks DNSbl servers. If the LookupBehavior is set to CheckAll, all of the
                DNSbl servers will be checked, regardless of the response received. This can be
                used for advanced spam checking, to statistically check how many lists have black
                listed a particular IP.</para>
            	<para>However, by setting the LookupBehavior to FirstLocated, the DNSbl look ups will
                be stopped, as soon as a single DNSbl server reports a positive response. This can
                greatly reduce the amount of time needed to check a message.</para>
            </remarks>
            <example>
            <code lang="C#">
            BlackListChecker checker = new BlackListChecker();
            //add a few DNSbl servers
            checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            //load an email from the filesystem
            checker.LoadFile( "c:\\temp\\sample.eml" );
            
            //check all of the lists
            checker.LookupBehavior = DNSblLookupBehavior.FirstLocated;
            
            
            bool result = checker.IsBlackListed();
            Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            //to see what server marked the message as spam, loop through the DNSBlackList servers
            foreach( DNSBlackList server in checker.DNSBlackLists )
            {
            	Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            }
            </code>
            <code lang="VB.NET">
            Dim checker As New BlackListChecker()
            'add a few DNSbl servers
            checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
            checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
            
            'load an email from the filesystem
            checker.LoadFile("c:\temp\sample.eml")
            
            'check all of the lists
            checker.LookupBehavior = DNSblLookupBehavior.FirstLocated
            
            
            Dim result As Boolean = checker.IsBlackListed()
            Console.WriteLine("Messaage marked as spam: {0}", result)
            
            'to see what server marked the message as spam, loop through the DNSBlackList servers
            Dim server As DNSBlackList
            For Each server In  checker.DNSBlackLists
               Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
            Next server
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.BlackListChecker.SuspectIPs">
            <summary>
            A comma delimited string of IP addresses to check
            </summary>
            <remarks>
            When this string of IPs is split into individual IPs, each one is checked, until
            a positive black listed IP is found. This property is automatically set, or
            overwritten, when <see cref="M:aspNetMime.BlackListChecker.LoadText(System.String)">LoadText()</see>,
            <see cref="M:aspNetMime.BlackListChecker.LoadFile(System.String)">LoadFile()</see>, or <see cref="M:aspNetMime.BlackListChecker.LoadMessage(aspNetMime.MimePart)">LoadMessage()</see>
            is called.
            </remarks>
            <example>
            	<code lang="C#">
            BlackListChecker checker = new BlackListChecker();
            //add a few DNSbl servers
            checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
            checker.LoadFile( "email.txt" );
             
            bool result = checker.IsBlackListed();
            Console.WriteLine( "Messaage marked as spam: {0}", result );
             
            //to see what server marked the message as spam, loop through the DNSBlackList servers
            foreach( DNSBlackList server in checker.DNSBlackLists )
            {
                Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            }
             
            //show the IPs of the message that were checked
            Console.WriteLine( checker.SuspectIPs );
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            Dim checker As New BlackListChecker()
            'add a few DNSbl servers
            checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
            checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
            checker.LoadFile("email.txt")
             
            Dim result As Boolean = checker.IsBlackListed()
            Console.WriteLine("Messaage marked as spam: {0}", result)
             
            'to see what server marked the message as spam, loop through the DNSBlackList servers
            Dim server As DNSBlackList
            For Each server In  checker.DNSBlackLists
               Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
            Next server
             
            'show the IPs of the message that were checked
            Console.WriteLine(checker.SuspectIPs)
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetMime.BlackListChecker.DNSBlackLists">
            <summary>A DNSBlackListCollection of DNSBlackList servers</summary>
            <example>
            	<code lang="C#">
            BlackListChecker checker = new BlackListChecker();
            //add a few DNSbl servers
            checker.DNSBlackLists.Add( new DNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" ) );
            checker.DNSBlackLists.Add( new DNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" ) );
             
            checker.LoadFile( "email.txt" );
             
            bool result = checker.IsBlackListed();
            Console.WriteLine( "Messaage marked as spam: {0}", result );
             
            //to see what server marked the message as spam, loop through the DNSBlackList servers
            foreach( DNSBlackList server in checker.DNSBlackLists )
            {
                Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            }
             
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            Dim checker As New BlackListChecker()
            'add a few DNSbl servers
            checker.DNSBlackLists.Add(New DNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2"))
            checker.DNSBlackLists.Add(New DNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12"))
             
            checker.LoadFile("email.txt")
             
            Dim result As Boolean = checker.IsBlackListed()
            Console.WriteLine("Messaage marked as spam: {0}", result)
             
            'to see what server marked the message as spam, loop through the DNSBlackList servers
            Dim server As DNSBlackList
            For Each server In  checker.DNSBlackLists
               Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
            Next server
             
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetMime.BlackListChecker.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal the event handler calls issued as a result of events.
            </summary>
        </member>
        <member name="T:aspNetMime.DNSBlackList">
            <summary>A class for communicating with DNSbl Spam Databases</summary>
            <remarks>This class is used for interacting with a single DNSbl server.</remarks>
            <example>
            	<code lang="C#">
            //create a DNSbl object that interacts with sorbs.net
            DNSBlackList dnsbl = new DNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
            bool isSpam = dnsbl.IsListed( "66.249.110.24,66.249.110.25,66.249.110.26,66.249.110.27" );
             
            Console.WriteLine( "dnsbl considers the message as spam: {0}", isSpam );
             
            Console.WriteLine( "Response from dnsbl: {0}", dnsbl.Response );
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            'create a DNSbl object that interacts with sorbs.net
            Dim dnsbl As New DNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
            Dim isSpam As Boolean = dnsbl.IsListed("66.249.110.24,66.249.110.25,66.249.110.26,66.249.110.27")
             
            Console.WriteLine("dnsbl considers the message as spam: {0}", isSpam)
             
            Console.WriteLine("Response from dnsbl: {0}", dnsbl.Response)
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.DNSBlackList.#ctor">
            <summary>Creates an instance a class for communicating with DNSbl Spam Databases</summary>
            <example>
            	<code lang="C#">
            //create a DNSbl object that interacts with sorbs.net
            DNSBlackList dnsbl = new DNSBlackList();
            dnsbl.Domain = "dnsbl.sorbs.net";
            dnsbl.Responsecodes = new string[]{ "127.0.0.2", "127.0.0.3", "127.0.0.4", "127.0.0.5", "127.0.0.6", "127.0.0.7", "127.0.0.8", "127.0.0.9", "127.0.0.10", "127.0.0.11", "127.0.0.12" };
             
            bool isSpam = dnsbl.IsListed( "66.249.110.24,  66.249.110.25,  66.249.110.26,   66.249.110.27" );
             
            Console.WriteLine( "dnsbl considers the message as spam: {0}", isSpam );
             
            Console.WriteLine( "Response from dnsbl: {0}", dnsbl.Response );
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            'create a DNSbl object that interacts with sorbs.net
            Dim dnsbl As New DNSBlackList()
            dnsbl.Domain = "dnsbl.sorbs.net"
            dnsbl.Responsecodes = New String() {"127.0.0.2", "127.0.0.3", "127.0.0.4", "127.0.0.5", "127.0.0.6", "127.0.0.7", "127.0.0.8", "127.0.0.9", "127.0.0.10", "127.0.0.11", "127.0.0.12"}
             
            Dim isSpam As Boolean = dnsbl.IsListed("66.249.110.24,  66.249.110.25,  66.249.110.26,   66.249.110.27")
             
            Console.WriteLine("dnsbl considers the message as spam: {0}", isSpam)
             
            Console.WriteLine("Response from dnsbl: {0}", dnsbl.Response)
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.DNSBlackList.#ctor(System.String,System.String)">
            <summary>Creates an instance a class for communicating with DNSbl Spam Databases</summary>
            <param name="domain">The Spam Database lookup domain</param>
            <param name="responses">A comma delimited list of possible responses.</param>
            <remarks>This class is used for interacting with a single DNSbl server.</remarks>
            <example>
            	<code lang="C#">
            //create a DNSbl object that interacts with sorbs.net
            DNSBlackList dnsbl = new DNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
            bool isSpam = dnsbl.IsListed( "66.249.110.24,66.249.110.25,66.249.110.26,66.249.110.27" );
             
            Console.WriteLine( "dnsbl considers the message as spam: {0}", isSpam );
             
            Console.WriteLine( "Response from dnsbl: {0}", dnsbl.Response );
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            'create a DNSbl object that interacts with sorbs.net
            Dim dnsbl As New DNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
            Dim isSpam As Boolean = dnsbl.IsListed("66.249.110.24,66.249.110.25,66.249.110.26,66.249.110.27")
             
            Console.WriteLine("dnsbl considers the message as spam: {0}", isSpam)
             
            Console.WriteLine("Response from dnsbl: {0}", dnsbl.Response)
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.DNSBlackList.#ctor(System.String,System.String[])">
            <summary>Creates an instance a class for communicating with DNSbl Spam Databases</summary>
            <param name="domain">The Spam Database lookup domain</param>
            <param name="responseCodes">A string array of possible response codes.</param>
        </member>
        <member name="M:aspNetMime.DNSBlackList.#ctor(System.String,System.String,System.String)">
            <summary>Creates an instance a class for communicating with DNSbl Spam Databases</summary>
            <param name="domain">The Spam Database lookup domain</param>
            <param name="responses">A comma delimited list of possible responses.</param>
            <param name="name">The label of this DNSBlackList</param>
        </member>
        <member name="M:aspNetMime.DNSBlackList.IsListed(System.String)">
            <summary>
            Checks to see if any of the suspect IP Addresses are listed with the DNSbl.
            </summary>
            <example>
            	<code lang="C#">
            //create a DNSbl object that interacts with sorbs.net
            DNSBlackList dnsbl = new DNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
            bool isSpam = dnsbl.IsListed( "66.249.110.24,66.249.110.25,66.249.110.26,66.249.110.27" );
             
            Console.WriteLine( "dnsbl considers the message as spam: {0}", isSpam );
             
            Console.WriteLine( "Response from dnsbl: {0}", dnsbl.Response );
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            'create a DNSbl object that interacts with sorbs.net
            Dim dnsbl As New DNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
            Dim isSpam As Boolean = dnsbl.IsListed("66.249.110.24,66.249.110.25,66.249.110.26,66.249.110.27")
             
            Console.WriteLine("dnsbl considers the message as spam: {0}", isSpam)
             
            Console.WriteLine("Response from dnsbl: {0}", dnsbl.Response)
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
            <param name="suspectIPAddresses">IP Addresses suspected of being a source of spam.</param>
        </member>
        <member name="M:aspNetMime.DNSBlackList.BeginIsListed(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Used for asynchronous IsListed completion.
            </summary>
            <returns>An IAsyncResult instance that references the asynchronous request.</returns>
            <example>
            	<code lang="C#">
            void Main(string[] args)
            {
             
                //create a DNSbl object that interacts with sorbs.net
                DNSBlackList dnsbl = new DNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
                dnsbl.BeginIsListed( "66.249.110.24,  66.249.110.25,  66.249.110.26,   66.249.110.27", new AsyncCallback( MyCallback ), dnsbl );
             
                //simulate doing some work
                Thread.Sleep( 5000 );
             
                Console.WriteLine( "done" );
                Console.ReadLine();
            }
             
             
            public void MyCallback( IAsyncResult result )
            {
                DNSBlackList dnsbl = (DNSBlackList)result.AsyncState;
                bool answer = dnsbl.EndIsListed( result); 
             
                Console.WriteLine( "Messaage marked as spam: {0}", answer );
                Console.WriteLine( "The response from the server was: {0}", dnsbl.Response );
            }
                </code>
            	<code lang="VB">
            Public Sub Main(ByVal args() As String)
             
                 'create a DNSbl object that interacts with sorbs.net
                 Dim dnsbl As New DNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
                 dnsbl.BeginIsListed("66.249.110.24,  66.249.110.25,  66.249.110.26,   66.249.110.27", AddressOf MyCallback, dnsbl)
             
                 'simulate doing some work
                 Thread.Sleep(5000)
             
                 Console.WriteLine("done")
                 Console.ReadLine()
             End Sub 'Main
             
             Public Sub MyCallback(ByVal result As IAsyncResult)
                 Dim dnsbl As DNSBlackList = CType(result.AsyncState, DNSBlackList)
                 Dim answer As Boolean = dnsbl.EndIsListed(result)
             
                 Console.WriteLine("Messaage marked as spam: {0}", answer)
                 Console.WriteLine("The response from the server was: {0}", dnsbl.Response)
             End Sub
                </code>
            </example>
            <param name="suspectIPAddresses">IP Addresses suspected of being a source of spam.</param>
            <param name="callback">The async callback.</param>
            <param name="dnsBlackList">The current DNSBlackList object</param>
        </member>
        <member name="M:aspNetMime.DNSBlackList.EndIsListed(System.IAsyncResult)">
            <summary>
            Ends an asynchronous IsListed.
            </summary>
            <returns>The results</returns>
            <example>
            	<code lang="C#">
            void Main(string[] args)
            {
             
                //create a DNSbl object that interacts with sorbs.net
                DNSBlackList dnsbl = new DNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
                dnsbl.BeginIsListed( "66.249.110.24,  66.249.110.25,  66.249.110.26,   66.249.110.27", new AsyncCallback( MyCallback ), dnsbl );
             
                //simulate doing some work
                Thread.Sleep( 5000 );
             
                Console.WriteLine( "done" );
                Console.ReadLine();
            }
             
             
            public void MyCallback( IAsyncResult result )
            {
                DNSBlackList dnsbl = (DNSBlackList)result.AsyncState;
                bool answer = dnsbl.EndIsListed( result); 
             
                Console.WriteLine( "Messaage marked as spam: {0}", answer );
                Console.WriteLine( "The response from the server was: {0}", dnsbl.Response );
            }
                </code>
            	<code lang="VB">
            Public Sub Main(ByVal args() As String)
             
                 'create a DNSbl object that interacts with sorbs.net
                 Dim dnsbl As New DNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
                 dnsbl.BeginIsListed("66.249.110.24,  66.249.110.25,  66.249.110.26,   66.249.110.27", AddressOf MyCallback, dnsbl)
             
                 'simulate doing some work
                 Thread.Sleep(5000)
             
                 Console.WriteLine("done")
                 Console.ReadLine()
             End Sub 'Main
             
             Public Sub MyCallback(ByVal result As IAsyncResult)
                 Dim dnsbl As DNSBlackList = CType(result.AsyncState, DNSBlackList)
                 Dim answer As Boolean = dnsbl.EndIsListed(result)
             
                 Console.WriteLine("Messaage marked as spam: {0}", answer)
                 Console.WriteLine("The response from the server was: {0}", dnsbl.Response)
             End Sub
                </code>
            </example>
            <param name="result">The pending IsListed result object.</param>
        </member>
        <member name="P:aspNetMime.DNSBlackList.Name">
            <summary>
            This name of this DNSBlackList instance. This value is not used to query the DNS server, but rather to just label this instance of the DNSBlackList class.
            To set the DNS Domain name, use the Domain property.
            </summary>
            <example>
            <code lang="C#">
            void CheckerDemo()
            {
            
            	BlackListChecker checker = new BlackListChecker();
            	//add a few DNSbl servers
            	DNSBlackList bl1 = new DNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2" );
            	bl1.Name = "spamhaus";
            	checker.AddDNSBlackList( bl1 );
            
            
            	DNSBlackList bl2 = new DNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            	bl2.Name = "sorbs";
            	checker.AddDNSBlackList( bl2 );
            
            	//load an email from the filesystem
            	checker.LoadFile( "c:\\temp\\sample.eml" );
            
            	//check all of the lists
            	checker.LookupBehavior = DNSblLookupBehavior.CheckAll;
            
            	checker.BeforeLookup += new BeforeLookupEventHandler( BeforeLookup );
            
            	bool result = checker.IsBlackListed();
            	Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            	//to see what server marked the message as spam, loop through the DNSBlackList servers
            	foreach( DNSBlackList server in checker.DNSBlackLists )
            	{
            		Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            	}
            
            
            	Console.WriteLine( "done" );
            	Console.ReadLine();
            
            }
            
            private void BeforeLookup( object sender, BeforeLookupEventArgs e )
            {
            	//if we wanted to change any properties, they could be done here
            	//...
            	//...
            
            	//if we wanted to cancel this lookup, set
            	// e.Cancel = true
            
            	Console.WriteLine( "BeforeLookup called for DNSBlackList: {0}", e.DNSBlackList.Name );
            }
            
            private void AfterLookup( object sender, LookupEventArgs e )
            {
            	//here we can check properties after the lookup
            
            	Console.WriteLine( "Afterlookup called." );
            
            	Console.WriteLine( "Results for :{0}", e.DNSBlackList.Name );
            	Console.WriteLine( e.DNSBlackList.FoundListed );
            	//see if an exception occurred
            	if( e.DNSBlackList.LookupException != null )
            	{
            		Console.WriteLine( e.DNSBlackList.LookupException );
            	}
            
            }
            
            </code>
            <code lang="VB.NET">
            
            Sub CheckerDemo()
               
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               Dim bl1 As New DNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               bl1.Name = "spamhaus"
               checker.AddDNSBlackList(bl1)
               
               
               Dim bl2 As New DNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               bl2.Name = "sorbs"
               checker.AddDNSBlackList(bl2)
               
               'load an email from the filesystem
               checker.LoadFile("c:\temp\sample.eml")
               
               'check all of the lists
               checker.LookupBehavior = DNSblLookupBehavior.CheckAll
               
               AddHandler checker.BeforeLookup, AddressOf BeforeLookup
               
               Dim result As Boolean = checker.IsBlackListed()
               Console.WriteLine("Messaage marked as spam: {0}", result)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'CheckerDemo
             
            
            Private Sub BeforeLookup(sender As Object, e As BeforeLookupEventArgs)
               'if we wanted to change any properties, they could be done here
               '...
               '...
               'if we wanted to cancel this lookup, set
               ' e.Cancel = true
               Console.WriteLine("BeforeLookup called for DNSBlackList: {0}", e.DNSBlackList.Name)
            End Sub 'BeforeLookup
            
            
            Private Sub AfterLookup(sender As Object, e As LookupEventArgs)
               'here we can check properties after the lookup
               Console.WriteLine("Afterlookup called.")
               
               Console.WriteLine("Results for :{0}", e.DNSBlackList.Name)
               Console.WriteLine(e.DNSBlackList.FoundListed)
               'see if an exception occurred
               If Not (e.DNSBlackList.LookupException Is Nothing) Then
                  Console.WriteLine(e.DNSBlackList.LookupException)
               End If
            End Sub 'AfterLookup 
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.DNSBlackList.ResponseCodes">
            <summary>
            The possible response codes from the DNSbl service.
            </summary>
            <example>
            	<code lang="C#">
            //create a DNSbl object that interacts with sorbs.net
            DNSBlackList dnsbl = new DNSBlackList();
            dnsbl.Domain = "dnsbl.sorbs.net";
            dnsbl.Responsecodes = new string[]{ "127.0.0.2", "127.0.0.3", "127.0.0.4", "127.0.0.5", "127.0.0.6", "127.0.0.7", "127.0.0.8", "127.0.0.9", "127.0.0.10", "127.0.0.11", "127.0.0.12" };
             
            bool isSpam = dnsbl.IsListed( "66.249.110.24,  66.249.110.25,  66.249.110.26,   66.249.110.27" );
             
            Console.WriteLine( "dnsbl considers the message as spam: {0}", isSpam );
             
            Console.WriteLine( "Response from dnsbl: {0}", dnsbl.Response );
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            'create a DNSbl object that interacts with sorbs.net
            Dim dnsbl As New DNSBlackList()
            dnsbl.Domain = "dnsbl.sorbs.net"
            dnsbl.Responsecodes = New String() {"127.0.0.2", "127.0.0.3", "127.0.0.4", "127.0.0.5", "127.0.0.6", "127.0.0.7", "127.0.0.8", "127.0.0.9", "127.0.0.10", "127.0.0.11", "127.0.0.12"}
             
            Dim isSpam As Boolean = dnsbl.IsListed("66.249.110.24,  66.249.110.25,  66.249.110.26,   66.249.110.27")
             
            Console.WriteLine("dnsbl considers the message as spam: {0}", isSpam)
             
            Console.WriteLine("Response from dnsbl: {0}", dnsbl.Response)
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetMime.DNSBlackList.Domain">
            <summary>The DNSBlackList domain lookup zone.</summary>
            <example>
            	<code lang="C#">
            //create a DNSbl object that interacts with sorbs.net
            DNSBlackList dnsbl = new DNSBlackList();
            dnsbl.Domain = "dnsbl.sorbs.net";
            dnsbl.Responsecodes = new string[]{ "127.0.0.2", "127.0.0.3", "127.0.0.4", "127.0.0.5", "127.0.0.6", "127.0.0.7", "127.0.0.8", "127.0.0.9", "127.0.0.10", "127.0.0.11", "127.0.0.12" };
             
            bool isSpam = dnsbl.IsListed( "66.249.110.24,  66.249.110.25,  66.249.110.26,   66.249.110.27" );
             
            Console.WriteLine( "dnsbl considers the message as spam: {0}", isSpam );
             
            Console.WriteLine( "Response from dnsbl: {0}", dnsbl.Response );
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            'create a DNSbl object that interacts with sorbs.net
            Dim dnsbl As New DNSBlackList()
            dnsbl.Domain = "dnsbl.sorbs.net"
            dnsbl.Responsecodes = New String() {"127.0.0.2", "127.0.0.3", "127.0.0.4", "127.0.0.5", "127.0.0.6", "127.0.0.7", "127.0.0.8", "127.0.0.9", "127.0.0.10", "127.0.0.11", "127.0.0.12"}
             
            Dim isSpam As Boolean = dnsbl.IsListed("66.249.110.24,  66.249.110.25,  66.249.110.26,   66.249.110.27")
             
            Console.WriteLine("dnsbl considers the message as spam: {0}", isSpam)
             
            Console.WriteLine("Response from dnsbl: {0}", dnsbl.Response)
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetMime.DNSBlackList.FoundListed">
            <summary>
            The result of IsListed() as a property.
            </summary>
            <example>
            <code lang="C#">
            void CheckerDemo()
            {
            
            	BlackListChecker checker = new BlackListChecker();
            	//add a few DNSbl servers
            	DNSBlackList bl1 = new DNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2" );
            	bl1.Name = "spamhaus";
            	checker.AddDNSBlackList( bl1 );
            
            
            	DNSBlackList bl2 = new DNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            	bl2.Name = "sorbs";
            	checker.AddDNSBlackList( bl2 );
            
            	//load an email from the filesystem
            	checker.LoadFile( "c:\\temp\\sample.eml" );
            
            	//check all of the lists
            	checker.LookupBehavior = DNSblLookupBehavior.CheckAll;
            
            	checker.BeforeLookup += new BeforeLookupEventHandler( BeforeLookup );
            
            	bool result = checker.IsBlackListed();
            	Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            	//to see what server marked the message as spam, loop through the DNSBlackList servers
            	foreach( DNSBlackList server in checker.DNSBlackLists )
            	{
            		Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            	}
            
            
            	Console.WriteLine( "done" );
            	Console.ReadLine();
            
            }
            
            private void BeforeLookup( object sender, BeforeLookupEventArgs e )
            {
            	//if we wanted to change any properties, they could be done here
            	//...
            	//...
            
            	//if we wanted to cancel this lookup, set
            	// e.Cancel = true
            
            	Console.WriteLine( "BeforeLookup called for DNSBlackList: {0}", e.DNSBlackList.Name );
            }
            
            private void AfterLookup( object sender, LookupEventArgs e )
            {
            	//here we can check properties after the lookup
            
            	Console.WriteLine( "Afterlookup called." );
            
            	Console.WriteLine( "Results for :{0}", e.DNSBlackList.Name );
            	Console.WriteLine( e.DNSBlackList.FoundListed );
            	//see if an exception occurred
            	if( e.DNSBlackList.LookupException != null )
            	{
            		Console.WriteLine( e.DNSBlackList.LookupException );
            	}
            
            }
            
            </code>
            <code lang="VB.NET">
            
            Sub CheckerDemo()
               
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               Dim bl1 As New DNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               bl1.Name = "spamhaus"
               checker.AddDNSBlackList(bl1)
               
               
               Dim bl2 As New DNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               bl2.Name = "sorbs"
               checker.AddDNSBlackList(bl2)
               
               'load an email from the filesystem
               checker.LoadFile("c:\temp\sample.eml")
               
               'check all of the lists
               checker.LookupBehavior = DNSblLookupBehavior.CheckAll
               
               AddHandler checker.BeforeLookup, AddressOf BeforeLookup
               
               Dim result As Boolean = checker.IsBlackListed()
               Console.WriteLine("Messaage marked as spam: {0}", result)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'CheckerDemo
             
            
            Private Sub BeforeLookup(sender As Object, e As BeforeLookupEventArgs)
               'if we wanted to change any properties, they could be done here
               '...
               '...
               'if we wanted to cancel this lookup, set
               ' e.Cancel = true
               Console.WriteLine("BeforeLookup called for DNSBlackList: {0}", e.DNSBlackList.Name)
            End Sub 'BeforeLookup
            
            
            Private Sub AfterLookup(sender As Object, e As LookupEventArgs)
               'here we can check properties after the lookup
               Console.WriteLine("Afterlookup called.")
               
               Console.WriteLine("Results for :{0}", e.DNSBlackList.Name)
               Console.WriteLine(e.DNSBlackList.FoundListed)
               'see if an exception occurred
               If Not (e.DNSBlackList.LookupException Is Nothing) Then
                  Console.WriteLine(e.DNSBlackList.LookupException)
               End If
            End Sub 'AfterLookup 
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.DNSBlackList.LookupException">
            <summary>
            If any exception occurs during DNS resolution of DNSbl lookup, it is populated here for reference.
            </summary>
            <example>
            <code lang="C#">
            void CheckerDemo()
            {
            
            	BlackListChecker checker = new BlackListChecker();
            	//add a few DNSbl servers
            	DNSBlackList bl1 = new DNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2" );
            	bl1.Name = "spamhaus";
            	checker.AddDNSBlackList( bl1 );
            
            
            	DNSBlackList bl2 = new DNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            	bl2.Name = "sorbs";
            	checker.AddDNSBlackList( bl2 );
            
            	//load an email from the filesystem
            	checker.LoadFile( "c:\\temp\\sample.eml" );
            
            	//check all of the lists
            	checker.LookupBehavior = DNSblLookupBehavior.CheckAll;
            
            	checker.BeforeLookup += new BeforeLookupEventHandler( BeforeLookup );
            
            	bool result = checker.IsBlackListed();
            	Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            	//to see what server marked the message as spam, loop through the DNSBlackList servers
            	foreach( DNSBlackList server in checker.DNSBlackLists )
            	{
            		Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            	}
            
            
            	Console.WriteLine( "done" );
            	Console.ReadLine();
            
            }
            
            private void BeforeLookup( object sender, BeforeLookupEventArgs e )
            {
            	//if we wanted to change any properties, they could be done here
            	//...
            	//...
            
            	//if we wanted to cancel this lookup, set
            	// e.Cancel = true
            
            	Console.WriteLine( "BeforeLookup called for DNSBlackList: {0}", e.DNSBlackList.Name );
            }
            
            private void AfterLookup( object sender, LookupEventArgs e )
            {
            	//here we can check properties after the lookup
            
            	Console.WriteLine( "Afterlookup called." );
            
            	Console.WriteLine( "Results for :{0}", e.DNSBlackList.Name );
            	Console.WriteLine( e.DNSBlackList.FoundListed );
            	//see if an exception occurred
            	if( e.DNSBlackList.LookupException != null )
            	{
            		Console.WriteLine( e.DNSBlackList.LookupException );
            	}
            
            }
            
            </code>
            <code lang="VB.NET">
            
            Sub CheckerDemo()
               
               Dim checker As New BlackListChecker()
               'add a few DNSbl servers
               Dim bl1 As New DNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
               bl1.Name = "spamhaus"
               checker.AddDNSBlackList(bl1)
               
               
               Dim bl2 As New DNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
               bl2.Name = "sorbs"
               checker.AddDNSBlackList(bl2)
               
               'load an email from the filesystem
               checker.LoadFile("c:\temp\sample.eml")
               
               'check all of the lists
               checker.LookupBehavior = DNSblLookupBehavior.CheckAll
               
               AddHandler checker.BeforeLookup, AddressOf BeforeLookup
               
               Dim result As Boolean = checker.IsBlackListed()
               Console.WriteLine("Messaage marked as spam: {0}", result)
               
               'to see what server marked the message as spam, loop through the DNSBlackList servers
               Dim server As DNSBlackList
               For Each server In  checker.DNSBlackLists
                  Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
               Next server
               
               
               Console.WriteLine("done")
               Console.ReadLine()
            End Sub 'CheckerDemo
             
            
            Private Sub BeforeLookup(sender As Object, e As BeforeLookupEventArgs)
               'if we wanted to change any properties, they could be done here
               '...
               '...
               'if we wanted to cancel this lookup, set
               ' e.Cancel = true
               Console.WriteLine("BeforeLookup called for DNSBlackList: {0}", e.DNSBlackList.Name)
            End Sub 'BeforeLookup
            
            
            Private Sub AfterLookup(sender As Object, e As LookupEventArgs)
               'here we can check properties after the lookup
               Console.WriteLine("Afterlookup called.")
               
               Console.WriteLine("Results for :{0}", e.DNSBlackList.Name)
               Console.WriteLine(e.DNSBlackList.FoundListed)
               'see if an exception occurred
               If Not (e.DNSBlackList.LookupException Is Nothing) Then
                  Console.WriteLine(e.DNSBlackList.LookupException)
               End If
            End Sub 'AfterLookup 
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.DNSBlackList.Response">
            <summary>
            The response recieved from the DNSbl service.
            </summary>
            <example>
            	<code lang="C#">
            //create a DNSbl object that interacts with sorbs.net
            DNSBlackList dnsbl = new DNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
            bool isSpam = dnsbl.IsListed( "66.249.110.24,66.249.110.25,66.249.110.26,66.249.110.27" );
             
            Console.WriteLine( "dnsbl considers the message as spam: {0}", isSpam );
             
            Console.WriteLine( "Response from dnsbl: {0}", dnsbl.Response );
             
            Console.WriteLine( "done" );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            'create a DNSbl object that interacts with sorbs.net
            Dim dnsbl As New DNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
            Dim isSpam As Boolean = dnsbl.IsListed("66.249.110.24,66.249.110.25,66.249.110.26,66.249.110.27")
             
            Console.WriteLine("dnsbl considers the message as spam: {0}", isSpam)
             
            Console.WriteLine("Response from dnsbl: {0}", dnsbl.Response)
             
            Console.WriteLine("done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetMime.DNSBlackList.Tag">
            <summary>
            A custom object that can be used to differentiate  instances in a multi-threaded application. This property is not used internally.
            </summary>
        </member>
        <member name="P:aspNetMime.DNSBlackList.DNSblResults">
            <summary>
            A DataSet of DNSbl results, cached for future lookups.
            </summary>
        </member>
        <member name="P:aspNetMime.DNSBlackList.RecordExpiration">
            <summary>
            The amount of time to keep the records from expiring in the DNSblResults DataSet.
            </summary>
        </member>
        <member name="T:aspNetMime.DNSblLookupBehavior">
            <summary>
            Behavior used for blacklist checking.
            </summary>
            <remarks>
            	<para>The DNSblLookupBehavior can be used to control how the BlackListChecker
                object checks DNSbl servers. If the LookupBehavior is set to CheckAll, all of the
                DNSbl servers will be checked, regardless of the response received. This can be
                used for advanced spam checking, to statistically check how many lists have black
                listed a particular IP.</para>
            	<para>However, by setting the LookupBehavior to FirstLocated, the DNSbl looks will
                be stopped, as soon as a single DNSbl server reports a positive response. This can
                greatly reduce the amount of time needed to check a message.</para>
            </remarks>
        </member>
        <member name="F:aspNetMime.DNSblLookupBehavior.CheckAll">
            <summary>
            Check all DNSbl servers.
            </summary>
            <example>
            <code lang="C#">
            BlackListChecker checker = new BlackListChecker();
            //add a few DNSbl servers
            checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            //load an email from the filesystem
            checker.LoadFile( "c:\\temp\\sample.eml" );
            
            //check all of the lists
            checker.LookupBehavior = DNSblLookupBehavior.CheckAll;
            
            
            bool result = checker.IsBlackListed();
            Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            //to see what server marked the message as spam, loop through the DNSBlackList servers
            foreach( DNSBlackList server in checker.DNSBlackLists )
            {
            	Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            }
            </code>
            <code lang="VB.NET">
            Dim checker As New BlackListChecker()
            'add a few DNSbl servers
            checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
            checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
            
            'load an email from the filesystem
            checker.LoadFile("c:\temp\sample.eml")
            
            'check all of the lists
            checker.LookupBehavior = DNSblLookupBehavior.CheckAll
            
            
            Dim result As Boolean = checker.IsBlackListed()
            Console.WriteLine("Messaage marked as spam: {0}", result)
            
            'to see what server marked the message as spam, loop through the DNSBlackList servers
            Dim server As DNSBlackList
            For Each server In  checker.DNSBlackLists
               Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
            Next server
            
            </code>
            </example>
        </member>
        <member name="F:aspNetMime.DNSblLookupBehavior.FirstLocated">
            <summary>
            Stops checking DNSbl servers when the first DNSbl server marks a message as spam.
            </summary>
            <example>
            <code lang="C#">
            BlackListChecker checker = new BlackListChecker();
            //add a few DNSbl servers
            checker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            checker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
            
            //load an email from the filesystem
            checker.LoadFile( "c:\\temp\\sample.eml" );
            
            //check all of the lists
            checker.LookupBehavior = DNSblLookupBehavior.FirstLocated;
            
            
            bool result = checker.IsBlackListed();
            Console.WriteLine( "Messaage marked as spam: {0}", result );
            
            //to see what server marked the message as spam, loop through the DNSBlackList servers
            foreach( DNSBlackList server in checker.DNSBlackLists )
            {
            	Console.WriteLine( "Response from {0}:{1}", server.Domain, server.Response );
            }
            </code>
            <code lang="VB.NET">
            Dim checker As New BlackListChecker()
            'add a few DNSbl servers
            checker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
            checker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
            
            'load an email from the filesystem
            checker.LoadFile("c:\temp\sample.eml")
            
            'check all of the lists
            checker.LookupBehavior = DNSblLookupBehavior.FirstLocated
            
            
            Dim result As Boolean = checker.IsBlackListed()
            Console.WriteLine("Messaage marked as spam: {0}", result)
            
            'to see what server marked the message as spam, loop through the DNSBlackList servers
            Dim server As DNSBlackList
            For Each server In  checker.DNSBlackLists
               Console.WriteLine("Response from {0}:{1}", server.Domain, server.Response)
            Next server
            
            </code>
            </example>
        </member>
        <member name="T:aspNetMime.DNSBlackListCollection">
            <summary>
            A Collection for managing multiple DNSBlackList objects.
            </summary>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.#ctor">
            <summary>
              Empty constructor. 
              This will initialize the collection to 5 items.
            </summary>		
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.#ctor(System.Int32)">
            <summary>
              Initializes the container to hold the specified number of items.
            </summary>
            <param name="initialCount">
              The initial size of the collection. 
            </param>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.Contains(aspNetMime.DNSBlackList)">
            <summary>
              Attempts to locate the DNSBlackList within the collection.
            </summary>
            <param name="dnsBlackList">
              DNSBlackList to locate.
            </param>
            <returns>
              True if the DNSBlackList exists in the collection.
            </returns>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.CopyTo(System.Array,System.Int32)">
            <summary>
              Copies the items from this collection into the array at the specified index.
            </summary>
            <param name="array">
              Array to copy the items to.
            </param>
            <param name="index">
              Index of position within the array to being copying at.
            </param>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.CopyTo(aspNetMime.DNSBlackListCollection)">
            <summary>
              Copies all the DNSBlackLists from this collection to another DNSBlackList Collection.
            </summary>
            <param name="dnsBlackLists">
              Collection to copy to.
            </param>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.Add(aspNetMime.DNSBlackList)">
            <summary>
              Adds a dnsBlackList to the collection.
            </summary>
            <param name="dnsBlackList">
              DNSBlackList to add to the collection.
            </param>
            <returns>
              Index at which the DNSBlackList was added.
            </returns>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.System#Collections#IList#Add(System.Object)">
            <summary>
              For IList implementation only. Do Not Use.
            </summary>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.Clear">
            <summary>
              Clears the collection.
            </summary>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.IndexOf(aspNetMime.DNSBlackList)">
            <summary>
              Returns the index for the DNSBlackList within the collection.
            </summary>
            <param name="dnsBlackList">
              DNSBlackList to locate within the collection.
            </param>
            <returns>
              Index of the DNSBlackList.
            </returns>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.Insert(System.Int32,aspNetMime.DNSBlackList)">
            <summary>
              Inserts the DNSBlackList into the collection at the specified position.
            </summary>
            <param name="index">
              Position at which to insert the dnsBlackList.
            </param>
            <param name="dnsBlackList">
              DNSBlackList to insert.
            </param>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.Remove(aspNetMime.DNSBlackList)">
            <summary>
              Removes the first occurrence of a specific DNSBlackList from the Collection.
            </summary>
            <param name="dnsBlackList">
              The DNSBlackList to remove.
            </param>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.RemoveAt(System.Int32)">
            <summary>
              Removes the element at the specified index of the Collection.
            </summary>
            <param name="index">
              Index of the element to remove.
            </param>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.GetEnumerator">
            <summary>
              Returns an enumerator that can iterate through the Collection.
            </summary>
            <returns>
              An IEnumerator for the entire Collection.
            </returns>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.GetEnumerator(System.Int32,System.Int32)">
            <summary>
              Returns an enumerator that can iterate through the Collection.
            </summary>
            <param name="index">
              The zero-based starting index of the Collection section that the enumerator should refer to. 
            </param>
            <param name="count">
              The number of elements in the Collection section that the enumerator should refer to. 
            </param>
            <returns>
              An IEnumerator for the specified section of the Collection.
            </returns>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.Remove(System.String)">
            <summary>
              Removes all DNSBlackLists with the specified Name.
            </summary>
            <param name="domain">
              domain of the DNSBlackList to remove.
            </param>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.Contains(System.String)">
            <summary>
              Returns true if the specified dnsBlackList is contained within the collection.
            </summary>
            <param name="domain">
              Domain of the dnsBlackList to look for in the collection.
            </param>
            <returns>
              True if the dnsBlackList is contained in the collection.
            </returns>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.IndexOf(System.String)">
            <summary>
              Returns the index for the DNSBlackList with the given name within the collection.
            </summary>
            <param name="domain">
              Domain  of the DNSBlackList to locate within the collection.
            </param>
            <returns>
              Index of the DNSBlackList with the given Name.
            </returns>
        </member>
        <member name="M:aspNetMime.DNSBlackListCollection.ToArray">
            <summary>
            Converts the collection to an array of DNSBlackList objects.
            </summary>
            <returns></returns>
        </member>
        <member name="P:aspNetMime.DNSBlackListCollection.Item(System.Int32)">
            <summary>
              Gets or Sets items in this collection.
            </summary>
        </member>
        <member name="P:aspNetMime.DNSBlackListCollection.System#Collections#IList#$Item$(System.Int32)">
            <summary>
              For IList implementation purposes only.
            </summary>
        </member>
        <member name="P:aspNetMime.DNSBlackListCollection.Count">
            <summary>
              Returns the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:aspNetMime.DNSBlackListCollection.IsSynchronized">
            <summary>
              Gets a value indicating whether access to the Collection is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:aspNetMime.DNSBlackListCollection.SyncRoot">
            <summary>
              Gets an object that can be used to synchronize access to the Collection.
            </summary>
        </member>
        <member name="P:aspNetMime.DNSBlackListCollection.IsFixedSize">
            <summary>
              Gets a value indicating whether the collection is a fixed size.
            </summary>
        </member>
        <member name="P:aspNetMime.DNSBlackListCollection.IsReadOnly">
            <summary>
              Gets a value indicating whether the Collection is read-only.
            </summary>
        </member>
        <member name="P:aspNetMime.DNSBlackListCollection.Item(System.String)">
            <summary>
              Returns the dnsBlackList with the specified name.
            </summary>
        </member>
        <member name="T:aspNetMime.MessageProcessor">
            <summary>Processes a directory or set of messages.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path, "*.eml", true );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.MessageProcessor.OnParseMessage(aspNetMime.ParseMessageEventArgs)">
            <summary>
            Used for the ParseMessage event.
            </summary>
            <param name="e">ParseMessageEventArgs raised when a message is parsed</param>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path, "*.eml", true );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.MessageProcessor.#ctor">
            <summary>Creates an instance of the MessageProcessor class</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path, "*.eml", true );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.MessageProcessor.AddToReport(aspNetMime.MimeMessage)">
            <summary>Adds a MimeMessage to the report.</summary>
            <param name="message">Message to be added to the report.</param>
        </member>
        <member name="M:aspNetMime.MessageProcessor.ProcessDirectory(System.String)">
            <summary>Processes a directory of Mime formatted messages.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path  );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
            <param name="path">Path to the directory.</param>
        </member>
        <member name="M:aspNetMime.MessageProcessor.ProcessDirectory(System.String,System.Boolean)">
            <summary>Processes a directory of Mime formatted messages.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path,  true );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path,  True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
            <param name="path">Path to the directory</param>
            <param name="recurseDirectory">Recurse any subdirectories.</param>
        </member>
        <member name="M:aspNetMime.MessageProcessor.ProcessDirectory(System.String,System.String)">
            <summary>Processes a directory of Mime formatted messages.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path, "*.eml"  );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml" )
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
            <param name="path">Path to the directory.</param>
            <param name="searchPattern">Search pattern to find files.</param>
        </member>
        <member name="M:aspNetMime.MessageProcessor.ProcessDirectory(System.String,System.String,System.Boolean)">
            <summary>Processes a directory of Mime formatted messages.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path, "*.eml", true );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
            <param name="path">Path to the directory.</param>
            <param name="searchPattern">Search pattern to select files.</param>
            <param name="recurseDirectory">Recurse any subdirectories</param>
        </member>
        <member name="M:aspNetMime.MessageProcessor.ProcessFiles(System.String[])">
            <summary>
            Process an array of MimeMessage files.
            </summary>
            <param name="files">Array of files.</param>
            <example>
            <code lang="C#">
            void MimeProcessor()
            {
            	//create the processing engine
            	MessageProcessor  engine  = new MessageProcessor();
            	engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
            
            
            	//create a new report, and keep in memory
            	MimeReport report = new MimeReport( true, true);
            	engine.Report = report;
            
            	//process the files
            	string[] files = FileList(); //a method that returns a list of filenames to process
            	engine.ProcessFiles( files );
            
            	//output the report as a XML document
            	report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
            
            	Console.WriteLine( "done.");
            	Console.ReadLine();
            }
            
            
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
            	Console.WriteLine( "----------------" );
            
            	
            	//check for any exceptions
            	if( e.ProcessingException != null )
            	{
            		Console.WriteLine( e.ProcessingException.ToString() );
            
            		//don't throw the exception
            		e.ThrowException = false;
            	}
            
            	//access the MimeMessage subject
            	if( e.MimeMessage.Subject != null )
            	{
            		Console.WriteLine( e.MimeMessage.Subject.Value );
            	}
            
            
            }
            </code>
            <code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the files
               Dim files As String() = FileList() 'a method that returns a list of filenames to process
               engine.ProcessFiles(files)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
            
            
            
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage 
            
            
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MessageProcessor.ProcessMBXFile(System.String)">
            <summary>
            Processes a MBX (mailbox) file of messages.
            </summary>
            <param name="mailboxPath">Path to the mbx file.</param>
            <example>
            <code lang="C#">
            void MimeProcessor()
            {
            	//create the processing engine
            	MessageProcessor  engine  = new MessageProcessor();
            	engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
            
            
            	//create a new report, and keep in memory
            	MimeReport report = new MimeReport( true, true);
            	engine.Report = report;
            
            	string mbxPath = "c:\\temp\\mimefiles\\inbox.mbx";
            	engine.ProcessMBXFile( mbxPath );
            
            	//output the report as a XML document
            	report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
            
            	Console.WriteLine( "done.");
            	Console.ReadLine();
            }
            
            
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
            	Console.WriteLine( "----------------" );
            
            	
            	//check for any exceptions
            	if( e.ProcessingException != null )
            	{
            		Console.WriteLine( e.ProcessingException.ToString() );
            
            		//don't throw the exception
            		e.ThrowException = false;
            	}
            
            	//access the MimeMessage subject
            	if( e.MimeMessage.Subject != null )
            	{
            		Console.WriteLine( e.MimeMessage.Subject.Value );
            	}
            
            
            }
            
            </code>
            <code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               Dim mbxPath As String = "c:\temp\mimefiles\inbox.mbx"
               engine.ProcessMBXFile(mbxPath )
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
            
            
            
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MessageProcessor.ProcessMBXFile(System.String,System.Text.Encoding)">
            <summary>
            Processes a MBX (mailbox) file of messages.
            </summary>
            <param name="encoding">Encoding used to read the file.</param>
            <param name="mailboxPath">Path to the mbx file.</param>
            <example>
            <code lang="C#">
            void MimeProcessor()
            {
            	//create the processing engine
            	MessageProcessor  engine  = new MessageProcessor();
            	engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
            
            
            	//create a new report, and keep in memory
            	MimeReport report = new MimeReport( true, true);
            	engine.Report = report;
            
            	string mbxPath = "c:\\temp\\mimefiles\\inbox.mbx";
            	engine.ProcessMBXFile( mbxPath, Encoding.UTF8 );
            
            	//output the report as a XML document
            	report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
            
            	Console.WriteLine( "done.");
            	Console.ReadLine();
            }
            
            
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
            	Console.WriteLine( "----------------" );
            
            	
            	//check for any exceptions
            	if( e.ProcessingException != null )
            	{
            		Console.WriteLine( e.ProcessingException.ToString() );
            
            		//don't throw the exception
            		e.ThrowException = false;
            	}
            
            	//access the MimeMessage subject
            	if( e.MimeMessage.Subject != null )
            	{
            		Console.WriteLine( e.MimeMessage.Subject.Value );
            	}
            
            
            }
            
            </code>
            <code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               Dim mbxPath As String = "c:\temp\mimefiles\inbox.mbx"
               engine.ProcessMBXFile(mbxPath, Encoding.UTF8)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
            
            
            
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MessageProcessor.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal the event handler calls issued as a result of events.
            </summary>
        </member>
        <member name="P:aspNetMime.MessageProcessor.Report">
            <summary>Report generated from processing the directory.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path, "*.eml", true );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
            <remarks>
            A report can be generated to summarize the data found in the Mime messages into a
            single document.
            </remarks>
        </member>
        <member name="P:aspNetMime.MessageProcessor.MBXDelimiter">
            <summary>
            The text that seperates messages.
            </summary>
            <example>
            <code lang="C#">
            void MimeProcessor()
            {
            	//create the processing engine
            	MessageProcessor  engine  = new MessageProcessor();
            	engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
            
            
            	//create a new report, and keep in memory
            	MimeReport report = new MimeReport( true, true);
            	engine.Report = report;
            	engine.MBXDelimiter = "from &lt;";
            	
            	string mbxPath = "c:\\temp\\mimefiles\\inbox.mbx";
            	engine.ProcessMBXFile( mbxPath, Encoding.UTF8 );
            
            	//output the report as a XML document
            	report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
            
            	Console.WriteLine( "done.");
            	Console.ReadLine();
            }
            
            
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
            	Console.WriteLine( "----------------" );
            
            	
            	//check for any exceptions
            	if( e.ProcessingException != null )
            	{
            		Console.WriteLine( e.ProcessingException.ToString() );
            
            		//don't throw the exception
            		e.ThrowException = false;
            	}
            
            	//access the MimeMessage subject
            	if( e.MimeMessage.Subject != null )
            	{
            		Console.WriteLine( e.MimeMessage.Subject.Value );
            	}
            
            
            }
            
            </code>
            <code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
            	engine.MBXDelimiter = "from &lt;"
               
               Dim mbxPath As String = "c:\temp\mimefiles\inbox.mbx"
               engine.ProcessMBXFile(mbxPath, Encoding.UTF8)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
            
            
            
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
            
            </code>
            </example>
        </member>
        <member name="E:aspNetMime.MessageProcessor.ParseMessage">
            <summary>This event is raised every time an image is parsed.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                //process the directory
                string path = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( path, "*.eml", true );
             
                //output the report as a XML document
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
                Console.WriteLine( e.Filename ); 
             
                //if we wanted to delete this file we could call
                //e.Delete()
             
                //if we wanted to cancel processing we could set
                //e.Cancel = true
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
                //copy the file to another directory
                e.Copy( "c:\\temp\\", Path.GetFileName( e.Filename ), true );
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               'process the directory
               Dim path As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(path, "*.eml", True)
               
               'output the report as a XML document
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               Console.WriteLine(e.Filename)
               
               'if we wanted to delete this file we could call
               'e.Delete()
               'if we wanted to cancel processing we could set
               'e.Cancel = true
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
               
               'copy the file to another directory
               e.Copy("c:\temp\", Path.GetFileName(e.Filename), True)
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="T:aspNetMime.MimeReport">
            <summary>A report object used to keep track of all the messages parsed.</summary>
            <remarks>
            Messages can be added individually to the MimeReport, or the report can be
            generated automatically from the MessageProcessor object.
            </remarks>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //save the report
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'save the report
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeReport.OnReportAddingRow(aspNetMime.ReportAddingRowEventArgs)">
            <summary>
            Used in conjuction with the ReportAddingRow event handler.
            </summary>
            <param name="e">ReportAddingRowEventArgs</param>
            <example>
            <code lang="C#">
            void MimeProcessor()
            {
            	//create the processing engine
            	MessageProcessor  engine  = new MessageProcessor();
            
            	//create a new report, and keep in memory
            	MimeReport report = new MimeReport( true, true ); 
            
            	//extend the report schema to include the Content-Type
            	//this can be done by creating new column on the underlying DataSet/Table
            	System.Type dataType= System.Type.GetType( "System.String" );
            	DataColumn dc = new DataColumn( "ContentType", dataType );
            
            	//add it to the underlying DataTable
            	report.BaseDataSet.Tables[ 0 ].Columns.Add( dc );
            
            	//wire up the AddingRow event handler -- in these event, set the ContentType column
            	report.ReportAddingRow += new ReportAddingRowEventHandler( OnBeforeAddMimeMessageRow );
            	
            
            	//set the report on the engine
            	engine.Report = report;
            	
            	string dir = "C:\\temp\\MimeFiles\\";
            	engine.ProcessDirectory( dir );
            
            	engine.Report.SaveToFile( "c:\\report.csv" );
            
            	Console.WriteLine( "done.");
            	Console.ReadLine();
            }
            
            private void OnBeforeAddMimeMessageRow( object sender, ReportAddingRowEventArgs e)
            {
            	DataRow dr = e.DataRow;
            
            	//populate our custom column, named "ContentType", with the value of the content-type of the MimeMessage
            	if( ( e.MimeMessage != null ) &amp;&amp; ( e.MimeMessage.ContentType != null ) )
            	{
            		dr[ "ContentType" ] = e.MimeMessage.ContentType.Value;
            	}
            	else
            		dr[ "ContentType" ] = "(no content-type set)";
            
            }
            </code>
            <code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               
               'extend the report schema to include the Content-Type
               'this can be done by creating new column on the underlying DataSet/Table
               Dim dataType As System.Type = System.Type.GetType("System.String")
               Dim dc As New DataColumn("ContentType", dataType)
               
               'add it to the underlying DataTable
               report.BaseDataSet.Tables(0).Columns.Add(dc)
               
               'wire up the AddingRow event handler -- in these event, set the ContentType column
               AddHandler report.ReportAddingRow, AddressOf OnBeforeAddMimeMessageRow
               
               
               'set the report on the engine
               engine.Report = report
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               engine.Report.SaveToFile("c:\report.csv")
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
            
            
            Private Sub OnBeforeAddMimeMessageRow(sender As Object, e As ReportAddingRowEventArgs)
               Dim dr As DataRow = e.DataRow
               
               'populate our custom column, named "ContentType", with the value of the content-type of the MimeMessage
               If Not (e.MimeMessage Is Nothing) And Not (e.MimeMessage.ContentType Is Nothing) Then
                  dr("ContentType") = e.MimeMessage.ContentType.Value
               Else
                  dr("ContentType") = "(no content-type set)"
               End If 
            End Sub 'OnBeforeAddMimeMessageRow
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeReport.#ctor">
            <summary>Creates an instance of the MimeReport</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //save the report
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'save the report
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeReport.#ctor(System.Boolean)">
            <summary>Creates an instance of the MimeReport</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true );
                engine.Report = report;
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //save the report
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True)
               engine.Report = report
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'save the report
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
            <param name="createBaseDataSet">Creates the underlying DataSet used by the MimeReport</param>
        </member>
        <member name="M:aspNetMime.MimeReport.#ctor(System.Boolean,System.Boolean)">
            <summary>Creates an instance of the MimeReport</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //save the report
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'save the report
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
            <param name="createBaseDataSet">Create the underlying DataSet used by the MimeReport</param>
            <param name="inMemoryReport">Keep the report InMemory</param>
        </member>
        <member name="M:aspNetMime.MimeReport.AddToReport(aspNetMime.MimeMessage)">
            <summary>
            Adds a MimeMessage to the report.
            </summary>
            <param name="message">Message to get added to the report</param>
            <example>
            <code lang="C#">
            //create a POP3 object from the .config file
            POP3 p = new POP3( true, false );
            
            //create a new report
            MimeReport report = new MimeReport( true, true );
            
            p.Connect();
            int messageCount = p.MessageCount();
            for( int i=0;i&lt;messageCount;i++)
            {
            	MimeMessage m = p.GetMessage( i );
            
            	//add the MimeMessage to the report
            	report.AddToReport( m );
            }
            
            p.Disconnect();
            
            //save the report
            report.SaveToFile( "c:\\report.csv", MimeReportType.ValueSeparated );
            
            </code>
            <code lang="VB.NET">
             'create a POP3 object from the .config file
            Dim p As New POP3(True, False)
            
            'create a new report
            Dim report As New MimeReport(True, True)
            
            p.Connect()
            Dim messageCount As Integer = p.MessageCount()
            Dim i As Integer
            For i = 0 To messageCount - 1
               Dim m As MimeMessage = p.GetMessage(i)
               
               'add the MimeMessage to the report
               report.AddToReport(m)
            Next i
            
            p.Disconnect()
            
            'save the report
            report.SaveToFile("c:\report.csv", MimeReportType.ValueSeparated)
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeReport.BuildDataSetSchema">
            <summary>
            Builds the schema for the first DataTable of the BaseDataSet.
            </summary>
        </member>
        <member name="M:aspNetMime.MimeReport.InitializeReportStream">
            <summary>Initializes the report stream.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport(); 
             
                //made it a Comma Seperated Value (CSV) report, with the column names
                report.Type = MimeReportType.ValueSeparated;
                report.IncludeColumnNames = true;
                report.ValueDelimiter = ",";
                report.ValueRowDelimiter = "\r\n";
                report.ValueQualifier = "\"";
                report.InitializeReportStream( "c:\\temp\\report.csv" );
                report.InMemoryReport = false; //keep memory footprint smaller
                engine.Report = report;
             
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //flush the report, for any remaining records
                engine.Report.FlushReportStream();
                engine.Report.CloseReportStream();
             
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport()
               
               'made it a Comma Seperated Value (CSV) report, with the column names
               report.Type = MimeReportType.ValueSeparated
               report.IncludeColumnNames = True
               report.ValueDelimiter = ","
               report.ValueRowDelimiter = ControlChars.Cr + ControlChars.Lf
               report.ValueQualifier = """"
               report.InitializeReportStream("c:\temp\report.csv")
               report.InMemoryReport = False 'keep memory footprint smaller
               engine.Report = report
               
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'flush the report, for any remaining records
               engine.Report.FlushReportStream()
               engine.Report.CloseReportStream()
               
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeReport.InitializeReportStream(System.Text.Encoding)">
            <summary>Initializes the report stream.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport(); 
             
                //made it a Comma Seperated Value (CSV) report, with the column names
                report.Type = MimeReportType.ValueSeparated;
                report.IncludeColumnNames = true;
                report.ValueDelimiter = ",";
                report.ValueRowDelimiter = "\r\n";
                report.ValueQualifier = "\"";
                report.InitializeReportStream( "c:\\temp\\report.csv" );
                report.InMemoryReport = false; //keep memory footprint smaller
                engine.Report = report;
             
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //flush the report, for any remaining records
                engine.Report.FlushReportStream();
                engine.Report.CloseReportStream();
             
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport()
               
               'made it a Comma Seperated Value (CSV) report, with the column names
               report.Type = MimeReportType.ValueSeparated
               report.IncludeColumnNames = True
               report.ValueDelimiter = ","
               report.ValueRowDelimiter = ControlChars.Cr + ControlChars.Lf
               report.ValueQualifier = """"
               report.InitializeReportStream("c:\temp\report.csv")
               report.InMemoryReport = False 'keep memory footprint smaller
               engine.Report = report
               
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'flush the report, for any remaining records
               engine.Report.FlushReportStream()
               engine.Report.CloseReportStream()
               
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
            <param name="encoding">Encoding used to write text.</param>
        </member>
        <member name="M:aspNetMime.MimeReport.InitializeReportStream(System.String)">
            <summary>Initializes the report stream.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport(); 
             
                //made it a Comma Seperated Value (CSV) report, with the column names
                report.Type = MimeReportType.ValueSeparated;
                report.IncludeColumnNames = true;
                report.ValueDelimiter = ",";
                report.ValueRowDelimiter = "\r\n";
                report.ValueQualifier = "\"";
                report.InitializeReportStream( "c:\\temp\\report.csv" );
                report.InMemoryReport = false; //keep memory footprint smaller
                engine.Report = report;
             
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //flush the report, for any remaining records
                engine.Report.FlushReportStream();
                engine.Report.CloseReportStream();
             
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport()
               
               'made it a Comma Seperated Value (CSV) report, with the column names
               report.Type = MimeReportType.ValueSeparated
               report.IncludeColumnNames = True
               report.ValueDelimiter = ","
               report.ValueRowDelimiter = ControlChars.Cr + ControlChars.Lf
               report.ValueQualifier = """"
               report.InitializeReportStream("c:\temp\report.csv")
               report.InMemoryReport = False 'keep memory footprint smaller
               engine.Report = report
               
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'flush the report, for any remaining records
               engine.Report.FlushReportStream()
               engine.Report.CloseReportStream()
               
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
            <param name="path">Path to the report.</param>
        </member>
        <member name="M:aspNetMime.MimeReport.InitializeReportStream(System.String,System.Text.Encoding)">
            <summary>Initializes the report stream.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport(); 
             
                //made it a Comma Seperated Value (CSV) report, with the column names
                report.Type = MimeReportType.ValueSeparated;
                report.IncludeColumnNames = true;
                report.ValueDelimiter = ",";
                report.ValueRowDelimiter = "\r\n";
                report.ValueQualifier = "\"";
                report.InitializeReportStream( "c:\\temp\\report.csv" );
                report.InMemoryReport = false; //keep memory footprint smaller
                engine.Report = report;
             
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //flush the report, for any remaining records
                engine.Report.FlushReportStream();
                engine.Report.CloseReportStream();
             
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport()
               
               'made it a Comma Seperated Value (CSV) report, with the column names
               report.Type = MimeReportType.ValueSeparated
               report.IncludeColumnNames = True
               report.ValueDelimiter = ","
               report.ValueRowDelimiter = ControlChars.Cr + ControlChars.Lf
               report.ValueQualifier = """"
               report.InitializeReportStream("c:\temp\report.csv")
               report.InMemoryReport = False 'keep memory footprint smaller
               engine.Report = report
               
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'flush the report, for any remaining records
               engine.Report.FlushReportStream()
               engine.Report.CloseReportStream()
               
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
            <param name="path">Path to the report.</param>
            <param name="encoding">Encoding used for writing text to the report.</param>
        </member>
        <member name="M:aspNetMime.MimeReport.FlushReportStream">
            <summary>Flushes any remaining data in the ReportStream to the report.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport(); 
             
                //made it a Comma Seperated Value (CSV) report, with the column names
                report.Type = MimeReportType.ValueSeparated;
                report.IncludeColumnNames = true;
                report.ValueDelimiter = ",";
                report.ValueRowDelimiter = "\r\n";
                report.ValueQualifier = "\"";
                report.InitializeReportStream( "c:\\temp\\report.csv" );
                report.InMemoryReport = false; //keep memory footprint smaller
                engine.Report = report;
             
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //flush the report, for any remaining records
                engine.Report.FlushReportStream();
                engine.Report.CloseReportStream();
             
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport()
               
               'made it a Comma Seperated Value (CSV) report, with the column names
               report.Type = MimeReportType.ValueSeparated
               report.IncludeColumnNames = True
               report.ValueDelimiter = ","
               report.ValueRowDelimiter = ControlChars.Cr + ControlChars.Lf
               report.ValueQualifier = """"
               report.InitializeReportStream("c:\temp\report.csv")
               report.InMemoryReport = False 'keep memory footprint smaller
               engine.Report = report
               
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'flush the report, for any remaining records
               engine.Report.FlushReportStream()
               engine.Report.CloseReportStream()
               
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeReport.CloseReportStream">
            <summary>Closes the report stream.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport(); 
             
                //made it a Comma Seperated Value (CSV) report, with the column names
                report.Type = MimeReportType.ValueSeparated;
                report.IncludeColumnNames = true;
                report.ValueDelimiter = ",";
                report.ValueRowDelimiter = "\r\n";
                report.ValueQualifier = "\"";
                report.InitializeReportStream( "c:\\temp\\report.csv" );
                report.InMemoryReport = false; //keep memory footprint smaller
                engine.Report = report;
             
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //flush the report, for any remaining records
                engine.Report.FlushReportStream();
                engine.Report.CloseReportStream();
             
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport()
               
               'made it a Comma Seperated Value (CSV) report, with the column names
               report.Type = MimeReportType.ValueSeparated
               report.IncludeColumnNames = True
               report.ValueDelimiter = ","
               report.ValueRowDelimiter = ControlChars.Cr + ControlChars.Lf
               report.ValueQualifier = """"
               report.InitializeReportStream("c:\temp\report.csv")
               report.InMemoryReport = False 'keep memory footprint smaller
               engine.Report = report
               
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'flush the report, for any remaining records
               engine.Report.FlushReportStream()
               engine.Report.CloseReportStream()
               
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeReport.SaveToFile(System.String)">
            <summary>Saves the InMemory report to a file.</summary>
            <remarks>
            The property 'InMemoryReport' must be true to call SaveToFile(...) or an empty
            report will result.
            </remarks>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //save the report
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'save the report
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
            <param name="path">Report path.</param>
        </member>
        <member name="M:aspNetMime.MimeReport.SaveToFile(System.String,aspNetMime.MimeReportType)">
            <summary>Saves the InMemory report to a file.</summary>
            <remarks>
            The property 'InMemoryReport' must be true to call SaveToFile(...) or an empty
            report will result.
            </remarks>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //save the report
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'save the report
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
            <param name="path">Path to the report.</param>
            <param name="type">Type of report to save.</param>
        </member>
        <member name="M:aspNetMime.MimeReport.ToString">
            <summary>Converts the report to a string.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true ); 
                engine.Report = report;
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //write out the contents of the report
                string contents = engine.Report.ToString( MimeReportType.ValueSeparated );
                Console.WriteLine( contents );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'write out the contents of the report
               Dim contents As String = engine.Report.ToString(MimeReportType.ValueSeparated)
               Console.WriteLine(contents)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeReport.ToString(aspNetMime.MimeReportType)">
            <summary>Converts the report to a string.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true ); 
                engine.Report = report;
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //write out the contents of the report
                string contents = engine.Report.ToString( MimeReportType.ValueSeparated );
                Console.WriteLine( contents );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'write out the contents of the report
               Dim contents As String = engine.Report.ToString(MimeReportType.ValueSeparated)
               Console.WriteLine(contents)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeReport.MimeMessageDataTableName">
            <summary>
            The name of the DataTable for the in-memory report.
            </summary>
        </member>
        <member name="P:aspNetMime.MimeReport.BaseDataSet">
            <summary>
            The base DataSet used for the in-memory report storage.
            </summary>
            <example>
            <code lang="C#">
            void MimeProcessor()
            {
            	//create the processing engine
            	MessageProcessor  engine  = new MessageProcessor();
            
            	//create a new report, and keep in memory
            	MimeReport report = new MimeReport( true, true ); 
            	engine.Report = report;
            
            	string dir = "C:\\temp\\MimeFiles\\";
            	engine.ProcessDirectory( dir );
            
            	//loop through each row in the report
            	DataTable dt = engine.Report.BaseDataSet.Tables[ 0 ];
            	int columnCount = dt.Columns.Count;
            	foreach( DataRow dr in dt.Rows )
            	{
            		string reportLine = string.Empty;
            		for( int i=0;i&lt;columnCount;i++)
            		{
            			reportLine += dr[ i ] + ",";
            		}
            
            		Console.WriteLine(reportLine);
            		Console.WriteLine( "-----------------" );
            	}
            
            
            	Console.WriteLine( "done.");
            	Console.ReadLine();
            }
            
            
            </code>
            <code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'loop through each row in the report
               Dim dt As DataTable = engine.Report.BaseDataSet.Tables(0)
               Dim columnCount As Integer = dt.Columns.Count
               Dim dr As DataRow
               For Each dr In  dt.Rows
                  Dim reportLine As String = String.Empty
                  Dim i As Integer
                  For i = 0 To columnCount - 1
                     reportLine += dr(i) + ","
                  Next i
                  
                  Console.WriteLine(reportLine)
                  Console.WriteLine("-----------------")
               Next dr
               
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
            
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeReport.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal the event handler calls issued as a result of events.
            </summary>
        </member>
        <member name="P:aspNetMime.MimeReport.IncludeColumnNames">
            <summary>Includes the column names in the report.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport(); 
             
                //made it a Comma Seperated Value (CSV) report, with the column names
                report.Type = MimeReportType.ValueSeparated;
                report.IncludeColumnNames = true;
                report.ValueDelimiter = ",";
                report.ValueRowDelimiter = "\r\n";
                report.ValueQualifier = "\"";
                report.InitializeReportStream( "c:\\temp\\report.csv" );
                report.InMemoryReport = false; //keep memory footprint smaller
                engine.Report = report;
             
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //flush the report, for any remaining records
                engine.Report.FlushReportStream();
                engine.Report.CloseReportStream();
             
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport()
               
               'made it a Comma Seperated Value (CSV) report, with the column names
               report.Type = MimeReportType.ValueSeparated
               report.IncludeColumnNames = True
               report.ValueDelimiter = ","
               report.ValueRowDelimiter = ControlChars.Cr + ControlChars.Lf
               report.ValueQualifier = """"
               report.InitializeReportStream("c:\temp\report.csv")
               report.InMemoryReport = False 'keep memory footprint smaller
               engine.Report = report
               
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'flush the report, for any remaining records
               engine.Report.FlushReportStream()
               engine.Report.CloseReportStream()
               
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeReport.InMemoryReport">
            <summary>Keeps the report in memory.</summary>
            <remarks>Set to True, to call .SaveToFile()</remarks>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport(); 
             
                //made it a Comma Seperated Value (CSV) report, with the column names
                report.Type = MimeReportType.ValueSeparated;
                report.IncludeColumnNames = true;
                report.ValueDelimiter = ",";
                report.ValueRowDelimiter = "\r\n";
                report.ValueQualifier = "\"";
                report.InitializeReportStream( "c:\\temp\\report.csv" );
                report.InMemoryReport = false; //keep memory footprint smaller
                engine.Report = report;
             
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //flush the report, for any remaining records
                engine.Report.FlushReportStream();
                engine.Report.CloseReportStream();
             
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport()
               
               'made it a Comma Seperated Value (CSV) report, with the column names
               report.Type = MimeReportType.ValueSeparated
               report.IncludeColumnNames = True
               report.ValueDelimiter = ","
               report.ValueRowDelimiter = ControlChars.Cr + ControlChars.Lf
               report.ValueQualifier = """"
               report.InitializeReportStream("c:\temp\report.csv")
               report.InMemoryReport = False 'keep memory footprint smaller
               engine.Report = report
               
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'flush the report, for any remaining records
               engine.Report.FlushReportStream()
               engine.Report.CloseReportStream()
               
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeReport.ValueRowDelimiter">
            <summary>The delimiter used to separate rows in the report.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport(); 
             
                //made it a Comma Seperated Value (CSV) report, with the column names
                report.Type = MimeReportType.ValueSeparated;
                report.IncludeColumnNames = true;
                report.ValueDelimiter = ",";
                report.ValueRowDelimiter = "\r\n";
                report.ValueQualifier = "\"";
                report.InitializeReportStream( "c:\\temp\\report.csv" );
                report.InMemoryReport = false; //keep memory footprint smaller
                engine.Report = report;
             
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //flush the report, for any remaining records
                engine.Report.FlushReportStream();
                engine.Report.CloseReportStream();
             
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport()
               
               'made it a Comma Seperated Value (CSV) report, with the column names
               report.Type = MimeReportType.ValueSeparated
               report.IncludeColumnNames = True
               report.ValueDelimiter = ","
               report.ValueRowDelimiter = ControlChars.Cr + ControlChars.Lf
               report.ValueQualifier = """"
               report.InitializeReportStream("c:\temp\report.csv")
               report.InMemoryReport = False 'keep memory footprint smaller
               engine.Report = report
               
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'flush the report, for any remaining records
               engine.Report.FlushReportStream()
               engine.Report.CloseReportStream()
               
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeReport.ValueDelimiter">
            <summary>The delimiter used to separate values in the report.</summary>
            <remarks>Usually commas (,) or tabs ( ASCII(9) ) are used.</remarks>
        </member>
        <member name="P:aspNetMime.MimeReport.ValueQualifier">
            <summary>The qualifier used for surrounding values.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport(); 
             
                //made it a Comma Seperated Value (CSV) report, with the column names
                report.Type = MimeReportType.ValueSeparated;
                report.IncludeColumnNames = true;
                report.ValueDelimiter = ",";
                report.ValueRowDelimiter = "\r\n";
                report.ValueQualifier = "\"";
                report.InitializeReportStream( "c:\\temp\\report.csv" );
                report.InMemoryReport = false; //keep memory footprint smaller
                engine.Report = report;
             
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //flush the report, for any remaining records
                engine.Report.FlushReportStream();
                engine.Report.CloseReportStream();
             
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport()
               
               'made it a Comma Seperated Value (CSV) report, with the column names
               report.Type = MimeReportType.ValueSeparated
               report.IncludeColumnNames = True
               report.ValueDelimiter = ","
               report.ValueRowDelimiter = ControlChars.Cr + ControlChars.Lf
               report.ValueQualifier = """"
               report.InitializeReportStream("c:\temp\report.csv")
               report.InMemoryReport = False 'keep memory footprint smaller
               engine.Report = report
               
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'flush the report, for any remaining records
               engine.Report.FlushReportStream()
               engine.Report.CloseReportStream()
               
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeReport.Type">
            <summary>The type of report to generate.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport(); 
             
                //made it a Comma Seperated Value (CSV) report, with the column names
                report.Type = MimeReportType.ValueSeparated;
                report.IncludeColumnNames = true;
                report.ValueDelimiter = ",";
                report.ValueRowDelimiter = "\r\n";
                report.ValueQualifier = "\"";
                report.InitializeReportStream( "c:\\temp\\report.csv" );
                report.InMemoryReport = false; //keep memory footprint smaller
                engine.Report = report;
             
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //flush the report, for any remaining records
                engine.Report.FlushReportStream();
                engine.Report.CloseReportStream();
             
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport()
               
               'made it a Comma Seperated Value (CSV) report, with the column names
               report.Type = MimeReportType.ValueSeparated
               report.IncludeColumnNames = True
               report.ValueDelimiter = ","
               report.ValueRowDelimiter = ControlChars.Cr + ControlChars.Lf
               report.ValueQualifier = """"
               report.InitializeReportStream("c:\temp\report.csv")
               report.InMemoryReport = False 'keep memory footprint smaller
               engine.Report = report
               
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'flush the report, for any remaining records
               engine.Report.FlushReportStream()
               engine.Report.CloseReportStream()
               
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeReport.ReportStream">
            <summary>
            The underlying stream used by the report.
            </summary>
        </member>
        <member name="E:aspNetMime.MimeReport.ReportAddingRow">
            <summary>
            This event is raised everytime a MimeMessage is added to the Report
            </summary>
            <example>
            <code lang="C#">
            void MimeProcessor()
            {
            	//create the processing engine
            	MessageProcessor  engine  = new MessageProcessor();
            
            	//create a new report, and keep in memory
            	MimeReport report = new MimeReport( true, true ); 
            
            	//extend the report schema to include the Content-Type
            	//this can be done by creating new column on the underlying DataSet/Table
            	System.Type dataType= System.Type.GetType( "System.String" );
            	DataColumn dc = new DataColumn( "ContentType", dataType );
            
            	//add it to the underlying DataTable
            	report.BaseDataSet.Tables[ 0 ].Columns.Add( dc );
            
            	//wire up the AddingRow event handler -- in these event, set the ContentType column
            	report.ReportAddingRow += new ReportAddingRowEventHandler( OnBeforeAddMimeMessageRow );
            	
            
            	//set the report on the engine
            	engine.Report = report;
            	
            	string dir = "C:\\temp\\MimeFiles\\";
            	engine.ProcessDirectory( dir );
            
            	engine.Report.SaveToFile( "c:\\report.csv" );
            
            	Console.WriteLine( "done.");
            	Console.ReadLine();
            }
            
            private void OnBeforeAddMimeMessageRow( object sender, ReportAddingRowEventArgs e)
            {
            	DataRow dr = e.DataRow;
            
            	//populate our custom column, named "ContentType", with the value of the content-type of the MimeMessage
            	if( ( e.MimeMessage != null ) &amp;&amp; ( e.MimeMessage.ContentType != null ) )
            	{
            		dr[ "ContentType" ] = e.MimeMessage.ContentType.Value;
            	}
            	else
            		dr[ "ContentType" ] = "(no content-type set)";
            
            }
            </code>
            <code lang="VB.NET">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               
               'extend the report schema to include the Content-Type
               'this can be done by creating new column on the underlying DataSet/Table
               Dim dataType As System.Type = System.Type.GetType("System.String")
               Dim dc As New DataColumn("ContentType", dataType)
               
               'add it to the underlying DataTable
               report.BaseDataSet.Tables(0).Columns.Add(dc)
               
               'wire up the AddingRow event handler -- in these event, set the ContentType column
               AddHandler report.ReportAddingRow, AddressOf OnBeforeAddMimeMessageRow
               
               
               'set the report on the engine
               engine.Report = report
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               engine.Report.SaveToFile("c:\report.csv")
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
            
            
            Private Sub OnBeforeAddMimeMessageRow(sender As Object, e As ReportAddingRowEventArgs)
               Dim dr As DataRow = e.DataRow
               
               'populate our custom column, named "ContentType", with the value of the content-type of the MimeMessage
               If Not (e.MimeMessage Is Nothing) And Not (e.MimeMessage.ContentType Is Nothing) Then
                  dr("ContentType") = e.MimeMessage.ContentType.Value
               Else
                  dr("ContentType") = "(no content-type set)"
               End If 
            End Sub 'OnBeforeAddMimeMessageRow
            </code>
            </example>
        </member>
        <member name="T:aspNetMime.MimeReportType">
            <summary>Deterimes the type of MimeReport to be generated.</summary>
            <example>
            	<code lang="CS">
            void MimeProcessor()
            {
                //create the processing engine
                MessageProcessor  engine  = new MessageProcessor();
                engine.ParseMessage += new ParseMessageEventHandler( OnParseMessage );
             
             
                //create a new report, and keep in memory
                MimeReport report = new MimeReport( true, true);
                engine.Report = report;
             
                string dir = "C:\\temp\\MimeFiles\\";
                engine.ProcessDirectory( dir );
             
                //save the report
                report.SaveToFile( "c:\\report.xml", MimeReportType.Xml );
             
                Console.WriteLine( "done.");
                Console.ReadLine();
            }
             
             
            private void OnParseMessage( object sender, ParseMessageEventArgs e )
            {
                Console.WriteLine( "----------------" );
             
                
                //check for any exceptions
                if( e.ProcessingException != null )
                {
                    Console.WriteLine( e.ProcessingException.ToString() );
             
                    //don't throw the exception
                    e.ThrowException = false;
                }
             
                //access the MimeMessage subject
                if( e.MimeMessage.Subject != null )
                {
                    Console.WriteLine( e.MimeMessage.Subject.Value );
                }
             
             
            }
                </code>
            	<code lang="VB">
            Sub MimeProcessor()
               'create the processing engine
               Dim engine As New MessageProcessor()
               AddHandler engine.ParseMessage, AddressOf OnParseMessage
               
               
               'create a new report, and keep in memory
               Dim report As New MimeReport(True, True)
               engine.Report = report
               
               Dim dir As String = "C:\temp\MimeFiles\"
               engine.ProcessDirectory(dir)
               
               'save the report
               report.SaveToFile("c:\report.xml", MimeReportType.Xml)
               
               Console.WriteLine("done.")
               Console.ReadLine()
            End Sub 'MimeProcessor
             
             
             
            Private Sub OnParseMessage(sender As Object, e As ParseMessageEventArgs)
               Console.WriteLine("----------------")
               
               
               'check for any exceptions
               If Not (e.ProcessingException Is Nothing) Then
                  Console.WriteLine(e.ProcessingException.ToString())
                  
                  'don't throw the exception
                  e.ThrowException = False
               End If
               
               'access the MimeMessage subject
               If Not (e.MimeMessage.Subject Is Nothing) Then
                  Console.WriteLine(e.MimeMessage.Subject.Value)
               End If
            End Sub 'OnParseMessage
                </code>
            </example>
        </member>
        <member name="F:aspNetMime.MimeReportType.ValueSeparated">
            <summary>Creates a value separated report.</summary>
        </member>
        <member name="F:aspNetMime.MimeReportType.Xml">
            <summary>Creates a Xml report</summary>
        </member>
        <member name="T:aspNetMime.Address">
            <summary>
            A class representing an EmailAddress.  Mostly used with the aspNetMime MimeMessage class To and CC properties.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            Console.WriteLine( msg.To[0].ToString() );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
              'an email on the filesystem
              Dim filename As String = "testEmail.eml"
            
              'open the email
              Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
              'this creates a MimeMessage from a stream
              Dim msg As New aspNetMime.MimeMessage(fs)
            
              fs.Close()
            
              Console.WriteLine(msg.To(0).ToString())
            
            
              Console.WriteLine("done...")
              Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.Address.#ctor">
            <summary>
            Creates an instance of an Address 
            </summary>
            <example>
            <code lang="C#">
            Address a = new Address();
            a.CharSet = "ISO-8859-1";
            a.Name = "RAraújo";
            a.EmailAddress = "ralph@example.com";
            a.NameEncoding = MimeEncoding.QuotedPrintable;
            
            Console.WriteLine( a.Alias() );
            Console.WriteLine( a.Domain() );
            Console.WriteLine( a.ToString() );
            
            </code>
            <code lang="VB.NET">
            
            Dim a As New Address()
            a.CharSet = "ISO-8859-1"
            a.Name = "RAraújo"
            a.EmailAddress = "ralph@example.com"
            a.NameEncoding = MimeEncoding.QuotedPrintable
            
            Console.WriteLine(a.Alias())
            Console.WriteLine(a.Domain())
            Console.WriteLine(a.ToString())
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.Address.#ctor(System.String)">
            <summary>
            Creates an instance of an Address object, and parses rawAddress into its Name and EmailAddress parts.
            </summary>
            <param name="rawAddress">The Name and EmailAddress </param>
            <example>
            <code lang="C#">
            
            string toaddress = "\"john doe\" &lt;jdoe@fakecomany.com&gt;";
            Address a = new Address( toaddress );
            a.Parse();
            Console.WriteLine( a.EmailAddress );
            Console.WriteLine( a.Name );
            
            </code>
            <code lang="Visual Basic">
            
            Dim toaddress As String = """john doe"" &lt;jdoe@fakecomany.com&gt;"
            Dim a As New Address(toaddress)
            a.Parse()
            Console.WriteLine(a.EmailAddress)
            Console.WriteLine(a.Name)
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.Address.Alias">
            <summary>
            The text of the email address before the '@' symbol.
            </summary>
            <returns>The alias part of the email address.</returns>
            <example>
            <code lang="C#">
            Address a = new Address();
            a.CharSet = "ISO-8859-1";
            a.Name = "RAraújo";
            a.EmailAddress = "ralph@example.com";
            a.NameEncoding = MimeEncoding.QuotedPrintable;
            
            Console.WriteLine( a.Alias() );
            Console.WriteLine( a.Domain() );
            Console.WriteLine( a.ToString() );
            
            </code>
            <code lang="VB.NET">
            
            Dim a As New Address()
            a.CharSet = "ISO-8859-1"
            a.Name = "RAraújo"
            a.EmailAddress = "ralph@example.com"
            a.NameEncoding = MimeEncoding.QuotedPrintable
            
            Console.WriteLine(a.Alias())
            Console.WriteLine(a.Domain())
            Console.WriteLine(a.ToString())
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.Address.Domain">
            <summary>
            The domain name part of the email address (text after the '@' symbol).
            </summary>
            <returns>Domain part</returns>
            <example>
            <code lang="C#">
            Address a = new Address();
            a.CharSet = "ISO-8859-1";
            a.Name = "RAraújo";
            a.EmailAddress = "ralph@example.com";
            a.NameEncoding = MimeEncoding.QuotedPrintable;
            
            Console.WriteLine( a.Alias() );
            Console.WriteLine( a.Domain() );
            Console.WriteLine( a.ToString() );
            
            </code>
            <code lang="VB.NET">
            
            Dim a As New Address()
            a.CharSet = "ISO-8859-1"
            a.Name = "RAraújo"
            a.EmailAddress = "ralph@example.com"
            a.NameEncoding = MimeEncoding.QuotedPrintable
            
            Console.WriteLine(a.Alias())
            Console.WriteLine(a.Domain())
            Console.WriteLine(a.ToString())
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.Address.Parse">
            <summary>
            Parses the RawAddress into its Name and EmailAddress parts.
            </summary>
            <remarks>This method should be called as soon as the rawAddress is passed into the Address ctor.</remarks>
            <example>
            <code lang="C#">
            
            string toaddress = "\"john doe\" &lt;jdoe@fakecomany.com&gt;";
            Address a = new Address( toaddress );
            a.Parse();
            Console.WriteLine( a.EmailAddress );
            Console.WriteLine( a.Name );
            
            </code>
            <code lang="Visual Basic">
            
            Dim toaddress As String = """john doe"" &lt;jdoe@fakecomany.com&gt;"
            Dim a As New Address(toaddress)
            a.Parse()
            Console.WriteLine(a.EmailAddress)
            Console.WriteLine(a.Name)
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.Address.ToString">
            <summary>
            Returns the Address in the format "Name" &lt;EmailAddress&gt;
            </summary>
            <returns>Complete email address</returns>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            Console.WriteLine( msg.To[0].ToString() );
            Console.WriteLine( msg.To[0].Name );
            Console.WriteLine( msg.To[0].EmailAddress);
            Console.WriteLine( msg.To[0].RawAddress );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            fs.Close()
            
            Console.WriteLine(msg.To(0).ToString())
            Console.WriteLine(msg.To(0).Name)
            Console.WriteLine(msg.To(0).EmailAddress)
            Console.WriteLine(msg.To(0).RawAddress)
            
            Console.WriteLine("done...")
            Console.ReadLine()
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.Address.CharSet">
            <summary>Encoded characterset of the address name.</summary>
        </member>
        <member name="P:aspNetMime.Address.EmailAddress">
            <summary>
            The EmailAddress part of the Address.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            Console.WriteLine( msg.To[0].ToString() );
            Console.WriteLine( msg.To[0].Name );
            Console.WriteLine( msg.To[0].EmailAddress);
            Console.WriteLine( msg.To[0].RawAddress );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            fs.Close()
            
            Console.WriteLine(msg.To(0).ToString())
            Console.WriteLine(msg.To(0).Name)
            Console.WriteLine(msg.To(0).EmailAddress)
            Console.WriteLine(msg.To(0).RawAddress)
            
            Console.WriteLine("done...")
            Console.ReadLine()
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.Address.Name">
            <summary>
            The Name part of the Address.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            Console.WriteLine( msg.To[0].ToString() );
            Console.WriteLine( msg.To[0].Name );
            Console.WriteLine( msg.To[0].EmailAddress);
            Console.WriteLine( msg.To[0].RawAddress );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            fs.Close()
            
            Console.WriteLine(msg.To(0).ToString())
            Console.WriteLine(msg.To(0).Name)
            Console.WriteLine(msg.To(0).EmailAddress)
            Console.WriteLine(msg.To(0).RawAddress)
            
            Console.WriteLine("done...")
            Console.ReadLine()
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.Address.NameEncoding">
            <summary>Encoding used to encode the name</summary>
            <remarks>
            By default Names are not encoded. However, non us-ascii Name values can be
            encoded with a QuotedPrintable or Base64 MimeEncoding.
            </remarks>
            <example>
            <code lang="C#">
            Address a = new Address();
            a.CharSet = "ISO-8859-1";
            a.Name = "RAraújo";
            a.EmailAddress = "ralph@example.com";
            a.NameEncoding = MimeEncoding.QuotedPrintable;
            
            Console.WriteLine( a.Alias() );
            Console.WriteLine( a.Domain() );
            Console.WriteLine( a.ToString() );
            
            </code>
            <code lang="VB.NET">
            
            Dim a As New Address()
            a.CharSet = "ISO-8859-1"
            a.Name = "RAraújo"
            a.EmailAddress = "ralph@example.com"
            a.NameEncoding = MimeEncoding.QuotedPrintable
            
            Console.WriteLine(a.Alias())
            Console.WriteLine(a.Domain())
            Console.WriteLine(a.ToString())
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.Address.Pattern">
            <summary>
            The Regex pattern, used internally, for parsing email addresses.
            </summary>
        </member>
        <member name="P:aspNetMime.Address.RawAddress">
            <summary>
            The complete Name and Email Address.
            </summary>
            <example>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            MimeMessage m = MimeMessage.ParseFile( "message1.eml" );
             
            Console.WriteLine( m.To[ 0 ].EmailAddress );
            Console.WriteLine( m.To[ 0 ].RawAddress );
                </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim m As MimeMessage = MimeMessage.ParseFile("message1.eml")
             
            Console.WriteLine(m.To(0).EmailAddress)
            Console.WriteLine(m.To(0).RawAddress)
                </code>
            </example>
        </member>
        <member name="T:aspNetMime.AddressCollection">
            <summary>
              Basic collection class Headers.
            </summary>
        </member>
        <member name="M:aspNetMime.AddressCollection.#ctor">
            <summary>
              Empty constructor. 
            </summary>
        </member>
        <member name="M:aspNetMime.AddressCollection.#ctor(System.Int32)">
            <summary>
              Initializes the container to hold the specified number of items.
            </summary>
            <param name="initialCount">
              The initial size of the collection. 
            </param>
        </member>
        <member name="M:aspNetMime.AddressCollection.Contains(aspNetMime.Address)">
            <summary>
              Attempts to locate the Address within the collection.
            </summary>
            <param name="address">
              Address to locate.
            </param>
            <returns>
              True if the Address exists in the collection.
            </returns>
        </member>
        <member name="M:aspNetMime.AddressCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetMime.AddressCollection.Contains(System.String)">
            <summary>
              Returns true if the specified address is contained within the collection.
            </summary>
            <param name="emailAddress">
              EmailAddress of the address to look for in the collection.
            </param>
            <returns>
              True if the address is contained in the collection.
            </returns>
        </member>
        <member name="M:aspNetMime.AddressCollection.Contains(System.String,System.Boolean)">
            <summary>
            Checks the AddressCollection for an email address.
            </summary>
            <param name="emailAddress">The email address to find.</param>
            <param name="ignoreCase">Ignoe case sensitivity during the search. </param>
            <returns></returns>
        </member>
        <member name="M:aspNetMime.AddressCollection.CopyTo(System.Array,System.Int32)">
            <summary>
              Copies the items from this collection into the array at the specified index.
            </summary>
            <param name="array">
              Array to copy the items to.
            </param>
            <param name="index">
              Index of position within the array to being copying at.
            </param>
        </member>
        <member name="M:aspNetMime.AddressCollection.CopyTo(aspNetMime.AddressCollection)">
            <summary>
              Copies all the Addresses from this collection to another Address Collection.
            </summary>
            <param name="addresses">
              Collection to copy to.
            </param>
        </member>
        <member name="M:aspNetMime.AddressCollection.Add(aspNetMime.Address)">
            <summary>
              Adds a Address to the collection.
            </summary>
            <param name="address">
              Address to add to the collection.
            </param>
            <returns>
              Index at which the Address was added.
            </returns>
        </member>
        <member name="M:aspNetMime.AddressCollection.System#Collections#IList#Add(System.Object)">
            <summary>
              For IList implementation only. Do Not Use.
            </summary>
        </member>
        <member name="M:aspNetMime.AddressCollection.Add(System.String,System.String)">
            <summary>
              Adds a new Address with the EmailAddress and Namespecified.
            </summary>
            <param name="emailAddress">
              EmailAddress of the new Address.
            </param>
            <param name="name">
              Name of the new Address.
            </param>
            <returns>
              Index within the collection fo the new Header.
            </returns>
        </member>
        <member name="M:aspNetMime.AddressCollection.Clear">
            <summary>
              Clears the collection.
            </summary>
        </member>
        <member name="M:aspNetMime.AddressCollection.IndexOf(aspNetMime.Address)">
            <summary>
              Returns the index for the Address within the collection.
            </summary>
            <param name="address">
              Address to locate within the collection.
            </param>
            <returns>
              Index of the Address.
            </returns>
        </member>
        <member name="M:aspNetMime.AddressCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetMime.AddressCollection.IndexOf(System.String)">
            <summary>
              Returns the index for the Address with the given EmailAddress within the collection.
            </summary>
            <param name="emailAddress">
              EmailAddress of the Address to locate within the collection.
            </param>
            <returns>
              Index of the Address with the given Name.
            </returns>
        </member>
        <member name="M:aspNetMime.AddressCollection.Insert(System.Int32,aspNetMime.Address)">
            <summary>
              Inserts the Address into the collection at the specified position.
            </summary>
            <param name="index">
              Position at which to insert the Address.
            </param>
            <param name="address">
              Address to insert.
            </param>
        </member>
        <member name="M:aspNetMime.AddressCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetMime.AddressCollection.Remove(aspNetMime.Address)">
            <summary>
              Removes the first occurrence of a specific Address from the Collection.
            </summary>
            <param name="address">
              The Address to remove.
            </param>
        </member>
        <member name="M:aspNetMime.AddressCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetMime.AddressCollection.Remove(System.String)">
            <summary>
              Removes all Addresses with the specified EmailAddress.
            </summary>
            <param name="emailAddress">
              EmailAddress of the Address to remove.
            </param>
        </member>
        <member name="M:aspNetMime.AddressCollection.RemoveAt(System.Int32)">
            <summary>
              Removes the element at the specified index of the Collection.
            </summary>
            <param name="index">
              Index of the element to remove.
            </param>
        </member>
        <member name="M:aspNetMime.AddressCollection.GetEnumerator">
            <summary>
              Returns an enumerator that can iterate through the Collection.
            </summary>
            <returns>
              An IEnumerator for the entire Collection.
            </returns>
        </member>
        <member name="M:aspNetMime.AddressCollection.GetEnumerator(System.Int32,System.Int32)">
            <summary>
              Returns an enumerator that can iterate through the Collection.
            </summary>
            <param name="index">
              The zero-based starting index of the Collection section that the enumerator should refer to. 
            </param>
            <param name="count">
              The number of elements in the Collection section that the enumerator should refer to. 
            </param>
            <returns>
              An IEnumerator for the specified section of the Collection.
            </returns>
        </member>
        <member name="M:aspNetMime.AddressCollection.ToString">
            <summary>
            Returns the Email Addresses.
            </summary>
            <returns></returns>
        </member>
        <member name="M:aspNetMime.AddressCollection.ToString(System.Boolean)">
            <summary>Formats the AdressCollection for use in a Header</summary>
            <param name="formatForHeaderUse">If True, formats the AddressCollection for use in a MimeMessage header.</param>
        </member>
        <member name="M:aspNetMime.AddressCollection.Parse(System.String)">
            <summary>
            A string containing mutliple email addresses.
            </summary>
            <param name="emailAddresses">String of email addresses</param>
            <returns>An AddressCollection of addresses</returns>
        </member>
        <member name="P:aspNetMime.AddressCollection.Item(System.Int32)">
            <summary>
              Gets or Sets items in this collection.
            </summary>
        </member>
        <member name="P:aspNetMime.AddressCollection.System#Collections#IList#$Item$(System.Int32)">
            <summary>
              For IList implementation purposes only.
            </summary>
        </member>
        <member name="P:aspNetMime.AddressCollection.Item(System.String)">
            <summary>
              Returns the address with the specified EmailAddress.
            </summary>
        </member>
        <member name="P:aspNetMime.AddressCollection.Count">
            <summary>
              Returns the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:aspNetMime.AddressCollection.IsSynchronized">
            <summary>
              Gets a value indicating whether access to the Collection is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:aspNetMime.AddressCollection.SyncRoot">
            <summary>
              Gets an object that can be used to synchronize access to the Collection.
            </summary>
        </member>
        <member name="P:aspNetMime.AddressCollection.IsFixedSize">
            <summary>
              Gets a value indicating whether the collection is a fixed size.
            </summary>
        </member>
        <member name="P:aspNetMime.AddressCollection.IsReadOnly">
            <summary>
              Gets a value indicating whether the Collection is read-only.
            </summary>
        </member>
        <member name="T:aspNetMime.MimeEncoding">
            <summary>Content Transfer Encodings used in MimeMessages</summary>
        </member>
        <member name="F:aspNetMime.MimeEncoding.None">
            <summary>No MimeEncoding is applied.</summary>
        </member>
        <member name="F:aspNetMime.MimeEncoding.Base64">
            <summary>Base64 formatting is used.</summary>
        </member>
        <member name="F:aspNetMime.MimeEncoding.QuotedPrintable">
            <summary>QuotedPrintable formatting is used.</summary>
        </member>
        <member name="T:aspNetMime.Header">
            <summary>
              Basic SMTP / MIME Header class. 
              Includes a parameters collection for MIME headers.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            foreach( Header h in msg.Headers )
            {
            	Console.WriteLine( "Name -- " +  h.Name );
            	Console.WriteLine( "Value -- " + h.Value );
            	Console.WriteLine( "Complete Value (includes parameters) -- " + h.ValueComplete );
            	Console.WriteLine( "The raw header -- " + h.RawValue );
            }
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            'close the stream
            fs.Close()
            
            Dim h As Header
            For Each h In msg.Headers
                Console.WriteLine(h.Name)
                Console.WriteLine(h.Value)
                Console.WriteLine(h.ValueComplete)
                Console.WriteLine(h.RawValue)
            Next h
            
            </code>
            </example>
        </member>
        <member name="F:aspNetMime.Header.headerName">
            <summary>
              Name field for the Header.
            </summary>
        </member>
        <member name="F:aspNetMime.Header.headerValue">
            <summary>
             Value field for the Header.
            </summary>
        </member>
        <member name="F:aspNetMime.Header.parameters">
            <summary>
              Parameters collection for the Header
            </summary>
        </member>
        <member name="M:aspNetMime.Header.#ctor">
            <summary>
              Creates a header and initializes the Parameters collection.
            </summary>
            <example>
            <code lang="C#">
            Header h = new Header( );
            h.Name = "Content-Type";
            h.Value = "text/plain";
            
            //write out the formatted header
            Console.WriteLine( h.ToString() );
            
            </code>
            <code lang="VB.NET">
            Header h = new Header( );
            h.Name = "Content-Type";
            h.Value = "text/plain";
            
            //write out the formatted header
            Console.WriteLine( h.ToString() );
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.Header.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of a header.
            </summary>
            <param name="name">Name of the header.</param>
            <param name="value">Value of the header.</param>
        </member>
        <member name="M:aspNetMime.Header.#ctor(System.String)">
            <summary>
              Parses the input for the elements of a SMTP/MIME Header.
            </summary>
            <param name="completeHeader">
              Must be in the proper format for a SMTP or MIME header.
            </param>
            <example>
            <code lang="C#">
            string rawHeader = "Content-Type: text/plain;\r\n\tcharset=\"iso-8859-1\""; 
            
            //parses the header into it's contents
            Header h = new Header( rawHeader );
            
            //write out various header properties
            Console.WriteLine( h.Name );
            Console.WriteLine( h.Value );
            Console.WriteLine( h.ValueComplete );
            
            </code>
            <code lang="VB.NET">
            
            Dim rawHeader As String = "Content-Type: text/plain;" + ControlChars.Cr + ControlChars.Lf + ControlChars.Tab + "charset=""iso-8859-1"""
            
            'parses the header into it's contents
            Dim h As New Header(rawHeader)
            
            'write out various header properties
            Console.WriteLine(h.Name)
            Console.WriteLine(h.Value)
            Console.WriteLine(h.ValueComplete)
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.Header.Parse(System.String)">
            <summary>
              Parses the header content out of the given string. 
              This will remove any information previously stored in the Header before parsing.
            </summary>
            <param name="completeHeader">
              Complete text of the Header to parse.
            </param>
            <example>
            <code lang="C#">
            
            string rawHeader = "Content-Type: text/plain;\r\n\tcharset=\"iso-8859-1\""; 
            
            //parses the header into it's contents
            Header h = new Header( );
            h.Parse( rawHeader );
            
            //write out various header properties
            Console.WriteLine( h.Name );
            Console.WriteLine( h.Value );
            Console.WriteLine( h.ValueComplete );
            </code>
            <code lang="VB.NET">
            Dim rawHeader As String = "Content-Type: text/plain;" + ControlChars.Cr + ControlChars.Lf + ControlChars.Tab + "charset=""iso-8859-1"""
            
            'parses the header into it's contents
            Dim h As New Header()
            h.Parse(rawHeader)
            
            'write out various header properties
            Console.WriteLine(h.Name)
            Console.WriteLine(h.Value)
            Console.WriteLine(h.ValueComplete)
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.Header.SetHeaderValue(System.String,aspNetMime.MimeEncoding,System.String)">
            <summary>
            Sets the HeaderValue property using a specific MimeEncoding and character set.
            </summary>
            <param name="value">Unencoded value of the header.</param>
            <param name="mimeEncoding">MimeEncoding to apply to the header.</param>
            <param name="charSet">Character set of value.</param>
            <example>
            <code lang="C#">
            Header h = new Header( );
            h.Name = "Subject";
            
            //encode the header for MIME compliance
            h.SetHeaderValue( "español", MimeEncoding.Base64, "iso-8859-1" );
            
            //write out the formatted header
            Console.WriteLine( h.ToString() );
            
            </code>
            <code lang="VB.NET">
            Dim h As New Header()
            h.Name = "Subject"
            
            'encode the header for MIME compliance
            h.SetHeaderValue("español", MimeEncoding.Base64, "iso-8859-1")
            
            'write out the formatted header
            Console.WriteLine(h.ToString())
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.Header.ToString">
            <summary>
              Returns the Header formatted for proper sending.
            </summary>
            <returns>
              Header formatted for sending.
            </returns>
        </member>
        <member name="M:aspNetMime.Header.DeocodeHeaderValue(System.String)">
            <summary>
            Decodes a Q or B encoded header value.
            </summary>
            <param name="headerValue">Value of the header.</param>
            <returns>Decoded header value.</returns>
            <remarks>
            If the HeaderValue is null, an empty string is returned.
            </remarks>
            <example>
            <code lang="C#">
            string rawValue = "=?iso-8859-1?B?ZXNwYfFvbA==?=";
            string charSet;
            MimeEncoding menc = MimeEncoding.None;
            string decoded = Header.DeocodeHeaderValue( rawValue, out menc, out charSet );
            
            //write out the decoded parts
            Console.WriteLine( decoded);
            Console.WriteLine( charSet );
            Console.WriteLine( menc.ToString() );
            
            </code>
            <code lang="VB.NET">
            Dim rawValue As String = "=?iso-8859-1?B?ZXNwYfFvbA==?="
            Dim charSet As String
            Dim menc As MimeEncoding = MimeEncoding.None
            Dim decoded As String = Header.DeocodeHeaderValue(rawValue, menc, charSet)
            
            'write out the decoded parts
            Console.WriteLine(decoded)
            Console.WriteLine(charSet)
            Console.WriteLine(menc.ToString())
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.Header.DeocodeHeaderValue(System.String,aspNetMime.MimeEncoding@,System.String@)">
            <summary>Decodes a header</summary>
            <summary>Decodes a Q or B encoded header value.</summary>
            <returns>Decoded header value.</returns>
            <remarks>If the HeaderValue is null, an empty string is returned.</remarks>
            <param name="headerValue">Encoded header.</param>
            <param name="encoding">MimeEncoding found on the header</param>
            <param name="charset">Characterset found on the encoded header.</param>
        </member>
        <member name="M:aspNetMime.Header.DecodeHeader(aspNetMime.Header)">
            <summary>
            Deocodes a B or Q encoded header.
            </summary>
            <remarks>
            If the Header is null, or the Header.Value is null, an empty string is returned.
            </remarks>
            <param name="header">The encoded Header</param>
            <returns>The complete decoded Header as a string.</returns>
            <example>
            <code lang="C#">
            Header h = new Header( );
            h.Name = "Subject";
            h.Value = "español";
            h.HeaderEncoding = MimeEncoding.Base64;
            h.CharSet = "iso-8859-1";
            
            //write out the formatted header
            Console.WriteLine( h.ToString() );
            
            //write out the decoded header
            Console.WriteLine( Header.DecodeHeader( h ) );
            
            
            </code>
            <code lang="VB.NET">
            Dim h As New Header()
            h.Name = "Subject"
            h.Value = "español"
            h.HeaderEncoding = MimeEncoding.Base64
            h.CharSet = "iso-8859-1"
            
            'write out the formatted header
            Console.WriteLine(h.ToString())
            
            'write out the decoded header
            Console.WriteLine(Header.DecodeHeader(h))
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.Header.DecodeHeader(System.String)">
            <summary>
            Deocodes a B or Q encoded header.
            </summary>
            <remarks>
            If the completeHeader is null, or the Header.Value is null, an empty string is returned.
            </remarks>
            <param name="completeHeader">The compete header as a string.</param>
            <returns>A decoded header</returns>
            <example>
            <code lang="C#">
            string rawHeader = "Subject: =?iso-8859-1?B?ZXNwYfFvbA==?=";
            
            //decodes the header
            string decoded = Header.DecodeHeader( rawHeader );
            
            Console.WriteLine( decoded );
            </code>
            <code lang="VB.NET">
            Dim rawHeader As String = "Subject: =?iso-8859-1?B?ZXNwYfFvbA==?="
            
            'decodes the header
            Dim decoded As String = Header.DecodeHeader(rawHeader)
            
            Console.WriteLine(decoded)
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.Header.IsEncodedHeader(System.String)">
            <summary>
            Checks if the header is Q or B encoded.
            </summary>
            <param name="headerValue">Value of the header.</param>
            <returns>True if the headerValue is encoded.</returns>
            <example>
            <code lang="C#">
            Header h = new Header( );
            h.Name = "Subject";
            h.Value = "español";
            h.HeaderEncoding = MimeEncoding.Base64;
            h.CharSet = "iso-8859-1";
            
            //write out the formatted header
            string encoded = h.ToString();
            Console.WriteLine( encoded  );
            
            //checks to see if the header is encoded
            Console.WriteLine( Header.IsEncodedHeader( encoded ) );
            
            
            </code>
            <code lang="VB.NET">
            Dim h As New Header()
            h.Name = "Subject"
            h.Value = "español"
            h.HeaderEncoding = MimeEncoding.Base64
            h.CharSet = "iso-8859-1"
            
            'write out the formatted header
            Dim encoded As String = h.ToString()
            Console.WriteLine(encoded)
            
            'checks to see if the header is encoded
            Console.WriteLine(Header.IsEncodedHeader(encoded))
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.Header.EmptyHeader(aspNetMime.Header)">
            <summary>
            Checks to see if the Header is null. If the header is found to be null, a new empty header is created.
            </summary>
            <param name="header">Header to Check</param>
            <returns>Empty Header if Null</returns>
            <remarks>
            This method is useful to prevent many lines of null header checking.
            For example, if a Subject header is referenced in a MimeMessage, but the Subject header doesn't exist it is null, an exception will be thrown.
            However, by using the EmptyHeader method, an empty header with an empty value will be returned.
            </remarks>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            StreamReader sr = new StreamReader( filename );
            string emailText = sr.ReadToEnd();
            
            aspNetMime.MimeMessage part = new aspNetMime.MimeMessage( emailText );
            
            //in this example, the textEmail.eml does not have a subject, therefore the following line will
            //result in a null exception being thrown.
            
            Console.WriteLine( part.Subject.Value );
            
            //however, if the EmptyHeader method is used, no exception will be thrown, an empty header will be 
            //returned, resulting in a blank line being written to the console.
            Console.WriteLine( Header.EmptyHeader( part.Subject).Value );
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim sr As New StreamReader(filename)
            Dim emailText As String = sr.ReadToEnd()
            
            Dim part As New aspNetMime.MimeMessage(emailText)
            
            'in this example, the textEmail.eml does not have a subject, therefore the following line will
            'result in a null exception being thrown.
            Console.WriteLine(part.Subject.Value)
            
            'however, if the EmptyHeader method is used, no exception will be thrown, an empty header will 
            'returned, resulting in a blank line being written to the console.
            Console.WriteLine(Header.EmptyHeader(part.Subject).Value)
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.Header.EncodeHeaderValue(System.String,System.String,aspNetMime.MimeEncoding)">
            <summary>Encodes a header using a specific MimeEncoding and a characterset.</summary>
            <param name="headerValue">Unencoded header value.</param>
            <param name="charSet">Characterset used for encoding the header.</param>
            <param name="headerEncoding">Encoding applied to the header.</param>
            <example>
            <code lang="C#">
            string encodedValue = Header.EncodeHeaderValue( "español", "iso-8859-1", MimeEncoding.Base64 );
            
            //checks to see if the header is encoded
            Console.WriteLine( encodedValue );
            
            </code>
            <code lang="VB.NET">
            Dim encodedValue As String = Header.EncodeHeaderValue("español", "iso-8859-1", MimeEncoding.Base64)
            
            'checks to see if the header is encoded
            Console.WriteLine(encodedValue)
            
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.Header.ContentType(System.String)">
            <summary>Creates a Content-Type header</summary>
        </member>
        <member name="M:aspNetMime.Header.ContentDescription(System.String)">
            <summary>Creates a Content-Description header.</summary>
            <param name="value">Value of the header.</param>
        </member>
        <member name="M:aspNetMime.Header.ContentDisposition(System.String)">
            <summary>Creates a Content-Disposition header.</summary>
            <param name="value">Value of the header.</param>
        </member>
        <member name="M:aspNetMime.Header.ContentLocation(System.String)">
            <summary>Creates a Content-Location header.</summary>
            <param name="value">Value of the header.</param>
        </member>
        <member name="M:aspNetMime.Header.ContentID(System.String)">
            <summary>Creates a Content-ID header.</summary>
            <param name="value">Value of the header.</param>
        </member>
        <member name="M:aspNetMime.Header.ContentTransferEncoding(System.String)">
            <summary>Creates a Content-Transfer-Encoding header.</summary>
            <param name="value">Value of the header.</param>
        </member>
        <member name="M:aspNetMime.Header.MimeVersion(System.String)">
            <summary>Creates a MIME-Version header.</summary>
            <param name="value">Value of the header.</param>
        </member>
        <member name="M:aspNetMime.Header.MessageId(System.String)">
            <summary>Creates a Message-Id header.</summary>
            <param name="value">Value of the header.</param>
        </member>
        <member name="M:aspNetMime.Header.Priority(System.String)">
            <summary>Creates a X-Priority header.</summary>
            <param name="value">Value of the header.</param>
        </member>
        <member name="M:aspNetMime.Header.ReplyTo(System.String)">
            <summary>Creates a Reply-To header.</summary>
            <param name="value">Value of the header.</param>
        </member>
        <member name="M:aspNetMime.Header.ReturnPath(System.String)">
            <summary>Creates a Return-Path header.</summary>
            <param name="value">Value of the header.</param>
        </member>
        <member name="M:aspNetMime.Header.Subject(System.String)">
            <summary>Creates a Subject header.</summary>
            <param name="value">Value of the header.</param>
        </member>
        <member name="M:aspNetMime.Header.XMailer(System.String)">
            <summary>Creates a X-Mailer header.</summary>
            <param name="value">Value of the header.</param>
        </member>
        <member name="P:aspNetMime.Header.Addresses">
            <summary>AddressCollection of addresses used in the Header.</summary>
        </member>
        <member name="P:aspNetMime.Header.CharSet">
            <summary>Characterset used for encoding the header.</summary>
            <example>
            <code lang="C#">
            Header h = new Header( );
            h.Name = "Subject";
            h.Value = "español";
            h.HeaderEncoding = MimeEncoding.Base64;
            h.CharSet = "iso-8859-1";
            
            
            //write out the formatted header
            Console.WriteLine( h.ToString() );
            
            
            </code>
            <code lang="VB.NET">
            Dim h As New Header()
            h.Name = "Subject"
            h.Value = "español"
            h.HeaderEncoding = MimeEncoding.Base64
            h.CharSet = "iso-8859-1"
            
            
            'write out the formatted header
            Console.WriteLine(h.ToString())
            
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.Header.HeaderParameters">
            <summary>
              Returns a Name / Value collection of parameters for this header.
            </summary>
            <remarks>
            Some headers allow the use of parameters. For example, the Content-Type header allows a parameter of Charset=us-ascii.
            In this example, the name is "charset" and the value is "us-ascii"
            </remarks>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            Header ct = msg.ContentType;
            if( ct != null )
            {
            	//write out all the parameters
            	NameValueCollection parameters = ct.HeaderParameters;
            	foreach( string name in parameters )
            		Console.WriteLine( name + "=" + parameters[ name ] );
            }
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            'close the stream
            fs.Close()
            
            Dim ct As Header = msg.ContentType
            If Not (ct Is Nothing) Then
                'write out all the parameters
                Dim parameters As NameValueCollection = ct.HeaderParameters
                Dim name As String
                For Each name In parameters
                    Console.WriteLine((name + "=" + parameters(name)))
                Next name
            End If
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.Header.HeaderEncoding">
            <summary>MimeEncoding used for encoding the Header</summary>
            <example>
            <code lang="C#">
            Header h = new Header( );
            h.Name = "Subject";
            h.Value = "español";
            h.HeaderEncoding = MimeEncoding.Base64;
            h.CharSet = "iso-8859-1";
            
            
            //write out the formatted header
            Console.WriteLine( h.ToString() );
            
            
            </code>
            <code lang="VB.NET">
            Dim h As New Header()
            h.Name = "Subject"
            h.Value = "español"
            h.HeaderEncoding = MimeEncoding.Base64
            h.CharSet = "iso-8859-1"
            
            
            'write out the formatted header
            Console.WriteLine(h.ToString())
            
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.Header.Name">
            <summary>
              Gets and Sets the Header's name.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            foreach( Header h in msg.Headers )
            {
            	Console.WriteLine( "Name -- " +  h.Name );
            	Console.WriteLine( "Value -- " + h.Value );
            	Console.WriteLine( "Complete Value (includes parameters) -- " + h.ValueComplete );
            	Console.WriteLine( "The raw header -- " + h.RawValue );
            }
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            'close the stream
            fs.Close()
            
            Dim h As Header
            For Each h In msg.Headers
                Console.WriteLine(h.Name)
                Console.WriteLine(h.Value)
                Console.WriteLine(h.ValueComplete)
                Console.WriteLine(h.RawValue)
            Next h
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.Header.RawValue">
            <summary>
            The header, read when the MimeMessage was parsed.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            foreach( Header h in msg.Headers )
            {
            	Console.WriteLine( "Name -- " +  h.Name );
            	Console.WriteLine( "Value -- " + h.Value );
            	Console.WriteLine( "Complete Value (includes parameters) -- " + h.ValueComplete );
            	Console.WriteLine( "The raw header -- " + h.RawValue );
            }
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            'close the stream
            fs.Close()
            
            Dim h As Header
            For Each h In msg.Headers
                Console.WriteLine(h.Name)
                Console.WriteLine(h.Value)
                Console.WriteLine(h.ValueComplete)
                Console.WriteLine(h.RawValue)
            Next h
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.Header.Value">
            <summary>
              Gets and Sets the Header's value.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            foreach( Header h in msg.Headers )
            {
            	Console.WriteLine( "Name -- " +  h.Name );
            	Console.WriteLine( "Value -- " + h.Value );
            	Console.WriteLine( "Complete Value (includes parameters) -- " + h.ValueComplete );
            	Console.WriteLine( "The raw header -- " + h.RawValue );
            }
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            'close the stream
            fs.Close()
            
            Dim h As Header
            For Each h In msg.Headers
                Console.WriteLine(h.Name)
                Console.WriteLine(h.Value)
                Console.WriteLine(h.ValueComplete)
                Console.WriteLine(h.RawValue)
            Next h
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.Header.ValueComplete">
            <summary>
              Returns the Value of the Header along with any Parameters.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            foreach( Header h in msg.Headers )
            {
            	Console.WriteLine( "Name -- " +  h.Name );
            	Console.WriteLine( "Value -- " + h.Value );
            	Console.WriteLine( "Complete Value (includes parameters) -- " + h.ValueComplete );
            	Console.WriteLine( "The raw header -- " + h.RawValue );
            }
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            'close the stream
            fs.Close()
            
            Dim h As Header
            For Each h In msg.Headers
                Console.WriteLine(h.Name)
                Console.WriteLine(h.Value)
                Console.WriteLine(h.ValueComplete)
                Console.WriteLine(h.RawValue)
            Next h
            
            </code>
            </example>
        </member>
        <member name="T:aspNetMime.MimeMessage">
            <summary>
              Implements a aspNetMime Mime Part with common header values exposed as properties.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            foreach( Header h in msg.Headers )
            	Console.WriteLine( h.Name + ": " + h.ValueComplete );
            
            //another way is to pass a string directly into the MimeMessage object
            msg = new aspNetMime.MimeMessage( GetEmailAsString() );
            
            foreach( Header h in msg.Headers )
            	Console.WriteLine( h.Name + ": " + h.ValueComplete );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            fs.Close()
            
            Dim h As Header
            For Each h In msg.Headers
                Console.WriteLine((h.Name + ": " + h.ValueComplete))
            Next h
            'another way is to pass a string directly into the MimeMessage object
            msg = New aspNetMime.MimeMessage(GetEmailAsString())
            
            For Each h In msg.Headers
                Console.WriteLine((h.Name + ": " + h.ValueComplete))
            Next h
            
            Console.WriteLine("done...")
            Console.ReadLine()
            </code>
            </example>
        </member>
        <member name="T:aspNetMime.MimePart">
            <summary>
              Implements a class for handling MIME message Body Parts.
            </summary>
        </member>
        <member name="M:aspNetMime.MimePart.#ctor">
            <summary>Initializes the Body Parts collection and the Headers collection.</summary>
        </member>
        <member name="M:aspNetMime.MimePart.#ctor(System.String)">
            <summary>
              Initializes a Body Part by parsing the content from the Text provided.
            </summary>
            <param name="text">
              String containing the Body Part's text value.
            </param>
        </member>
        <member name="M:aspNetMime.MimePart.#ctor(System.String,aspNetMime.MimePart)">
            <summary>
              Initializes a Body Part by parsing the content from the Text provided.
            </summary>
            <param name="text">
              String containing the Body Part's text value.
            </param>
            <param name="parent">Parent of this Mime Part</param>
        </member>
        <member name="M:aspNetMime.MimePart.#ctor(System.String,aspNetMime.MimePart,System.Text.Encoding)">
            <summary>
              Initializes a Body Part by parsing the content from the Text provided.
            </summary>
            <param name="text">String containing the Body Part's text value.</param>
            <param name="parent">Parent of this Mime Part</param>
            <param name="encoding">Encoding used to decode the text</param>
        </member>
        <member name="M:aspNetMime.MimePart.#ctor(System.IO.Stream)">
            <summary>
              Initializes a Body Part by parsing the content from the Stream provided.
            </summary>
            <param name="stream">
              Stream object containing the data to parse.
            </param>
        </member>
        <member name="M:aspNetMime.MimePart.#ctor(System.IO.Stream,aspNetMime.MimePart)">
            <summary>
              Initializes a Body Part by parsing the content from the Stream provided.
            </summary>
            <param name="stream">
              Stream object containing the data to parse.
            </param>
            <param name="parent">Parent MimePart of this Mime Part.</param>
        </member>
        <member name="M:aspNetMime.MimePart.#ctor(System.Byte[],System.Text.Encoding)">
            <summary>Initializes a MimePart object from a byte array of data.</summary>
            <param name="data">The byte array containing the MimePart object.</param>
            <param name="encoding">The encoding used to convert the byte array into textual information.</param>
        </member>
        <member name="M:aspNetMime.MimePart.#ctor(System.Byte[],System.Text.Encoding,aspNetMime.MimePart)">
            <summary>Initializes a MimePart object from a byte array of data.</summary>
            <param name="data">The byte array containing the MimePart object.</param>
            <param name="encoding">The encoding used to convert the byte array into textual information.</param>
            <param name="parent">The parent MimePart object.</param>
        </member>
        <member name="M:aspNetMime.MimePart.AttachmentName">
            <summary>
            If the MimePart is an attachment, the Filename or Name is returned.
            </summary>
            <remarks>
            If the Filename cannot be found, then the Name is returned. If neither 
            Filename or Name are returned, a null value is returned.
            </remarks>
            <returns>Returns the name of the attachment.</returns>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            MimePartCollection attachments = msg.Attachments;
            
            foreach( MimePart mp in attachments )
            {
            	Console.WriteLine( mp.AttachmentName() );
            }
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            
            
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            fs.Close()
            
            Dim attachments As MimePartCollection = msg.Attachments
            
            Dim mp As MimePart
            For Each mp In attachments
                Console.WriteLine(mp.AttachmentName())
            Next mp
            
            Console.WriteLine("done...")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.Data">
            <summary>
            Returns the body of the MimePart as a byte array.
            </summary>
            <returns>body as a byte array</returns>
            <example>
            <code lang="C#">
            
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample.eml" );
            MimePartCollection parts = m.RetrieveAllParts();
            
            for( int i=0;i&lt;parts.Count;i++)
            {
            	MimePart part = parts[ i ];
            	byte[] data = part.Data();
            
            	if( part.Filename != null )
            	{
            		string filename = Path.Combine( "c:\\temp\\", part.Filename );
            		//save the data of each part to the filesystem
            		FileStream fs = File.OpenWrite( filename );
            		fs.Write( data, 0, data.Length );
            		fs.Close();
            	}			
            }
            
            
            
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample.eml")
            Dim parts As MimePartCollection = m.RetrieveAllParts()
            
            Dim i As Integer
            For i = 0 To parts.Count - 1
               Dim part As MimePart = parts(i)
               Dim data As Byte() = part.Data()
               
               If Not (part.Filename Is Nothing) Then
                  Dim filename As String = Path.Combine("c:\temp\", part.Filename)
                  'save the data of each part to the filesystem
                  Dim fs As FileStream = File.OpenWrite(filename)
                  fs.Write(data, 0, data.Length)
                  fs.Close()
               End If
            Next i
            
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.Data(System.Text.Encoding)">
            <summary>
            Retrieves the data of the Mime Part using a specific encoding.
            </summary>
            <param name="encoding"></param>
            <returns></returns>
            <example>
            <code lang="C#">
            
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample.eml" );
            MimePartCollection parts = m.RetrieveAllParts();
            
            for( int i=0;i&lt;parts.Count;i++)
            {
            	MimePart part = parts[ i ];
            	byte[] data = part.Data( Encoding.UTF8 );
            
            	if( part.Filename != null )
            	{
            		string filename = Path.Combine( "c:\\temp\\", part.Filename );
            		//save the data of each part to the filesystem
            		FileStream fs = File.OpenWrite( filename );
            		fs.Write( data, 0, data.Length );
            		fs.Close();
            	}			
            }
            
            
            
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample.eml")
            Dim parts As MimePartCollection = m.RetrieveAllParts()
            
            Dim i As Integer
            For i = 0 To parts.Count - 1
               Dim part As MimePart = parts(i)
               Dim data As Byte() = part.Data( Encoding.UTF8 )
               
               If Not (part.Filename Is Nothing) Then
                  Dim filename As String = Path.Combine("c:\temp\", part.Filename)
                  'save the data of each part to the filesystem
                  Dim fs As FileStream = File.OpenWrite(filename)
                  fs.Write(data, 0, data.Length)
                  fs.Close()
               End If
            Next i
            
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.DataStream">
            <summary>
            Retrieves the body of the MimePart as a stream.
            </summary>
            <returns>Body as a stream.</returns>
        </member>
        <member name="M:aspNetMime.MimePart.DecodedText">
            <summary>
            Checks to see if the bodypart is encoded with base64 or quoted-printable format, and returns the decoded version. 
            Also removes SMTP transport escape sequences.
            </summary>
            <returns>decoded body text</returns>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //write out the decoded email body
            Console.WriteLine( msg.HtmlMimePart.DecodedText() );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            'close the stream
            fs.Close()
            
            'write out the decoded email body
            Console.WriteLine(msg.HtmlMimePart.DecodedText())
            
            Console.WriteLine("done...")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.DecodedText(System.Boolean)">
            <summary>
            Checks to see if the bodypart is encoded with base64 or quoted-printable format, and returns the decoded version. 
            Also removes SMTP transport escape sequences.
            </summary>
            <param name="qpIgnoreCase">Ignores the case of any Quoted-Printable sequences.</param>
            <returns>decoded body text</returns>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //write out the decoded email body
            Console.WriteLine( msg.HtmlMimePart.DecodedText( true ) );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            'close the stream
            fs.Close()
            
            'write out the decoded email body
            Console.WriteLine(msg.HtmlMimePart.DecodedText( True ))
            
            Console.WriteLine("done...")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.EmbeddedName">
            <summary>
            If the Mime Part is an embedded object, retrieves the name, first by checking
            the Content-ID value. If the Content-ID is null, then the Content-Location value is returned.
            </summary>
            <returns></returns>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            MimePartCollection embeddedParts = msg.EmbeddedParts;
            foreach( MimePart part in embeddedParts )
            {
            	Console.WriteLine( part.EmbeddedName() );
            }
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            'close the stream
            fs.Close()
            
            Dim embeddedParts As MimePartCollection = msg.EmbeddedParts
            Dim part As MimePart
            For Each part In embeddedParts
                Console.WriteLine(part.EmbeddedName())
            Next part
            
            Console.WriteLine("done...")
            Console.ReadLine()
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.GetCharSet">
             <summary>
             Returns the CharSet for this MimePart. If the CharSet property is not populated, Parent MimeParts are checked. If none of the Parent MimeParts have a CharSet property set, then the DefaultCharSet is returned.
             </summary>
             <returns>CharSet or DefaultCharSet as string</returns>
             <example>
             <code lang="C#">
             MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample.eml" );
             
             //write out the preferred charset
             Console.WriteLine( m.GetCharSet() );
             
             </code>
             <code lang="VB.NET">
            
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample.eml")
            
            'write out the preferred charset
            Console.WriteLine(m.GetCharSet()) 
             
             </code>
             </example>
        </member>
        <member name="M:aspNetMime.MimePart.InlineName">
            <summary>
            The Inline name of the Mime Part.
            </summary>
            <returns>Returns the file name of the Inline part, if it exists. 
            If a file name doesn't exist, it returns the name of the inline part. 
            If the name doesn't exist, it returns an empty string. If the part is not Inline, null is returned. </returns>
            <example>
            <code lang="C#">
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample.eml" );
            MimePartCollection parts = m.InLineParts;
            if( ( parts != null ) &amp;&amp; ( parts.Count &gt; 0 ) )
            {
            	foreach( MimePart part in parts )
            	{
            		//inline name
            		Console.WriteLine( part.InlineName() );
            		//save the inline parts to the directory
            		part.Save( "c:\\temp\\"  );
            	}
            }
            
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample.eml")
            Dim parts As MimePartCollection = m.InLineParts
            If Not (parts Is Nothing) And parts.Count > 0 Then
               Dim part As MimePart
               For Each part In  parts
                  'inline name
                  Console.WriteLine(part.InlineName())
                  'save the inline parts to the directory
                  part.Save("c:\temp\")
               Next part
            End If
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.IsAttachment">
            <summary>
            Determines if this MimePart is an attachment.
            </summary>
            <returns>True or False</returns>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            MimePartCollection parts = msg.RetrieveAllParts();
            foreach( MimePart part in parts )
            {
            	if( part.IsAttachment() )
            		Console.WriteLine( part.AttachmentName() );
            }
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim msg As New aspNetMime.MimeMessage(fs)
            
             'close the stream
             fs.Close()
            
             Dim parts As MimePartCollection = msg.RetrieveAllParts()
             Dim part As MimePart
             For Each part In parts
                 If part.IsAttachment() Then
                     Console.WriteLine(part.AttachmentName())
                 End If
             Next part
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.IsEmbedded">
            <summary>
            Determines if the MimePart is an embedded object, such as an image.
            </summary>
            <returns>True if the Part is an embedded MimePart</returns>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            MimePartCollection parts = msg.RetrieveAllParts();
            foreach( MimePart part in parts )
            {
            	if( part.IsEmbedded() )
            		Console.WriteLine( part.EmbeddedName() );
            }
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            'close the stream
            fs.Close()
            
            Dim parts As MimePartCollection = msg.RetrieveAllParts()
            Dim part As MimePart
            For Each part In parts
                If part.IsEmbedded() Then
                    Console.WriteLine(part.EmbeddedName())
                End If
            Next part
            Console.WriteLine("done...")
            Console.ReadLine()
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.IsInline">
            <summary>
            Determines if this MimePart is an inline part.
            </summary>
            <returns></returns>
            <example>
            <code lang="C#">
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample.eml" );
            MimePartCollection parts = m.AttachmentInLineParts();
            if( ( parts != null ) &amp;&amp; ( parts.Count &gt; 0 ) )
            {
            	foreach( MimePart part in parts )
            	{
            
            		if( part.IsInline() )
            		{
            			//write out it's InLine name
            			Console.WriteLine( part.InlineName() );
            		}
            		else if( part.IsAttachment() )
            		{
            			Console.WriteLine( part.AttachmentName() );
            		}
            
            		//save the part to the directory
            		part.Save( "c:\\temp\\"  );
            	}
            }
            
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample.eml")
            Dim parts As MimePartCollection = m.AttachmentInLineParts()
            If Not (parts Is Nothing) And parts.Count > 0 Then
               Dim part As MimePart
               For Each part In  parts
                  
                  If part.IsInline() Then
                     'write out it's InLine name
                     Console.WriteLine(part.InlineName())
                  Else
                     If part.IsAttachment() Then
                        Console.WriteLine(part.AttachmentName())
                     End If
                  End If 
                  'save the part to the directory
                  part.Save("c:\temp\")
               Next part
            End If
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.IsImage">
            <summary>
            Checks to see if the part is an image.
            </summary>
            <returns>True if the Content-Type is image.</returns>
            <example>
            <code lang="C#">
            
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample.eml" );
            MimePartCollection parts = m.RetrieveAllParts();
            
            foreach( MimePart part in parts )
            {
            	if( part.IsMultiPart() )
            	{
            		//process any multi-parts
            	}
            	else if( part.IsImage( "gif" ) )
            	{
            		//process .gif images
            	}
            	else if( part.IsImage() )
            	{
            		//process any other images
            	}
            
            	//write out the filename
            	Console.WriteLine( part.Filename );
            
            }
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample.eml")
            Dim parts As MimePartCollection = m.RetrieveAllParts()
            
            Dim part As MimePart
            For Each part In  parts
               If part.IsMultiPart() Then
               'process any multi-parts
               Else
                  If part.IsImage("gif") Then
                  'process .gif images
                  Else
                     If part.IsImage() Then
                     End If
                  End If 'process any other images
               End If
               
               'write out the filename
               Console.WriteLine(part.Filename)
            Next part 
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.IsImage(System.String)">
            <summary>
            Checks to see if the part is an image with a specific subtype.
            </summary>
            <param name="subtype">The subtype of the image; for example: jpeg, gif, bmp, etc...</param>
            <returns>True if the image has the specified subtype</returns>
            <example>
            <code lang="C#">
            
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample.eml" );
            MimePartCollection parts = m.RetrieveAllParts();
            
            foreach( MimePart part in parts )
            {
            	if( part.IsMultiPart() )
            	{
            		//process any multi-parts
            	}
            	else if( part.IsImage( "gif" ) )
            	{
            		//process .gif images
            	}
            	else if( part.IsImage() )
            	{
            		//process any other images
            	}
            
            	//write out the filename
            	Console.WriteLine( part.Filename );
            
            }
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample.eml")
            Dim parts As MimePartCollection = m.RetrieveAllParts()
            
            Dim part As MimePart
            For Each part In  parts
               If part.IsMultiPart() Then
               'process any multi-parts
               Else
                  If part.IsImage("gif") Then
                  'process .gif images
                  Else
                     If part.IsImage() Then
                     End If
                  End If 'process any other images
               End If
               
               'write out the filename
               Console.WriteLine(part.Filename)
            Next part 
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.IsMessage">
            <summary>
            Determines if this MimePart is a RFC Message.
            </summary>
            <returns>True or False</returns>
            <remarks>
            This method looks for the Content-Type header set to a message. This method can be 
            specifically used for processing NDRs (Non-Deliverable Receipts) or attached messages, typical in 
            a bounce-back scenario.
            </remarks>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            string path = "message1.eml";
             
            MimeMessage m = MimeMessage.ParseFile( path );
             
            //bounces are normally attached as rfc822/message parts
            MimePartCollection parts = m.MimeParts;
             
            foreach( MimePart part in bounces )
            {
                if( part.IsMessage() )
                {
                    Console.WriteLine( part.RawText );
                }
            }
             
            Console.WriteLine( "done." );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim path As String = "message1.eml"
             
            Dim m As MimeMessage = MimeMessage.ParseFile(path)
             
            'bounces are normally attached as rfc822/message parts
            Dim parts As MimePartCollection = m.MimeParts
             
            Dim part As MimePart
            For Each part In  bounces
               If part.IsMessage() Then
                  Console.WriteLine(part.RawText)
               End If
            Next part
             
            Console.WriteLine("done.")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.IsMultiPart">
            <summary>
            Checks to see if the Part has a Multipart content-type.
            </summary>
            <returns>True if the part has a multipart content-type.</returns>
            <example>
            <code lang="C#">
            
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample.eml" );
            MimePartCollection parts = m.RetrieveAllParts();
            
            foreach( MimePart part in parts )
            {
            	if( part.IsMultiPart() )
            	{
            		//process any multi-parts
            	}
            	else if( part.IsImage( "gif" ) )
            	{
            		//process .gif images
            	}
            	else if( part.IsImage() )
            	{
            		//process any other images
            	}
            
            	//write out the filename
            	Console.WriteLine( part.Filename );
            
            }
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample.eml")
            Dim parts As MimePartCollection = m.RetrieveAllParts()
            
            Dim part As MimePart
            For Each part In  parts
               If part.IsMultiPart() Then
               'process any multi-parts
               Else
                  If part.IsImage("gif") Then
                  'process .gif images
                  Else
                     If part.IsImage() Then
                     End If
                  End If 'process any other images
               End If
               
               'write out the filename
               Console.WriteLine(part.Filename)
            Next part 
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.LoadData(System.Byte[])">
            <summary>
            Loads an array of binary data into the body.
            </summary>
            <param name="data">Binary array of data.</param>
        </member>
        <member name="M:aspNetMime.MimePart.MarkAsAttachment">
            <summary>
            Marks the MimePart as an attachment.
            </summary>
            <remarks>This is perfomed by setting the Content-Disposition header to attachment.</remarks>
            <example>
            <code lang="C#">
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample1.eml" );
            
            //add an attachment
            string path = "c:\\temp\\logo.gif";
            MimePart attachment = MimePart.CreateFromFile( path );
            
            //mark as an attachment
            attachment.MarkAsAttachment();
            
            m.Attachments.Add( attachment );
            
            //resave the message
            m.SaveToFile( "c:\\temp\\sample2.eml", true, true );
            
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample1.eml")
            
            'add an attachment
            Dim path As String = "c:\temp\logo.gif"
            Dim attachment As MimePart = MimePart.CreateFromFile(path)
            
            'mark as an attachment
            attachment.MarkAsAttachment()
            
            m.Attachments.Add(attachment)
            
            'resave the message
            m.SaveToFile("c:\temp\sample2.eml", True, True)
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.MarkAsInLine">
            <summary>
            Marks the MimePart as an inline part.
            </summary>
            <remarks>This is perfomed by setting the Content-Disposition header to inline.</remarks>
            <example>
            <code lang="C#">
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample1.eml" );
            
            //add InLine
            string path = "c:\\temp\\logo.gif";
            MimePart InLine = MimePart.CreateFromFile( path );
            
            //mark as an InLine
            InLine.MarkAsInLine();
            
            m.InLineParts.Add( InLine );
            
            //resave the message
            m.SaveToFile( "c:\\temp\\sample2.eml", true, true );
            
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample1.eml")
            
            'add an InLine
            Dim path As String = "c:\temp\logo.gif"
            Dim InLine As MimePart = MimePart.CreateFromFile(path)
            
            'mark as an InLine
            InLine.MarkAsInLine()
            
            m.InLineParts.Add(InLine)
            
            'resave the message
            m.SaveToFile("c:\temp\sample2.eml", True, True)
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.ParentMessage">
            <summary>
            Retrieves the parent MimeMessage of this Mime Part. If this Mime Part is the Parent, an instance to itself is returned;
            </summary>
            <returns></returns>
        </member>
        <member name="M:aspNetMime.MimePart.PreviewText">
            <summary>
            Returns the first 512 characters of the MimePart. If the MimePart is of type text/html, the HTML is first stripped.
            </summary>
            <returns>First 512 characters of text</returns>
            <example>
            <code lang="C#">
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample.eml" );
            
            //show the preamble
            string preamble = m.Preamble;
            Console.WriteLine( preamble );
            
            //find the plain text part
            MimePart textPart = m.TextMimePart;
            
            //preview text
            string previewText = textPart.PreviewText();
            Console.WriteLine( previewText );
            
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample.eml")
            
            'show the preamble
            Dim preamble As String = m.Preamble
            Console.WriteLine(preamble)
            
            'find the plain text part
            Dim textPart As MimePart = m.TextMimePart
            
            'preview text
            Dim previewText As String = textPart.PreviewText()
            Console.WriteLine(previewText)
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.PreviewText(System.Int32)">
            <summary>
            Returns the first characterCount characters of the MimePart. If the MimePart is of type text/html, the HTML is first stripped.
            </summary>
            <param name="characterCount">The number of characters to return.</param>
            <returns>First characterCount of characters of text</returns>
            <example>
            <code lang="C#">
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample.eml" );
            
            //show the preamble
            string preamble = m.Preamble;
            Console.WriteLine( preamble );
            
            //find the plain text part
            MimePart textPart = m.TextMimePart;
            
            //preview text -- first 128 characters
            string previewText = textPart.PreviewText( 128 );
            Console.WriteLine( previewText );
            
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample.eml")
            
            'show the preamble
            Dim preamble As String = m.Preamble
            Console.WriteLine(preamble)
            
            'find the plain text part
            Dim textPart As MimePart = m.TextMimePart
            
            'preview text -- first 128 characters
            Dim previewText As String = textPart.PreviewText( 128 )
            Console.WriteLine(previewText)
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.Save(System.String)">
            <summary>
            Saves the MimePart contents (excluding headers) to a Directory
            </summary>
            <param name="directoryPath">Director for saving</param>
            <returns>True if the Save was successful.</returns>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //as an example, look for a specific attachment( bouncedEmail.eml) and save to a 'bad email' folder
            MimePartCollection attachments = msg.Attachments;
            foreach( MimePart attachment in attachments )
            {
            	if( attachment.AttachmentName() == "bouncedEmail.eml" )
            	{
            		attachment.Save( "c:\\temp\\bademails\\" );
            	}
            }
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            
            </code>
            <code lang="Visual Basic">
            
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            'close the stream
            fs.Close()
            
            'as an example, look for a specific attachment( bouncedEmail.eml) and save to a 'bad email' folder
            Dim attachments As MimePartCollection = msg.Attachments
            Dim attachment As MimePart
            For Each attachment In attachments
                If attachment.AttachmentName() = "bouncedEmail.eml" Then
                    attachment.Save("c:\temp\bademails\")
                End If
            Next attachment
            
            
            Console.WriteLine("done...")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.Save(System.String,System.Boolean)">
            <summary>
            Saves the MimePart (excluding headers) to a Directory
            </summary>
            <param name="directoryPath">Directory for saving.</param>
            <param name="overwriteFile">Overwrite any existing file with the same filename.</param>
            <returns>True if the save was successful.</returns>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //as an example, look for a specific attachment( bouncedEmail.eml) and save to a 'bad email' folder
            MimePartCollection attachments = msg.Attachments;
            foreach( MimePart attachment in attachments )
            {
            	if( attachment.AttachmentName() == "bouncedEmail.eml" )
            	{
            		attachment.Save( "c:\\temp\\bademails\\", false );
            	}
            }
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            
            </code>
            <code lang="Visual Basic">
            
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            'close the stream
            fs.Close()
            
            'as an example, look for a specific attachment( bouncedEmail.eml) and save to a 'bad email' folder
            Dim attachments As MimePartCollection = msg.Attachments
            Dim attachment As MimePart
            For Each attachment In attachments
                If attachment.AttachmentName() = "bouncedEmail.eml" Then
                    attachment.Save("c:\temp\bademails\", False)
                End If
            Next attachment
            
            
            Console.WriteLine("done...")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.Save(System.String,System.Boolean,System.String)">
            <summary>
            Saves the MimePart (excluding headers) to a file.
            </summary>
            <param name="directoryPath">Directory the MimePart is saved</param>
            <param name="overwriteFile">Overwrite any existing file with the same name.</param>
            <param name="filename">Use this filename, instead of any name associated with this MimePart</param>
            <returns>True if the save was successful</returns>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //as an example, look for a specific attachment( bouncedEmail.eml) and save to a 'bad email' folder
            MimePartCollection attachments = msg.Attachments;
            foreach( MimePart attachment in attachments )
            {
            	if( attachment.AttachmentName() == "bouncedEmail.eml" )
            	{
            		attachment.Save( "c:\\temp\\bademails\\",false, "BadEmail" + DateTime.Now.ToShortDateString() + ".eml" );
            	}
            }
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            
            </code>
            <code lang="Visual Basic">
            
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            'close the stream
            fs.Close()
            
            'as an example, look for a specific attachment( bouncedEmail.eml) and save to a 'bad email' folder
            Dim attachments As MimePartCollection = msg.Attachments
            Dim attachment As MimePart
            For Each attachment In attachments
                If attachment.AttachmentName() = "bouncedEmail.eml" Then
                    attachment.Save("c:\temp\bademails\", False, DateTime.Now.ToShortDateString() + ".eml" )
                End If
            Next attachment
            
            
            Console.WriteLine("done...")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.Save(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Saves the MimePart (excluding headers) to a file.
            </summary>
            <param name="directoryPath">Directory the MimePart is saved</param>
            <param name="overwriteFile">Overwrite any existing file with the same name.</param>
            <param name="filename">Use this filename, instead of any name associated with this MimePart</param>
            <param name="suggestedName">The name to use if filename is null or contains invalid chars.</param>
            <returns>True if the save was successful</returns>
            <example>
            <code lang="C#">
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample.eml" );
            MimePartCollection parts = m.InLineParts;
            if( ( parts != null ) &amp;&amp; ( parts.Count &gt; 0 ) )
            {
            	foreach( MimePart part in parts )
            	{
            		//save to the temp directory, but don't overwrite any file. 
            		//use the file name 'file1.tmp", but if the filename on the part is has invalid characters, overwrite is with a generated guid
            		part.Save( "c:\\temp\\", false, "file1.tmp", System.Guid.NewGuid().ToString() + ".tmp" );
            	}
            }
            
            
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample.eml")
            Dim parts As MimePartCollection = m.InLineParts
            If Not (parts Is Nothing) And parts.Count > 0 Then
               Dim part As MimePart
               For Each part In  parts
                  'save to the temp directory, but don't overwrite any file. 
                  'use the file name 'file1.tmp", but if the filename on the part is has invalid characters, overwrite is with a generated guid
                  part.Save("c:\temp\", False, "file1.tmp", System.Guid.NewGuid().ToString() + ".tmp")
               Next part
            End If
            
            
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.SaveAs(System.String)">
            <summary>
            Path for saving this MimePart body (excluding headers).
            </summary>
            <param name="path">Filesystem path.</param>
            <returns>True if the SaveAs was successful.</returns>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //save the body as a file
            msg.SaveAs( "c:\\temp\\temp.eml" );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            'close the stream
            fs.Close()
            
            'save the body as a file
            msg.SaveAs("c:\temp\temp.eml")
            
            
            Console.WriteLine("done...")
            Console.ReadLine()
            
            
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.SetRawText(System.String,aspNetMime.MimeEncoding)">
            <summary>Sets the RawText property using a MimeEncoding</summary>
            <param name="text">Text to be applied to RawText with a specific MimeEncoding.</param>
            <param name="encoding">The MimeEncoding to apply.</param>
            <example>
            <code lang="C#">
            //create a MimeMessage from some data in Sql Server
            byte[] data = SqlServerDocument(); //a method that returns data from Sql Server
            MimeMessage m = new MimeMessage( data, Encoding.ASCII );
            
            MimePartCollection parts = m.RetrieveAllParts();
            //rewrite the text part content
            if( m.TextMimePart != null )
            {
            	m.TextMimePart.SetRawText( "this will be the new text", MimeEncoding.QuotedPrintable );
            }
            //view the formatted message 
            Console.WriteLine( m.ToString() );
            
            </code>
            <code lang="VB.NET">
             'create a MimeMessage from some data in Sql Server
            Dim data As Byte() = SqlServerDocument() 'a method that returns data from Sql Server
            Dim m As New MimeMessage(data, Encoding.ASCII)
            
            Dim parts As MimePartCollection = m.RetrieveAllParts()
            'rewrite the text part content
            If Not (m.TextMimePart Is Nothing) Then
               m.TextMimePart.SetRawText("this will be the new text", MimeEncoding.QuotedPrintable)
            End If
            'view the formatted message 
            Console.WriteLine(m.ToString())
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.SetRawText(System.Byte[],aspNetMime.MimeEncoding)">
            <summary>Sets the RawText property using a MimeEncoding</summary>
            <param name="data">Binary data used to set the RawText property.</param>
            <param name="encoding">Encoding to be applied to the data.</param>
            <example>
            <code lang="C#">
            
            //create a MimeMessage from some data in Sql Server
            byte[] data = SqlServerDocument(); //a method that returns data from Sql Server
            MimeMessage m = new MimeMessage( data, Encoding.ASCII );
            
            MimePartCollection parts = m.RetrieveAllParts();
            //rewrite the text part content
            if( m.TextMimePart != null )
            {
            	byte[] newData = Encoding.ASCII.GetBytes( "this will be the new body of the text body part." );
            	m.TextMimePart.SetRawText( newData, MimeEncoding.QuotedPrintable );
            }
            
            //view the formatted message 
            Console.WriteLine( m.ToString() );
            
            </code>
            <code lang="VB.NET">
            
             'create a MimeMessage from some data in Sql Server
            Dim data As Byte() = SqlServerDocument() 'a method that returns data from Sql Server
            Dim m As New MimeMessage(data, Encoding.ASCII)
            
            Dim parts As MimePartCollection = m.RetrieveAllParts()
            'rewrite the text part content
            If Not (m.TextMimePart Is Nothing) Then
               Dim newData As Byte() = Encoding.ASCII.GetBytes("this will be the new body of the text body part.")
               m.TextMimePart.SetRawText(newData, MimeEncoding.QuotedPrintable)
            End If
            
            'view the formatted message 
            Console.WriteLine(m.ToString())
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.ToString">
            <summary>A string representation of the MimePart</summary>
        </member>
        <member name="M:aspNetMime.MimePart.WriteToStream(System.IO.Stream)">
            <summary>
            Writes the body of the part to a stream.
            </summary>
            <param name="stream">Stream for writing.</param>
            <example>
            <code lang="C#">
            //the following examples streams an attachments from an ASP.NET 
            //page, directly to the browse client
            
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            StreamReader sr = new StreamReader( Server.MapPath( filename ) );
            string emailContents = sr.ReadToEnd();
            sr.Close();
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( emailContents );
            
            
            //get the attachment named 'mylogo.jpg'
            MimePart attachmentPart = msg.GetAttachment( "mylogo.jpg" );
            
            if( attachmentPart.ContentType != null )
            	Response.ContentType = attachmentPart.ContentType.Value;
            
            attachmentPart.WriteToStream( Response.OutputStream );
            
            
            </code>
            <code lang="Visual Basic">
            'the following examples streams an attachments from an ASP.NET 
            'page, directly to the browse client
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim sr As New StreamReader(Server.MapPath(filename))
            Dim emailContents As String = sr.ReadToEnd()
            sr.Close()
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(emailContents)
            
            
            'get the attachment named 'mylogo.jpg'
            Dim attachmentPart As MimePart = msg.GetAttachment("mylogo.jpg")
            
            If Not (attachmentPart.ContentType Is Nothing) Then
                Response.ContentType = attachmentPart.ContentType.Value
            End If
            
            attachmentPart.WriteToStream(Response.OutputStream)
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.WriteToStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Writes the Data to the stream using a specific encoding.
            </summary>
            <param name="stream">Stream for writing.</param>
            <param name="encoding">Encoding to use to write to the stream.</param>
            <example>
            <code lang="C#">
            //the following examples streams an attachments from an ASP.NET 
            //page, directly to the browse client
            
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            StreamReader sr = new StreamReader( Server.MapPath( filename ) );
            string emailContents = sr.ReadToEnd();
            sr.Close();
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( emailContents );
            
            
            //get the attachment named 'mylogo.jpg'
            MimePart attachmentPart = msg.GetAttachment( "mylogo.jpg" );
            
            if( attachmentPart.ContentType != null )
            	Response.ContentType = attachmentPart.ContentType.Value;
            
            attachmentPart.WriteToStream( Response.OutputStream, Encoding.UTF8 );
            
            
            </code>
            <code lang="Visual Basic">
            'the following examples streams an attachments from an ASP.NET 
            'page, directly to the browse client
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim sr As New StreamReader(Server.MapPath(filename))
            Dim emailContents As String = sr.ReadToEnd()
            sr.Close()
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(emailContents)
            
            
            'get the attachment named 'mylogo.jpg'
            Dim attachmentPart As MimePart = msg.GetAttachment("mylogo.jpg")
            
            If Not (attachmentPart.ContentType Is Nothing) Then
                Response.ContentType = attachmentPart.ContentType.Value
            End If
            
            attachmentPart.WriteToStream(Response.OutputStream, Encoding.UTF8)
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.Parse(System.String)">
            <summary>
              Parses the data for a Body Part from a Text string.
            </summary>
            <param name="text">
              String containing the data to use for this Body Part.
            </param>
        </member>
        <member name="M:aspNetMime.MimePart.Parse(System.String,System.Text.Encoding)">
            <summary>
              Parses the data for a Body Part from a Text string.
            </summary>
            <param name="text">
              String containing the data to use for this Body Part.
            </param>
            <param name="encoding">The encoding used for parsing the individual bytes of text.</param>
        </member>
        <member name="M:aspNetMime.MimePart.Parse(System.IO.Stream)">
            <summary>
              Parses the data for a Body Part from a Text string.
            </summary>
            <param name="stream">
              Stream containing the data to parse.
            </param>
        </member>
        <member name="M:aspNetMime.MimePart.Parse(System.IO.Stream,System.Text.Encoding)">
            <summary>
              Parses the data for a Body Part from a Text string.
            </summary>
            <param name="stream">
              Stream containing the data to parse.
            </param>
            <param name="encoding">
            The encoding used for reading the stream.
            </param>
        </member>
        <member name="M:aspNetMime.MimePart.Parse(System.Byte[])">
            <summary>
            Parses the bye array of data into various MimePart properties and
            information.
            </summary>
            <remarks>
            UTF8 encoding is used to convert any necessary data into textual
            information.
            </remarks>
            <param name="data">The byte array containing the MimePart data.</param>
        </member>
        <member name="M:aspNetMime.MimePart.Parse(System.Byte[],System.Text.Encoding)">
            <remarks>
            Many times an ISO-8859-1 encoding is required for parsing emails. aspNetMime will
            try and detect it. However, to manually set that encoding, call Encoding.GetEncoding(
            "ISO-8859-1" ).
            </remarks>
            <param name="data">The byte array containing the MimePart data.</param>
            <param name="encoding">
            The encoding used to convert binary data to strings. If encoding is null or
            nothing, a UTF8 encoding is used.
            </param>
        </member>
        <member name="M:aspNetMime.MimePart.CreateFromBinary(System.Byte[])">
            <summary>
            Creates a mime part from a byte array of data.
            </summary>
            <param name="data">byte array of data.</param>
            <returns>Mime Part</returns>
            <example>
            <code lang="C#">
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample1.eml" );
            
            //add an attachment from sql server
            byte[] data = SqlServerDocument(); //get data from Sql Server
            MimePart attachment = MimePart.CreateFromBinary( data );
            
            //set various properties
            attachment.ContentType= Header.ContentType( "application/msword" );
            attachment.Name = "resume.doc";
            attachment.Filename = "resume.doc";
            
            //mark as an attachment
            attachment.MarkAsAttachment();
            
            m.Attachments.Add( attachment );
            
            //resave the message
            m.SaveToFile( "c:\\temp\\sample2.eml", true, true );
            </code>
            <code lang="VB.NET">
            
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample1.eml")
            
            'add an attachment from sql server
            Dim data As Byte() = SqlServerDocument() 'get data from Sql Server
            Dim attachment As MimePart = MimePart.CreateFromBinary(data)
            
            'set various properties
            attachment.ContentType = Header.ContentType("application/msword")
            attachment.Name = "resume.doc"
            attachment.Filename = "resume.doc"
            
            'mark as an attachment
            attachment.MarkAsAttachment()
            
            m.Attachments.Add(attachment)
            
            'resave the message
            m.SaveToFile("c:\temp\sample2.eml", True, True)
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.CreateFromBinary(System.Byte[],aspNetMime.MimeEncoding)">
            <summary>
            Creates a mime part from a byte array of data.
            </summary>
            <param name="data">byte array of data.</param>
            <param name="mimeEncoding">MimeEncoding to apply to the byte array of data.</param>
            <returns>Mime Part</returns>
            <example>
            <code lang="C#">
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample1.eml" );
            
            //add an attachment from sql server
            byte[] data = SqlServerDocument(); //get data from Sql Server
            MimePart attachment = MimePart.CreateFromBinary( data, MimeEncoding.Base64 );
            
            //set various properties
            attachment.ContentType= Header.ContentType( "application/msword" );
            attachment.Name = "resume.doc";
            attachment.Filename = "resume.doc";
            
            //mark as an attachment
            attachment.MarkAsAttachment();
            
            m.Attachments.Add( attachment );
            
            //resave the message
            m.SaveToFile( "c:\\temp\\sample2.eml", true, true );
            </code>
            <code lang="VB.NET">
            
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample1.eml")
            
            'add an attachment from sql server
            Dim data As Byte() = SqlServerDocument() 'get data from Sql Server
            Dim attachment As MimePart = MimePart.CreateFromBinary(data, MimeEncoding.Base64)
            
            'set various properties
            attachment.ContentType = Header.ContentType("application/msword")
            attachment.Name = "resume.doc"
            attachment.Filename = "resume.doc"
            
            'mark as an attachment
            attachment.MarkAsAttachment()
            
            m.Attachments.Add(attachment)
            
            'resave the message
            m.SaveToFile("c:\temp\sample2.eml", True, True)
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.CreateFromFile(System.String)">
            <summary>
            Creates a mime part from a file.
            </summary>
            <param name="path">path to the file.</param>
            <returns>Mime Part</returns>
            <example>
            <code lang="C#">
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample1.eml" );
            
            //add an attachment
            string path = "c:\\temp\\logo.gif";
            MimePart attachment = MimePart.CreateFromFile( path );
            
            //mark as an attachment
            attachment.MarkAsAttachment();
            
            m.Attachments.Add( attachment );
            
            //resave the message
            m.SaveToFile( "c:\\temp\\sample2.eml", true, true );
            
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample1.eml")
            
            'add an attachment
            Dim path As String = "c:\temp\logo.gif"
            Dim attachment As MimePart = MimePart.CreateFromFile(path)
            
            'mark as an attachment
            attachment.MarkAsAttachment()
            
            m.Attachments.Add(attachment)
            
            'resave the message
            m.SaveToFile("c:\temp\sample2.eml", True, True)
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.CreateFromFile(System.String,aspNetMime.MimeEncoding)">
            <summary>
            Creates a mime part from a file.
            </summary>
            <param name="path">path to the file.</param>
            <param name="mimeEncoding">The MimeEncoding to use against the data found in the file.</param>
            <returns>Mime Part</returns>
            <example>
            <code lang="C#">
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample1.eml" );
            
            //add an attachment
            string path = "c:\\temp\\logo.gif";
            MimePart attachment = MimePart.CreateFromFile( path, MimeEncoding.Base64 );
            
            //mark as an attachment
            attachment.MarkAsAttachment();
            
            m.Attachments.Add( attachment );
            
            //resave the message
            m.SaveToFile( "c:\\temp\\sample2.eml", true, true );
            
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample1.eml")
            
            'add an attachment
            Dim path As String = "c:\temp\logo.gif"
            Dim attachment As MimePart = MimePart.CreateFromFile(path, MimeEncoding.Base64)
            
            'mark as an attachment
            attachment.MarkAsAttachment()
            
            m.Attachments.Add(attachment)
            
            'resave the message
            m.SaveToFile("c:\temp\sample2.eml", True, True)
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.CreateFromStream(System.IO.Stream)">
            <summary>
            Creates a mime part from a System.IO.Stream.
            </summary>
            <param name="stream">Stream of data</param>
            <returns>Mime Part</returns>
            <example>
            <code lang="C#">
            
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample1.eml" );
            
            //add an attachment
            string path = "c:\\temp\\logo.gif";
            FileStream fs = File.OpenRead( path );
            MimePart attachment = MimePart.CreateFromStream( fs );
            fs.Close();
            
            //set various properties
            attachment.ContentType = Header.ContentType( "image/gif" );
            attachment.Name = "logo.gif";
            attachment.Filename = "logo.gif";
            
            //mark as an attachment
            attachment.MarkAsAttachment();
            
            m.Attachments.Add( attachment );
            
            //resave the message
            m.SaveToFile( "c:\\temp\\sample2.eml", true, true );
            </code>
            <code lang="VB.NET">
            
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample1.eml")
            
            'add an attachment
            Dim path As String = "c:\temp\logo.gif"
            Dim fs As FileStream = File.OpenRead(path)
            Dim attachment As MimePart = MimePart.CreateFromStream(fs)
            fs.Close()
            
            'set various properties
            attachment.ContentType = Header.ContentType("image/gif")
            attachment.Name = "logo.gif"
            attachment.Filename = "logo.gif"
            
            'mark as an attachment
            attachment.MarkAsAttachment()
            
            m.Attachments.Add(attachment)
            
            'resave the message
            m.SaveToFile("c:\temp\sample2.eml", True, True)
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.CreateFromStream(System.IO.Stream,aspNetMime.MimeEncoding)">
            <summary>
            Creates a mime part from a System.IO.Stream.
            </summary>
            <param name="stream">Stream of data</param>
            <param name="mimeEncoding">MimeEncoding to apply against the data found in the stream.</param>
            <returns>Mime Part</returns>
            <example>
            <code lang="C#">
            
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample1.eml" );
            
            //add an attachment
            string path = "c:\\temp\\logo.gif";
            FileStream fs = File.OpenRead( path );
            MimePart attachment = MimePart.CreateFromStream( fs, MimeEncoding.Base64 );
            fs.Close();
            
            //set various properties
            attachment.ContentType = Header.ContentType( "image/gif" );
            attachment.Name = "logo.gif";
            attachment.Filename = "logo.gif";
            
            //mark as an attachment
            attachment.MarkAsAttachment();
            
            m.Attachments.Add( attachment );
            
            //resave the message
            m.SaveToFile( "c:\\temp\\sample2.eml", true, true );
            </code>
            <code lang="VB.NET">
            
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample1.eml")
            
            'add an attachment
            Dim path As String = "c:\temp\logo.gif"
            Dim fs As FileStream = File.OpenRead(path)
            Dim attachment As MimePart = MimePart.CreateFromStream(fs, MimeEncoding.Base64)
            fs.Close()
            
            'set various properties
            attachment.ContentType = Header.ContentType("image/gif")
            attachment.Name = "logo.gif"
            attachment.Filename = "logo.gif"
            
            'mark as an attachment
            attachment.MarkAsAttachment()
            
            m.Attachments.Add(attachment)
            
            'resave the message
            m.SaveToFile("c:\temp\sample2.eml", True, True)
            
            
            
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.CreateFromString(System.String)">
            <summary>
            Creates a mime part from a string of data.
            </summary>
            <param name="contents">String of data</param>
            <returns>Mime Part</returns>
            <example>
            <code lang="C#">
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample1.eml" );
            
            //add an attachment
            string content = "this content will be made into an attachment";
            MimePart attachment = MimePart.CreateFromString( content );
            
            //set various properties
            attachment.ContentType = Header.ContentType( "plain/text" );
            attachment.Name = "attachment1.txt";
            attachment.Filename = "attachment1.txt";
            
            //mark as an attachment
            attachment.MarkAsAttachment();
            
            m.Attachments.Add( attachment );
            
            //resave the message
            m.SaveToFile( "c:\\temp\\sample2.eml", true, true );
            
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample1.eml")
            
            'add an attachment
            Dim content As String = "this content will be made into an attachment"
            Dim attachment As MimePart = MimePart.CreateFromString(content, MimeEncoding.Base64 )
            
            'set various properties
            attachment.ContentType = Header.ContentType("plain/text")
            attachment.Name = "attachment1.txt"
            attachment.Filename = "attachment1.txt"
            
            'mark as an attachment
            attachment.MarkAsAttachment()
            
            m.Attachments.Add(attachment)
            
            'resave the message
            m.SaveToFile("c:\temp\sample2.eml", True, True)
            
            
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimePart.CreateFromString(System.String,System.String,aspNetMime.MimeEncoding)">
            <summary>
            Creates a mime part from a string of data.
            </summary>
            <param name="contents">String of data</param>
            <param name="characterSet">Characterset of the string</param>
            <param name="mimeEncoding">MimeEncoding to apply to the contents.</param>
            <returns>Mime Part</returns>
            <example>
            <code lang="C#">
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample1.eml" );
            
            //add an attachment
            string content = "this content will be made into an attachment";
            MimePart attachment = MimePart.CreateFromString( content );
            
            //set various properties
            attachment.ContentType = Header.ContentType( "plain/text" );
            attachment.Name = "attachment1.txt";
            attachment.Filename = "attachment1.txt";
            
            //mark as an attachment
            attachment.MarkAsAttachment();
            
            m.Attachments.Add( attachment );
            
            //resave the message
            m.SaveToFile( "c:\\temp\\sample2.eml", true, true );
            
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample1.eml")
            
            'add an attachment
            Dim content As String = "this content will be made into an attachment"
            Dim attachment As MimePart = MimePart.CreateFromString(content, MimeEncoding.Base64 )
            
            'set various properties
            attachment.ContentType = Header.ContentType("plain/text")
            attachment.Name = "attachment1.txt"
            attachment.Filename = "attachment1.txt"
            
            'mark as an attachment
            attachment.MarkAsAttachment()
            
            m.Attachments.Add(attachment)
            
            'resave the message
            m.SaveToFile("c:\temp\sample2.eml", True, True)
            
            
            
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimePart.Boundary">
            <summary>
            The Boundary string for the Mime Part.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage part = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //boundary
            if( part.Boundary != null )
            	Console.WriteLine( part.Boundary );
            
            //charset
            if( part.CharSet != null ) 
            	Console.WriteLine( part.CharSet );
            
            //content-discription
            Console.WriteLine( Header.EmptyHeader( part.ContentDescription ).Value );
            
            //content disposition
            Console.WriteLine( Header.EmptyHeader( part.ContentDisposition ).Value );
            
            //content-id
            Console.WriteLine( Header.EmptyHeader( part.ContentID ).Value );
            
            //content location
            Console.WriteLine( Header.EmptyHeader( part.ContentLocation ).Value );
            
            //subtype of the type
            if( part.ContentSubType != null )
            	Console.WriteLine( part.ContentSubType );
            
            //content-type
            Console.WriteLine( Header.EmptyHeader( part.ContentType ).Value );
            
            //content-transfer encoding
            Console.WriteLine( Header.EmptyHeader( part.ContentTransferEncoding ).Value );
            
            //content-type as a string
            if( part.ContentTypeString != null )
            	Console.WriteLine( part.ContentTypeString );
            
            //check to see if the part has a name
            if( part.Name != null )
            	Console.WriteLine( part.Name );
            
            //see if this mime part has a parent
            if( part.Parent != null )
            	Console.WriteLine("this mime part has a parent." );
            
            //the raw text of the mime part
            Console.WriteLine( part.RawText );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim part As New aspNetMime.MimeMessage(fs)
            
             'close the stream
             fs.Close()
            
             'boundary
             If Not (part.Boundary Is Nothing) Then
                 Console.WriteLine(part.Boundary)
             End If
             'charset
             If Not (part.CharSet Is Nothing) Then
                 Console.WriteLine(part.CharSet)
             End If
             'content-discription
             Console.WriteLine(Header.EmptyHeader(part.ContentDescription).Value)
            
             'content disposition
             Console.WriteLine(Header.EmptyHeader(part.ContentDisposition).Value)
            
             'content-id
             Console.WriteLine(Header.EmptyHeader(part.ContentID).Value)
            
             'content location
             Console.WriteLine(Header.EmptyHeader(part.ContentLocation).Value)
            
             'subtype of the type
             If Not (part.ContentSubType Is Nothing) Then
                 Console.WriteLine(part.ContentSubType)
             End If
            
             'content-type
             Console.WriteLine(Header.EmptyHeader(part.ContentType).Value)
            
             'content-transfer encoding
             Console.WriteLine(Header.EmptyHeader(part.ContentTransferEncoding).Value)
            
             'content-type as a string
             If Not (part.ContentTypeString Is Nothing) Then
                 Console.WriteLine(part.ContentTypeString)
             End If
            
             'check to see if the part has a name
             If Not (part.Name Is Nothing) Then
                 Console.WriteLine(part.Name)
             End If
            
             'see if this mime part has a parent
             If Not (part.Parent Is Nothing) Then
                 Console.WriteLine("this mime part has a parent.")
             End If
            
             'the raw text of the mime part
             Console.WriteLine(part.RawText)
            
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimePart.CharSet">
            <summary>
            Character set of the Mime Part.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage part = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //boundary
            if( part.Boundary != null )
            	Console.WriteLine( part.Boundary );
            
            //charset
            if( part.CharSet != null ) 
            	Console.WriteLine( part.CharSet );
            
            //content-discription
            Console.WriteLine( Header.EmptyHeader( part.ContentDescription ).Value );
            
            //content disposition
            Console.WriteLine( Header.EmptyHeader( part.ContentDisposition ).Value );
            
            //content-id
            Console.WriteLine( Header.EmptyHeader( part.ContentID ).Value );
            
            //content location
            Console.WriteLine( Header.EmptyHeader( part.ContentLocation ).Value );
            
            //subtype of the type
            if( part.ContentSubType != null )
            	Console.WriteLine( part.ContentSubType );
            
            //content-type
            Console.WriteLine( Header.EmptyHeader( part.ContentType ).Value );
            
            //content-transfer encoding
            Console.WriteLine( Header.EmptyHeader( part.ContentTransferEncoding ).Value );
            
            //content-type as a string
            if( part.ContentTypeString != null )
            	Console.WriteLine( part.ContentTypeString );
            
            //check to see if the part has a name
            if( part.Name != null )
            	Console.WriteLine( part.Name );
            
            //see if this mime part has a parent
            if( part.Parent != null )
            	Console.WriteLine("this mime part has a parent." );
            
            //the raw text of the mime part
            Console.WriteLine( part.RawText );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim part As New aspNetMime.MimeMessage(fs)
            
             'close the stream
             fs.Close()
            
             'boundary
             If Not (part.Boundary Is Nothing) Then
                 Console.WriteLine(part.Boundary)
             End If
             'charset
             If Not (part.CharSet Is Nothing) Then
                 Console.WriteLine(part.CharSet)
             End If
             'content-discription
             Console.WriteLine(Header.EmptyHeader(part.ContentDescription).Value)
            
             'content disposition
             Console.WriteLine(Header.EmptyHeader(part.ContentDisposition).Value)
            
             'content-id
             Console.WriteLine(Header.EmptyHeader(part.ContentID).Value)
            
             'content location
             Console.WriteLine(Header.EmptyHeader(part.ContentLocation).Value)
            
             'subtype of the type
             If Not (part.ContentSubType Is Nothing) Then
                 Console.WriteLine(part.ContentSubType)
             End If
            
             'content-type
             Console.WriteLine(Header.EmptyHeader(part.ContentType).Value)
            
             'content-transfer encoding
             Console.WriteLine(Header.EmptyHeader(part.ContentTransferEncoding).Value)
            
             'content-type as a string
             If Not (part.ContentTypeString Is Nothing) Then
                 Console.WriteLine(part.ContentTypeString)
             End If
            
             'check to see if the part has a name
             If Not (part.Name Is Nothing) Then
                 Console.WriteLine(part.Name)
             End If
            
             'see if this mime part has a parent
             If Not (part.Parent Is Nothing) Then
                 Console.WriteLine("this mime part has a parent.")
             End If
            
             'the raw text of the mime part
             Console.WriteLine(part.RawText)
            
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimePart.ContentDescription">
            <summary>
            Content description header.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage part = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //boundary
            if( part.Boundary != null )
            	Console.WriteLine( part.Boundary );
            
            //charset
            if( part.CharSet != null ) 
            	Console.WriteLine( part.CharSet );
            
            //content-discription
            Console.WriteLine( Header.EmptyHeader( part.ContentDescription ).Value );
            
            //content disposition
            Console.WriteLine( Header.EmptyHeader( part.ContentDisposition ).Value );
            
            //content-id
            Console.WriteLine( Header.EmptyHeader( part.ContentID ).Value );
            
            //content location
            Console.WriteLine( Header.EmptyHeader( part.ContentLocation ).Value );
            
            //subtype of the type
            if( part.ContentSubType != null )
            	Console.WriteLine( part.ContentSubType );
            
            //content-type
            Console.WriteLine( Header.EmptyHeader( part.ContentType ).Value );
            
            //content-transfer encoding
            Console.WriteLine( Header.EmptyHeader( part.ContentTransferEncoding ).Value );
            
            //content-type as a string
            if( part.ContentTypeString != null )
            	Console.WriteLine( part.ContentTypeString );
            
            //check to see if the part has a name
            if( part.Name != null )
            	Console.WriteLine( part.Name );
            
            //see if this mime part has a parent
            if( part.Parent != null )
            	Console.WriteLine("this mime part has a parent." );
            
            //the raw text of the mime part
            Console.WriteLine( part.RawText );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim part As New aspNetMime.MimeMessage(fs)
            
             'close the stream
             fs.Close()
            
             'boundary
             If Not (part.Boundary Is Nothing) Then
                 Console.WriteLine(part.Boundary)
             End If
             'charset
             If Not (part.CharSet Is Nothing) Then
                 Console.WriteLine(part.CharSet)
             End If
             'content-discription
             Console.WriteLine(Header.EmptyHeader(part.ContentDescription).Value)
            
             'content disposition
             Console.WriteLine(Header.EmptyHeader(part.ContentDisposition).Value)
            
             'content-id
             Console.WriteLine(Header.EmptyHeader(part.ContentID).Value)
            
             'content location
             Console.WriteLine(Header.EmptyHeader(part.ContentLocation).Value)
            
             'subtype of the type
             If Not (part.ContentSubType Is Nothing) Then
                 Console.WriteLine(part.ContentSubType)
             End If
            
             'content-type
             Console.WriteLine(Header.EmptyHeader(part.ContentType).Value)
            
             'content-transfer encoding
             Console.WriteLine(Header.EmptyHeader(part.ContentTransferEncoding).Value)
            
             'content-type as a string
             If Not (part.ContentTypeString Is Nothing) Then
                 Console.WriteLine(part.ContentTypeString)
             End If
            
             'check to see if the part has a name
             If Not (part.Name Is Nothing) Then
                 Console.WriteLine(part.Name)
             End If
            
             'see if this mime part has a parent
             If Not (part.Parent Is Nothing) Then
                 Console.WriteLine("this mime part has a parent.")
             End If
            
             'the raw text of the mime part
             Console.WriteLine(part.RawText)
            
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimePart.ContentDisposition">
            <summary>
            Retreives the Content-Disposition header.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage part = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //boundary
            if( part.Boundary != null )
            	Console.WriteLine( part.Boundary );
            
            //charset
            if( part.CharSet != null ) 
            	Console.WriteLine( part.CharSet );
            
            //content-discription
            Console.WriteLine( Header.EmptyHeader( part.ContentDescription ).Value );
            
            //content disposition
            Console.WriteLine( Header.EmptyHeader( part.ContentDisposition ).Value );
            
            //content-id
            Console.WriteLine( Header.EmptyHeader( part.ContentID ).Value );
            
            //content location
            Console.WriteLine( Header.EmptyHeader( part.ContentLocation ).Value );
            
            //subtype of the type
            if( part.ContentSubType != null )
            	Console.WriteLine( part.ContentSubType );
            
            //content-type
            Console.WriteLine( Header.EmptyHeader( part.ContentType ).Value );
            
            //content-transfer encoding
            Console.WriteLine( Header.EmptyHeader( part.ContentTransferEncoding ).Value );
            
            //content-type as a string
            if( part.ContentTypeString != null )
            	Console.WriteLine( part.ContentTypeString );
            
            //check to see if the part has a name
            if( part.Name != null )
            	Console.WriteLine( part.Name );
            
            //see if this mime part has a parent
            if( part.Parent != null )
            	Console.WriteLine("this mime part has a parent." );
            
            //the raw text of the mime part
            Console.WriteLine( part.RawText );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim part As New aspNetMime.MimeMessage(fs)
            
             'close the stream
             fs.Close()
            
             'boundary
             If Not (part.Boundary Is Nothing) Then
                 Console.WriteLine(part.Boundary)
             End If
             'charset
             If Not (part.CharSet Is Nothing) Then
                 Console.WriteLine(part.CharSet)
             End If
             'content-discription
             Console.WriteLine(Header.EmptyHeader(part.ContentDescription).Value)
            
             'content disposition
             Console.WriteLine(Header.EmptyHeader(part.ContentDisposition).Value)
            
             'content-id
             Console.WriteLine(Header.EmptyHeader(part.ContentID).Value)
            
             'content location
             Console.WriteLine(Header.EmptyHeader(part.ContentLocation).Value)
            
             'subtype of the type
             If Not (part.ContentSubType Is Nothing) Then
                 Console.WriteLine(part.ContentSubType)
             End If
            
             'content-type
             Console.WriteLine(Header.EmptyHeader(part.ContentType).Value)
            
             'content-transfer encoding
             Console.WriteLine(Header.EmptyHeader(part.ContentTransferEncoding).Value)
            
             'content-type as a string
             If Not (part.ContentTypeString Is Nothing) Then
                 Console.WriteLine(part.ContentTypeString)
             End If
            
             'check to see if the part has a name
             If Not (part.Name Is Nothing) Then
                 Console.WriteLine(part.Name)
             End If
            
             'see if this mime part has a parent
             If Not (part.Parent Is Nothing) Then
                 Console.WriteLine("this mime part has a parent.")
             End If
            
             'the raw text of the mime part
             Console.WriteLine(part.RawText)
            
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimePart.ContentLocation">
            <summary>
            The Content-Location header of the Mime Part.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage part = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //boundary
            if( part.Boundary != null )
            	Console.WriteLine( part.Boundary );
            
            //charset
            if( part.CharSet != null ) 
            	Console.WriteLine( part.CharSet );
            
            //content-discription
            Console.WriteLine( Header.EmptyHeader( part.ContentDescription ).Value );
            
            //content disposition
            Console.WriteLine( Header.EmptyHeader( part.ContentDisposition ).Value );
            
            //content-id
            Console.WriteLine( Header.EmptyHeader( part.ContentID ).Value );
            
            //content location
            Console.WriteLine( Header.EmptyHeader( part.ContentLocation ).Value );
            
            //subtype of the type
            if( part.ContentSubType != null )
            	Console.WriteLine( part.ContentSubType );
            
            //content-type
            Console.WriteLine( Header.EmptyHeader( part.ContentType ).Value );
            
            //content-transfer encoding
            Console.WriteLine( Header.EmptyHeader( part.ContentTransferEncoding ).Value );
            
            //content-type as a string
            if( part.ContentTypeString != null )
            	Console.WriteLine( part.ContentTypeString );
            
            //check to see if the part has a name
            if( part.Name != null )
            	Console.WriteLine( part.Name );
            
            //see if this mime part has a parent
            if( part.Parent != null )
            	Console.WriteLine("this mime part has a parent." );
            
            //the raw text of the mime part
            Console.WriteLine( part.RawText );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim part As New aspNetMime.MimeMessage(fs)
            
             'close the stream
             fs.Close()
            
             'boundary
             If Not (part.Boundary Is Nothing) Then
                 Console.WriteLine(part.Boundary)
             End If
             'charset
             If Not (part.CharSet Is Nothing) Then
                 Console.WriteLine(part.CharSet)
             End If
             'content-discription
             Console.WriteLine(Header.EmptyHeader(part.ContentDescription).Value)
            
             'content disposition
             Console.WriteLine(Header.EmptyHeader(part.ContentDisposition).Value)
            
             'content-id
             Console.WriteLine(Header.EmptyHeader(part.ContentID).Value)
            
             'content location
             Console.WriteLine(Header.EmptyHeader(part.ContentLocation).Value)
            
             'subtype of the type
             If Not (part.ContentSubType Is Nothing) Then
                 Console.WriteLine(part.ContentSubType)
             End If
            
             'content-type
             Console.WriteLine(Header.EmptyHeader(part.ContentType).Value)
            
             'content-transfer encoding
             Console.WriteLine(Header.EmptyHeader(part.ContentTransferEncoding).Value)
            
             'content-type as a string
             If Not (part.ContentTypeString Is Nothing) Then
                 Console.WriteLine(part.ContentTypeString)
             End If
            
             'check to see if the part has a name
             If Not (part.Name Is Nothing) Then
                 Console.WriteLine(part.Name)
             End If
            
             'see if this mime part has a parent
             If Not (part.Parent Is Nothing) Then
                 Console.WriteLine("this mime part has a parent.")
             End If
            
             'the raw text of the mime part
             Console.WriteLine(part.RawText)
            
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimePart.ContentID">
            <summary>
            Retrieves the Content-ID header.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage part = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //boundary
            if( part.Boundary != null )
            	Console.WriteLine( part.Boundary );
            
            //charset
            if( part.CharSet != null ) 
            	Console.WriteLine( part.CharSet );
            
            //content-discription
            Console.WriteLine( Header.EmptyHeader( part.ContentDescription ).Value );
            
            //content disposition
            Console.WriteLine( Header.EmptyHeader( part.ContentDisposition ).Value );
            
            //content-id
            Console.WriteLine( Header.EmptyHeader( part.ContentID ).Value );
            
            //content location
            Console.WriteLine( Header.EmptyHeader( part.ContentLocation ).Value );
            
            //subtype of the type
            if( part.ContentSubType != null )
            	Console.WriteLine( part.ContentSubType );
            
            //content-type
            Console.WriteLine( Header.EmptyHeader( part.ContentType ).Value );
            
            //content-transfer encoding
            Console.WriteLine( Header.EmptyHeader( part.ContentTransferEncoding ).Value );
            
            //content-type as a string
            if( part.ContentTypeString != null )
            	Console.WriteLine( part.ContentTypeString );
            
            //check to see if the part has a name
            if( part.Name != null )
            	Console.WriteLine( part.Name );
            
            //see if this mime part has a parent
            if( part.Parent != null )
            	Console.WriteLine("this mime part has a parent." );
            
            //the raw text of the mime part
            Console.WriteLine( part.RawText );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim part As New aspNetMime.MimeMessage(fs)
            
             'close the stream
             fs.Close()
            
             'boundary
             If Not (part.Boundary Is Nothing) Then
                 Console.WriteLine(part.Boundary)
             End If
             'charset
             If Not (part.CharSet Is Nothing) Then
                 Console.WriteLine(part.CharSet)
             End If
             'content-discription
             Console.WriteLine(Header.EmptyHeader(part.ContentDescription).Value)
            
             'content disposition
             Console.WriteLine(Header.EmptyHeader(part.ContentDisposition).Value)
            
             'content-id
             Console.WriteLine(Header.EmptyHeader(part.ContentID).Value)
            
             'content location
             Console.WriteLine(Header.EmptyHeader(part.ContentLocation).Value)
            
             'subtype of the type
             If Not (part.ContentSubType Is Nothing) Then
                 Console.WriteLine(part.ContentSubType)
             End If
            
             'content-type
             Console.WriteLine(Header.EmptyHeader(part.ContentType).Value)
            
             'content-transfer encoding
             Console.WriteLine(Header.EmptyHeader(part.ContentTransferEncoding).Value)
            
             'content-type as a string
             If Not (part.ContentTypeString Is Nothing) Then
                 Console.WriteLine(part.ContentTypeString)
             End If
            
             'check to see if the part has a name
             If Not (part.Name Is Nothing) Then
                 Console.WriteLine(part.Name)
             End If
            
             'see if this mime part has a parent
             If Not (part.Parent Is Nothing) Then
                 Console.WriteLine("this mime part has a parent.")
             End If
            
             'the raw text of the mime part
             Console.WriteLine(part.RawText)
            
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimePart.ContentTransferEncoding">
            <summary>
            Retreives the Content-Transfer-Encoding header.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage part = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //boundary
            if( part.Boundary != null )
            	Console.WriteLine( part.Boundary );
            
            //charset
            if( part.CharSet != null ) 
            	Console.WriteLine( part.CharSet );
            
            //content-discription
            Console.WriteLine( Header.EmptyHeader( part.ContentDescription ).Value );
            
            //content disposition
            Console.WriteLine( Header.EmptyHeader( part.ContentDisposition ).Value );
            
            //content-id
            Console.WriteLine( Header.EmptyHeader( part.ContentID ).Value );
            
            //content location
            Console.WriteLine( Header.EmptyHeader( part.ContentLocation ).Value );
            
            //subtype of the type
            if( part.ContentSubType != null )
            	Console.WriteLine( part.ContentSubType );
            
            //content-type
            Console.WriteLine( Header.EmptyHeader( part.ContentType ).Value );
            
            //content-transfer encoding
            Console.WriteLine( Header.EmptyHeader( part.ContentTransferEncoding ).Value );
            
            //content-type as a string
            if( part.ContentTypeString != null )
            	Console.WriteLine( part.ContentTypeString );
            
            //check to see if the part has a name
            if( part.Name != null )
            	Console.WriteLine( part.Name );
            
            //see if this mime part has a parent
            if( part.Parent != null )
            	Console.WriteLine("this mime part has a parent." );
            
            //the raw text of the mime part
            Console.WriteLine( part.RawText );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim part As New aspNetMime.MimeMessage(fs)
            
             'close the stream
             fs.Close()
            
             'boundary
             If Not (part.Boundary Is Nothing) Then
                 Console.WriteLine(part.Boundary)
             End If
             'charset
             If Not (part.CharSet Is Nothing) Then
                 Console.WriteLine(part.CharSet)
             End If
             'content-discription
             Console.WriteLine(Header.EmptyHeader(part.ContentDescription).Value)
            
             'content disposition
             Console.WriteLine(Header.EmptyHeader(part.ContentDisposition).Value)
            
             'content-id
             Console.WriteLine(Header.EmptyHeader(part.ContentID).Value)
            
             'content location
             Console.WriteLine(Header.EmptyHeader(part.ContentLocation).Value)
            
             'subtype of the type
             If Not (part.ContentSubType Is Nothing) Then
                 Console.WriteLine(part.ContentSubType)
             End If
            
             'content-type
             Console.WriteLine(Header.EmptyHeader(part.ContentType).Value)
            
             'content-transfer encoding
             Console.WriteLine(Header.EmptyHeader(part.ContentTransferEncoding).Value)
            
             'content-type as a string
             If Not (part.ContentTypeString Is Nothing) Then
                 Console.WriteLine(part.ContentTypeString)
             End If
            
             'check to see if the part has a name
             If Not (part.Name Is Nothing) Then
                 Console.WriteLine(part.Name)
             End If
            
             'see if this mime part has a parent
             If Not (part.Parent Is Nothing) Then
                 Console.WriteLine("this mime part has a parent.")
             End If
            
             'the raw text of the mime part
             Console.WriteLine(part.RawText)
            
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimePart.ContentType">
            <summary>
            The Content-Type header for this body part.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage part = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //boundary
            if( part.Boundary != null )
            	Console.WriteLine( part.Boundary );
            
            //charset
            if( part.CharSet != null ) 
            	Console.WriteLine( part.CharSet );
            
            //content-discription
            Console.WriteLine( Header.EmptyHeader( part.ContentDescription ).Value );
            
            //content disposition
            Console.WriteLine( Header.EmptyHeader( part.ContentDisposition ).Value );
            
            //content-id
            Console.WriteLine( Header.EmptyHeader( part.ContentID ).Value );
            
            //content location
            Console.WriteLine( Header.EmptyHeader( part.ContentLocation ).Value );
            
            //subtype of the type
            if( part.ContentSubType != null )
            	Console.WriteLine( part.ContentSubType );
            
            //content-type
            Console.WriteLine( Header.EmptyHeader( part.ContentType ).Value );
            
            //content-transfer encoding
            Console.WriteLine( Header.EmptyHeader( part.ContentTransferEncoding ).Value );
            
            //content-type as a string
            if( part.ContentTypeString != null )
            	Console.WriteLine( part.ContentTypeString );
            
            //check to see if the part has a name
            if( part.Name != null )
            	Console.WriteLine( part.Name );
            
            //see if this mime part has a parent
            if( part.Parent != null )
            	Console.WriteLine("this mime part has a parent." );
            
            //the raw text of the mime part
            Console.WriteLine( part.RawText );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim part As New aspNetMime.MimeMessage(fs)
            
             'close the stream
             fs.Close()
            
             'boundary
             If Not (part.Boundary Is Nothing) Then
                 Console.WriteLine(part.Boundary)
             End If
             'charset
             If Not (part.CharSet Is Nothing) Then
                 Console.WriteLine(part.CharSet)
             End If
             'content-discription
             Console.WriteLine(Header.EmptyHeader(part.ContentDescription).Value)
            
             'content disposition
             Console.WriteLine(Header.EmptyHeader(part.ContentDisposition).Value)
            
             'content-id
             Console.WriteLine(Header.EmptyHeader(part.ContentID).Value)
            
             'content location
             Console.WriteLine(Header.EmptyHeader(part.ContentLocation).Value)
            
             'subtype of the type
             If Not (part.ContentSubType Is Nothing) Then
                 Console.WriteLine(part.ContentSubType)
             End If
            
             'content-type
             Console.WriteLine(Header.EmptyHeader(part.ContentType).Value)
            
             'content-transfer encoding
             Console.WriteLine(Header.EmptyHeader(part.ContentTransferEncoding).Value)
            
             'content-type as a string
             If Not (part.ContentTypeString Is Nothing) Then
                 Console.WriteLine(part.ContentTypeString)
             End If
            
             'check to see if the part has a name
             If Not (part.Name Is Nothing) Then
                 Console.WriteLine(part.Name)
             End If
            
             'see if this mime part has a parent
             If Not (part.Parent Is Nothing) Then
                 Console.WriteLine("this mime part has a parent.")
             End If
            
             'the raw text of the mime part
             Console.WriteLine(part.RawText)
            
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimePart.ContentSubType">
            <summary>
            Sub-type of the Content-Type.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage part = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //boundary
            if( part.Boundary != null )
            	Console.WriteLine( part.Boundary );
            
            //charset
            if( part.CharSet != null ) 
            	Console.WriteLine( part.CharSet );
            
            //content-discription
            Console.WriteLine( Header.EmptyHeader( part.ContentDescription ).Value );
            
            //content disposition
            Console.WriteLine( Header.EmptyHeader( part.ContentDisposition ).Value );
            
            //content-id
            Console.WriteLine( Header.EmptyHeader( part.ContentID ).Value );
            
            //content location
            Console.WriteLine( Header.EmptyHeader( part.ContentLocation ).Value );
            
            //subtype of the type
            if( part.ContentSubType != null )
            	Console.WriteLine( part.ContentSubType );
            
            //content-type
            Console.WriteLine( Header.EmptyHeader( part.ContentType ).Value );
            
            //content-transfer encoding
            Console.WriteLine( Header.EmptyHeader( part.ContentTransferEncoding ).Value );
            
            //content-type as a string
            if( part.ContentTypeString != null )
            	Console.WriteLine( part.ContentTypeString );
            
            //check to see if the part has a name
            if( part.Name != null )
            	Console.WriteLine( part.Name );
            
            //see if this mime part has a parent
            if( part.Parent != null )
            	Console.WriteLine("this mime part has a parent." );
            
            //the raw text of the mime part
            Console.WriteLine( part.RawText );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim part As New aspNetMime.MimeMessage(fs)
            
             'close the stream
             fs.Close()
            
             'boundary
             If Not (part.Boundary Is Nothing) Then
                 Console.WriteLine(part.Boundary)
             End If
             'charset
             If Not (part.CharSet Is Nothing) Then
                 Console.WriteLine(part.CharSet)
             End If
             'content-discription
             Console.WriteLine(Header.EmptyHeader(part.ContentDescription).Value)
            
             'content disposition
             Console.WriteLine(Header.EmptyHeader(part.ContentDisposition).Value)
            
             'content-id
             Console.WriteLine(Header.EmptyHeader(part.ContentID).Value)
            
             'content location
             Console.WriteLine(Header.EmptyHeader(part.ContentLocation).Value)
            
             'subtype of the type
             If Not (part.ContentSubType Is Nothing) Then
                 Console.WriteLine(part.ContentSubType)
             End If
            
             'content-type
             Console.WriteLine(Header.EmptyHeader(part.ContentType).Value)
            
             'content-transfer encoding
             Console.WriteLine(Header.EmptyHeader(part.ContentTransferEncoding).Value)
            
             'content-type as a string
             If Not (part.ContentTypeString Is Nothing) Then
                 Console.WriteLine(part.ContentTypeString)
             End If
            
             'check to see if the part has a name
             If Not (part.Name Is Nothing) Then
                 Console.WriteLine(part.Name)
             End If
            
             'see if this mime part has a parent
             If Not (part.Parent Is Nothing) Then
                 Console.WriteLine("this mime part has a parent.")
             End If
            
             'the raw text of the mime part
             Console.WriteLine(part.RawText)
            
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimePart.ContentTypeString">
            <summary>
            Content-Type as a string.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage part = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //boundary
            if( part.Boundary != null )
            	Console.WriteLine( part.Boundary );
            
            //charset
            if( part.CharSet != null ) 
            	Console.WriteLine( part.CharSet );
            
            //content-discription
            Console.WriteLine( Header.EmptyHeader( part.ContentDescription ).Value );
            
            //content disposition
            Console.WriteLine( Header.EmptyHeader( part.ContentDisposition ).Value );
            
            //content-id
            Console.WriteLine( Header.EmptyHeader( part.ContentID ).Value );
            
            //content location
            Console.WriteLine( Header.EmptyHeader( part.ContentLocation ).Value );
            
            //subtype of the type
            if( part.ContentSubType != null )
            	Console.WriteLine( part.ContentSubType );
            
            //content-type
            Console.WriteLine( Header.EmptyHeader( part.ContentType ).Value );
            
            //content-transfer encoding
            Console.WriteLine( Header.EmptyHeader( part.ContentTransferEncoding ).Value );
            
            //content-type as a string
            if( part.ContentTypeString != null )
            	Console.WriteLine( part.ContentTypeString );
            
            //check to see if the part has a name
            if( part.Name != null )
            	Console.WriteLine( part.Name );
            
            //see if this mime part has a parent
            if( part.Parent != null )
            	Console.WriteLine("this mime part has a parent." );
            
            //the raw text of the mime part
            Console.WriteLine( part.RawText );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim part As New aspNetMime.MimeMessage(fs)
            
             'close the stream
             fs.Close()
            
             'boundary
             If Not (part.Boundary Is Nothing) Then
                 Console.WriteLine(part.Boundary)
             End If
             'charset
             If Not (part.CharSet Is Nothing) Then
                 Console.WriteLine(part.CharSet)
             End If
             'content-discription
             Console.WriteLine(Header.EmptyHeader(part.ContentDescription).Value)
            
             'content disposition
             Console.WriteLine(Header.EmptyHeader(part.ContentDisposition).Value)
            
             'content-id
             Console.WriteLine(Header.EmptyHeader(part.ContentID).Value)
            
             'content location
             Console.WriteLine(Header.EmptyHeader(part.ContentLocation).Value)
            
             'subtype of the type
             If Not (part.ContentSubType Is Nothing) Then
                 Console.WriteLine(part.ContentSubType)
             End If
            
             'content-type
             Console.WriteLine(Header.EmptyHeader(part.ContentType).Value)
            
             'content-transfer encoding
             Console.WriteLine(Header.EmptyHeader(part.ContentTransferEncoding).Value)
            
             'content-type as a string
             If Not (part.ContentTypeString Is Nothing) Then
                 Console.WriteLine(part.ContentTypeString)
             End If
            
             'check to see if the part has a name
             If Not (part.Name Is Nothing) Then
                 Console.WriteLine(part.Name)
             End If
            
             'see if this mime part has a parent
             If Not (part.Parent Is Nothing) Then
                 Console.WriteLine("this mime part has a parent.")
             End If
            
             'the raw text of the mime part
             Console.WriteLine(part.RawText)
            
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimePart.DefaultCharSet">
            <summary>
            If the Mime Part does not have a Character set, and the Mime Part needs to be decoded, this Character set is used.
            By default, DefaultCharSet = "utf-8"
            </summary>
            <example>
            <code lang="C#">
            //the following example changes the decoding charset, and streams the text an ASP.NET 
            //page, directly to the browse client
            
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            StreamReader sr = new StreamReader( Server.MapPath( filename ) );
            string emailContents = sr.ReadToEnd();
            sr.Close();
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( emailContents );
            
            //get the 2nd mime part
            MimePart part = msg.MimeParts[1];
            
            //change the default charset to GB2312
            part.DefaultCharSet = "GB2312";
            
            
            //send the contet to the ASP.NET response stream, and decoded text using GB2312
            Response.Charset = "GB2312";
            
            part.WriteToStream( Response.OutputStream );
            </code>
            <code lang="Visual Basic">
            'the following example changes the decoding charset, and streams the text an ASP.NET 
            'page, directly to the browse client
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim sr As New StreamReader(Server.MapPath(filename))
            Dim emailContents As String = sr.ReadToEnd()
            sr.Close()
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(emailContents)
            
            'get the 2nd mime part
            Dim part As MimePart = msg.MimeParts(1)
            
            'change the default charset to GB2312
            part.DefaultCharSet = "GB2312"
            
            
            'send the contet to the ASP.NET response stream, and decoded text using GB2312
            Response.Charset = "GB2312"
            
            part.WriteToStream(Response.OutputStream)
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimePart.Headers">
            <summary>
              Gets a reference to the aspNetMime.HeaderCollection containing
              the headers for this Body Part.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //get the 2nd part
            MimePart part = msg.MimeParts[1];
            
            //write out the headers
            foreach( Header h in part.Headers )
            	Console.WriteLine( h.Name + " : " + h.Value );
            
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            'close the stream
            fs.Close()
            
            'get the 2nd part
            Dim part As MimePart = msg.MimeParts(1)
            
            'write out the headers
            Dim h As Header
            For Each h In part.Headers
                Console.WriteLine((h.Name + " : " + h.Value))
            Next h
            
            
            Console.WriteLine("done...")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimePart.Filename">
            <summary>
            File name of the Mime Part, as specified by the Content-Disposition header. 
            </summary>
            <remarks>This property is useful if the MimePart is an attachment.</remarks>
            <example>
            <code lang="C#">
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample.eml" );
            MimePartCollection parts = m.AttachmentInLineParts();
            if( ( parts != null ) &amp;&amp; ( parts.Count &gt;  0 ) )
            {
            	foreach( MimePart part in parts )
            	{
            
            		if( part.IsInline() )
            		{
            			//write out it's InLine name
            			Console.WriteLine( part.InlineName() );
            		}
            		else if( part.IsAttachment() )
            		{
            			Console.WriteLine( part.AttachmentName() );
            		}
            
            		//save the part to the directory
            		part.Save( "c:\\temp\\"  );
            	}
            }
            
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample.eml")
            Dim parts As MimePartCollection = m.AttachmentInLineParts()
            If Not (parts Is Nothing) And parts.Count > 0 Then
               Dim part As MimePart
               For Each part In  parts
                  
                  If part.IsInline() Then
                     'write out it's InLine name
                     Console.WriteLine(part.InlineName())
                  Else
                     If part.IsAttachment() Then
                        Console.WriteLine(part.AttachmentName())
                     End If
                  End If 
                  'save the part to the directory
                  part.Save("c:\temp\")
               Next part
            End If
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimePart.MimeParts">
            <summary>
              Gets a reference to the Body Part Collection containing the child Body Parts for this
              Body Part.
            </summary>
            <example>
            <code lang="C#">
            //the following example changes the decoding charset, and streams the text an ASP.NET 
            //page, directly to the browse client
            
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            StreamReader sr = new StreamReader( Server.MapPath( filename ) );
            string emailContents = sr.ReadToEnd();
            sr.Close();
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( emailContents );
            
            //get the 2nd mime part
            MimePart part = msg.MimeParts[1];
            
            //change the default charset to GB2312
            part.DefaultCharSet = "GB2312";
            
            
            //send the contet to the ASP.NET response stream, and decoded text using GB2312
            Response.Charset = "GB2312";
            
            part.WriteToStream( Response.OutputStream );
            </code>
            <code lang="Visual Basic">
            'the following example changes the decoding charset, and streams the text an ASP.NET 
            'page, directly to the browse client
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim sr As New StreamReader(Server.MapPath(filename))
            Dim emailContents As String = sr.ReadToEnd()
            sr.Close()
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(emailContents)
            
            'get the 2nd mime part
            Dim part As MimePart = msg.MimeParts(1)
            
            'change the default charset to GB2312
            part.DefaultCharSet = "GB2312"
            
            
            'send the contet to the ASP.NET response stream, and decoded text using GB2312
            Response.Charset = "GB2312"
            
            part.WriteToStream(Response.OutputStream)
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimePart.Name">
            <summary>
            Name of the Mime Part, as specified by the Content-Type header.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage part = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //boundary
            if( part.Boundary != null )
            	Console.WriteLine( part.Boundary );
            
            //charset
            if( part.CharSet != null ) 
            	Console.WriteLine( part.CharSet );
            
            //content-discription
            Console.WriteLine( Header.EmptyHeader( part.ContentDescription ).Value );
            
            //content disposition
            Console.WriteLine( Header.EmptyHeader( part.ContentDisposition ).Value );
            
            //content-id
            Console.WriteLine( Header.EmptyHeader( part.ContentID ).Value );
            
            //content location
            Console.WriteLine( Header.EmptyHeader( part.ContentLocation ).Value );
            
            //subtype of the type
            if( part.ContentSubType != null )
            	Console.WriteLine( part.ContentSubType );
            
            //content-type
            Console.WriteLine( Header.EmptyHeader( part.ContentType ).Value );
            
            //content-transfer encoding
            Console.WriteLine( Header.EmptyHeader( part.ContentTransferEncoding ).Value );
            
            //content-type as a string
            if( part.ContentTypeString != null )
            	Console.WriteLine( part.ContentTypeString );
            
            //check to see if the part has a name
            if( part.Name != null )
            	Console.WriteLine( part.Name );
            
            //see if this mime part has a parent
            if( part.Parent != null )
            	Console.WriteLine("this mime part has a parent." );
            
            //the raw text of the mime part
            Console.WriteLine( part.RawText );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim part As New aspNetMime.MimeMessage(fs)
            
             'close the stream
             fs.Close()
            
             'boundary
             If Not (part.Boundary Is Nothing) Then
                 Console.WriteLine(part.Boundary)
             End If
             'charset
             If Not (part.CharSet Is Nothing) Then
                 Console.WriteLine(part.CharSet)
             End If
             'content-discription
             Console.WriteLine(Header.EmptyHeader(part.ContentDescription).Value)
            
             'content disposition
             Console.WriteLine(Header.EmptyHeader(part.ContentDisposition).Value)
            
             'content-id
             Console.WriteLine(Header.EmptyHeader(part.ContentID).Value)
            
             'content location
             Console.WriteLine(Header.EmptyHeader(part.ContentLocation).Value)
            
             'subtype of the type
             If Not (part.ContentSubType Is Nothing) Then
                 Console.WriteLine(part.ContentSubType)
             End If
            
             'content-type
             Console.WriteLine(Header.EmptyHeader(part.ContentType).Value)
            
             'content-transfer encoding
             Console.WriteLine(Header.EmptyHeader(part.ContentTransferEncoding).Value)
            
             'content-type as a string
             If Not (part.ContentTypeString Is Nothing) Then
                 Console.WriteLine(part.ContentTypeString)
             End If
            
             'check to see if the part has a name
             If Not (part.Name Is Nothing) Then
                 Console.WriteLine(part.Name)
             End If
            
             'see if this mime part has a parent
             If Not (part.Parent Is Nothing) Then
                 Console.WriteLine("this mime part has a parent.")
             End If
            
             'the raw text of the mime part
             Console.WriteLine(part.RawText)
            
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimePart.Parent">
            <summary>
            The Parent Mime Part of this part.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage part = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //boundary
            if( part.Boundary != null )
            	Console.WriteLine( part.Boundary );
            
            //charset
            if( part.CharSet != null ) 
            	Console.WriteLine( part.CharSet );
            
            //content-discription
            Console.WriteLine( Header.EmptyHeader( part.ContentDescription ).Value );
            
            //content disposition
            Console.WriteLine( Header.EmptyHeader( part.ContentDisposition ).Value );
            
            //content-id
            Console.WriteLine( Header.EmptyHeader( part.ContentID ).Value );
            
            //content location
            Console.WriteLine( Header.EmptyHeader( part.ContentLocation ).Value );
            
            //subtype of the type
            if( part.ContentSubType != null )
            	Console.WriteLine( part.ContentSubType );
            
            //content-type
            Console.WriteLine( Header.EmptyHeader( part.ContentType ).Value );
            
            //content-transfer encoding
            Console.WriteLine( Header.EmptyHeader( part.ContentTransferEncoding ).Value );
            
            //content-type as a string
            if( part.ContentTypeString != null )
            	Console.WriteLine( part.ContentTypeString );
            
            //check to see if the part has a name
            if( part.Name != null )
            	Console.WriteLine( part.Name );
            
            //see if this mime part has a parent
            if( part.Parent != null )
            	Console.WriteLine("this mime part has a parent." );
            
            //the raw text of the mime part
            Console.WriteLine( part.RawText );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim part As New aspNetMime.MimeMessage(fs)
            
             'close the stream
             fs.Close()
            
             'boundary
             If Not (part.Boundary Is Nothing) Then
                 Console.WriteLine(part.Boundary)
             End If
             'charset
             If Not (part.CharSet Is Nothing) Then
                 Console.WriteLine(part.CharSet)
             End If
             'content-discription
             Console.WriteLine(Header.EmptyHeader(part.ContentDescription).Value)
            
             'content disposition
             Console.WriteLine(Header.EmptyHeader(part.ContentDisposition).Value)
            
             'content-id
             Console.WriteLine(Header.EmptyHeader(part.ContentID).Value)
            
             'content location
             Console.WriteLine(Header.EmptyHeader(part.ContentLocation).Value)
            
             'subtype of the type
             If Not (part.ContentSubType Is Nothing) Then
                 Console.WriteLine(part.ContentSubType)
             End If
            
             'content-type
             Console.WriteLine(Header.EmptyHeader(part.ContentType).Value)
            
             'content-transfer encoding
             Console.WriteLine(Header.EmptyHeader(part.ContentTransferEncoding).Value)
            
             'content-type as a string
             If Not (part.ContentTypeString Is Nothing) Then
                 Console.WriteLine(part.ContentTypeString)
             End If
            
             'check to see if the part has a name
             If Not (part.Name Is Nothing) Then
                 Console.WriteLine(part.Name)
             End If
            
             'see if this mime part has a parent
             If Not (part.Parent Is Nothing) Then
                 Console.WriteLine("this mime part has a parent.")
             End If
            
             'the raw text of the mime part
             Console.WriteLine(part.RawText)
            
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimePart.Preamble">
            <summary>
            Returns the Preamble for the mime part. This is only useful if the mime part being referenced is the MimeMessage itself.
            </summary>
            <example>
            <code lang="C#">
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample.eml" );
            
            //show the preamble
            string preamble = m.Preamble;
            Console.WriteLine( preamble );
            
            //find the plain text part
            MimePart textPart = m.TextMimePart;
            
            //preview text
            string previewText = textPart.PreviewText();
            Console.WriteLine( previewText );
            
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample.eml")
            
            'show the preamble
            Dim preamble As String = m.Preamble
            Console.WriteLine(preamble)
            
            'find the plain text part
            Dim textPart As MimePart = m.TextMimePart
            
            'preview text
            Dim previewText As String = textPart.PreviewText()
            Console.WriteLine(previewText)
            
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimePart.RawText">
            <summary>
              Returns the text of the Body Part. 
              This is either 
                a) the unparsed MIME body part collection
                b) The ASCII value of a MIME body part
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage part = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //boundary
            if( part.Boundary != null )
            	Console.WriteLine( part.Boundary );
            
            //charset
            if( part.CharSet != null ) 
            	Console.WriteLine( part.CharSet );
            
            //content-discription
            Console.WriteLine( Header.EmptyHeader( part.ContentDescription ).Value );
            
            //content disposition
            Console.WriteLine( Header.EmptyHeader( part.ContentDisposition ).Value );
            
            //content-id
            Console.WriteLine( Header.EmptyHeader( part.ContentID ).Value );
            
            //content location
            Console.WriteLine( Header.EmptyHeader( part.ContentLocation ).Value );
            
            //subtype of the type
            if( part.ContentSubType != null )
            	Console.WriteLine( part.ContentSubType );
            
            //content-type
            Console.WriteLine( Header.EmptyHeader( part.ContentType ).Value );
            
            //content-transfer encoding
            Console.WriteLine( Header.EmptyHeader( part.ContentTransferEncoding ).Value );
            
            //content-type as a string
            if( part.ContentTypeString != null )
            	Console.WriteLine( part.ContentTypeString );
            
            //check to see if the part has a name
            if( part.Name != null )
            	Console.WriteLine( part.Name );
            
            //see if this mime part has a parent
            if( part.Parent != null )
            	Console.WriteLine("this mime part has a parent." );
            
            //the raw text of the mime part
            Console.WriteLine( part.RawText );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim part As New aspNetMime.MimeMessage(fs)
            
             'close the stream
             fs.Close()
            
             'boundary
             If Not (part.Boundary Is Nothing) Then
                 Console.WriteLine(part.Boundary)
             End If
             'charset
             If Not (part.CharSet Is Nothing) Then
                 Console.WriteLine(part.CharSet)
             End If
             'content-discription
             Console.WriteLine(Header.EmptyHeader(part.ContentDescription).Value)
            
             'content disposition
             Console.WriteLine(Header.EmptyHeader(part.ContentDisposition).Value)
            
             'content-id
             Console.WriteLine(Header.EmptyHeader(part.ContentID).Value)
            
             'content location
             Console.WriteLine(Header.EmptyHeader(part.ContentLocation).Value)
            
             'subtype of the type
             If Not (part.ContentSubType Is Nothing) Then
                 Console.WriteLine(part.ContentSubType)
             End If
            
             'content-type
             Console.WriteLine(Header.EmptyHeader(part.ContentType).Value)
            
             'content-transfer encoding
             Console.WriteLine(Header.EmptyHeader(part.ContentTransferEncoding).Value)
            
             'content-type as a string
             If Not (part.ContentTypeString Is Nothing) Then
                 Console.WriteLine(part.ContentTypeString)
             End If
            
             'check to see if the part has a name
             If Not (part.Name Is Nothing) Then
                 Console.WriteLine(part.Name)
             End If
            
             'see if this mime part has a parent
             If Not (part.Parent Is Nothing) Then
                 Console.WriteLine("this mime part has a parent.")
             End If
            
             'the raw text of the mime part
             Console.WriteLine(part.RawText)
            
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.#ctor">
            <summary>
            Creates an Instance of the MimeMessage class
            </summary>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            MimeMessage m = new MimeMessage();
             
            string path = "message1.eml";
            m.LoadFromFile( path );
             
            Console.WriteLine( m.Headers.ToString() );
             
             
            Console.WriteLine( "done." );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim m As New MimeMessage()
             
            Dim path As String = "message1.eml"
            m.LoadFromFile(path)
             
            Console.WriteLine(m.Headers.ToString())
             
             
            Console.WriteLine("done.")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.#ctor(System.String)">
            <summary>
              Initializes a MimeMessage by parsing the content from the Text provided.
            </summary>
            <param name="text">
              String containing the MimeMessage's text value.
            </param>
            <example>
            <code lang="C#">
            
            //this creates a MimeMessage from a method that returns a string
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( GetEmailAsString() );
            
            //write out each header
            foreach( Header h in msg.Headers )
            	Console.WriteLine( h.Name + ": " + h.ValueComplete );
            
            //writes out the main body of the email
            Console.WriteLine( msg.MainBody );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            
            'this creates a MimeMessage from a method that returns a string
            Dim msg As New aspNetMime.MimeMessage(GetEmailAsString())
            
            'write out each header
            Dim h As Header
            For Each h In msg.Headers
                Console.WriteLine((h.Name + ": " + h.ValueComplete))
            Next h
            'writes out the main body of the email
            Console.WriteLine(msg.MainBody)
            
            Console.WriteLine("done...")
            Console.ReadLine()
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.#ctor(System.String,System.Text.Encoding)">
            <summary>
              Initializes a MimeMessage by parsing the content from the Text provided.
            </summary>
            <param name="text">
              String containing the MimeMessage's text value.
            </param>
            <param name="encoding">
            The Encoding used for building the MimeMessage
            </param>
            <example>
            <code lang="C#">
            
            //this creates a MimeMessage from a method that returns a string, and build using the Windows-1251 character set
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( GetEmailAsString(), Encoding.GetEncoding( "Windows-1251")  );
            
            //write out each header
            foreach( Header h in msg.Headers )
            	Console.WriteLine( h.Name + ": " + h.ValueComplete );
            
            //writes out the main body of the email
            Console.WriteLine( msg.MainBody );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            
            'this creates a MimeMessage from a method that returns a string, and build using the Windows-1251 character set
            Dim msg As New aspNetMime.MimeMessage(GetEmailAsString(), Encoding.GetEncoding( "Windows-1251") )
            
            'write out each header
            Dim h As Header
            For Each h In msg.Headers
                Console.WriteLine((h.Name + ": " + h.ValueComplete))
            Next h
            'writes out the main body of the email
            Console.WriteLine(msg.MainBody)
            
            Console.WriteLine("done...")
            Console.ReadLine()
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.#ctor(System.IO.Stream)">
            <summary>
              Initializes a MimeMessage by parsing the content from the Stream provided.
            </summary>
            <param name="stream">
              Stream object containing the data to parse.
            </param>
            <example>
            <code lang="C#">
            
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            //write out each header
            foreach( Header h in msg.Headers )
            	Console.WriteLine( h.Name + ": " + h.ValueComplete );
            
            //writes out the main body of the email
            Console.WriteLine( msg.MainBody );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            
            </code>
            <code lang="Visual Basic">
            
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim msg As New aspNetMime.MimeMessage(fs)
            
             fs.Close()
            
             'write out each header
             Dim h As Header
             For Each h In msg.Headers
                 Console.WriteLine((h.Name + ": " + h.ValueComplete))
             Next h
             'writes out the main body of the email
             Console.WriteLine(msg.MainBody)
            
            
             Console.WriteLine("done...")
             Console.ReadLine()
             
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
              Initializes a MimeMessage by parsing the content from the Stream provided.
            </summary>
            <param name="stream">
              Stream object containing the data to parse.
            </param>
            <param name="encoding">
            Encoding used to read the Stream
            </param>
            <example>
            <code lang="C#">
            
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream, using Windows-1251 encoding
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs, Encoding.GetEncoding( "Windows-1251") );
            
            fs.Close();
            
            //write out each header
            foreach( Header h in msg.Headers )
            	Console.WriteLine( h.Name + ": " + h.ValueComplete );
            
            //writes out the main body of the email
            Console.WriteLine( msg.MainBody );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            
            </code>
            <code lang="Visual Basic">
            
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim msg As New aspNetMime.MimeMessage(fs, Encoding.GetEncoding( "Windows-1251"))
            
             fs.Close()
            
             'write out each header
             Dim h As Header
             For Each h In msg.Headers
                 Console.WriteLine((h.Name + ": " + h.ValueComplete))
             Next h
             'writes out the main body of the email
             Console.WriteLine(msg.MainBody)
            
            
             Console.WriteLine("done...")
             Console.ReadLine()
             
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.#ctor(System.Byte[],System.Text.Encoding)">
            <summary>Creates an instance of a MimeMessage object from a byte array of data.</summary>
            <param name="data">The byte array of MimeMessage information.</param>
            <param name="encoding">The encoding used to read and convert the binary data to text.</param>
        </member>
        <member name="M:aspNetMime.MimeMessage.AttachmentInLineParts">
            <summary>
            Returns all Attachments and InLine parts as a MimePartCollection
            </summary>
            <returns></returns>
            <example>
            <code lang="C#">
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample.eml" );
            MimePartCollection parts = m.AttachmentInLineParts();
            if( ( parts != null ) &amp;&amp; ( parts.Count &gt; 0 ) )
            {
            	foreach( MimePart part in parts )
            	{
            
            		if( part.IsInline() )
            		{
            			//write out it's InLine name
            			Console.WriteLine( part.InlineName() );
            		}
            		else if( part.IsAttachment() )
            		{
            			Console.WriteLine( part.AttachmentName() );
            		}
            
            		//save the part to the directory
            		part.Save( "c:\\temp\\"  );
            	}
            }
            
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample.eml")
            Dim parts As MimePartCollection = m.AttachmentInLineParts()
            If Not (parts Is Nothing) And parts.Count > 0 Then
               Dim part As MimePart
               For Each part In  parts
                  
                  If part.IsInline() Then
                     'write out it's InLine name
                     Console.WriteLine(part.InlineName())
                  Else
                     If part.IsAttachment() Then
                        Console.WriteLine(part.AttachmentName())
                     End If
                  End If 
                  'save the part to the directory
                  part.Save("c:\temp\")
               Next part
            End If
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.CalculateSize">
            <summary>
            Calculates the Mime encoded size (in bytes) of the message.
            </summary>
            <returns></returns>
            <example>
            <code lang="C#">
            
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample.eml" );
            Console.WriteLine( m.CalculateSize() );
            
            </code>
            <code lang="VB.NET">
            
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample.eml")
            Console.WriteLine(m.CalculateSize())
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.DateTime">
            <summary>
            Returns the Date of the MimeMessage as a .NET DateTime object.
            </summary>
            <returns>DateTime object.</returns>
            <example>
            <code lang="C#">
            
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample.eml" );
            Console.WriteLine( m.DateTime() );
            
            </code>
            <code lang="VB.NET">
            
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample.eml")
            Console.WriteLine(m.DateTime())
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.ExpirationDate">
            <summary>
            If this is an evaluation version, it retrieves the expiration date. If this is a full version, it 
            returns a 'Full Version' message.
            </summary>
            <returns>The expiration date as a string.</returns>
        </member>
        <member name="M:aspNetMime.MimeMessage.GetEmbeddedPart(System.String)">
            <summary>
            Retrieves an embedded part by its Content-ID or Content-Location
            </summary>
            <param name="embeddedName">The Content-ID or Content-Location</param>
            <returns>Embedded Part</returns>
            <remarks>
            This method first searches all embedded parts for a Content-ID that matches embeddedName. If a matching part cannot befound,
            aspNetMime returns the embedded part with a Content-Location that matches embeddedName.
            </remarks>
            <example>
            <code lang="C#">
            
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            //retrieves the embedded Part with the name 'My-Company-Logo'
            MimePart embeddedPart = msg.GetEmbeddedPart( "My-Company-Logo" );
            
            //saves the embedded part to the directory
            embeddedPart.Save( "c:\\temp\\",true );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            
            
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim msg As New aspNetMime.MimeMessage(fs)
            
             fs.Close()
            
             'retrieves the embedded Part with the name 'My-Company-Logo'
             Dim embeddedPart As MimePart = msg.GetEmbeddedPart("My-Company-Logo")
            
             'saves the embedded part to the directory
             embeddedPart.Save("c:\temp\", True)
            
             Console.WriteLine("done...")
             Console.ReadLine()
             
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.GetEmbeddedPartByCID(System.String)">
            <summary>
            Retrieves an embedded MimePart by it's Content-ID.
            </summary>
            <param name="ContentID">The Conent-ID of the embedded MimePart</param>
            <returns>Embedded object as a MimePart</returns>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            //retrieves the embedded Part with the name 'My-Company-Logo'
            MimePart embeddedPart = msg.GetEmbeddedPartByCID( "My-Company-Logo" );
            
            //saves the embedded part to the directory
            embeddedPart.Save( "c:\\temp\\",true );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim msg As New aspNetMime.MimeMessage(fs)
            
             fs.Close()
            
             'retrieves the embedded Part with the name 'My-Company-Logo'
             Dim embeddedPart As MimePart = msg.GetEmbeddedPartByCID("My-Company-Logo")
            
             'saves the embedded part to the directory
             embeddedPart.Save("c:\temp\", True)
            
             Console.WriteLine("done...")
             Console.ReadLine()
             
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.GetEmbeddedPartByCL(System.String)">
            <summary>
            Retrieves an embedded MimePart by it's Content-Location.
            </summary>
            <param name="ContentLocation">Content-Location of the embedded object.</param>
            <returns>Embedded object as a MimePart</returns>
            <example>
            <code lang="C#">
            
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            //retrieves the embedded Part with the name 'My-Company-Logo'
            MimePart embeddedPart = msg.GetEmbeddedPartByCL( "http://www.mywebsite.com/myimage.gif" );
            
            //saves the embedded part to the directory
            embeddedPart.Save( "c:\\temp\\",true );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            </code>
            <code lang="Visual Basic">
            
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            fs.Close()
            
            'retrieves the embedded Part with the name 'My-Company-Logo'
            Dim embeddedPart As MimePart = msg.GetEmbeddedPartByCL("http://www.mywebsite.com/myimage.gif")
            
            'saves the embedded part to the directory
            embeddedPart.Save("c:\temp\", True)
            
            Console.WriteLine("done...")
            Console.ReadLine()
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.GetHeader(System.String)">
            <summary>
            Retrieves a header of the MimeMessage, by the Header name.
            </summary>
            <param name="headerName">Name of the Header.</param>
            <returns>Header</returns>
            <example>
            <code lang="C#">
            
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            //retrieve any header
            Header h = msg.GetHeader( "Received" );
            
            if( h != null )
            	Console.WriteLine( h.Value );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            </code>
            <code lang="Visual Basic">
            
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            fs.Close()
            
            'retrieve any header
            Dim h As Header = msg.GetHeader("Received")
            
            If Not (h Is Nothing) Then
                Console.WriteLine(h.Value)
            End If
            Console.WriteLine("done...")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.GetXHeader(System.String)">
            <summary>
            Retrieves a X- header.
            </summary>
            <param name="headerName">Name of the Header.</param>
            <returns>Found Header</returns>
            <remarks>The 'X-' part of the header is not required. For example, to retrieve the X-Priority header, call
            msg.GetXHeader( "Priority" )
            </remarks>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            //retrieve the x-priority header
            Header h = msg.GetXHeader( "Priority" );
            
            if( h != null )
            	Console.WriteLine( h.Value );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            fs.Close()
            
            'retrieve any header
            Dim h As Header = msg.GetXHeader("Priority")
            
            If Not (h Is Nothing) Then
                Console.WriteLine(h.Value)
            End If
            Console.WriteLine("done...")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.GetAttachment(System.Int32)">
            <summary>
            Retrieves the attachement, spcecified by the index in the array of attachmnets.
            </summary>
            <param name="index">Index of the attachment.</param>
            <returns>Attachment as MimePart</returns>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            //get the first attachment
            MimePart attachmentPart = msg.GetAttachment(0);
            
            Console.WriteLine( attachmentPart.AttachmentName() );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            fs.Close()
            
            'get the first attachment
            Dim attachmentPart As MimePart = msg.GetAttachment(0)
            
            Console.WriteLine(attachmentPart.AttachmentName())
            
            Console.WriteLine("done...")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.GetAttachment(System.String)">
            <summary>
            Retrieves an attachment by it's Name
            </summary>
            <param name="name">Name of the attachment</param>
            <returns>Attachment as a MimePart</returns>
            <remarks>Checks each attachment, first by it's file name, and the if an associated 
            Content-Type name (if one is provided).
            </remarks>
            <example>
            <code lang="C#">
            
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            //get attachment named 'MyFile.zip'
            MimePart attachmentPart = msg.GetAttachment( "MyFile.zip" );
            
            //save to a directory
            attachmentPart.Save( "c:\\temp\\" );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            fs.Close()
            
            'get the attachment named 'MyFile.zip'
            Dim attachmentPart As MimePart = msg.GetAttachment("MyFile.zip")
            
            'save to a directory
            attachmentPart.Save("c:\temp\")
            
            Console.WriteLine("done...")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.GetAttachmentStream(System.Int32)">
            <summary>
            Retreives the specified attachment as a stream.
            </summary>
            <param name="index">Index of the attachment in the array of attachments.</param>
            <returns>attachment data as as stream.</returns>
            <example>
            <code lang="C#">
            //the following examples streams an attachments from an ASP.NET 
            //page, directly to the browse client
            
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            StreamReader sr = new StreamReader( Server.MapPath( filename ) );
            string emailContents = sr.ReadToEnd();
            sr.Close();
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( emailContents );
            
            
            //get the attachment named 'mylogo.jpg'
            MimePart attachmentPart = msg.GetAttachment( "mylogo.jpg" );
            
            if( attachmentPart.ContentType != null )
            	Response.ContentType = attachmentPart.ContentType.Value;
            
            attachmentPart.WriteToStream( Response.OutputStream );
            
            
            </code>
            <code lang="Visual Basic">
            'the following examples streams an attachments from an ASP.NET 
            'page, directly to the browse client
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim sr As New StreamReader(Server.MapPath(filename))
            Dim emailContents As String = sr.ReadToEnd()
            sr.Close()
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(emailContents)
            
            
            'get the attachment named 'mylogo.jpg'
            Dim attachmentPart As MimePart = msg.GetAttachment("mylogo.jpg")
            
            If Not (attachmentPart.ContentType Is Nothing) Then
                Response.ContentType = attachmentPart.ContentType.Value
            End If
            
            attachmentPart.WriteToStream(Response.OutputStream)
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.GetAttachmentStream(System.String)">
            <summary>
            Retreives an attachment by name, as a stream.
            </summary>
            <param name="name">The name of the attachment.</param>
            <returns>attachment data as a stream.</returns>
            <remarks>
            Checks each attachment, first by it's file name, and the associated 
            Content-Type name parameter (if one is provided).
            </remarks>
            <example>
            <code lang="C#">
            //the following examples streams an attachments from an ASP.NET 
            //page, directly to the browse client
            
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            StreamReader sr = new StreamReader( Server.MapPath( filename ) );
            string emailContents = sr.ReadToEnd();
            sr.Close();
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( emailContents );
            
            
            //get the attachment 
            MimePart attachmentPart = msg.GetAttachment( 0 );
            
            if( attachmentPart.ContentType != null )
            	Response.ContentType = attachmentPart.ContentType.Value;
            
            attachmentPart.WriteToStream( Response.OutputStream );
            
            
            </code>
            <code lang="Visual Basic">
            'the following examples streams an attachments from an ASP.NET 
            'page, directly to the browse client
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim sr As New StreamReader(Server.MapPath(filename))
            Dim emailContents As String = sr.ReadToEnd()
            sr.Close()
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(emailContents)
            
            
            'get the attachment 
            Dim attachmentPart As MimePart = msg.GetAttachment( 0 )
            
            If Not (attachmentPart.ContentType Is Nothing) Then
                Response.ContentType = attachmentPart.ContentType.Value
            End If
            
            attachmentPart.WriteToStream(Response.OutputStream)
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.IsBlackListedSpam">
            <summary>
            Uses the current BLChecker to determine if the message is spam
            </summary>
            <returns>
            True if the message has been sent from a black listed IP, according to the DNSbl
            servers added to the <see cref="P:aspNetMime.MimeMessage.BLChecker">BLChecker</see>
            </returns>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            string path = "message1.eml";
            MimeMessage m = MimeMessage.ParseFile( path );
             
            //create a new DNSbl checker
            m.BLChecker= new BlackListChecker();
            m.BLChecker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            m.BLChecker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
            //check to see if the message is spam, according to the servers added to the BLChecker
            bool result = m.IsBlackListedSpam();
             
            Console.WriteLine( result );
             
            Console.WriteLine( "done." );
            Console.ReadLine();
            </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim path As String = "message1.eml"
            Dim m As MimeMessage = MimeMessage.ParseFile(path)
             
            'create a new DNSbl checker
            m.BLChecker = New BlackListChecker()
            m.BLChecker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
            m.BLChecker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
            'check to see if the message is spam, according to the servers added to the BLChecker
            Dim result As Boolean = m.IsBlackListedSpam()
             
            Console.WriteLine(result)
             
            Console.WriteLine("done.")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.LoadFromFile(System.String)">
            <summary>
            Loads a MimeMessage from the FileSystem
            </summary>
            <returns>True if the load was successful</returns>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            MimeMessage m = new MimeMessage();
             
            string path = "message1.eml";
            m.LoadFromFile( path );
             
            Console.WriteLine( m.Headers.ToString() );
             
             
            Console.WriteLine( "done." );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim m As New MimeMessage()
             
            Dim path As String = "message1.eml"
            m.LoadFromFile(path)
             
            Console.WriteLine(m.Headers.ToString())
             
             
            Console.WriteLine("done.")
            Console.ReadLine()
                </code>
            </example>
            <param name="path">File system path to the message text.</param>
        </member>
        <member name="M:aspNetMime.MimeMessage.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads the Mime Message object from a System.IO.Stream
            </summary>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            string path = "message1.eml";
            FileStream fs = File.Open( path, FileMode.Open );
            MimeMessage m = new MimeMessage();
            m.LoadFromStream( fs );
            fs.Close();
             
            string headers = m.Headers.ToString();
             
            Console.WriteLine( headers );
             
            Console.WriteLine( "done." );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim path As String = "message1.eml"
            Dim fs As FileStream = File.Open(path, FileMode.Open)
            Dim m As New MimeMessage()
            m.LoadFromStream( fs )
            fs.Close()
             
            Dim headers As String = m.Headers.ToString()
             
            Console.WriteLine(headers)
             
            Console.WriteLine("done.")
            Console.ReadLine()
                </code>
            </example>
            <param name="stream">Stream of data containing the Mime Message</param>
        </member>
        <member name="M:aspNetMime.MimeMessage.LoadFromStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the Mime Message object from a System.IO.Stream
            </summary>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            string path = "message1.eml";
            FileStream fs = File.Open( path, FileMode.Open );
            MimeMessage m = new MimeMessage();
            m.LoadFromStream( fs, Encoding.Default );
            fs.Close();
             
            string headers = m.Headers.ToString();
             
            Console.WriteLine( headers );
             
            Console.WriteLine( "done." );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim path As String = "message1.eml"
            Dim fs As FileStream = File.Open(path, FileMode.Open)
            Dim m As New MimeMessage()
            m.LoadFromStream( fs, Encoding.Default )
            fs.Close()
             
            Dim headers As String = m.Headers.ToString()
             
            Console.WriteLine(headers)
             
            Console.WriteLine("done.")
            Console.ReadLine()
                </code>
            </example>
            <param name="stream">Stream of data containing the Mime Message</param>
            <param name="encoding">Encoding used to parse the stream.</param>
        </member>
        <member name="M:aspNetMime.MimeMessage.LoadFromText(System.String)">
            <summary>
            Loads the MimeMessage object from text.
            </summary>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            string contents = MessageContents();
             
            MimeMessage m = new MimeMessage()
            m.LoadFromText( contents );
                    
            string headers = m.Headers.ToString();
             
            Console.WriteLine( headers );
                
            Console.WriteLine( "done." );
            Console.ReadLine();
                  
             
             
             
            static string MessageContents()
            {
             
                //load the message data from a data store
                //for example, sql server, or the file system
             
            }
                </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim contents As String = MessageContents()
             
            Dim m As New MimeMessage()
            m.LoadFromText( contents )
             
            Dim headers As String = m.Headers.ToString()
             
            Console.WriteLine(headers)
             
            Console.WriteLine("done.")
            Console.ReadLine()
                </code>
            </example>
            <param name="text">string text of the Mime Message</param>
        </member>
        <member name="M:aspNetMime.MimeMessage.LoadFromText(System.String,System.Text.Encoding)">
            <summary>
            Loads the MimeMessage object from text.
            </summary>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            string contents = MessageContents();
             
            MimeMessage m = new MimeMessage()
            m.LoadFromText( contents, Encoding.Default );
                    
            string headers = m.Headers.ToString();
             
            Console.WriteLine( headers );
                
            Console.WriteLine( "done." );
            Console.ReadLine();
                  
             
             
             
            static string MessageContents()
            {
             
                //load the message data from a data store
                //for example, sql server, or the file system
             
            }
                </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim contents As String = MessageContents()
             
            Dim m As New MimeMessage()
            m.LoadFromText( contents, Encoding.Default )
             
            Dim headers As String = m.Headers.ToString()
             
            Console.WriteLine(headers)
             
            Console.WriteLine("done.")
            Console.ReadLine()
                </code>
            </example>
            <param name="text">string text of the Mime Message</param>
            <param name="encoding">Encoding used for parsing the text</param>
        </member>
        <member name="M:aspNetMime.MimeMessage.RetrieveAllParts">
            <summary>
            Retrieves all parts of the MimeMessage, including the message itself
            </summary>
            <returns>MimeCollection of MimeParts</returns>
            <remarks>
            This method returns all of the nested MimeParts of the MimeMessage. 
            </remarks>
            <example>
            <code lang="C#">
            
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            //get all the mime parts
            MimePartCollection parts = msg.RetrieveAllParts();
            for( int i=0;i&lt;parts.Count;i++)
            {
            	Console.WriteLine( "------------------ Part {0} ------------------ ", i );
            
            	//write the headers out
            	HeaderCollection headers = parts[i].Headers;
            	foreach( Header h in headers )
            		Console.WriteLine( h.RawValue );
            }
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            fs.Close()
            
            'get all the mime parts
            Dim parts As MimePartCollection = msg.RetrieveAllParts()
            Dim i As Integer
            For i = 0 To parts.Count - 1
                Console.WriteLine("------------------ Part {0} ------------------ ", i)
            	
            	'write the headers out
                Dim headers As HeaderCollection = parts(i).Headers
                Dim h As Header
                For Each h In headers
                    Console.WriteLine(h.RawValue)
                Next h
            Next i
            
            Console.WriteLine("done...")
            Console.ReadLine()
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.RetrieveMessages">
            <summary>Retrieves attached messages as a MimePartCollection</summary>
            <returns>A MimePart collection of messages</returns>
            <remarks>
            This method returns attached or embedded messages that have a Content-Type =
            "message/[subtype]". This method is useful when parsing NDRs (Non-Deliverable Receipts)
            or email bounce backs.
            </remarks>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            string path = "message1.eml";
             
            MimeMessage m = MimeMessage.ParseFile( path );
             
            //bounces are normally attached as rfc822/message parts
            MimePartCollection bounces = m.RetrieveMessages();
             
            foreach( MimePart bounce in bounces )
            {
                bounce.RawText;
            }
             
            Console.WriteLine( "done." );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim path As String = "message1.eml"
             
            Dim m As MimeMessage = MimeMessage.ParseFile(path)
             
            'bounces are normally attached as rfc822/message parts
            Dim bounces As MimePartCollection = m.RetrieveMessages()
             
            Dim bounce As MimePart
            For Each bounce In  bounces
            Next bounce
             
            Console.WriteLine("done.")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.SaveToFile(System.String)">
            <summary>
            Saves the MimeMessage to a file.
            </summary>
            <param name="path">Path to save the mime MimeMessage</param>
            <returns>True if the save was successful.</returns>
            <example>
            <code lang="C#">
            
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            msg.SaveToFile( "c:\\temp\\myemail.eml" );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim msg As New aspNetMime.MimeMessage(fs)
            
             fs.Close()
            
             msg.SaveToFile("c:\temp\myemail.eml")
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.SaveToFile(System.String,System.Boolean)">
            <summary>
            Saves the MimeMessage to a file.
            </summary>
            <param name="path">Path to save the mime MimeMessage</param>
            <param name="overwriteFile">Overwrites any existing files with the same name.</param>
            <returns>True if the save was successful.</returns>
            <example>
            <code lang="C#">
            
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            msg.SaveToFile( "c:\\temp\\myemail.eml", true );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim msg As New aspNetMime.MimeMessage(fs)
            
             fs.Close()
            
             msg.SaveToFile("c:\temp\myemail.eml", True)
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.SaveToFile(System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the MimeMessage to a file.
            </summary>
            <param name="path">Path to save the mime MimeMessage</param>
            <param name="overwriteFile">Overwrites any existing files with the same name.</param>
            <param name="reassemble">Reassembles the MimeMessage.</param>
            <returns>True if the save was successful.</returns>
            <example>
            <code lang="C#">
            
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            msg.SaveToFile( "c:\\temp\\myemail.eml", true );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim msg As New aspNetMime.MimeMessage(fs)
            
             fs.Close()
            
             msg.SaveToFile("c:\temp\myemail.eml", True)
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.SaveAttachments(System.String,System.Boolean)">
            <summary>
            Saves any attachments to the specified folder path.
            </summary>
            <param name="directoryPath">Directory path to save attachments.</param>
            <param name="overwriteFiles">If an File is found with the same name, True will overwrite the previous attachment.</param>
            <example>
            <code lang="C#">
            
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            msg.SaveAttachments( "c:\\temp\\", true);
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim msg As New aspNetMime.MimeMessage(fs)
            
             fs.Close()
            
             msg.SaveAttachments("c:\temp\", True)
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.SaveInlineParts(System.String,System.Boolean)">
            <summary>
            Saves any inline parts to the specified folder path.
            </summary>
            <param name="directoryPath">Directory path to save parts.</param>
            <param name="overwriteFiles">If an File is found with the same name, True will overwrite the file.</param>
            <example>
            <code lang="C#">
            
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            msg.SaveInlineParts( "c:\\temp\\", true);
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim msg As New aspNetMime.MimeMessage(fs)
            
             fs.Close()
            
             msg.SaveInlineParts("c:\temp\", True)
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.ToString">
            <summary>
            Converts the MimeMessage to a string representation.
            </summary>
            <returns>A string representation of the MimeMessage</returns>
            <example>
            <code lang="C#">
            //create a MimeMessage from some data in Sql Server
            byte[] data = SqlServerDocument(); //a method that returns data from Sql Server
            MimeMessage m = new MimeMessage( data, Encoding.ASCII );
            
            MimePartCollection parts = m.RetrieveAllParts();
            //rewrite the text part content
            if( m.TextMimePart != null )
            {
            	m.TextMimePart.SetRawText( "this will be the new text", MimeEncoding.QuotedPrintable );
            }
            //view the formatted message 
            Console.WriteLine( m.ToString() );
            
            </code>
            <code lang="VB.NET">
             'create a MimeMessage from some data in Sql Server
            Dim data As Byte() = SqlServerDocument() 'a method that returns data from Sql Server
            Dim m As New MimeMessage(data, Encoding.ASCII)
            
            Dim parts As MimePartCollection = m.RetrieveAllParts()
            'rewrite the text part content
            If Not (m.TextMimePart Is Nothing) Then
               m.TextMimePart.SetRawText("this will be the new text", MimeEncoding.QuotedPrintable)
            End If
            'view the formatted message 
            Console.WriteLine(m.ToString())
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.ToString(System.Boolean)">
            <summary>A string representation of the MimeMessage.</summary>
            <param name="reassemble">
            If reassemble is true, the MimeMessage is reassembled using the parts found in
            the AlternativeBodies, Attachments, EmbeddedParts, and InLineParts MimePart
            Collections.
            </param>
            <example>
            <code lang="C#">
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample1.eml" );
            
            //add an attachment
            string path = "c:\\temp\\logo.gif";
            MimePart attachment = MimePart.CreateFromFile( path );
            
            //mark as an attachment
            attachment.MarkAsAttachment();
            
            m.Attachments.Add( attachment );
            
            //view the message
            Console.WriteLine( m.ToString( true ) );
            
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample1.eml")
            
            'add an attachment
            Dim path As String = "c:\temp\logo.gif"
            Dim attachment As MimePart = MimePart.CreateFromFile(path)
            
            'mark as an attachment
            attachment.MarkAsAttachment()
            
            m.Attachments.Add(attachment)
            
            'view the message
            Console.WriteLine( m.ToString( True ) )
            
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.VersionNumber">
            <summary>
            Retrieves the version number of aspNetMime
            </summary>
            <returns>The version number</returns>
            <example>
            <code lang="C#">
            MimeMessage msg = new MimeMessage();
            
            Console.WriteLine( msg.VersionNumber() );
            </code>
            <code lang="Visual Basic">
            Dim msg As New MimeMessage()
            
            Console.WriteLine(msg.VersionNumber())
            </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeMessage.ParseString(System.String)">
            <summary>
            Creates an instance of a MimeMessage object from a string.
            </summary>
            <returns>A new MimeMessage</returns>
            <remarks>
            The string is assumed to be a UTF8 encoded string. To use a different
            encoding see the appropriate overloaded method that accepts the an Encoding
            parameter.
            </remarks>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            string contents = MessageContents();
             
            MimeMessage m = MimeMessage.ParseString( contents );
                    
            string headers = m.Headers.ToString();
             
            Console.WriteLine( headers );
                
            Console.WriteLine( "done." );
            Console.ReadLine();
                  
             
             
             
            static string MessageContents()
            {
             
                //load the message data from a data store
                //for example, sql server, or the file system
             
            }
            </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim contents As String = MessageContents()
             
            Dim m As MimeMessage = MimeMessage.ParseString(contents)
             
            Dim headers As String = m.Headers.ToString()
             
            Console.WriteLine(headers)
             
            Console.WriteLine("done.")
            Console.ReadLine()
                </code>
            </example>
            <param name="text">Text of Mime contents</param>
        </member>
        <member name="M:aspNetMime.MimeMessage.ParseString(System.String,System.Text.Encoding)">
            <summary>Creates an instance of a MimeMessage object from a string.</summary>
            <returns>A new MimeMessage</returns>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            string contents = MessageContents();
             
            MimeMessage m = MimeMessage.ParseString( contents, Encoding.ASCII );
                    
            string headers = m.Headers.ToString();
             
            Console.WriteLine( headers );
                
            Console.WriteLine( "done." );
            Console.ReadLine();
                  
             
             
             
            static string MessageContents()
            {
             
                //load the message data from a data store
                //for example, sql server, or the file system
             
            }
                </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim contents As String = MessageContents()
             
            Dim m As MimeMessage = MimeMessage.ParseString(contents,Encoding.ASCII)
             
            Dim headers As String = m.Headers.ToString()
             
            Console.WriteLine(headers)
             
            Console.WriteLine("done.")
            Console.ReadLine()
                </code>
            </example>
            <param name="text">Text of Mime contents</param>
            <param name="encoding">Encoding used to read the string.</param>
        </member>
        <member name="M:aspNetMime.MimeMessage.ParseFile(System.String)">
            <summary>
            Creates an instance of a MimeMessage object from a file.
            </summary>
            <returns>A new MimeMessage</returns>
            <remarks>A default UTF8 encoding is used to convert binary data to text.</remarks>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            MimeMessage m = MimeMessage.ParseFile( "message1.eml" );
            string headers = m.Headers.ToString();
             
            Console.WriteLine( headers );
             
            Console.WriteLine( "done." );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim m As MimeMessage = MimeMessage.ParseFile("message1.eml")
            Dim headers As String = m.Headers.ToString()
             
            Console.WriteLine(headers)
             
            Console.WriteLine("done.")
            Console.ReadLine()
                </code>
            </example>
            <param name="path">Path to the file.</param>
        </member>
        <member name="M:aspNetMime.MimeMessage.ParseFile(System.String,System.Text.Encoding)">
            <summary>
            Creates an instance of a MimeMessage object from a file.
            </summary>
            <returns>A new MimeMessage</returns>
            <remarks>If the encoding is null or nothing, a UTF8 encoding is used.</remarks>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            MimeMessage m = MimeMessage.ParseFile( "message1.eml", Encoding.Default );
            string headers = m.Headers.ToString();
             
            Console.WriteLine( headers );
             
            Console.WriteLine( "done." );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim m As MimeMessage = MimeMessage.ParseFile("message1.eml", Encoding.Default)
            Dim headers As String = m.Headers.ToString()
             
            Console.WriteLine(headers)
             
            Console.WriteLine("done.")
            Console.ReadLine()
                </code>
            </example>
            <param name="path">Path to the file.</param>
            <param name="encoding">Encoding used to read the file.</param>
        </member>
        <member name="M:aspNetMime.MimeMessage.ParseBinary(System.Byte[])">
            <returns>A MimeMessage object</returns>
            <remarks>
            The data is parsed with a UTF8 encoding. To use a different encoding see the
            appropriate overloaded method that accepts the an Encoding parameter.
            </remarks>
            <summary>Parses a byte array of data into a MimeMessage object</summary>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
                        
            byte[] data = MessageData();
             
            MimeMessage m = MimeMessage.ParseBinary( data );
                    
            string headers = m.Headers.ToString();
             
            Console.WriteLine( headers );
                
            Console.WriteLine( "done." );
            Console.ReadLine();
                  
             
            static byte[] MessageData()
            {
                //load the message data from a data store
                //for example, sql server
            }
            </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim data As Byte() = MessageData()
             
            Dim m As MimeMessage = MimeMessage.ParseBinary(data)
             
            Dim headers As String = m.Headers.ToString()
             
            Console.WriteLine(headers)
             
            Console.WriteLine("done.")
            Console.ReadLine()
             
             
             
            Shared Function MessageData() As Byte()
             
            'load the message data from a data store
            'for example, sql server
             
             
            End Function
                </code>
            </example>
            <param name="buffer">The byte array containing the MimeMessage information.</param>
        </member>
        <member name="M:aspNetMime.MimeMessage.ParseBinary(System.Byte[],System.Text.Encoding)">
            <returns>A MimeMessage object</returns>
            <remarks>
            The data is parsed with a UTF8 encoding. To use a different encoding see the
            appropriate overloaded method that accepts the an Encoding parameter.
            </remarks>
            <returns>A MimeMessage object</returns>
            <remarks>
            The data is parsed with a UTF8 encoding. To use a different encoding see the
            appropriate overloaded method that accepts the an Encoding parameter.
            </remarks>
            <summary>Parses a byte array of data into a MimeMessage object</summary>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
                        
            byte[] data = MessageData();
             
            MimeMessage m = MimeMessage.ParseBinary( data, Encoding.Default );
                    
            string headers = m.Headers.ToString();
             
            Console.WriteLine( headers );
                
            Console.WriteLine( "done." );
            Console.ReadLine();
                  
             
            static byte[] MessageData()
            {
                //load the message data from a data store
                //for example, sql server
            }
            </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim data As Byte() = MessageData()
             
            Dim m As MimeMessage = MimeMessage.ParseBinary(data, Encoding.Default)
             
            Dim headers As String = m.Headers.ToString()
             
            Console.WriteLine(headers)
             
            Console.WriteLine("done.")
            Console.ReadLine()
             
             
             
            Shared Function MessageData() As Byte()
             
            'load the message data from a data store
            'for example, sql server
             
             
            End Function
                </code>
            </example>
            <param name="buffer">A byte array containing the MimeMessage data.</param>
            <param name="encoding">The encoding used to convert the binary data into text.</param>
        </member>
        <member name="M:aspNetMime.MimeMessage.ParseBinary(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <returns>A MimeMessage object</returns>
            <remarks>
            The data is parsed with a UTF8 encoding. To use a different encoding see the
            appropriate overloaded method that accepts the an Encoding parameter.
            </remarks>
            <summary>Parses a byte array of data into a MimeMessage object</summary>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
                        
            byte[] data = MessageData();
             
            MimeMessage m = MimeMessage.ParseBinary( data,0,data.Length, Encoding.Default );
                    
            string headers = m.Headers.ToString();
             
            Console.WriteLine( headers );
                
            Console.WriteLine( "done." );
            Console.ReadLine();
                  
             
            static byte[] MessageData()
            {
                //load the message data from a data store
                //for example, sql server
            }
            </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim data As Byte() = MessageData()
             
            Dim m As MimeMessage = MimeMessage.ParseBinary(data,0,data.Length, Encoding.Default)
             
            Dim headers As String = m.Headers.ToString()
             
            Console.WriteLine(headers)
             
            Console.WriteLine("done.")
            Console.ReadLine()
             
             
             
            Shared Function MessageData() As Byte()
             
            'load the message data from a data store
            'for example, sql server
             
             
            End Function
                </code>
            </example>
            <param name="buffer">A byte array containing the MimeMessage data.</param>
            <param name="index">
            The index in which to start converting the buffer data into the MimeMessage
            object.
            </param>
            <param name="count">The number of bytes containing the MimeMessage information.</param>
            <param name="encoding">The encoding used to convert the binary data into text.</param>
        </member>
        <member name="M:aspNetMime.MimeMessage.ParseStream(System.IO.Stream)">
            <returns>A MimeMessage object</returns>
            <remarks>
            The stream is parsed with a UTF8 encoding. To use a different encoding see the
            appropriate overloaded method that accepts the an Encoding parameter.
            </remarks>
            <returns>A MimeMessage object</returns>
            <summary>Parses a stream of data into a MimeMessage object</summary>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            string path = "message1.eml";
            FileStream fs = File.Open( path, FileMode.Open );
            MimeMessage m = MimeMessage.ParseStream( fs );
            fs.Close();
             
            string headers = m.Headers.ToString();
             
            Console.WriteLine( headers );
             
            Console.WriteLine( "done." );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim path As String = "message1.eml"
            Dim fs As FileStream = File.Open(path, FileMode.Open)
            Dim m As MimeMessage = MimeMessage.ParseStream(fs)
            fs.Close()
             
            Dim headers As String = m.Headers.ToString()
             
            Console.WriteLine(headers)
             
            Console.WriteLine("done.")
            Console.ReadLine()
                </code>
            </example>
            <param name="stream">A stream containing the MimeMessage data.</param>
        </member>
        <member name="M:aspNetMime.MimeMessage.ParseStream(System.IO.Stream,System.Text.Encoding)">
            <remarks>
            The stream is parsed with a UTF8 encoding. To use a different encoding see the
            appropriate overloaded method that accepts the an Encoding parameter.
            </remarks>
            <returns>A MimeMessage object</returns>
            <summary>Parses a stream data into a MimeMessage object</summary>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            string path = "message1.eml";
            FileStream fs = File.Open( path, FileMode.Open );
            MimeMessage m = MimeMessage.ParseStream( fs, Encoding.Default );
            fs.Close();
             
            string headers = m.Headers.ToString();
             
            Console.WriteLine( headers );
             
            Console.WriteLine( "done." );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim path As String = "message1.eml"
            Dim fs As FileStream = File.Open(path, FileMode.Open)
            Dim m As MimeMessage = MimeMessage.ParseStream(fs,Encoding.Default)
            fs.Close()
             
            Dim headers As String = m.Headers.ToString()
             
            Console.WriteLine(headers)
             
            Console.WriteLine("done.")
            Console.ReadLine()
                </code>
            </example>
            <param name="stream">A stream containing the MimeMessage data.</param>
            <param name="encoding">The encoding used to convert the stream into text.</param>
        </member>
        <member name="M:aspNetMime.MimeMessage.LoadLicenseFile(System.String)">
            <summary>Loads a license file, based upon a fileystem path.</summary>
            <remarks>
            	<para>If aspNetMime is used with any other products, for example aspNetIMAP or
                aspNetPOP3, the aspNetMime license will automatically be loaded when those object's
                licenses are loaded.</para>
            	<para>For example, calling</para>
            	<para>POP3.LoadLicenseFile( path )</para>
            	<para>makes a call to</para>
            	<para>MimeMessage.LoadLicenseFile( path )</para>
            </remarks>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            MimeMessage m = MimeMessage.ParseFile( "message1.eml" );
            string headers = m.Headers.ToString();
             
            Console.WriteLine( headers );
                </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim m As MimeMessage = MimeMessage.ParseFile("message1.eml")
            Dim headers As String = m.Headers.ToString()
             
            Console.WriteLine(headers)
                </code>
            </example>
            <param name="path">File system path to the license file.</param>
        </member>
        <member name="M:aspNetMime.MimeMessage.LoadLicenseString(System.String)">
            <summary>Loads a license file, from a properly formatted Xml license string.</summary>
            <remarks>
            	<para>This method can be useful, if you want to store you license in a central
                location, for example, a Sql Server, or of you are bundling this component with
                your end product, and want to embed the license contents in your application, to
                prevent malicious use.</para>
            	<para>If aspNetMime is used with any other products, for example aspNetIMAP or
                aspNetPOP3, the aspNetMime license will automatically be loaded when those object's
                licenses are loaded.</para>
            	<para>For example, calling</para>
            	<para>POP3.LoadLicenseString( path )</para>
            	<para>makes a call to</para>
            	<para>MimeMessage.LoadLicenseString( path )</para>
            </remarks>
            <example>
            	<code lang="CS">
            string licenseContents = GetLicense();
                MimeMessage.LoadLicenseString( licenseContents ); 
             
                MimeMessage m = MimeMessage.ParseFile( "message1.eml" );
                string headers = m.Headers.ToString();
             
                Console.WriteLine( headers );
             
             
             
            static string GetLicense()
            {
                //this method gets the license as a string. The license might be found in sql server, on the filesystem, or as an
                //embedded resource in your application.
            }
                </code>
            	<code lang="VB">
            Dim licenseContents As String = GetLicense()
            MimeMessage.LoadLicenseString(licenseContents)
             
            Dim m As MimeMessage = MimeMessage.ParseFile("message1.eml")
            Dim headers As String = m.Headers.ToString()
             
            Console.WriteLine(headers)
             
             
             
            Shared Function GetLicense() As String
             
            'this method gets the license as a string. The license might be 
            'found in sql server, on the filesystem, or as an
            'embedded resource in your application.
             
            End Function 'GetLicense
                </code>
            </example>
            <param name="xmlString">A string containing the Xml license contents.</param>
        </member>
        <member name="M:aspNetMime.MimeMessage.LoadLicenseStream(System.IO.Stream)">
            <summary>
            Loads the license from a System.IO.Stream
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:aspNetMime.MimeMessage.LoadLicenseResource">
            <summary>
            Loads a license that was embedded as a resource.
            </summary>
            <remarks>
            This method scans the aseemblies for an embedded resource named "aspNetMime.xml.lic"
            <br />Once it finds the resource it attempts load it, and verify itself.
            If you want to embed the aspNetMime.xml.lic in your project or product, and are using VS.NET follow these steps
            <list type="bullet">
            <item>
            	<description>In Solution Explorer, right-click your project and select "Add Existing Item". Browse to your aspNetMime.xml.lic file.</description>
            </item>
            <item>
            	<description>When the license file has been added to your project, right-click it and select "Properties".</description>
            </item>
            <item>
            	<description>In the Properties Window, change the Build Action property to Embedded Resource.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:aspNetMime.MimeMessage.LoadLicenseResource(System.String)">
            <summary>
            Loads the license contents from a specific resource name.
            </summary>
            <param name="resourceName">The name of the embedded resource</param>
            <remarks>This method will scan the loaded assemblies for the existing resource name. Once it is found, it attemps to load the resource as a license.</remarks>
        </member>
        <member name="P:aspNetMime.MimeMessage.AlternativeBodies">
            <summary>A collection of Alternative body parts.</summary>
            <example>
            <code lang="C#">
            
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample.eml" );
            
            MimePartCollection parts = m.AlternativeBodies;
            foreach( MimePart part in parts )
            {
            	//write out the body text
            	Console.WriteLine( part.DecodedText() );
            }
            
            </code>
            <code lang="VB.NET">
            
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample.eml")
            
            Dim parts As MimePartCollection = m.AlternativeBodies
            Dim part As MimePart
            For Each part In  parts
               'write out the body text
               Console.WriteLine(part.DecodedText())
            Next part	
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.Attachments">
            <summary>
            Retrieves any attachments as a MimePartCollection.
            </summary>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            string path = "message1.eml";
             
            MimeMessage m = MimeMessage.ParseFile( path );
             
            if( ( m.Attachments != null ) &amp;&amp; ( m.Attachments.Count &gt; 0 ) )
            {
                foreach( MimePart part in m.Attachments )
                {
                    Console.WriteLine( part.AttachmentName() );
                    //sometimes the Filename can be different than the Mime specified attachment name.
                    Console.WriteLine( part.Filename );  
                }
            }
             
            Console.WriteLine( "done." );
            Console.ReadLine();
                </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim path As String = "message1.eml"
             
            Dim m As MimeMessage = MimeMessage.ParseFile(path)
             
            If Not (m.Attachments Is Nothing) And m.Attachments.Count &gt; 0 Then
               Dim part As MimePart
               For Each part In  m.Attachments
                  Console.WriteLine(part.AttachmentName())
                  'sometimes the Filename can be different than the Mime specified attachment name.
                  Console.WriteLine(part.Filename)
               Next part
            End If
             
            Console.WriteLine("done.")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.BLChecker">
            <summary>
            The Black List Checker used to check if the message is spam.	
            </summary>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            string path = "message1.eml";
            MimeMessage m = MimeMessage.ParseFile( path );
             
            //create a new DNSbl checker
            m.BLChecker= new BlackListChecker();
            m.BLChecker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            m.BLChecker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
            //check to see if the message is spam, according to the servers added to the BLChecker
            bool result = m.IsBlackListedSpam();
             
            Console.WriteLine( result );
             
            Console.WriteLine( "done." );
            Console.ReadLine();
            </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim path As String = "message1.eml"
            Dim m As MimeMessage = MimeMessage.ParseFile(path)
             
            'create a new DNSbl checker
            m.BLChecker = New BlackListChecker()
            m.BLChecker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
            m.BLChecker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
            'check to see if the message is spam, according to the servers added to the BLChecker
            Dim result As Boolean = m.IsBlackListedSpam()
             
            Console.WriteLine(result)
             
            Console.WriteLine("done.")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.CC">
            <summary>
            Retrieves the CC email addresses as an AddressCollection
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            if( msg.CC != null )
            	Console.WriteLine( msg.CC.ToString() );
            
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim msg As New aspNetMime.MimeMessage(fs)
            
             'close the stream
             fs.Close()
            
             If Not (msg.CC Is Nothing) Then
                 Console.WriteLine(msg.CC.ToString())
             End If
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.Date">
            <summary>
              Retrieves the value of the Date header.
            </summary>
            <remarks>
            To convert this RFC822 Date string to a DateTime value, use Utility.FromEmailDate( string emailDate ). 
            Because many email clients, spefically spam, do not implement this field correctly, an exception may be thrown if any
            parsing errors occur.
            </remarks>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            //try and get the real date
            try
            {
            	DateTime dt  = Utility.FromEmailDate( msg.Date );
            	Console.WriteLine( dt.ToShortDateString() );
            }
            catch
            {
            	Console.WriteLine( msg.Date );
            }
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
             
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
             
             'this creates a MimeMessage from a stream
             Dim msg As New aspNetMime.MimeMessage(fs)
             
             'close the stream
             fs.Close()
             
             'try and get the real date
             Try
                 Dim dt As DateTime = Utility.FromEmailDate(msg.Date)
                 Console.WriteLine(dt.ToShortDateString())
             Catch
                 Console.WriteLine(msg.Date)
             End Try
             
             Console.WriteLine("done...")
             Console.ReadLine()
             
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.EmbeddedParts">
            <summary>
            Returnes a MimePartCollectdion of MimeParts that are embedded objects of the message.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            MimePartCollection embeddedParts = msg.EmbeddedParts;
            foreach( MimePart part in embeddedParts )
            {
            	Console.WriteLine( part.EmbeddedName() );
            }
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            'close the stream
            fs.Close()
            
            Dim embeddedParts As MimePartCollection = msg.EmbeddedParts
            Dim part As MimePart
            For Each part In embeddedParts
                Console.WriteLine(part.EmbeddedName())
            Next part
            
            Console.WriteLine("done...")
            Console.ReadLine()
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.From">
            <summary>
              Retrieves the Address of the From header.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            //close the stream
            fs.Close();
            
            Console.WriteLine( msg.From.Name );
            Console.WriteLine( msg.From.EmailAddress );
            
            
            
            </code>
            <code lang="Visual Basic">
            
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            'close the stream
            fs.Close()
            
            Console.WriteLine(msg.From.Name)
            Console.WriteLine(msg.From.EmailAddress)
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.HtmlMimePart">
            <summary>
            If a Html formatted body part is available, it is returned. Typically this part
            is what is viewable in an email client or reader.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            MimePartCollection attachments = msg.Attachments;
            
            foreach( MimePart mp in attachments )
            {
            	Console.WriteLine( mp.AttachmentName() );
            }
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            
            
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            fs.Close()
            
            Dim attachments As MimePartCollection = msg.Attachments
            
            Dim mp As MimePart
            For Each mp In attachments
                Console.WriteLine(mp.AttachmentName())
            Next mp
            
            Console.WriteLine("done...")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.InLineParts">
            <summary>
            Any inline parts in the email.
            </summary>
            <example>
            <code lang="C#">
            MimeMessage m = MimeMessage.ParseFile( "c:\\temp\\sample.eml" );
            MimePartCollection parts = m.InLineParts;
            if( ( parts != null ) &amp;&amp; ( parts.Count &gt; 0 ) )
            {
            	foreach( MimePart part in parts )
            	{
            		//inline name
            		Console.WriteLine( part.InlineName() );
            		//save the inline parts to the directory
            		part.Save( "c:\\temp\\"  );
            	}
            }
            
            </code>
            <code lang="VB.NET">
            Dim m As MimeMessage = MimeMessage.ParseFile("c:\temp\sample.eml")
            Dim parts As MimePartCollection = m.InLineParts
            If Not (parts Is Nothing) And parts.Count > 0 Then
               Dim part As MimePart
               For Each part In  parts
                  'inline name
                  Console.WriteLine(part.InlineName())
                  'save the inline parts to the directory
                  part.Save("c:\temp\")
               Next part
            End If
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.MainBody">
            <summary>
            Gets the text of the highest probable body part. 
            </summary>
            <remarks>
            If a HTML MimePart is present, the decoded HTML text is returned. If no HTML MimePart exists,
            then the decoded text of the Text MimePart is returned.
            </remarks>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            Console.WriteLine( msg.MainBody );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim msg As New aspNetMime.MimeMessage(fs)
            
             fs.Close()
            
             Console.WriteLine(msg.MainBody)
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.MainBodyPart">
            <summary>
            The main MimePart of the MimeMessage. 
            </summary>
            <remarks>
            If a HTML Body MimePart exists, that MimePart is returned. If a HTML Part cannot be found, and  a Text Body MimePart exists
            that MimePart is returned. If neiter of these body parts are found, null is returned.
            </remarks>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            Console.WriteLine( msg.MainBodyPart.Headers.ToString() );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim msg As New aspNetMime.MimeMessage(fs)
            
             fs.Close()
            
             Console.WriteLine(msg.MainBodyPart.Headers.ToString())
            
             Console.WriteLine("done...")
             Console.ReadLine()
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.MimeVersion">
            <summary>
            Returns the Mime Version of the email.
            </summary>
            <remarks>
            This will almost always be 1.0
            </remarks>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            Console.WriteLine(msg.MimeVersion.Value);
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            fs.Close()
            
            Console.WriteLine(msg.MimeVersion.Value)
            
            Console.WriteLine("done...")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.MessageId">
            <summary>
            Returns the MimeMessage-Id of the MimeMessage.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            Console.WriteLine(msg.MimeVersion.Value);
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim msg As New aspNetMime.MimeMessage(fs)
            
             fs.Close()
            
             Console.WriteLine(msg.MessageId.Value)
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.Priority">
            <summary>
            Retrieves the X-Priority header of the email.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            Console.WriteLine(msg.Priority.Value);
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim msg As New aspNetMime.MimeMessage(fs)
            
             fs.Close()
            
             Console.WriteLine(msg.Priority.Value)
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.ReplyTo">
            <summary>
              Retrieves the value of the Reply To header.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            Console.WriteLine(msg.ReplyTo.Value);
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim msg As New aspNetMime.MimeMessage(fs)
            
             fs.Close()
            
             Console.WriteLine(msg.ReplyTo.Value)
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.ReturnPath">
            <summary>
            Retrieves the Return-Path header.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            if( msg.ReturnPath != null )	
                Console.WriteLine(msg.ReturnPath.Value);
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            fs.Close()
            
            If Not (msg.ReturnPath Is Nothing) Then
                Console.WriteLine(msg.ReturnPath.Value)
            End If
            
            Console.WriteLine("done...")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.Subject">
            <summary>
              Retrieves the value of the Subject header.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            if( msg.Subject != null )	
                Console.WriteLine(msg.Subject.Value);
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
             'an email on the filesystem
             Dim filename As String = "testEmail.eml"
            
             'open the email
             Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
             'this creates a MimeMessage from a stream
             Dim msg As New aspNetMime.MimeMessage(fs)
            
             fs.Close()
            
             If Not (msg.Subject Is Nothing) Then
                 Console.WriteLine(msg.Subject.Value)
             End If
            
             Console.WriteLine("done...")
             Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.To">
            <summary>
            Retrieves the email address found on the To line of the email, as an AddressCollection
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            if( msg.To != null )	
                Console.WriteLine(msg.To.ToString());
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            fs.Close()
            
            If Not (msg.To Is Nothing) Then
                Console.WriteLine(msg.To.ToString())
            End If
            
            Console.WriteLine("done...")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.TextMimePart">
            <summary>
            If a text formatted body part is available, it is returned.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            if( msg.TextMimePart != null )	
                Console.WriteLine(msg.TextMimePart.DecodedText() );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            
            
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            fs.Close()
            
            If Not (msg.TextMimePart Is Nothing) Then
                Console.WriteLine(msg.TextMimePart.DecodedText())
            End If
            
            Console.WriteLine("done...")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeMessage.XMailer">
            <summary>
            X-Mailer header for the MimeMessage.
            </summary>
            <example>
            <code lang="C#">
            //an email on the filesystem
            string filename = "testEmail.eml";
            
            //open the email
            FileStream fs = File.Open( filename, FileMode.Open );
            
            //this creates a MimeMessage from a stream
            aspNetMime.MimeMessage msg = new aspNetMime.MimeMessage( fs );
            
            fs.Close();
            
            if( msg.XMailer != null )	
                Console.WriteLine(msg.XMailer.Value );
            
            Console.WriteLine( "done..." );
            Console.ReadLine();
            
            </code>
            <code lang="Visual Basic">
            'an email on the filesystem
            Dim filename As String = "testEmail.eml"
            
            'open the email
            Dim fs As FileStream = File.Open(filename, FileMode.Open)
            
            'this creates a MimeMessage from a stream
            Dim msg As New aspNetMime.MimeMessage(fs)
            
            fs.Close()
            
            If Not (msg.XMailer Is Nothing) Then
                Console.WriteLine(msg.XMailer.Value)
            End If
            
            Console.WriteLine("done...")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="T:aspNetMime.MimeReader">
            <summary>Reads a Mime formatted message in a forward manner.</summary>
            <remarks>
            	<para>The MimeReader reads mime messages very similiar to the techniques used by
                Streams in .NET. However, the MimeReader reads the messages in a forward manner,
                and cannot be moved to a previous part.</para>
            	<para>This technique allows for large Mime messages to be read, with a low memory
                footprint. The MimeReader uses the ReadPart() method to move to the next available
                part.</para>
            	<para><strong>Some differences between using the MimeMessage object and the
                MimeReader object</strong></para>
            	<para>The MimeMessage object loads the entire MimeMessage into a single object.
                This allows you to navigate from one part to another. Also, because a MimePart can
                contain children, the RawText property of the part is a aformatted copy of the
                children Mime parts. Although this makes it very developer friendly to navigate
                around the MimeMessage object, it requires more memory. The MimeReader object
                changes that.</para>
            	<para>The MimeReader object will read the Mime message, one part at a time. There
                main advantages are speed and low memory footprint. The MimeReader class allows the
                developer to tell the component when to parse the next part. The other advantage is
                the low memory footprint. Once the MimeReader moves past a MimePart, it destroys
                that part of memory, keeping only the current MimePart available.</para>
            	<para>There are also two disadvantages to using the MimeReader class. Once the
                MimeReader moves past a MimePart, the previous part is not accessible from this
                class. So it is up to the developer to keep track of any previous parts. Also, if a
                MimePart has a Content-Type of Multipart, no body will be included in this part.
                Because a MultiPart's body is made up of children, the children can be accessed by
                calling ReadPart().</para>
            	<para>To best determine which object will work best for you, view the chart
                below</para>
            	<para>
            		<table cols="3" border="1">
            			<tbody>
            				<tr>
            					<td width="67" height="18"></td>
            					<td bgcolor="silver" height="18">MimeMessage</td>
            					<td bgcolor="silver" height="18">MimeReader</td>
            				</tr>
            				<tr>
            					<td width="67">Concept</td>
            					<td>Loads the entire message into a single object for easy use and
                                navigation.</td>
            					<td>A forward looking, Mime reading "cursor".</td>
            				</tr>
            				<tr>
            					<td width="67">Memory</td>
            					<td>Loads the entire message into Memory. Any Multipart bodies have
                                a copy of their children loaded into themselves.</td>
            					<td>Only loads a single part of the message into memory. The body
                                of a Multipart message will be null. The body can be retrieved by
                                calling ReadPart(), which will read the first child MimePart.</td>
            				</tr>
            				<tr>
            					<td width="67">Speed</td>
            					<td>Initial loading time is longer, due to the MimeMessage reading
                                the entire object</td>
            					<td>Speed is determined by the developer. The developer tells the
                                MimeReader when to parse the next part.</td>
            				</tr>
            				<tr>
            					<td width="67">Navigation</td>
            					<td>Can easily navigate to any part of the MimeMessage, backwards
                                or forwards.</td>
            					<td>Can only move forward, when ReadPart() is called.</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
            </remarks>
            <example>
            	<code lang="CS">
            static void ReaderExample( string path )
            {
                MimeReader mr = new MimeReader();
                mr.LoadFile( path );
             
                //read the first part
                MimePart part = mr.ReadPart();
             
                //loop through the remainder of the parts
                while( part != null )
                {
                    if( part.IsMultiPart() )
                    {
                        //then only the headers are accessible. 
                        //the multiple body parts can be accessed by calling ReadPart() again.
             
                        //write out the heaeders
                        Console.WriteLine( part.Headers.ToString() );
                    }
                    else
                    {
                        //access any part of the part, including the Body
                        if( part.IsAttachment() )
                        {
                            //save attachment data
                            //part.Save(...)
                        }
                        else
                        {
                            //work with the deocded body text
                            string bodyText = part.DecodedText();
                            
                            //do something with bodyText
                            //...
                            //...
                        }
                    }
             
                    //read the next part
                    part = mr.ReadPart();
                }
            }
                </code>
            	<code lang="VB">
            Shared Sub ReaderExample(path As String)
               Dim mr As New MimeReader()
               mr.LoadFile(path)
               
               'read the first part
               Dim part As MimePart = mr.ReadPart()
               
               'loop through the remainder of the parts
               While Not (part Is Nothing)
                  If part.IsMultiPart() Then
                     'then only the headers are accessible. 
                     'the multiple body parts can be accessed by calling ReadPart() again.
                     'write out the heaeders
                     Console.WriteLine(part.Headers.ToString())
                  Else
                     'access any part of the part, including the Body
                     If part.IsAttachment() Then
                     'save attachment data
                     'part.Save(...)
                     Else
                        'work with the deocded body text
                        Dim bodyText As String = part.DecodedText()
                     End If 
                  End If 'do something with bodyText
                  '...
                  '...
                  
                  'read the next part
                  part = mr.ReadPart()
               End While
            End Sub 'ReaderExample
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeReader.#ctor">
            <summary>Creates an instance of the MimeReader class</summary>
            <example>
            	<code lang="CS">
            static void ReaderExample( string path )
            {
                MimeReader mr = new MimeReader();
                mr.LoadFile( path );
             
                //read the first part
                MimePart part = mr.ReadPart();
             
                //loop through the remainder of the parts
                while( part != null )
                {
                    if( part.IsMultiPart() )
                    {
                        //then only the headers are accessible. 
                        //the multiple body parts can be accessed by calling ReadPart() again.
             
                        //write out the heaeders
                        Console.WriteLine( part.Headers.ToString() );
                    }
                    else
                    {
                        //access any part of the part, including the Body
                        if( part.IsAttachment() )
                        {
                            //save attachment data
                            //part.Save(...)
                        }
                        else
                        {
                            //work with the deocded body text
                            string bodyText = part.DecodedText();
                            
                            //do something with bodyText
                            //...
                            //...
                        }
                    }
             
                    //read the next part
                    part = mr.ReadPart();
                }
            }
                </code>
            	<code lang="VB">
            Shared Sub ReaderExample(path As String)
               Dim mr As New MimeReader()
               mr.LoadFile(path)
               
               'read the first part
               Dim part As MimePart = mr.ReadPart()
               
               'loop through the remainder of the parts
               While Not (part Is Nothing)
                  If part.IsMultiPart() Then
                     'then only the headers are accessible. 
                     'the multiple body parts can be accessed by calling ReadPart() again.
                     'write out the heaeders
                     Console.WriteLine(part.Headers.ToString())
                  Else
                     'access any part of the part, including the Body
                     If part.IsAttachment() Then
                     'save attachment data
                     'part.Save(...)
                     Else
                        'work with the deocded body text
                        Dim bodyText As String = part.DecodedText()
                     End If 
                  End If 'do something with bodyText
                  '...
                  '...
                  
                  'read the next part
                  part = mr.ReadPart()
               End While
            End Sub 'ReaderExample
                </code>
            </example>
        </member>
        <member name="M:aspNetMime.MimeReader.#ctor(System.String)">
            <summary>Creates an instance of the MimeReader class, and loading a file.</summary>
            <example>
            	<code lang="CS">
            static void ReaderExample( string path )
            {
                MimeReader mr = new MimeReader( path );
             
                //read the first part
                MimePart part = mr.ReadPart();
             
                //loop through the remainder of the parts
                while( part != null )
                {
                    if( part.IsMultiPart() )
                    {
                        //then only the headers are accessible. 
                        //the multiple body parts can be accessed by calling ReadPart() again.
             
                        //write out the heaeders
                        Console.WriteLine( part.Headers.ToString() );
                    }
                    else
                    {
                        //access any part of the part, including the Body
                        if( part.IsAttachment() )
                        {
                            //save attachment data
                            //part.Save(...)
                        }
                        else
                        {
                            //work with the deocded body text
                            string bodyText = part.DecodedText();
                            
                            //do something with bodyText
                            //...
                            //...
                        }
                    }
             
                    //read the next part
                    part = mr.ReadPart();
                }
            }
                </code>
            	<code lang="VB">
            Shared Sub ReaderExample(path As String)
               Dim mr As New MimeReader( path )
               
               'read the first part
               Dim part As MimePart = mr.ReadPart()
               
               'loop through the remainder of the parts
               While Not (part Is Nothing)
                  If part.IsMultiPart() Then
                     'then only the headers are accessible. 
                     'the multiple body parts can be accessed by calling ReadPart() again.
                     'write out the heaeders
                     Console.WriteLine(part.Headers.ToString())
                  Else
                     'access any part of the part, including the Body
                     If part.IsAttachment() Then
                     'save attachment data
                     'part.Save(...)
                     Else
                        'work with the deocded body text
                        Dim bodyText As String = part.DecodedText()
                     End If 
                  End If 'do something with bodyText
                  '...
                  '...
                  
                  'read the next part
                  part = mr.ReadPart()
               End While
            End Sub 'ReaderExample
                </code>
            </example>
            <param name="path">Filesystem path to the file.</param>
        </member>
        <member name="M:aspNetMime.MimeReader.#ctor(System.IO.Stream)">
            <summary>Creates an instance of the MimeReader class, and loading a stream.</summary>
            <example>
            	<code lang="CS">
            static void ReaderExample( Stream strm )
            {
                MimeReader mr = new MimeReader( strm );
             
                //read the first part
                MimePart part = mr.ReadPart();
             
                //loop through the remainder of the parts
                while( part != null )
                {
                    if( part.IsMultiPart() )
                    {
                        //then only the headers are accessible. 
                        //the multiple body parts can be accessed by calling ReadPart() again.
             
                        //write out the heaeders
                        Console.WriteLine( part.Headers.ToString() );
                    }
                    else
                    {
                        //access any part of the part, including the Body
                        if( part.IsAttachment() )
                        {
                            //save attachment data
                            //part.Save(...)
                        }
                        else
                        {
                            //work with the deocded body text
                            string bodyText = part.DecodedText();
                            
                            //do something with bodyText
                            //...
                            //...
                        }
                    }
             
                    //read the next part
                    part = mr.ReadPart();
                }
            }
                </code>
            	<code lang="VB">
            Shared Sub ReaderExample(strm As Stream)
               Dim mr As New MimeReader( strm )
               
               'read the first part
               Dim part As MimePart = mr.ReadPart()
               
               'loop through the remainder of the parts
               While Not (part Is Nothing)
                  If part.IsMultiPart() Then
                     'then only the headers are accessible. 
                     'the multiple body parts can be accessed by calling ReadPart() again.
                     'write out the heaeders
                     Console.WriteLine(part.Headers.ToString())
                  Else
                     'access any part of the part, including the Body
                     If part.IsAttachment() Then
                     'save attachment data
                     'part.Save(...)
                     Else
                        'work with the deocded body text
                        Dim bodyText As String = part.DecodedText()
                     End If 
                  End If 'do something with bodyText
                  '...
                  '...
                  
                  'read the next part
                  part = mr.ReadPart()
               End While
            End Sub 'ReaderExample
                </code>
            </example>
            <param name="stream">Stream containing the Mime contents</param>
        </member>
        <member name="M:aspNetMime.MimeReader.#ctor(System.Byte[])">
            <summary>Creates an instance of the MimeReader class, and loading a byte array.</summary>
            <example>
            	<code lang="CS">
            static void ReaderExample( byte[] data )
            {
                MimeReader mr = new MimeReader( data );
             
                //read the first part
                MimePart part = mr.ReadPart();
             
                //loop through the remainder of the parts
                while( part != null )
                {
                    if( part.IsMultiPart() )
                    {
                        //then only the headers are accessible. 
                        //the multiple body parts can be accessed by calling ReadPart() again.
             
                        //write out the heaeders
                        Console.WriteLine( part.Headers.ToString() );
                    }
                    else
                    {
                        //access any part of the part, including the Body
                        if( part.IsAttachment() )
                        {
                            //save attachment data
                            //part.Save(...)
                        }
                        else
                        {
                            //work with the deocded body text
                            string bodyText = part.DecodedText();
                            
                            //do something with bodyText
                            //...
                            //...
                        }
                    }
             
                    //read the next part
                    part = mr.ReadPart();
                }
            }
                </code>
            	<code lang="VB">
            Shared Sub ReaderExample(data As Byte())
               Dim mr As New MimeReader( data )
               
               'read the first part
               Dim part As MimePart = mr.ReadPart()
               
               'loop through the remainder of the parts
               While Not (part Is Nothing)
                  If part.IsMultiPart() Then
                     'then only the headers are accessible. 
                     'the multiple body parts can be accessed by calling ReadPart() again.
                     'write out the heaeders
                     Console.WriteLine(part.Headers.ToString())
                  Else
                     'access any part of the part, including the Body
                     If part.IsAttachment() Then
                     'save attachment data
                     'part.Save(...)
                     Else
                        'work with the deocded body text
                        Dim bodyText As String = part.DecodedText()
                     End If 
                  End If 'do something with bodyText
                  '...
                  '...
                  
                  'read the next part
                  part = mr.ReadPart()
               End While
            End Sub 'ReaderExample
                </code>
            </example>
            <param name="data">Byte array containing the Mime data.</param>
        </member>
        <member name="M:aspNetMime.MimeReader.LoadFile(System.String)">
            <example>
            	<code lang="CS">
            static void ReaderExample( string path )
            {
                MimeReader mr = new MimeReader();
                mr.LoadFile( path );
             
                //read the first part
                MimePart part = mr.ReadPart();
             
                //loop through the remainder of the parts
                while( part != null )
                {
                    if( part.IsMultiPart() )
                    {
                        //then only the headers are accessible. 
                        //the multiple body parts can be accessed by calling ReadPart() again.
             
                        //write out the heaeders
                        Console.WriteLine( part.Headers.ToString() );
                    }
                    else
                    {
                        //access any part of the part, including the Body
                        if( part.IsAttachment() )
                        {
                            //save attachment data
                            //part.Save(...)
                        }
                        else
                        {
                            //work with the deocded body text
                            string bodyText = part.DecodedText();
                            
                            //do something with bodyText
                            //...
                            //...
                        }
                    }
             
                    //read the next part
                    part = mr.ReadPart();
                }
            }
                </code>
            	<code lang="VB">
            Shared Sub ReaderExample(path As String)
               Dim mr As New MimeReader()
               mr.LoadFile(path)
               
               'read the first part
               Dim part As MimePart = mr.ReadPart()
               
               'loop through the remainder of the parts
               While Not (part Is Nothing)
                  If part.IsMultiPart() Then
                     'then only the headers are accessible. 
                     'the multiple body parts can be accessed by calling ReadPart() again.
                     'write out the heaeders
                     Console.WriteLine(part.Headers.ToString())
                  Else
                     'access any part of the part, including the Body
                     If part.IsAttachment() Then
                     'save attachment data
                     'part.Save(...)
                     Else
                        'work with the deocded body text
                        Dim bodyText As String = part.DecodedText()
                     End If 
                  End If 'do something with bodyText
                  '...
                  '...
                  
                  'read the next part
                  part = mr.ReadPart()
               End While
            End Sub 'ReaderExample
                </code>
            </example>
            <summary>Loads a MimeReader from a file.</summary>
        </member>
        <member name="M:aspNetMime.MimeReader.LoadStream(System.IO.Stream)">
            <example>
            	<code lang="CS">
            static void ReaderExample( Stream strm )
            {
                MimeReader mr = new MimeReader();
                mr.LoadStream( strm );
             
                //read the first part
                MimePart part = mr.ReadPart();
             
                //loop through the remainder of the parts
                while( part != null )
                {
                    if( part.IsMultiPart() )
                    {
                        //then only the headers are accessible. 
                        //the multiple body parts can be accessed by calling ReadPart() again.
             
                        //write out the heaeders
                        Console.WriteLine( part.Headers.ToString() );
                    }
                    else
                    {
                        //access any part of the part, including the Body
                        if( part.IsAttachment() )
                        {
                            //save attachment data
                            //part.Save(...)
                        }
                        else
                        {
                            //work with the deocded body text
                            string bodyText = part.DecodedText();
                            
                            //do something with bodyText
                            //...
                            //...
                        }
                    }
             
                    //read the next part
                    part = mr.ReadPart();
                }
            }
                </code>
            	<code lang="VB">
            Shared Sub ReaderExample(strm As Stream)
               Dim mr As New MimeReader()
               mr.LoadStream(strm)
               
               'read the first part
               Dim part As MimePart = mr.ReadPart()
               
               'loop through the remainder of the parts
               While Not (part Is Nothing)
                  If part.IsMultiPart() Then
                     'then only the headers are accessible. 
                     'the multiple body parts can be accessed by calling ReadPart() again.
                     'write out the heaeders
                     Console.WriteLine(part.Headers.ToString())
                  Else
                     'access any part of the part, including the Body
                     If part.IsAttachment() Then
                     'save attachment data
                     'part.Save(...)
                     Else
                        'work with the deocded body text
                        Dim bodyText As String = part.DecodedText()
                     End If 
                  End If 'do something with bodyText
                  '...
                  '...
                  
                  'read the next part
                  part = mr.ReadPart()
               End While
            End Sub 'ReaderExample
                </code>
            </example>
            <summary>Loads a MimeReader from a stream.</summary>
            <param name="stream">Stream containing the Mime contents.</param>
        </member>
        <member name="M:aspNetMime.MimeReader.LoadBinary(System.Byte[])">
            <example>
            	<code lang="CS">
            static void ReaderExample( byte[] data)
            {
                MimeReader mr = new MimeReader();
                mr.LoadBinary( data );
             
                //read the first part
                MimePart part = mr.ReadPart();
             
                //loop through the remainder of the parts
                while( part != null )
                {
                    if( part.IsMultiPart() )
                    {
                        //then only the headers are accessible. 
                        //the multiple body parts can be accessed by calling ReadPart() again.
             
                        //write out the heaeders
                        Console.WriteLine( part.Headers.ToString() );
                    }
                    else
                    {
                        //access any part of the part, including the Body
                        if( part.IsAttachment() )
                        {
                            //save attachment data
                            //part.Save(...)
                        }
                        else
                        {
                            //work with the deocded body text
                            string bodyText = part.DecodedText();
                            
                            //do something with bodyText
                            //...
                            //...
                        }
                    }
             
                    //read the next part
                    part = mr.ReadPart();
                }
            }
                </code>
            	<code lang="VB">
            Shared Sub ReaderExample(data As Byte())
               Dim mr As New MimeReader()
               mr.LoadBinary(data)
               
               'read the first part
               Dim part As MimePart = mr.ReadPart()
               
               'loop through the remainder of the parts
               While Not (part Is Nothing)
                  If part.IsMultiPart() Then
                     'then only the headers are accessible. 
                     'the multiple body parts can be accessed by calling ReadPart() again.
                     'write out the heaeders
                     Console.WriteLine(part.Headers.ToString())
                  Else
                     'access any part of the part, including the Body
                     If part.IsAttachment() Then
                     'save attachment data
                     'part.Save(...)
                     Else
                        'work with the deocded body text
                        Dim bodyText As String = part.DecodedText()
                     End If 
                  End If 'do something with bodyText
                  '...
                  '...
                  
                  'read the next part
                  part = mr.ReadPart()
               End While
            End Sub 'ReaderExample
                </code>
            </example>
            <summary>Loads a MimeReader from a byte array.</summary>
            <param name="data">Byte array containing the contents</param>
        </member>
        <member name="M:aspNetMime.MimeReader.ReadPart">
            <summary>
            Reads the next MimePart.
            </summary>
            <returns></returns>
            <example>
            	<code lang="CS">
            static void ReaderExample( string path )
            {
                MimeReader mr = new MimeReader();
                mr.LoadFile( path );
             
                //read the first part
                MimePart part = mr.ReadPart();
             
                //loop through the remainder of the parts
                while( part != null )
                {
                    if( part.IsMultiPart() )
                    {
                        //then only the headers are accessible. 
                        //the multiple body parts can be accessed by calling ReadPart() again.
             
                        //write out the heaeders
                        Console.WriteLine( part.Headers.ToString() );
                    }
                    else
                    {
                        //access any part of the part, including the Body
                        if( part.IsAttachment() )
                        {
                            //save attachment data
                            //part.Save(...)
                        }
                        else
                        {
                            //work with the deocded body text
                            string bodyText = part.DecodedText();
                            
                            //do something with bodyText
                            //...
                            //...
                        }
                    }
             
                    //read the next part
                    part = mr.ReadPart();
                }
            }
                </code>
            	<code lang="VB">
            Shared Sub ReaderExample(path As String)
               Dim mr As New MimeReader()
               mr.LoadFile(path)
               
               'read the first part
               Dim part As MimePart = mr.ReadPart()
               
               'loop through the remainder of the parts
               While Not (part Is Nothing)
                  If part.IsMultiPart() Then
                     'then only the headers are accessible. 
                     'the multiple body parts can be accessed by calling ReadPart() again.
                     'write out the heaeders
                     Console.WriteLine(part.Headers.ToString())
                  Else
                     'access any part of the part, including the Body
                     If part.IsAttachment() Then
                     'save attachment data
                     'part.Save(...)
                     Else
                        'work with the deocded body text
                        Dim bodyText As String = part.DecodedText()
                     End If 
                  End If 'do something with bodyText
                  '...
                  '...
                  
                  'read the next part
                  part = mr.ReadPart()
               End While
            End Sub 'ReaderExample
                </code>
            </example>
        </member>
        <member name="P:aspNetMime.MimeReader.Encoding">
            <summary>The Encoding used to read the message.</summary>
            <example>
            	<code lang="CS">
            static void ReaderExample( string path )
            {
                MimeReader mr = new MimeReader();
                mr.Encoding = Encoding.GetEncoding( "iso-8859-1" );
                mr.LoadFile( path );
             
                //read the first part
                MimePart part = mr.ReadPart();
             
                //loop through the remainder of the parts
                while( part != null )
                {
                    if( part.IsMultiPart() )
                    {
                        //then only the headers are accessible. 
                        //the multiple body parts can be accessed by calling ReadPart() again.
             
                        //write out the heaeders
                        Console.WriteLine( part.Headers.ToString() );
                    }
                    else
                    {
                        //access any part of the part, including the Body
                        if( part.IsAttachment() )
                        {
                            //save attachment data
                            //part.Save(...)
                        }
                        else
                        {
                            //work with the deocded body text
                            string bodyText = part.DecodedText();
                            
                            //do something with bodyText
                            //...
                            //...
                        }
                    }
             
                    //read the next part
                    part = mr.ReadPart();
                }
            }
                </code>
            	<code lang="VB">
            Shared Sub ReaderExample(path As String)
               Dim mr As New MimeReader()
               mr.Encoding = Encoding.GetEncoding( "iso-8859-1" )
               mr.LoadFile(path)
               
               'read the first part
               Dim part As MimePart = mr.ReadPart()
               
               'loop through the remainder of the parts
               While Not (part Is Nothing)
                  If part.IsMultiPart() Then
                     'then only the headers are accessible. 
                     'the multiple body parts can be accessed by calling ReadPart() again.
                     'write out the heaeders
                     Console.WriteLine(part.Headers.ToString())
                  Else
                     'access any part of the part, including the Body
                     If part.IsAttachment() Then
                     'save attachment data
                     'part.Save(...)
                     Else
                        'work with the deocded body text
                        Dim bodyText As String = part.DecodedText()
                     End If 
                  End If 'do something with bodyText
                  '...
                  '...
                  
                  'read the next part
                  part = mr.ReadPart()
               End While
            End Sub 'ReaderExample
                </code>
            </example>
        </member>
        <member name="T:aspNetMime.Utility">
            <summary>
            Utility class of methods for Encoding and Decoding Quoted-Printable and base64 text.
            </summary>
        </member>
        <member name="M:aspNetMime.Utility.DecodeQP(System.String,System.String)">
            <summary>
            Deocodes a quoted-printable encoded string.
            </summary>
            <param name="stringToDecode">The quoted printable string to decode.</param>
            <param name="charSet">The character set of the email.</param>
            <returns>A decoded string</returns>
        </member>
        <member name="M:aspNetMime.Utility.DecodeQP(System.String,System.String,System.Boolean)">
            <summary>
            Deocodes a quoted-printable encoded string.
            </summary>
            <param name="stringToDecode">The quoted printable string to decode.</param>
            <param name="charSet">The character set of the email.</param>
            <param name="ignoreCase">Ignores the case of the quoted-printed characters.</param>
            <returns>A decoded string</returns>
        </member>
        <member name="M:aspNetMime.Utility.DecodeQP(System.String,System.Text.Encoding)">
            <summary>
            Decodes a quoted-printable encoded string
            </summary>
            <param name="stringToDecode">The quoted-printable string to decode</param>
            <param name="encoding">The Encoding Type</param>
            <returns>Decoded String</returns>
        </member>
        <member name="M:aspNetMime.Utility.DecodeQP(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Decodes a quoted-printable encoded string
            </summary>
            <param name="stringToDecode">The quoted-printable string to decode</param>
            <param name="encoding">The Encoding Type</param>
            <param name="ignoreCase">Ignores the case of the quoted-printed characters.</param>
            <returns>Decoded String</returns>
        </member>
        <member name="M:aspNetMime.Utility.DecodeQP(System.String)">
            <summary>
            Deocodes a quoted-printable encoded string.
            </summary>
            <param name="stringToDecode">The quoted printable string to decode.</param>
            <returns>A decoded string</returns>
        </member>
        <member name="M:aspNetMime.Utility.DecodeQP(System.String,System.Boolean)">
            <summary>
            Deocodes a quoted-printable encoded string.
            </summary>
            <param name="stringToDecode">The quoted printable string to decode.</param>
            <param name="ignoreCase">Ignores the case of the quoted-printed characters.</param>
            <returns>A decoded string</returns>
        </member>
        <member name="M:aspNetMime.Utility.DecodeBase64(System.String)">
            <summary>
            Converts a base64 encoded string to an array of bytes.
            </summary>
            <param name="stringToDecode">base64 encoded string</param>
            <returns>byte array</returns>
        </member>
        <member name="M:aspNetMime.Utility.FromBase64String(System.String)">
            <summary>
            Decodes a base64 encoded string using a given CharSet
            </summary>
            <param name="stringToDecode">base64 encoded string.</param>
            <returns>Decoded string</returns>
        </member>
        <member name="M:aspNetMime.Utility.FromBase64String(System.String,System.String)">
            <summary>
            Decodes a base64 encoded string using a given CharSet
            </summary>
            <param name="stringToDecode">base64 encoded string.</param>
            <param name="charSet">Character Set used for decoding.</param>
            <returns>Decoded string</returns>
        </member>
        <member name="M:aspNetMime.Utility.FromBase64String(System.String,System.Text.Encoding)">
            <summary>
            Converts a base64 encoded string to a human readable string.
            </summary>
            <param name="stringToDecode">base64 encoded string.</param>
            <param name="encoding">Encoding used for decoding.</param>
            <returns>Decoded string</returns>
        </member>
        <member name="M:aspNetMime.Utility.FromEmailDate(System.String)">
            <summary>
            Returns a DateTime from an RFC822 formatted date.
            </summary>
            <param name="emailDate">RFC822 Date as a string.</param>
            <returns>RFC822 date as a DateTime</returns>
        </member>
        <member name="M:aspNetMime.Utility.FromEmailDate(System.String,System.TimeSpan)">
            <summary>
            Returns a DateTime from an RFC822 formatted date.
            </summary>
            <param name="emailDate">RFC822 Date as a string.</param>
            <param name="dateTimeOffset">A Timespan offset, useful in web applications.</param>
            <returns>RFC822 date as a DateTime</returns>
        </member>
        <member name="M:aspNetMime.Utility.GetEncoding(System.String)">
            <summary>
            Converts a CharSet to an Encoding.
            </summary>
            <param name="charSet">The Character Set</param>
            <returns>Respective Character Set's encoding.</returns>
            <remarks>If the encoding CharSet is not found, the system's default encoding is returned.</remarks>
        </member>
        <member name="M:aspNetMime.Utility.ConvertHtmlToText(System.String)">
            <summary>
            Converts HTML content to its TEXT equivalent
            </summary>
            <returns>Plain Text Content</returns>
            <remarks>
            This method can be useful in web or client side applications, where only Text
            content can be displayed.
            </remarks>
            <example>
            	<code lang="CS">
            MimeMessage.LoadLicenseFile( "c:\\aspNetMime.xml.lic" );
             
            string path = "message1.eml";
            MimeMessage m = MimeMessage.ParseFile( path );
             
            string textContents = string.Empty;
            if( m.TextMimePart != null )
            {
                //get the text contents from the TextMimePart
                textContents = m.TextMimePart.DecodedText();
            }
            else if( m.HtmlMimePart != null )
            {
                //get content from the HtmlMimePart
                textContents = Utility.ConvertHtmlToText( m.HtmlMimePart.DecodedText() );
             
            }
             
            Console.WriteLine( textContents );
                </code>
            	<code lang="VB">
            MimeMessage.LoadLicenseFile("c:\aspNetMime.xml.lic")
             
            Dim path As String = "message1.eml"
            Dim m As MimeMessage = MimeMessage.ParseFile(path)
             
            Dim textContents As String = String.Empty
            If Not (m.TextMimePart Is Nothing) Then
               'get the text contents from the TextMimePart
               textContents = m.TextMimePart.DecodedText()
            Else
               If Not (m.HtmlMimePart Is Nothing) Then
                  'get content from the HtmlMimePart
                  textContents = Utility.ConvertHtmlToText(m.HtmlMimePart.DecodedText())
               End If 
            End If
             
            Console.WriteLine(textContents)
                </code>
            </example>
            <param name="htmlContent">HTML Content to Convert</param>
        </member>
        <member name="M:aspNetMime.Utility.EncodeBase64(System.Byte[])">
            <summary>Base64 encodes a byte array of data.</summary>
            <returns>A Mime compatible Base64 encoded string.</returns>
            <param name="data">Binary data.</param>
        </member>
        <member name="M:aspNetMime.Utility.EncodeBase64(System.String,System.String)">
            <summary>Base64 encodes a string.</summary>
            <param name="text">String to be encoded.</param>
            <param name="charSet">Characterset to apply.</param>
        </member>
        <member name="M:aspNetMime.Utility.EncodeBase64(System.String,System.Text.Encoding)">
            <returns>A Mime compatible Base64 encoded string.</returns>
            <summary>Base64 encodes a string.</summary>
            <param name="text">text to be encoded.</param>
            <param name="encoding">System.Text.Encoding applied to the string.</param>
        </member>
        <member name="M:aspNetMime.Utility.EncodeQP(System.String,System.String)">
            <summary>Applies the Quoted-Printable format to a string.</summary>
            <param name="text">string to be encoded</param>
            <param name="charSet">character set used for the encoding.</param>
        </member>
        <member name="M:aspNetMime.Utility.EncodeQP(System.String,System.Text.Encoding)">
            <summary>Applies the Quoted-Printable format to a string.</summary>
            <param name="text">string to be encoded</param>
            <param name="encoding">System.Text.Encoding to be used against the string.</param>
        </member>
    </members>
</doc>
