<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MetaBuilders.WebControls.DynamicListBox</name>
    </assembly>
    <members>
        <member name="T:MetaBuilders.WebControls.DualList">
            <summary>
            Provides the UI for the common requirement of two listboxes with items that move between them.
            </summary>
            <remarks>
            <p>When DataBinding is used, the control will automaticly remove items from the left side if they exist on the right side. This ensures that double items can't be chosen.</p>
            <p>
            For browsers that support scripting, the movement will be completely clientside. There is also 100% serverside support, for any browsers with script disabled or nonexistant.
            </p>
            <p>By default, the clientscript used by the control is emited directly into the page.
            In order to save bandwidth, it's possible to have the control to use a script reference instead,
            but this requires the following handler to be added to the httpHandlers section of web.config.</p>
            <code>
            &lt;httpHandlers&gt;
            	&lt;add verb="*"
            		path="MetaBuilders_WebControls_DynamicListBoxResourceHandler.axd"
            		type="MetaBuilders.WebControls.DynamicListBoxResourceHandler,MetaBuilders.WebControls.DynamicListBox"
            		validate="false"
            	/&gt;
            &lt;/httpHandlers&gt;
            </code>
            </remarks>
            <example>
            The following is a simple example that uses this control.
            <code><![CDATA[
            <%@ Register TagPrefix="mbdlb" Namespace="MetaBuilders.WebControls" Assembly="MetaBuilders.WebControls.DynamicListBox" %>
            <script runat="server" language="c#" >
            	protected void DualList1_ItemsMoved( Object sender, EventArgs e ) {
            		DualResult.Text = "The Chosen Items Are:";
            		foreach( ListItem item in DualList1.RightBox.Items ) {
            			DualResult.Text += "<br>" + item.Value + "/" + item.Text;
            		}
            	}
            </script>
            <form runat="server">
            <mbdlb:DualList runat="server" Id="DualList1" OnItemsMoved="DualList1_ItemsMoved" >
            	<LeftItems>
            		<asp:ListItem Value="1" Text="One" />
            		<asp:ListItem Value="2" Text="Two" />
            		<asp:ListItem Value="3" Text="Three" />
            	</LeftItems>
            	<RightItems>
            		<asp:ListItem Value="4" Text="Four" />
            		<asp:ListItem Value="5" Text="Five" />
            		<asp:ListItem Value="6" Text="Six" />
            	</RightItems>
            </mbdlb:DualList>
            <br><br><asp:Label runat="server" id="DualResult" />
            <hr><asp:Button runat="server" text="Smack"/>
            </form>
            ]]></code>
            </example>
        </member>
        <member name="M:MetaBuilders.WebControls.DualList.CreateChildControls">
            <summary>
            Overrides <see cref="M:System.Web.UI.Control.CreateChildControls"/> to implement the Composite Control Pattern
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DualList.OnItemsMoved(System.EventArgs)">
            <summary>
            Raises the <see cref="E:MetaBuilders.WebControls.DualList.ItemsMoved"/> event.
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DualList.InitializeComponent">
            <summary>
            Initializes the contained controls.
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DualList.DataBind">
            <summary>
            Overrides <see cref="M:System.Web.UI.Control.DataBind"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DualList.FixAvailableItems">
            <summary>
            FixAvailableItems is called after <see cref="M:MetaBuilders.WebControls.DualList.DataBind"/> to make sure that none of the items on the right, "chosen", list exist in the left, "available" list.
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DualList.OnPreRender(System.EventArgs)">
            <summary>
            Overrides <see cref="M:System.Web.UI.Control.OnPreRender(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DualList.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides <see cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DualList.CreateControlStyle">
            <summary>
            Overrides <see cref="M:System.Web.UI.WebControls.WebControl.CreateControlStyle"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DualList.RegisterScript">
            <summary>
            Registers the script for this control.
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DualList.RegisterScriptLibrary">
            <summary>
            Registers the script library for this control.
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DualList.RegisterScriptArray">
            <summary>
            Registers the script array for this control.
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DualList.RegisterScriptStartup">
            <summary>
            Registers the script which initializes this control.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.Controls">
            <summary>
            Overrides <see cref="P:System.Web.UI.Control.Controls"/> to implement the Composite Control Pattern
            </summary>
        </member>
        <member name="E:MetaBuilders.WebControls.DualList.ItemsMoved">
            <summary>
            The event that fires when items have been moved.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.TagKey">
            <summary>
            Overrides <see cref="P:System.Web.UI.WebControls.WebControl.TagKey"/>
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.LeftDataSource">
            <summary>
            Gets or sets the DataSource of the list on the left side of the control.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.LeftDataMember">
            <summary>
            Gets or sets the DataMember of the list on the left side of the control.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.LeftDataTextField">
            <summary>
            Gets or sets the DataTextField of the list on the left side of the control.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.LeftDataValueField">
            <summary>
            Gets or sets the DataValueField of the list on the left side of the control.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.LeftDataTextFormatString">
            <summary>
            Gets or sets the DataTextFormatString of the list on the left side of the control.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.LeftItems">
            <summary>
            Gets the items in the list the left side of the control.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.LeftListStyle">
            <summary>
            Gets the <see cref="P:System.Web.UI.WebControls.WebControl.ControlStyle"/> of the list on left side of the control.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.RightDataSource">
            <summary>
            Gets or sets the DataSource of the list on the right side of the control.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.RightDataMember">
            <summary>
            Gets or sets the DataMember of the list on the right side of the control.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.RightDataTextField">
            <summary>
            Gets or sets the DataTextField of the list on the right side of the control.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.RightDataValueField">
            <summary>
            Gets or sets the DataValueField of the list on the right side of the control.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.RightDataTextFormatString">
            <summary>
            Gets or sets the DataTextFormatString of the list on the right side of the control.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.RightItems">
            <summary>
            Gets the items in the list the right side of the control.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.RightListStyle">
            <summary>
            Gets the <see cref="P:System.Web.UI.WebControls.WebControl.ControlStyle"/> of the list on right side of the control.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.ListRows">
            <summary>
            Gets or sets the number of rows visible in the lists of the control.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.ItemsName">
            <summary>
            Gets or sets the text displayed above the lists, the plural name of the items being chosen.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.EnableMoveAll">
            <summary>
            Gets or sets the visibility of the buttons for moving all items between the lists.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.EnableMoveUpDown">
            <summary>
            Gets or sets the visibility of the buttons for moving items up and down within the list on the right side of the control.
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.Enabled">
            <summary>
            Overrides <see cref="P:System.Web.UI.WebControls.WebControl.Enabled"/>
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DualList.ButtonStyle">
            <summary>
            Gets the <see cref="P:System.Web.UI.WebControls.WebControl.ControlStyle"/> of the buttons contained in the control.
            </summary>
        </member>
        <member name="T:MetaBuilders.WebControls.DynamicListBox">
            <summary>
            A ListBox which can retrieve and persist any client-side changes to its Items collection.
            </summary>
            <remarks>
            <p>
            In order for your client-side changes to be persisted, 
            you must call new javascript methods on the ListBox.
            This Select element now has "Add" and "Remove" methods.
            The Add method takes the value, text, and optional index of the new ListItem.
            The Remove method takes the index of the ListItem to remove.
            </p>
            <p>By default, the clientscript used by the control is emited directly into the page.
            In order to save bandwidth, it's possible to have the control to use a script reference instead,
            but this requires the following handler to be added to the httpHandlers section of web.config.</p>
            <code>
            &lt;httpHandlers&gt;
            	&lt;add verb="*"
            		path="MetaBuilders_WebControls_DynamicListBoxResourceHandler.axd"
            		type="MetaBuilders.WebControls.DynamicListBoxResourceHandler,MetaBuilders.WebControls.DynamicListBox"
            		validate="false"
            	/&gt;
            &lt;/httpHandlers&gt;
            </code>
            </remarks>
            <example>
            The following is an example of how to combine the DynamicListBox with client-script in your page.
            <code><![CDATA[
            <%@ Page Language="C#" %>
            <%@ Register TagPrefix="mb" Namespace="MetaBuilders.WebControls" Assembly="MetaBuilders.WebControls.DynamicListBox" %>
            <script runat="server">
            
            	protected void Page_Load( Object sender, EventArgs e ) {
            		RegisterClientScriptBlock( MyList.ClientID, "<script>\r\nwindow.MyListId='" + MyList.ClientID + "';\r\n</" + "script>");
            	}
                protected void MyList_ListChanged( Object sender, EventArgs e ) {
                    if( MyList.SelectedIndex == -1 ) {
                        Result.Text = "The SelectedIndex changed and now nothing on the list is selected";
                    } else {
                        Result.Text = "The SelectedIndex changed and is now '" + MyList.SelectedIndex + "'<br>The selected item is: " + MyList.SelectedItem.Value + "/" + MyList.SelectedItem.Text;
                    }
                }
            
            </script>
            <html><body><form runat="server">
            	
                <mb:DynamicListBox id="MyList" runat="server" OnSelectedIndexChanged="MyList_ListChanged" SelectionMode="Multiple" >
                    <asp:ListItem value="normalItem1" text="normalItem1"></asp:ListItem>
                    <asp:ListItem value="normalItem2" text="normalItem2"></asp:ListItem>
                </mb:DynamicListBox>
                
                <br><br>
                <a href="javascript:remove();" >Remove</a>
                <a href="javascript:add();" >Add</a>
                <script>
            		function remove() {
            			var list = DynamicListBox_FindControl(window.MyListId);
            			var keepLooking = true;
            			while ( keepLooking ) {
            				list.Remove( list.options.selectedIndex );
            				if ( list.options.selectedIndex < 0 ) {
            					keepLooking = false;
            				}
            			}
            		}
            		
            		function add() {
            			var list = DynamicListBox_FindControl(window.MyListId);
            			var generatedName = "newItem" + ( list.options.length + 1 );
            			list.Add(generatedName,generatedName);
            		}
                </script>
                
                <br><br>
                <asp:Button runat="server" text="Smack"/>
                
                <br><br>
                <asp:Label runat="server" id="Result" />
                
            </form></body></html>
            ]]></code></example>
        </member>
        <member name="M:MetaBuilders.WebControls.DynamicListBox.CreateChildControls">
            <summary>
            Overridden to include the hidden input which tracks the client side changes.
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DynamicListBox.OnPreRender(System.EventArgs)">
            <summary>
            Overridden to register client script.
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DynamicListBox.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overridden to render children after the end tag.
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DynamicListBox.OnItemsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:MetaBuilders.WebControls.DynamicListBox.ItemsChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MetaBuilders.WebControls.DynamicListBox.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent">
            <summary>
            Implements <see cref="M:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DynamicListBox.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Implements <see cref="M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DynamicListBox.loadNewItems(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Edits the ListItems that were added or removed on the clientside
            </summary>
            <returns>True if the list of items has changed.</returns>
        </member>
        <member name="M:MetaBuilders.WebControls.DynamicListBox.RegisterClientScript">
            <summary>
            Registers all the client script for the DynamicListBox
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DynamicListBox.RegisterLibraryScript">
            <summary>
            Registers the library script for the DynamicListBox
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DynamicListBox.RegisterArrayScript">
            <summary>
            Register this DynamicListBox with the Page
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DynamicListBox.RegisterStartupScript">
            <summary>
            Registers the DynamicListBox startup script
            </summary>
        </member>
        <member name="P:MetaBuilders.WebControls.DynamicListBox.Controls">
            <summary>
            Overridden to call EnsureChildControls.
            </summary>
            <remarks>Supposedly should be done for all controls which override CreateChildControls</remarks>
        </member>
        <member name="E:MetaBuilders.WebControls.DynamicListBox.ItemsChanged">
            <summary>
            The event that is raised when the user has changed the listbox's items collection..
            </summary>
        </member>
        <member name="T:MetaBuilders.WebControls.DynamicListBox.ListCommand">
            <summary>
            Represents a command stored on the clientside which alters the Items collection of the <see cref="T:MetaBuilders.WebControls.DynamicListBox"/>.
            </summary>
            <remarks>
            You don't need to use this in your code.
            </remarks>
        </member>
        <member name="M:MetaBuilders.WebControls.DynamicListBox.ListCommand.Parse(System.String)">
            <summary>
            Parses a single command string and returns the ListCommand created
            </summary>
            <param name="command">The string command to parse.</param>
            <returns>The created ListCommand</returns>
        </member>
        <member name="M:MetaBuilders.WebControls.DynamicListBox.ListCommand.Split(System.String)">
            <summary>
            Splits a full command string set into an array of ListCommands.
            </summary>
            <remarks>You don't need to use this from your code.</remarks>
            <param name="postedCommands">The set of commands to split.</param>
            <returns>The created array of ListCommands.</returns>
        </member>
        <member name="F:MetaBuilders.WebControls.DynamicListBox.ListCommand.Operator">
            <summary>
            Gets or sets the operator of the command. + or -.
            </summary>
        </member>
        <member name="F:MetaBuilders.WebControls.DynamicListBox.ListCommand.Text">
            <summary>
            Gets or sets the text of the added ListItem.
            </summary>
        </member>
        <member name="F:MetaBuilders.WebControls.DynamicListBox.ListCommand.Value">
            <summary>
            Gets or sets the value of the added ListItem.
            </summary>
        </member>
        <member name="F:MetaBuilders.WebControls.DynamicListBox.ListCommand.Index">
            <summary>
            Gets or sets the index of the ListItem to add or remove.
            </summary>
        </member>
        <member name="T:MetaBuilders.WebControls.DynamicListBoxResourceHandler">
            <summary>
            The DynamicListBoxResourceHandler takes care of script support for the controls in the assembly.
            It is not meant to be used by your code.
            </summary>
        </member>
        <member name="M:MetaBuilders.WebControls.DynamicListBoxResourceHandler.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)">
            <summary>
            Processes the request by emitting script embedded in the assembly.
            </summary>
            <param name="context"></param>
        </member>
    </members>
</doc>
