<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Aspose.Word</name>
  </assembly>
  <members>
    <member name="T:Aspose.Word.BuiltInDocumentProperties">
      <summary>
            A collection of built-in document properties.
            </summary>
      <remarks>
        <p>Provides access to DocumentProperty objects by their names (using indexer) and
            via a set of typed properties that return values of appropriate types.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Count">
      <summary>
            Gets number of items in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Item(System.String)">
      <overloads>Returns a DocumentProperty object.</overloads>
      <summary>
            Returns a DocumentProperty object by the name of the property.
            </summary>
      <param name="name">The case-sensitive name of the property to retrieve.</param>
      <remarks>
        <p>The string names of the properties correspond to the names of the typed
            properties available from <see cref="T:Aspose.Word.BuiltInDocumentProperties" />.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Item(System.Int32)">
      <summary>
            Returns a DocumentProperty object by index.
            </summary>
      <param name="index">Zero-based index of the DocumentProperty to retrieve.</param>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Author">
      <summary>
            Gets or sets the name of the document's author.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Bytes">
      <summary>
            Represents an estimate of the number of bytes in the document.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Characters">
      <summary>
            Represents an estimate of the number of characters in the document.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.CharactersWithSpaces">
      <summary>
            Represents an estimate of the number of characters (including spaces) in the document.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Comments">
      <summary>
            Gets or sets the document comments.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Category">
      <summary>
            Gets or sets the category of the document.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Company">
      <summary>
            Gets or sets the company property.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.CreatedTime">
      <summary>
            Gets or sets date of the document creation in UTC.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Keywords">
      <summary>
            Gets or sets the document keywords.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.LastPrinted">
      <summary>
            Gets or sets the date when the document was last printed in UTC.
            </summary>
      <remarks>
        <p>If the document was never printed, this property will return DateTime.MinValue.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.LastSavedBy">
      <summary>
            Gets or sets the name of the last author.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.LastSavedTime">
      <summary>
            Gets or sets the time of the last save in UTC.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Lines">
      <summary>
            Represents an estimate of the number of lines in the document.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Manager">
      <summary>
            Gets or sets the manager property.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.NameOfApplication">
      <summary>
            Gets or sets the name of the application.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Pages">
      <summary>
            Represents an estimate of the number of pages in the document.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Paragraphs">
      <summary>
            Represents an estimate of the number of paragraphs in the document.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.RevisionNumber">
      <summary>
            Gets or sets the document revision number. 
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Subject">
      <summary>
            Gets or sets the subject of the document.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Template">
      <summary>
            Gets or sets the name of the document template.
            </summary>
      <dev>
            This actually seems to be only informational property and contains only the file name without path.
            The actual value full path is stored in DocPr.
            I should do something nice about this so it is not stored in two places.
            </dev>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Title">
      <summary>
            Gets or sets the title of the document.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.TotalEditingTime">
      <summary>
            Gets or sets the total editing time in minutes.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Version">
      <summary>
            Represents the version number of the application that created the document.
            </summary>
    </member>
    <member name="P:Aspose.Word.BuiltInDocumentProperties.Words">
      <summary>
            Represents an estimate of the number of words in the document.
            </summary>
    </member>
    <member name="T:Aspose.Word.CustomDocumentProperties">
      <summary>
            A collection of custom document properties. 
            </summary>
      <remarks>
        <p>Each DocumentProperty object represents a custom property of a container document.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.CustomDocumentProperties.Add(System.String,System.String)">
      <overloads>Creates a new custom document property.</overloads>
      <summary>
            Creates a new custom document property of the <b>PropertyType.String</b> data type.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="value">The value of the property.</param>
      <returns>The newly created property object.</returns>
    </member>
    <member name="M:Aspose.Word.CustomDocumentProperties.Add(System.String,System.Int32)">
      <summary>
            Creates a new custom document property of the <b>PropertyType.Number</b> data type.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="value">The value of the property.</param>
      <returns>The newly created property object.</returns>
    </member>
    <member name="M:Aspose.Word.CustomDocumentProperties.Add(System.String,System.DateTime)">
      <summary>
            Creates a new custom document property of the <b>PropertyType.DateTime</b> data type.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="value">The value of the property.</param>
      <returns>The newly created property object.</returns>
    </member>
    <member name="M:Aspose.Word.CustomDocumentProperties.Add(System.String,System.Boolean)">
      <summary>
            Creates a new custom document property of the <b>PropertyType.Boolean</b> data type.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="value">The value of the property.</param>
      <returns>The newly created property object.</returns>
    </member>
    <member name="M:Aspose.Word.CustomDocumentProperties.Add(System.String,System.Double)">
      <summary>
            Creates a new custom document property of the <b>PropertyType.Float</b> data type.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="value">The value of the property.</param>
      <returns>The newly created property object.</returns>
    </member>
    <member name="M:Aspose.Word.CustomDocumentProperties.Remove(System.String)">
      <summary>
            Removes property with the specified name from the collection.
            </summary>
      <param name="name">The case-sensitive name of the property to remove.</param>
    </member>
    <member name="P:Aspose.Word.CustomDocumentProperties.Count">
      <summary>
            Gets number of items in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Word.CustomDocumentProperties.Item(System.String)">
      <overloads>Returns a DocumentProperty object.</overloads>
      <summary>
            Returns a DocumentProperty object by the name of the property.
            </summary>
      <param name="name">The case-sensitive name of the property to retrieve.</param>
    </member>
    <member name="P:Aspose.Word.CustomDocumentProperties.Item(System.Int32)">
      <summary>
            Returns a DocumentProperty object by index.
            </summary>
      <param name="index">Zero-based index of the DocumentProperty to retrieve.</param>
    </member>
    <member name="T:Aspose.Word.DocumentProperty">
      <summary>
            Represents a custom or built-in document property.
            </summary>
    </member>
    <member name="M:Aspose.Word.DocumentProperty.ToString">
      <summary>
            Returns the property value as a string.
            </summary>
      <remarks>
        <p>Converts a number property using Object.ToString(). Converts a boolean property
            into "Y" or "N". Converts a date property into a short date string.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentProperty.ToInt">
      <summary>
            Returns the property value as integer.
            </summary>
      <remarks>
            Throws an exception if the property type is not PropertyType.Number.
            </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentProperty.ToDouble">
      <summary>
            Returns the property value as double.
            </summary>
      <remarks>
            Throws an exception if the property type is not PropertyType.Float.
            </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentProperty.ToDateTime">
      <summary>
            Returns the property value as DateTime in local timezone.
            </summary>
      <remarks>
        <p>Throws an exception if the property type is not PropertyType.Date.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentProperty.ToBool">
      <summary>
            Returns the property value as bool.
            </summary>
      <remarks>
        <p>Throws an exception if the property type is not PropertyType.Boolean.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.DocumentProperty.Name">
      <summary>
            Returns the name of the property.
            </summary>
    </member>
    <member name="P:Aspose.Word.DocumentProperty.Value">
      <summary>
            Gets or sets the value of the property.
            </summary>
    </member>
    <member name="P:Aspose.Word.DocumentProperty.Type">
      <summary>
            Gets the data type of the property.
            </summary>
    </member>
    <member name="T:Aspose.Word.PropertyType">
      <summary>
            Specifies data type of a document property.
            </summary>
    </member>
    <member name="F:Aspose.Word.PropertyType.Boolean">
      <summary>
            The property data type is <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.PropertyType.DateTime">
      <summary>
            The property data type is <see cref="F:Aspose.Word.PropertyType.DateTime" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.PropertyType.Float">
      <summary>
            The property data type is <see cref="T:System.Double" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.PropertyType.Number">
      <summary>
            The property data type is <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.PropertyType.String">
      <summary>
            The property data type is <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.PropertyType.Blob">
      <summary>
            The property is a byte array.
            </summary>
    </member>
    <member name="T:Aspose.Word.Field">
      <preliminary>[The properties and methods of this class are subject to change.]</preliminary>
      <summary>
            Represents a Microsoft Word field.
            </summary>
      <remarks>
        <p>At the moment objects of this class are only returned by 
            <see cref="P:Aspose.Word.Reporting.MergeFieldEventArgsBase.Field">MergeFieldEventArgsBase.Field</see>
            to allow using <see cref="M:Aspose.Word.DocumentBuilder.MoveToField(Aspose.Word.Field,System.Boolean)">DocumentBuilder.MoveToField</see> 
            to move to a merge field quickly in a custom mail merge event handler.</p>
        <p>There will be more methods and properties added to the <b>Field</b> class later.</p>
      </remarks>
      <dev>
            Simple structure to group three model nodes that represent one field.
            
            I actually want to rework the way fields are parsed. At the moment
            each field has its own regex to parse, this is wrong. Main parsing
            should be done by this class, see FieldCodeParsing.doc in the docs.
            It should parse into Expression and Switches and the derived field
            classes can do further detailed analysis.
            </dev>
    </member>
    <member name="M:Aspose.Word.Field.Remove">
      <summary>
            Removes the field from the document.
            </summary>
    </member>
    <member name="P:Aspose.Word.Field.Type">
      <summary>
            Gets the Microsoft Word field type.
            </summary>
    </member>
    <member name="T:Aspose.Word.DocumentVisitor">
      <summary>
            Base class for custom document visitors.
            </summary>
      <remarks>
        <p>With <b>DocumentVisitor</b> you can define and execute custom operations
            that require enumeration over the document tree.</p>
        <p>For example, Aspose.Word uses <b>DocumentVisitor</b> internally for saving <b>Document</b>
            in various formats and for other operations like finding fields or bookmarks over
            a fragment of a document.</p>
        <p>To use <b>DocumentVisitor</b>:</p>
        <list type="number">
          <item>Create a class derived from <b>DocumentVisitor</b>.</item>
          <item>Override and provide implementations for some or all of the VisitXXX methods
            to perform some custom operations.</item>
          <item>Call <see cref="M:Aspose.Word.Node.Accept(Aspose.Word.DocumentVisitor)">Node.Accept</see> on the <b>Node</b> that
            you want to start the enumeration from.</item>
        </list>
        <p>
          <b>DocumentVisitor</b> provides default implementations for all of the VisitXXX methods 
            to make it easier to create new document visitors as only the methods required for the particular
            visitor need to be overridden. It is not necessary to override all of the visitor methods.</p>
        <p>For more information see the Visitor design pattern.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitDocumentStart(Aspose.Word.Document)">
      <summary>
            Called when enumeration of the document has started.
            </summary>
      <param name="doc">The <b>Document</b> that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitDocumentEnd(Aspose.Word.Document)">
      <summary>
            Called when enumeration of the document has finished.
            </summary>
      <param name="doc">The <b>Document</b> that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitSectionStart(Aspose.Word.Section)">
      <summary>
            Called when enumeration of a section has started.
            </summary>
      <param name="section">The <b>Section</b> that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitSectionEnd(Aspose.Word.Section)">
      <summary>
            Called when enumeration of a section has ended.
            </summary>
      <param name="section">The <b>Section</b> that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitBodyStart(Aspose.Word.Body)">
      <summary>
            Called when enumeration of the main text story in a section has started.
            </summary>
      <param name="body">The <b>Body</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitBodyEnd(Aspose.Word.Body)">
      <summary>
            Called when enumeration of the main text story in a section has ended.
            </summary>
      <param name="body">The <b>Body</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitHeaderFooterStart(Aspose.Word.HeaderFooter)">
      <summary>
            Called when enumeration of a header or footer in a section has started.
            </summary>
      <param name="headerFooter">The <b>HeaderFooter</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitHeaderFooterEnd(Aspose.Word.HeaderFooter)">
      <summary>
            Called when enumeration of a header or footer in a section has ended.
            </summary>
      <param name="headerFooter">The <b>HeaderFooter</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitParagraphStart(Aspose.Word.Paragraph)">
      <summary>
            Called when enumeration of a paragraph has started.
            </summary>
      <param name="paragraph">The <b>Paragraph</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitParagraphEnd(Aspose.Word.Paragraph)">
      <summary>
            Called when enumeration of a paragraph has ended.
            </summary>
      <param name="paragraph">The <b>Paragraph</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitTableStart(Aspose.Word.Table)">
      <summary>
            Called when enumeration of a table has started.
            </summary>
      <param name="table">The <b>Table</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitTableEnd(Aspose.Word.Table)">
      <summary>
            Called when enumeration of a table has ended.
            </summary>
      <param name="table">The <b>Table</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitRowStart(Aspose.Word.Row)">
      <summary>
            Called when enumeration of a table row has started.
            </summary>
      <param name="row">The <b>Row</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitRowEnd(Aspose.Word.Row)">
      <summary>
            Called when enumeration of a table row has ended.
            </summary>
      <param name="row">The <b>Row</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitCellStart(Aspose.Word.Cell)">
      <summary>
            Called when enumeration of a table cell has started.
            </summary>
      <param name="cell">The <b>Cell</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitCellEnd(Aspose.Word.Cell)">
      <summary>
            Called when enumeration of a table cell has ended.
            </summary>
      <param name="cell">The <b>Cell</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitRun(Aspose.Word.Run)">
      <summary>
            Called when a run of text in the is encountered.
            </summary>
      <param name="run">The <b>Run</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitFieldStart(Aspose.Word.FieldStart)">
      <summary>
            Called when a field starts in the document.
            </summary>
      <param name="fieldStart">The <b>FieldStart</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
      <remarks>
        <p>A field in a Word Word document consists of a field code and field value.</p>
        <p>For example, a field that displays a page number can be represented as follows:</p>
        <p>[FieldStart]PAGE[FieldSeparator]98[FieldEnd]</p>
        <p>The field separator separates field code from field value in the document. Note that some 
            fields have only field code and do not have field separator and field value.</p>
        <p>Fields can be nested.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitFieldSeparator(Aspose.Word.FieldSeparator)">
      <summary>
            Called when a field separator is encountered in the document.
            </summary>
      <param name="fieldSeparator">The <b>FieldSeparator</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
      <remarks>
        <p>The field separator separates field code from field value in the document. Note that some 
            fields have only field code and do not have field separator and field value.</p>
        <p>For more info see <see cref="M:Aspose.Word.DocumentVisitor.VisitFieldStart(Aspose.Word.FieldStart)" /></p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitFieldEnd(Aspose.Word.FieldEnd)">
      <summary>
            Called when a field ends in the document.
            </summary>
      <param name="fieldEnd">The <b>FieldEnd</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
      <remarks>
        <p>For more info see <see cref="M:Aspose.Word.DocumentVisitor.VisitFieldStart(Aspose.Word.FieldStart)" /></p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitFormField(Aspose.Word.FormField)">
      <summary>
            Called when a form field is encountered in the document.
            </summary>
      <param name="formField">The <b>FormField</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitBookmarkStart(Aspose.Word.BookmarkStart)">
      <summary>
            Called when a start of a bookmark is encountered in the document.
            </summary>
      <param name="bookmarkStart">The <b>BookmarkStart</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitBookmarkEnd(Aspose.Word.BookmarkEnd)">
      <summary>
            Called when an end of a bookmark is encountered in the document.
            </summary>
      <param name="bookmarkEnd">The <b>BookmarkEnd</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitFootnoteStart(Aspose.Word.Footnote)">
      <summary>
            Called when enumeration of a footnote or endnote text has started.
            </summary>
      <param name="footnote">The <b>Footnote</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitFootnoteEnd(Aspose.Word.Footnote)">
      <summary>
            Called when enumeration of a footnote or endnote text has ended.
            </summary>
      <param name="footnote">The <b>Footnote</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitCommentStart(Aspose.Word.Comment)">
      <summary>
            Called when enumeration of a comment text has started.
            </summary>
      <param name="comment">The <b>Comment</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitCommentEnd(Aspose.Word.Comment)">
      <summary>
            Called when enumeration of a comment text has ended.
            </summary>
      <param name="comment">The <b>Comment</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitShapeStart(Aspose.Word.Shape)">
      <summary>
            Called when a shape is encountered and enumeration of the shape text has started.
            </summary>
      <param name="shape">The <b>Shape</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitShapeEnd(Aspose.Word.Shape)">
      <summary>
            Called when enumeration of a shape text has ended.
            </summary>
      <param name="shape">The <b>Shape</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitInlineShape(Aspose.Word.InlineShape)">
      <summary>
            Called when an inline shape is encountered in the document.
            </summary>
      <param name="inlineShape">The <b>InlineShape</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitRawOle2Field(Aspose.Word.RawOle2Field)">
      <summary>
            Called when a <b>RawOle2Field</b> node is encountered in the document.
            </summary>
      <param name="ole2Field">The <b>RawOle2Field</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
      <preliminary />
    </member>
    <member name="M:Aspose.Word.DocumentVisitor.VisitSpecialChar(Aspose.Word.SpecialChar)">
      <summary>
            Called when a <b>SpecialChar</b> node is encountered in the document.
            </summary>
      <param name="specialChar">The <b>SpecialChar</b> node that is being visited.</param>
      <returns>An enumerated value that specifies how to continue the enumeration.</returns>
    </member>
    <member name="T:Aspose.Word.ReplaceAction">
      <summary>
            Allows the user to specify what happens to the current match during a replace operation.
            </summary>
    </member>
    <member name="F:Aspose.Word.ReplaceAction.Replace">
      <summary>
            Replace the current match.
            </summary>
    </member>
    <member name="F:Aspose.Word.ReplaceAction.Skip">
      <summary>
            Skip the current match.
            </summary>
    </member>
    <member name="F:Aspose.Word.ReplaceAction.Stop">
      <summary>
            Terminate the replace operation.
            </summary>
    </member>
    <member name="T:Aspose.Word.ReplaceEvaluator">
      <summary>
            A user defined method that is called for each match found during a replace operation.
            </summary>
      <returns>An enumerated value that specifies the action to be taken for the current match.</returns>
    </member>
    <member name="T:Aspose.Word.ReplaceEvaluatorArgs">
      <summary>
            Provides data for a custom replace operation.
            </summary>
    </member>
    <member name="P:Aspose.Word.ReplaceEvaluatorArgs.Match">
      <summary>
            The <b>Match</b> resulting from a single regular expression match during a <b>Replace</b>. 
            </summary>
      <remarks>
        <p>
          <b>Match.Index</b> gets the zero-based starting position 
            of the match from the start of the find and replace range.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.ReplaceEvaluatorArgs.MatchNode">
      <summary>
            Gets the node that contains the beginning of the match.
            </summary>
    </member>
    <member name="P:Aspose.Word.ReplaceEvaluatorArgs.MatchOffset">
      <summary>
            Gets the zero-based starting position of the match from the start of 
            the node that contains the beginning of the match.
            </summary>
    </member>
    <member name="P:Aspose.Word.ReplaceEvaluatorArgs.Replacement">
      <summary>
            Gets or sets the replacement string.
            </summary>
    </member>
    <member name="P:Aspose.Word.ReplaceEvaluatorArgs.GroupName">
      <summary>
            Identifies, by name, a captured group in the <b>Match</b> that is to be replaced with the <b>Replacement</b> string.
            </summary>
      <remarks>
        <p>When group name is null, <see cref="P:Aspose.Word.ReplaceEvaluatorArgs.GroupIndex" /> is used to identify the group.</p>
        <p>Default is null.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.ReplaceEvaluatorArgs.GroupIndex">
      <summary>
            Identifies, by index, a captured group in the <b>Match</b> that is to be replaced with the <b>Replacement</b> string.
            </summary>
      <remarks>
        <p>
          <b>GroupIndex</b> has effect only when <b>GroupName</b> is null.</p>
        <p>Default is zero.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Word.Border">
      <summary>
            Represents a border of an object.
            </summary>
      <remarks>
        <p>Borders can be applied to various document elements including paragraph,
            run of text inside a paragraph or a table cell.</p>
      </remarks>
      <example>
        <code>
            [C#]
            
            builder.Font.Border.Color = System.Drawing.Color.Green;
            builder.Font.Border.LineWidth = 2.5;
            builder.Font.Border.LineStyle = LineStyle.DashDotStroker;
            builder.Write("fragment in a green border");
            
            [VB]
            
            builder.Font.Border.Color = System.Drawing.Color.Green
            builder.Font.Border.LineWidth = 2.5
            builder.Font.Border.LineStyle = LineStyle.DashDotStroker
            builder.Write("fragment in a green border")
            </code>
      </example>
      <dev>
            This is a model and also presentation class that allows to see and modify border attributes.
            </dev>
    </member>
    <member name="M:Aspose.Word.Border.ClearFormatting">
      <summary>
            Resets border properties to default values.
            </summary>
      <remarks>
            When border properties are reset to default values, the border is invisible.
            </remarks>
    </member>
    <member name="P:Aspose.Word.Border.LineStyle">
      <summary>
            Gets or sets the border style.
            </summary>
    </member>
    <member name="P:Aspose.Word.Border.LineWidth">
      <summary>
            Gets or sets the border width in points.
            </summary>
    </member>
    <member name="P:Aspose.Word.Border.Color">
      <summary>
            Gets or sets the border color.
            </summary>
    </member>
    <member name="P:Aspose.Word.Border.DistanceFromText">
      <summary>
            Gets or sets distance of the border from text in points.
            </summary>
      <remarks>
            Has no effect and will be automatically reset to zero for borders of table cells.
            </remarks>
    </member>
    <member name="P:Aspose.Word.Border.Shadow">
      <summary>
            Gets or sets a value indicating whether the border has a shadow.
            </summary>
    </member>
    <member name="T:Aspose.Word.Borders">
      <summary>
            A collection of Border objects.
            </summary>
      <remarks>
            Different document elements have different borders.
            For example, ParagraphFormat has Bottom, Left, Right and Top borders.
            You can specify different formatting for each border independently or
            enumerate through all borders and apply same formatting.
            </remarks>
      <example>
        <code>
            [C#]
            
            Border topBorder = builder.ParagraphFormat.Borders[BorderType.Top];
            topBorder.Color = System.Drawing.Color.Red;
            topBorder.LineStyle = LineStyle.DashSmallGap;
            topBorder.LineWidth = 4;
            
            [VB]
            
            Dim topBorder As Border =  builder.ParagraphFormat.Borders(BorderType.Top) 
            topBorder.Color = System.Drawing.Color.Red
            topBorder.LineStyle = LineStyle.DashSmallGap
            topBorder.LineWidth = 4
            </code>
      </example>
      <dev>
            This is a presentation object only, does not store any model data.
            </dev>
    </member>
    <member name="M:Aspose.Word.Borders.ClearFormatting">
      <summary>
            Removes all borders of an object.
            </summary>
    </member>
    <member name="M:Aspose.Word.Borders.GetEnumerator">
      <summary>
            Returns an enumerator object that can be used to iterate over all borders in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Word.Borders.Item(Aspose.Word.BorderType)">
      <overloads>Retrieves a Border object.</overloads>
      <summary>
            Retrieves a Border object by border type.
            </summary>
      <param name="borderType">The type of the border to retrieve.</param>
      <remarks>
            Note that not all borders are present for different document elements.
            </remarks>
    </member>
    <member name="P:Aspose.Word.Borders.Item(System.Int32)">
      <summary>
            Retrieves a Border object by index.
            </summary>
      <param name="index">Zero-based index of the border to retrieve.</param>
    </member>
    <member name="P:Aspose.Word.Borders.Count">
      <summary>
            Gets the number of borders in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Word.Borders.LineWidth">
      <summary>
            Gets or sets the border width in points.
            </summary>
      <remarks>
        <p>Returns the width of the first border in the collection.</p>
        <p>Sets the width of all borders in the collection excluding diagonal borders.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Borders.LineStyle">
      <summary>
            Gets or sets the border style.
            </summary>
      <remarks>
        <p>Returns the style of the first border in the collection.</p>
        <p>Sets the style of all borders in the collection excluding diagonal borders.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Borders.Color">
      <summary>
            Gets or sets the border color.
            </summary>
      <remarks>
        <p>Returns the color of the first border in the collection.</p>
        <p>Sets the color of all borders in the collection excluding diagonal borders.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Borders.DistanceFromText">
      <summary>
            Gets or sets distance of the border from text in points.
            </summary>
      <remarks>
        <p>Gets the distance from text for the first border.</p>
        <p>Sets the distance from text for all borders in the collection excluding diagonal borders.</p>
        <p>Has no effect and will be automatically reset to zero for borders of table cells.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Borders.Shadow">
      <summary>
            Gets or sets a value indicating whether the border has a shadow.
            </summary>
      <remarks>
        <p>Gets the value from the first border in the collection.</p>
        <p>Sets the value for all borders in the collection excluding diagonal borders.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Word.CellFormat">
      <summary>
            Represents all formatting for a table cell.
            </summary>
    </member>
    <member name="P:Aspose.Word.CellFormat.LeftPadding">
      <summary>
            Returns or sets the amount of space (in points) to add to the left of the contents of cell.
            </summary>
    </member>
    <member name="P:Aspose.Word.CellFormat.RightPadding">
      <summary>
            Returns or sets the amount of space (in points) to add to the right of the contents of cell.
            </summary>
    </member>
    <member name="P:Aspose.Word.CellFormat.TopPadding">
      <summary>
            Returns or sets the amount of space (in points) to add above the contents of cell.
            </summary>
    </member>
    <member name="P:Aspose.Word.CellFormat.BottomPadding">
      <summary>
            Returns or sets the amount of space (in points) to add below the contents of cell.
            </summary>
    </member>
    <member name="P:Aspose.Word.CellFormat.Borders">
      <summary>
            Gets collection of borders of the cell.
            </summary>
    </member>
    <member name="P:Aspose.Word.CellFormat.Shading">
      <summary>
            Returns a Shading object that refers to the shading formatting for the cell.
            </summary>
    </member>
    <member name="P:Aspose.Word.CellFormat.VerticalAlignment">
      <summary>
            Returns or sets the vertical alignment of text in the cell.
            </summary>
    </member>
    <member name="P:Aspose.Word.CellFormat.Width">
      <summary>
            Returns or sets the width of the cell in points.
            </summary>
    </member>
    <member name="P:Aspose.Word.CellFormat.VerticalMerge">
      <summary>
             Specifies how the cell is merged with other cells vertically.
             </summary>
      <remarks>
        <p>Cells can only be merged vertically if their left and right boundaries are identical.</p>
        <p>When cells are vertically merged, the display areas of the merged cells are consolidated.
             The consolidated area is used to display the contents of the first vertically merged cell 
             and all other vertically merged cells must be empty.</p>
        <seealso cref="P:Aspose.Word.CellFormat.HorizontalMerge" />
      </remarks>
      <example>
             This example creates a table with two columns with cells merged vertically in the first column.
             <code>
             [C#]
            
            	Document doc = new Document();
             DocumentBuilder builder = new DocumentBuilder(doc);
             
            	builder.InsertCell();
            	builder.CellFormat.VerticalMerge = CellMerge.First;
            	builder.Write("Text in the merged cells.");
            	
            	builder.InsertCell();
            	builder.CellFormat.VerticalMerge = CellMerge.None;
            	builder.Write("Text in one cell");
            	builder.EndRow();
            	
            	builder.InsertCell();
            	//This cell is vertically merged to the cell above and should be empty.
            	builder.CellFormat.VerticalMerge = CellMerge.Previous;
            	
            	builder.InsertCell();
            	builder.CellFormat.VerticalMerge = CellMerge.None;
            	builder.Write("Text in another cell");
            	builder.EndRow();
            
            
            [VB]
            
            	Dim doc As Document = new Document()
            	Dim builder As DocumentBuilder = New DocumentBuilder(doc) 
            
            	builder.InsertCell()
            	builder.CellFormat.VerticalMerge = CellMerge.First
            	builder.Write("Text in the merged cells.")
            	
            	builder.InsertCell()
            	builder.CellFormat.VerticalMerge = CellMerge.None
            	builder.Write("Text in one cell")
            	builder.EndRow()
            	
            	builder.InsertCell()
            	'This cell is vertically merged to the cell above and shoudl be empty.
            	builder.CellFormat.VerticalMerge = CellMerge.Previous
            	
            	builder.InsertCell()
            	builder.CellFormat.VerticalMerge = CellMerge.None
            	builder.Write("Text in another cell")
            	builder.EndRow()
            
             </code></example>
    </member>
    <member name="P:Aspose.Word.CellFormat.HorizontalMerge">
      <summary>
            Specifies how the cell is merged horizontally with other cells in the row.
            </summary>
      <remarks>
        <seealso cref="P:Aspose.Word.CellFormat.VerticalMerge" />
      </remarks>
      <example>
            This example creates a table with two rows with cells in the first row horiontally merged.
            <code>
            [C#]
            
            Document doc = new Document();
            DocumentBuilder builder = new DocumentBuilder(doc);
            
            builder.InsertCell();
            builder.CellFormat.HorizontalMerge = CellMerge.First;
            builder.Write("Text in the merged cells.");
            
            builder.InsertCell();
            //This cell is merged to the previous and should be empty.
            builder.CellFormat.HorizontalMerge = CellMerge.Previous;
            builder.EndRow();
            
            builder.InsertCell();
            builder.CellFormat.HorizontalMerge = CellMerge.None;
            builder.Write("Text in one cell.");
            
            builder.InsertCell();
            builder.Write("Text in another cell.");
            builder.EndRow();
            
            
            [VB]
            
            Dim doc As Document = new Document()
            Dim builder As DocumentBuilder = New DocumentBuilder(doc) 
            
            builder.InsertCell()
            builder.CellFormat.HorizontalMerge = CellMerge.First
            builder.Write("Text in the merged cells.")
            
            builder.InsertCell()
            'This cell is merged to the previous and should be empty.
            builder.CellFormat.HorizontalMerge = CellMerge.Previous
            builder.EndRow()
            
            builder.InsertCell()
            builder.CellFormat.HorizontalMerge = CellMerge.None
            builder.Write("Text in one cell.")
            
            builder.InsertCell()
            builder.Write("Text in another cell.")
            builder.EndRow()
            </code></example>
    </member>
    <member name="P:Aspose.Word.CellFormat.Orientation">
      <summary>
            Returns or sets the orientation of text in a table cell. 
            </summary>
    </member>
    <member name="T:Aspose.Word.Font">
      <summary>
            Contains font attributes (font name, font size, color, and so on) for an object.
            </summary>
    </member>
    <member name="M:Aspose.Word.Font.ClearFormatting">
      <summary>
            Resets to default font formatting.
            </summary>
      <remarks>
        <p>Removes all font formatting specified explicitly on the object from which
            <b>Font</b> was obtained so the font formatting will be inherited from
            the appropriate parent.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Font.Name">
      <summary>
            Gets or sets the name of the font.
            </summary>
      <remarks>
        <p>When getting, returns <see cref="P:Aspose.Word.Font.NameAscii" />.</p>
        <p>When setting, sets <see cref="P:Aspose.Word.Font.NameAscii" />, <see cref="P:Aspose.Word.Font.NameBi" />, <see cref="P:Aspose.Word.Font.NameFarEast" /> 
            and <see cref="P:Aspose.Word.Font.NameOther" /> to the specified value.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Font.NameAscii">
      <summary>
            Returns or sets the font used for Latin text (characters with character codes from 0 (zero) through 127). 
            </summary>
      <remarks>
        <seealso cref="P:Aspose.Word.Font.Name" />
      </remarks>
    </member>
    <member name="P:Aspose.Word.Font.NameBi">
      <summary>
            Returns or sets the name of the font in a right-to-left language document.
            </summary>
      <remarks>
        <seealso cref="P:Aspose.Word.Font.Name" />
      </remarks>
    </member>
    <member name="P:Aspose.Word.Font.NameFarEast">
      <summary>
            Returns or sets an East Asian font name.
            </summary>
      <remarks>
        <seealso cref="P:Aspose.Word.Font.Name" />
      </remarks>
    </member>
    <member name="P:Aspose.Word.Font.NameOther">
      <summary>
            Returns or sets the font used for characters with character codes from 128 through 255.
            </summary>
      <remarks>
        <seealso cref="P:Aspose.Word.Font.Name" />
      </remarks>
    </member>
    <member name="P:Aspose.Word.Font.Size">
      <summary>
            Gets or sets the font size in points.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.SizeBi">
      <summary>
            Gets or sets the font size in points used in a right-to-left document.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Bold">
      <summary>
            True if the font is formatted as bold.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.BoldBi">
      <summary>
            True if the font is formatted as bold in a right-to-left document.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Italic">
      <summary>
            True if the font is formatted as italic.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.ItalicBi">
      <summary>
            True if the font is formatted as italic in a right-to-left document.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Color">
      <summary>
            Gets or sets the color of the font.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.StrikeThrough">
      <summary>
            True if the font is formatted as strikethrough text.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.DoubleStrikeThrough">
      <summary>
            True if the font is formatted as double strikethrough text.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Shadow">
      <summary>
            True if the font is formatted as shadowed.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Outline">
      <summary>
            True of the font is formatted as outline.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Emboss">
      <summary>
            True if the font is formatted as embossed.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Engrave">
      <summary>
            True if the font is formatted as engraved.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Superscript">
      <summary>
            True if the font is formatted as superscript. 
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Subscript">
      <summary>
            True if the font is formatted as subscript.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.SmallCaps">
      <summary>
            True if the font is formatted as small capital letters.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.AllCaps">
      <summary>
            True if the font is formatted as all capital letters.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Hidden">
      <summary>
            True if the font is formatted as hidden text.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Underline">
      <summary>
            Gets or sets the type of underline applied to the font. 
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.UnderlineColor">
      <summary>
            Gets or sets the color of the underline applied to the font.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Scaling">
      <summary>
            Gets or sets character width scaling in percent.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Spacing">
      <summary>
            Returns or sets the spacing (in points) between characters .
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Position">
      <summary>
            Gets or sets the position of text (in points) relative to the base line. 
            A positive number raises the text, and a negative number lowers it. 
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Kerning">
      <summary>
            Gets or sets the font size at which kerning starts.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.HighlightColor">
      <summary>
            Gets or sets the highlight (marker) color.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Bidi">
      <summary>
            True if the formatted characters are right-to-left.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.NoProofing">
      <summary>
            True when the formatted characters are not to be spell checked.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.LocaleId">
      <summary>
            Gets or sets the locale identifier (language) of the formatted characters.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.LocaleIdBi">
      <summary>
            Gets or sets the locale identifier (language) of the formatted right-to-left characters.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.LocaleIdFarEast">
      <summary>
            Gets or sets the locale identifier (language) of the formatted Asian characters.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Border">
      <summary>
            Returns a Border object that specifies border for the font.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Shading">
      <summary>
            Returns a Shading object that refers to the shading formatting for the font.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.Style">
      <summary>
            Gets the character style applied to this formatting.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.StyleName">
      <summary>
            Gets or sets the name of the character style applied to this formatting.
            </summary>
    </member>
    <member name="P:Aspose.Word.Font.StyleIdentifier">
      <summary>
            Gets or sets the locale independent style identifier of the character style applied to this formatting.
            </summary>
    </member>
    <member name="T:Aspose.Word.ListFormat">
      <summary>
            Represents the list formatting attributes that can be applied to the paragraphs.
            </summary>
    </member>
    <member name="M:Aspose.Word.ListFormat.ApplyBulletDefault">
      <summary>
            Applies default bulleted list formatting to the paragraph.
            </summary>
      <remarks>
            The bullet and formatting are added to the current paragraph and all
            further paragraphs created using <see cref="T:Aspose.Word.DocumentBuilder" /> until
            <see cref="M:Aspose.Word.ListFormat.RemoveNumbers" /> is called to stop bulleted list formatting.
            </remarks>
    </member>
    <member name="M:Aspose.Word.ListFormat.ApplyNumberDefault">
      <summary>
            Applies default numbered list formatting to the paragraph.
            </summary>
      <remarks>
            The number and formatting are added to the current paragraph and all
            further paragraphs created using <see cref="T:Aspose.Word.DocumentBuilder" /> until
            <see cref="M:Aspose.Word.ListFormat.RemoveNumbers" /> is called to stop numbered list formatting.
            </remarks>
    </member>
    <member name="M:Aspose.Word.ListFormat.RemoveNumbers">
      <summary>
            Removes numbers or bullets from the current paragraph.
            </summary>
    </member>
    <member name="M:Aspose.Word.ListFormat.ListIndent">
      <summary>
            Increases the list level of the current paragraph by one level.
            </summary>
      <remarks>
        <p>This method changes the list level and applies formatting properties of the
            new level.</p>
        <p>In Word documents, lists may consist of up to nine levels. A list style determines
            formatting for each list level. List formatting specifies what bullet or
            number is used, left indent, space between the bullet and text etc.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.ListFormat.ListOutdent">
      <summary>
            Decreases the list level of the current paragraph by one level.
            </summary>
      <remarks>
        <p>This method changes the list level and applies formatting properties of the
            new level.</p>
        <p>In Word documents, lists may consist of up to nine levels. A list style determines
            formatting for each list level. List formatting specifies what bullet or
            number is used, left indent, space between the bullet and text etc.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.ListFormat.ListLevelNumber">
      <summary>
            Returns or sets the list level for the paragraph.
            </summary>
      <remarks>
            In Word documents, lists may consist of up to nine levels, numbered 0 to 8.
            </remarks>
    </member>
    <member name="T:Aspose.Word.PageSetup">
      <summary>
Represents the page setup properties of a section. 
</summary>
      <remarks>
        <p>
          <b>PageSetup</b> object contains all the page setup attributes of a section 
(left margin, bottom margin, paper size, and so on) as properties.</p>
      </remarks>
      <example>
This example shows how to specify page size, orientation and margins for a section in the document.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

PageSetup ps = builder.PageSetup;
ps.PaperSize = PaperSize.Legal;
ps.Orientation = Orientation.Landscape;
ps.TopMargin = WordConvert.InchToPoint(1.0);
ps.BottomMargin = WordConvert.InchToPoint(1.0);
ps.LeftMargin = WordConvert.InchToPoint(1.5);
ps.RightMargin = WordConvert.InchToPoint(1.5);
ps.HeaderDistance = WordConvert.InchToPoint(0.2);
ps.FooterDistance = WordConvert.InchToPoint(0.2);

builder.Writeln("Hellow world.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 

Dim ps As PageSetup =  builder.PageSetup 
ps.PaperSize = PaperSize.Legal
ps.Orientation = Orientation.Landscape
ps.TopMargin = WordConvert.InchToPoint(1.0)
ps.BottomMargin = WordConvert.InchToPoint(1.0)
ps.LeftMargin = WordConvert.InchToPoint(1.5)
ps.RightMargin = WordConvert.InchToPoint(1.5)
ps.HeaderDistance = WordConvert.InchToPoint(0.2)
ps.FooterDistance = WordConvert.InchToPoint(0.2)

builder.Writeln("Hellow world.")
</code></example>
      <dev>
            This is a presentation object only, does not store any model data.
            </dev>
    </member>
    <member name="M:Aspose.Word.PageSetup.ClearFormatting">
      <summary>
Resets page setup to default paper size, margins and orientation.
</summary>
      <example>
Shows how to clear section formatting back to default values.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

//Modify the first section in the document.
builder.PageSetup.Orientation = Orientation.Landscape;
builder.PageSetup.VerticalAlignment = VerticalAlignment.Center;
builder.Writeln("Section 1, landscape oriented and text vertically centered.");

//Start a new section and reset its formatting to defaults.
builder.InsertBreak(BreakType.SectionBreakNewPage);
builder.PageSetup.ClearFormatting();
builder.Writeln("Section 2, back to default Letter paper size, portrait orientation and top alignment.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 
 
'Modify the first section in the document.
builder.PageSetup.Orientation = Orientation.Landscape
builder.PageSetup.VerticalAlignment = VerticalAlignment.Center
builder.Writeln("Section 1, landscape oriented and text vertically centered.")
 
'Start a new section and reset its formatting to defaults.
builder.InsertBreak(BreakType.SectionBreakNewPage)
builder.PageSetup.ClearFormatting()
builder.Writeln("Section 2, back to default Letter paper size, portrait orientation and top alignment.")
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.OddAndEvenPagesHeaderFooter">
      <summary>
        <b>True</b> if the document has different headers and footers for odd-numbered and even-numbered pages.
</summary>
      <remarks>
Note, changing this property affects all sections in the document.
</remarks>
      <example>
Shows how to create a document with different headers for first, even and odd pages.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

PageSetup ps = builder.PageSetup;
ps.DifferentFirstPageHeaderFooter = true;
ps.OddAndEvenPagesHeaderFooter = true;
ps.FirstPageTray = PaperTray.EnvelopeFeed;
ps.OtherPagesTray = PaperTray.FormSource;

builder.MoveToHeaderFooter(HeaderFooterType.HeaderFirst);
builder.Writeln("First page header.");

builder.MoveToHeaderFooter(HeaderFooterType.HeaderEven);
builder.Writeln("Even pages header.");

builder.MoveToHeaderFooter(HeaderFooterType.HeaderPrimary);
builder.Writeln("Odd pages header.");

//Move back to the main story of the first section.
builder.MoveToSection(0);
builder.Writeln("Text page 1.");
builder.InsertBreak(BreakType.PageBreak);
builder.Writeln("Text page 2.");
builder.InsertBreak(BreakType.PageBreak);
builder.Writeln("Text page 3.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 
 
Dim ps As PageSetup =  builder.PageSetup 
ps.DifferentFirstPageHeaderFooter = True
ps.OddAndEvenPagesHeaderFooter = True
ps.FirstPageTray = PaperTray.EnvelopeFeed
ps.OtherPagesTray = PaperTray.FormSource
 
builder.MoveToHeaderFooter(HeaderFooterType.HeaderFirst)
builder.Writeln("First page header.")
 
builder.MoveToHeaderFooter(HeaderFooterType.HeaderEven)
builder.Writeln("Even pages header.")
 
builder.MoveToHeaderFooter(HeaderFooterType.HeaderPrimary)
builder.Writeln("Odd pages header.")
 
'Move back to the main story of the first section.
builder.MoveToSection(0)
builder.Writeln("Text page 1.")
builder.InsertBreak(BreakType.PageBreak)
builder.Writeln("Text page 2.")
builder.InsertBreak(BreakType.PageBreak)
builder.Writeln("Text page 3.")
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.DifferentFirstPageHeaderFooter">
      <summary>
        <b>True</b> if a different header or footer is used on the first page.
</summary>
      <example>
Shows how to create a document with different headers for first, even and odd pages.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

PageSetup ps = builder.PageSetup;
ps.DifferentFirstPageHeaderFooter = true;
ps.OddAndEvenPagesHeaderFooter = true;
ps.FirstPageTray = PaperTray.EnvelopeFeed;
ps.OtherPagesTray = PaperTray.FormSource;

builder.MoveToHeaderFooter(HeaderFooterType.HeaderFirst);
builder.Writeln("First page header.");

builder.MoveToHeaderFooter(HeaderFooterType.HeaderEven);
builder.Writeln("Even pages header.");

builder.MoveToHeaderFooter(HeaderFooterType.HeaderPrimary);
builder.Writeln("Odd pages header.");

//Move back to the main story of the first section.
builder.MoveToSection(0);
builder.Writeln("Text page 1.");
builder.InsertBreak(BreakType.PageBreak);
builder.Writeln("Text page 2.");
builder.InsertBreak(BreakType.PageBreak);
builder.Writeln("Text page 3.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 
 
Dim ps As PageSetup =  builder.PageSetup 
ps.DifferentFirstPageHeaderFooter = True
ps.OddAndEvenPagesHeaderFooter = True
ps.FirstPageTray = PaperTray.EnvelopeFeed
ps.OtherPagesTray = PaperTray.FormSource
 
builder.MoveToHeaderFooter(HeaderFooterType.HeaderFirst)
builder.Writeln("First page header.")
 
builder.MoveToHeaderFooter(HeaderFooterType.HeaderEven)
builder.Writeln("Even pages header.")
 
builder.MoveToHeaderFooter(HeaderFooterType.HeaderPrimary)
builder.Writeln("Odd pages header.")
 
'Move back to the main story of the first section.
builder.MoveToSection(0)
builder.Writeln("Text page 1.")
builder.InsertBreak(BreakType.PageBreak)
builder.Writeln("Text page 2.")
builder.InsertBreak(BreakType.PageBreak)
builder.Writeln("Text page 3.")
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.SectionStart">
      <summary>
Returns or sets the type of section break for the specified object.
</summary>
      <example>
Shows how to change an existing section in the document to start on the same page as the previous section.
<code>
[C#]
Document doc = new Document("MyFile.doc");
doc.Sections[1].PageSetup.SectionStart = SectionStart.Continuous;


[VB]
Dim doc as Document = New Document("MyFile.doc")
doc.Sections(1).PageSetup.SectionStart = SectionStart.Continuous
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.SuppressEndnotes">
      <summary>
        <b>True</b> if endnotes are printed at the end of the next section that doesn't suppress endnotes. 
Suppressed endnotes are printed before the endnotes in that section.
</summary>
    </member>
    <member name="P:Aspose.Word.PageSetup.VerticalAlignment">
      <summary>
Returns or sets the vertical alignment of text on each page in a document or section.
</summary>
      <example>
Shows how to clear section formatting back to default values.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

//Modify the first section in the document.
builder.PageSetup.Orientation = Orientation.Landscape;
builder.PageSetup.VerticalAlignment = VerticalAlignment.Center;
builder.Writeln("Section 1, landscape oriented and text vertically centered.");

//Start a new section and reset its formatting to defaults.
builder.InsertBreak(BreakType.SectionBreakNewPage);
builder.PageSetup.ClearFormatting();
builder.Writeln("Section 2, back to default Letter paper size, portrait orientation and top alignment.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 
 
'Modify the first section in the document.
builder.PageSetup.Orientation = Orientation.Landscape
builder.PageSetup.VerticalAlignment = VerticalAlignment.Center
builder.Writeln("Section 1, landscape oriented and text vertically centered.")
 
'Start a new section and reset its formatting to defaults.
builder.InsertBreak(BreakType.SectionBreakNewPage)
builder.PageSetup.ClearFormatting()
builder.Writeln("Section 2, back to default Letter paper size, portrait orientation and top alignment.")
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.Bidi">
      <summary>
Specifies that this section contains bidirectional (complex scripts) text.
</summary>
    </member>
    <member name="P:Aspose.Word.PageSetup.PageWidth">
      <summary>
Returns or sets the width of the page in points. 
</summary>
    </member>
    <member name="P:Aspose.Word.PageSetup.PageHeight">
      <summary>
Returns or sets the height of the page in points. 
</summary>
    </member>
    <member name="P:Aspose.Word.PageSetup.UseablePageWidth">
      <summary>
Returns page width available for text.
</summary>
      <remarks>
Calculted as <see cref="P:Aspose.Word.PageSetup.PageWidth" /> - <see cref="P:Aspose.Word.PageSetup.LeftMargin" /> - <see cref="P:Aspose.Word.PageSetup.RightMargin" />. 
</remarks>
      <example>
This example shows how to create several text columns and specify their widths and spacing between the columns.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

TextColumns columns = builder.PageSetup.TextColumns;
//Show vertical line between columns.
columns.LineBetween = true;
//Indicate we want to create column with different widths.
columns.EvenlySpaced = false;
//Create two columns, note they will be created with zero widths, need to set them.
columns.SetCount(2);

//Set the first column to be narrow.
TextColumn c1 = columns[0];
c1.Width = 100;
c1.SpaceAfter = 20;

//Set the second column to take the rest of the space available on the page.
TextColumn c2 = columns[1];
c2.Width = builder.PageSetup.UseablePageWidth - c1.Width - c1.SpaceAfter;

builder.Writeln("Narrow column 1.");
builder.InsertBreak(BreakType.ColumnBreak);
builder.Writeln("Wide column 2.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 
 
Dim columns As TextColumns =  builder.PageSetup.TextColumns 
'Show vertical line between columns.
columns.LineBetween = True
'Indicate we want to create column with different widths.
columns.EvenlySpaced = False
'Create two columns, note they will be created with zero widths, need to set them.
columns.SetCount(2)
 
'Set the first column to be narrow.
Dim c1 As TextColumn =  columns(0) 
c1.Width = 100
c1.SpaceAfter = 20
 
'Set the second column to take the rest of the space available on the page.
Dim c2 As TextColumn =  columns(1) 
c2.Width = builder.PageSetup.UseablePageWidth - c1.Width - c1.SpaceAfter
 
builder.Writeln("Narrow column 1.")
builder.InsertBreak(BreakType.ColumnBreak)
builder.Writeln("Wide column 2.")
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.PaperSize">
      <summary>
Returns or sets the paper size. 
</summary>
      <example>
This example shows how to specify page size, orientation and margins for a section in the document.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

PageSetup ps = builder.PageSetup;
ps.PaperSize = PaperSize.Legal;
ps.Orientation = Orientation.Landscape;
ps.TopMargin = WordConvert.InchToPoint(1.0);
ps.BottomMargin = WordConvert.InchToPoint(1.0);
ps.LeftMargin = WordConvert.InchToPoint(1.5);
ps.RightMargin = WordConvert.InchToPoint(1.5);
ps.HeaderDistance = WordConvert.InchToPoint(0.2);
ps.FooterDistance = WordConvert.InchToPoint(0.2);

builder.Writeln("Hellow world.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 

Dim ps As PageSetup =  builder.PageSetup 
ps.PaperSize = PaperSize.Legal
ps.Orientation = Orientation.Landscape
ps.TopMargin = WordConvert.InchToPoint(1.0)
ps.BottomMargin = WordConvert.InchToPoint(1.0)
ps.LeftMargin = WordConvert.InchToPoint(1.5)
ps.RightMargin = WordConvert.InchToPoint(1.5)
ps.HeaderDistance = WordConvert.InchToPoint(0.2)
ps.FooterDistance = WordConvert.InchToPoint(0.2)

builder.Writeln("Hellow world.")
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.Orientation">
      <summary>
Returns or sets the orientation of the page.
</summary>
      <remarks>
Changing <b>Orientation</b> swaps <see cref="P:Aspose.Word.PageSetup.PageWidth" /> and <see cref="P:Aspose.Word.PageSetup.PageHeight" />.
</remarks>
      <example>
This example shows how to specify page size, orientation and margins for a section in the document.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

PageSetup ps = builder.PageSetup;
ps.PaperSize = PaperSize.Legal;
ps.Orientation = Orientation.Landscape;
ps.TopMargin = WordConvert.InchToPoint(1.0);
ps.BottomMargin = WordConvert.InchToPoint(1.0);
ps.LeftMargin = WordConvert.InchToPoint(1.5);
ps.RightMargin = WordConvert.InchToPoint(1.5);
ps.HeaderDistance = WordConvert.InchToPoint(0.2);
ps.FooterDistance = WordConvert.InchToPoint(0.2);

builder.Writeln("Hellow world.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 

Dim ps As PageSetup =  builder.PageSetup 
ps.PaperSize = PaperSize.Legal
ps.Orientation = Orientation.Landscape
ps.TopMargin = WordConvert.InchToPoint(1.0)
ps.BottomMargin = WordConvert.InchToPoint(1.0)
ps.LeftMargin = WordConvert.InchToPoint(1.5)
ps.RightMargin = WordConvert.InchToPoint(1.5)
ps.HeaderDistance = WordConvert.InchToPoint(0.2)
ps.FooterDistance = WordConvert.InchToPoint(0.2)

builder.Writeln("Hellow world.")
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.LeftMargin">
      <summary>
Returns or sets the distance (in points) between the left edge of the page and the left boundary of the body text. 
</summary>
      <example>
This example shows how to specify page size, orientation and margins for a section in the document.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

PageSetup ps = builder.PageSetup;
ps.PaperSize = PaperSize.Legal;
ps.Orientation = Orientation.Landscape;
ps.TopMargin = WordConvert.InchToPoint(1.0);
ps.BottomMargin = WordConvert.InchToPoint(1.0);
ps.LeftMargin = WordConvert.InchToPoint(1.5);
ps.RightMargin = WordConvert.InchToPoint(1.5);
ps.HeaderDistance = WordConvert.InchToPoint(0.2);
ps.FooterDistance = WordConvert.InchToPoint(0.2);

builder.Writeln("Hellow world.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 

Dim ps As PageSetup =  builder.PageSetup 
ps.PaperSize = PaperSize.Legal
ps.Orientation = Orientation.Landscape
ps.TopMargin = WordConvert.InchToPoint(1.0)
ps.BottomMargin = WordConvert.InchToPoint(1.0)
ps.LeftMargin = WordConvert.InchToPoint(1.5)
ps.RightMargin = WordConvert.InchToPoint(1.5)
ps.HeaderDistance = WordConvert.InchToPoint(0.2)
ps.FooterDistance = WordConvert.InchToPoint(0.2)

builder.Writeln("Hellow world.")
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.RightMargin">
      <summary>
Returns or sets the distance (in points) between the right edge of the page and the right boundary of the body text. 
</summary>
      <example>
This example shows how to specify page size, orientation and margins for a section in the document.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

PageSetup ps = builder.PageSetup;
ps.PaperSize = PaperSize.Legal;
ps.Orientation = Orientation.Landscape;
ps.TopMargin = WordConvert.InchToPoint(1.0);
ps.BottomMargin = WordConvert.InchToPoint(1.0);
ps.LeftMargin = WordConvert.InchToPoint(1.5);
ps.RightMargin = WordConvert.InchToPoint(1.5);
ps.HeaderDistance = WordConvert.InchToPoint(0.2);
ps.FooterDistance = WordConvert.InchToPoint(0.2);

builder.Writeln("Hellow world.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 

Dim ps As PageSetup =  builder.PageSetup 
ps.PaperSize = PaperSize.Legal
ps.Orientation = Orientation.Landscape
ps.TopMargin = WordConvert.InchToPoint(1.0)
ps.BottomMargin = WordConvert.InchToPoint(1.0)
ps.LeftMargin = WordConvert.InchToPoint(1.5)
ps.RightMargin = WordConvert.InchToPoint(1.5)
ps.HeaderDistance = WordConvert.InchToPoint(0.2)
ps.FooterDistance = WordConvert.InchToPoint(0.2)

builder.Writeln("Hellow world.")
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.TopMargin">
      <summary>
Returns or sets the distance (in points) between the top edge of the page and the top boundary of the body text. 
</summary>
      <example>
This example shows how to specify page size, orientation and margins for a section in the document.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

PageSetup ps = builder.PageSetup;
ps.PaperSize = PaperSize.Legal;
ps.Orientation = Orientation.Landscape;
ps.TopMargin = WordConvert.InchToPoint(1.0);
ps.BottomMargin = WordConvert.InchToPoint(1.0);
ps.LeftMargin = WordConvert.InchToPoint(1.5);
ps.RightMargin = WordConvert.InchToPoint(1.5);
ps.HeaderDistance = WordConvert.InchToPoint(0.2);
ps.FooterDistance = WordConvert.InchToPoint(0.2);

builder.Writeln("Hellow world.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 

Dim ps As PageSetup =  builder.PageSetup 
ps.PaperSize = PaperSize.Legal
ps.Orientation = Orientation.Landscape
ps.TopMargin = WordConvert.InchToPoint(1.0)
ps.BottomMargin = WordConvert.InchToPoint(1.0)
ps.LeftMargin = WordConvert.InchToPoint(1.5)
ps.RightMargin = WordConvert.InchToPoint(1.5)
ps.HeaderDistance = WordConvert.InchToPoint(0.2)
ps.FooterDistance = WordConvert.InchToPoint(0.2)

builder.Writeln("Hellow world.")
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.BottomMargin">
      <summary>
Returns or sets the distance (in points) between the bottom edge of the page and the bottom boundary of the body text. 
</summary>
      <example>
This example shows how to specify page size, orientation and margins for a section in the document.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

PageSetup ps = builder.PageSetup;
ps.PaperSize = PaperSize.Legal;
ps.Orientation = Orientation.Landscape;
ps.TopMargin = WordConvert.InchToPoint(1.0);
ps.BottomMargin = WordConvert.InchToPoint(1.0);
ps.LeftMargin = WordConvert.InchToPoint(1.5);
ps.RightMargin = WordConvert.InchToPoint(1.5);
ps.HeaderDistance = WordConvert.InchToPoint(0.2);
ps.FooterDistance = WordConvert.InchToPoint(0.2);

builder.Writeln("Hellow world.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 

Dim ps As PageSetup =  builder.PageSetup 
ps.PaperSize = PaperSize.Legal
ps.Orientation = Orientation.Landscape
ps.TopMargin = WordConvert.InchToPoint(1.0)
ps.BottomMargin = WordConvert.InchToPoint(1.0)
ps.LeftMargin = WordConvert.InchToPoint(1.5)
ps.RightMargin = WordConvert.InchToPoint(1.5)
ps.HeaderDistance = WordConvert.InchToPoint(0.2)
ps.FooterDistance = WordConvert.InchToPoint(0.2)

builder.Writeln("Hellow world.")
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.HeaderDistance">
      <summary>
Returns or sets the distance (in points) between the header and the top of the page.
</summary>
      <example>
This example shows how to specify page size, orientation and margins for a section in the document.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

PageSetup ps = builder.PageSetup;
ps.PaperSize = PaperSize.Legal;
ps.Orientation = Orientation.Landscape;
ps.TopMargin = WordConvert.InchToPoint(1.0);
ps.BottomMargin = WordConvert.InchToPoint(1.0);
ps.LeftMargin = WordConvert.InchToPoint(1.5);
ps.RightMargin = WordConvert.InchToPoint(1.5);
ps.HeaderDistance = WordConvert.InchToPoint(0.2);
ps.FooterDistance = WordConvert.InchToPoint(0.2);

builder.Writeln("Hellow world.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 

Dim ps As PageSetup =  builder.PageSetup 
ps.PaperSize = PaperSize.Legal
ps.Orientation = Orientation.Landscape
ps.TopMargin = WordConvert.InchToPoint(1.0)
ps.BottomMargin = WordConvert.InchToPoint(1.0)
ps.LeftMargin = WordConvert.InchToPoint(1.5)
ps.RightMargin = WordConvert.InchToPoint(1.5)
ps.HeaderDistance = WordConvert.InchToPoint(0.2)
ps.FooterDistance = WordConvert.InchToPoint(0.2)

builder.Writeln("Hellow world.")
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.FooterDistance">
      <summary>
Returns or sets the distance (in points) between the footer and the bottom of the page.
</summary>
      <example>
This example shows how to specify page size, orientation and margins for a section in the document.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

PageSetup ps = builder.PageSetup;
ps.PaperSize = PaperSize.Legal;
ps.Orientation = Orientation.Landscape;
ps.TopMargin = WordConvert.InchToPoint(1.0);
ps.BottomMargin = WordConvert.InchToPoint(1.0);
ps.LeftMargin = WordConvert.InchToPoint(1.5);
ps.RightMargin = WordConvert.InchToPoint(1.5);
ps.HeaderDistance = WordConvert.InchToPoint(0.2);
ps.FooterDistance = WordConvert.InchToPoint(0.2);

builder.Writeln("Hellow world.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 

Dim ps As PageSetup =  builder.PageSetup 
ps.PaperSize = PaperSize.Legal
ps.Orientation = Orientation.Landscape
ps.TopMargin = WordConvert.InchToPoint(1.0)
ps.BottomMargin = WordConvert.InchToPoint(1.0)
ps.LeftMargin = WordConvert.InchToPoint(1.5)
ps.RightMargin = WordConvert.InchToPoint(1.5)
ps.HeaderDistance = WordConvert.InchToPoint(0.2)
ps.FooterDistance = WordConvert.InchToPoint(0.2)

builder.Writeln("Hellow world.")
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.Gutter">
      <summary>
Gets or sets the amount of extra space added to the margin for document binding.
</summary>
    </member>
    <member name="P:Aspose.Word.PageSetup.FirstPageTray">
      <summary>
Returns or sets the paper tray to use for the first page of a section.
</summary>
      <example>
Shows how to create a document with different headers for first, even and odd pages.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

PageSetup ps = builder.PageSetup;
ps.DifferentFirstPageHeaderFooter = true;
ps.OddAndEvenPagesHeaderFooter = true;
ps.FirstPageTray = PaperTray.EnvelopeFeed;
ps.OtherPagesTray = PaperTray.FormSource;

builder.MoveToHeaderFooter(HeaderFooterType.HeaderFirst);
builder.Writeln("First page header.");

builder.MoveToHeaderFooter(HeaderFooterType.HeaderEven);
builder.Writeln("Even pages header.");

builder.MoveToHeaderFooter(HeaderFooterType.HeaderPrimary);
builder.Writeln("Odd pages header.");

//Move back to the main story of the first section.
builder.MoveToSection(0);
builder.Writeln("Text page 1.");
builder.InsertBreak(BreakType.PageBreak);
builder.Writeln("Text page 2.");
builder.InsertBreak(BreakType.PageBreak);
builder.Writeln("Text page 3.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 
 
Dim ps As PageSetup =  builder.PageSetup 
ps.DifferentFirstPageHeaderFooter = True
ps.OddAndEvenPagesHeaderFooter = True
ps.FirstPageTray = PaperTray.EnvelopeFeed
ps.OtherPagesTray = PaperTray.FormSource
 
builder.MoveToHeaderFooter(HeaderFooterType.HeaderFirst)
builder.Writeln("First page header.")
 
builder.MoveToHeaderFooter(HeaderFooterType.HeaderEven)
builder.Writeln("Even pages header.")
 
builder.MoveToHeaderFooter(HeaderFooterType.HeaderPrimary)
builder.Writeln("Odd pages header.")
 
'Move back to the main story of the first section.
builder.MoveToSection(0)
builder.Writeln("Text page 1.")
builder.InsertBreak(BreakType.PageBreak)
builder.Writeln("Text page 2.")
builder.InsertBreak(BreakType.PageBreak)
builder.Writeln("Text page 3.")
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.OtherPagesTray">
      <summary>
Returns or sets the paper tray to be used for all but the first page of a section.
</summary>
      <example>
Shows how to create a document with different headers for first, even and odd pages.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

PageSetup ps = builder.PageSetup;
ps.DifferentFirstPageHeaderFooter = true;
ps.OddAndEvenPagesHeaderFooter = true;
ps.FirstPageTray = PaperTray.EnvelopeFeed;
ps.OtherPagesTray = PaperTray.FormSource;

builder.MoveToHeaderFooter(HeaderFooterType.HeaderFirst);
builder.Writeln("First page header.");

builder.MoveToHeaderFooter(HeaderFooterType.HeaderEven);
builder.Writeln("Even pages header.");

builder.MoveToHeaderFooter(HeaderFooterType.HeaderPrimary);
builder.Writeln("Odd pages header.");

//Move back to the main story of the first section.
builder.MoveToSection(0);
builder.Writeln("Text page 1.");
builder.InsertBreak(BreakType.PageBreak);
builder.Writeln("Text page 2.");
builder.InsertBreak(BreakType.PageBreak);
builder.Writeln("Text page 3.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 
 
Dim ps As PageSetup =  builder.PageSetup 
ps.DifferentFirstPageHeaderFooter = True
ps.OddAndEvenPagesHeaderFooter = True
ps.FirstPageTray = PaperTray.EnvelopeFeed
ps.OtherPagesTray = PaperTray.FormSource
 
builder.MoveToHeaderFooter(HeaderFooterType.HeaderFirst)
builder.Writeln("First page header.")
 
builder.MoveToHeaderFooter(HeaderFooterType.HeaderEven)
builder.Writeln("Even pages header.")
 
builder.MoveToHeaderFooter(HeaderFooterType.HeaderPrimary)
builder.Writeln("Odd pages header.")
 
'Move back to the main story of the first section.
builder.MoveToSection(0)
builder.Writeln("Text page 1.")
builder.InsertBreak(BreakType.PageBreak)
builder.Writeln("Text page 2.")
builder.InsertBreak(BreakType.PageBreak)
builder.Writeln("Text page 3.")
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.PageNumberStyle">
      <summary>
Gets or sets the page number format.
</summary>
    </member>
    <member name="P:Aspose.Word.PageSetup.RestartPageNumbering">
      <summary>
        <b>True</b> if page numbering restarts at the beginning of the section.
</summary>
      <remarks>
If set to <b>false</b>, the <b>RestartPageNumbering</b> property will override the 
<see cref="P:Aspose.Word.PageSetup.PageStartingNumber" /> property so that page numbering can continue from the previous section.
</remarks>
    </member>
    <member name="P:Aspose.Word.PageSetup.PageStartingNumber">
      <summary>
Gets or sets the starting page number of the section.
</summary>
      <remarks>
The <see cref="P:Aspose.Word.PageSetup.RestartPageNumbering" /> property, if set to <b>false</b>, will override the 
<b>PageStartingNumber</b> property so that page numbering can continue from the previous section.
</remarks>
    </member>
    <member name="P:Aspose.Word.PageSetup.LineNumberRestartMode">
      <summary>
Gets or sets the way line numbering runs — that is, whether it starts over at the beginning of a new 
page or section or runs continuously.
</summary>
      <example>
Inserts line numbers every 5 lines, restarted on every page.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

PageSetup ps = builder.PageSetup;
ps.LineStartingNumber = 1;
ps.LineNumberCountBy = 5;
ps.LineNumberRestartMode = LineNumberRestartMode.RestartPage;

for (int i = 1; i &lt;= 20; i++)
	builder.Writeln(string.Format("Line {0}.", i));


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 
 
Dim ps As PageSetup =  builder.PageSetup 
ps.LineStartingNumber = 1
ps.LineNumberCountBy = 5
ps.LineNumberRestartMode = LineNumberRestartMode.RestartPage
 
Dim i As Integer
For  i = 1 To  20 Step  i + 1
	builder.Writeln(String.Format("Line {0}.", i))
Next
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.LineNumberCountBy">
      <summary>
Returns or sets the numeric increment for line numbers.
</summary>
      <example>
Inserts line numbers every 5 lines, restarted on every page.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

PageSetup ps = builder.PageSetup;
ps.LineStartingNumber = 1;
ps.LineNumberCountBy = 5;
ps.LineNumberRestartMode = LineNumberRestartMode.RestartPage;

for (int i = 1; i &lt;= 20; i++)
	builder.Writeln(string.Format("Line {0}.", i));


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 
 
Dim ps As PageSetup =  builder.PageSetup 
ps.LineStartingNumber = 1
ps.LineNumberCountBy = 5
ps.LineNumberRestartMode = LineNumberRestartMode.RestartPage
 
Dim i As Integer
For  i = 1 To  20 Step  i + 1
	builder.Writeln(String.Format("Line {0}.", i))
Next
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.LineNumberDistanceFromText">
      <summary>
Gets or sets distance between the right edge of line numbers and the left edge of the document.
</summary>
      <remarks>
Set this property to zero for automatic distance between the line numbers and text of the document.
</remarks>
    </member>
    <member name="P:Aspose.Word.PageSetup.LineStartingNumber">
      <summary>
Gets or sets the starting line number.
</summary>
      <example>
Inserts line numbers every 5 lines, restarted on every page.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

PageSetup ps = builder.PageSetup;
ps.LineStartingNumber = 1;
ps.LineNumberCountBy = 5;
ps.LineNumberRestartMode = LineNumberRestartMode.RestartPage;

for (int i = 1; i &lt;= 20; i++)
	builder.Writeln(string.Format("Line {0}.", i));


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 
 
Dim ps As PageSetup =  builder.PageSetup 
ps.LineStartingNumber = 1
ps.LineNumberCountBy = 5
ps.LineNumberRestartMode = LineNumberRestartMode.RestartPage
 
Dim i As Integer
For  i = 1 To  20 Step  i + 1
	builder.Writeln(String.Format("Line {0}.", i))
Next
</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.TextColumns">
      <summary>
Returns a collection that represents the set of text columns.
</summary>
      <example>
This example shows how to create several text columns of equal width.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

TextColumns columns = builder.PageSetup.TextColumns;
//Make spacing between columns wider.
columns.Spacing = 100;
//This creates two columns of equal width.
columns.SetCount(2);

builder.Writeln("Text in column 1.");
builder.InsertBreak(BreakType.ColumnBreak);
builder.Writeln("Text in column 2.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 
 
Dim columns As TextColumns =  builder.PageSetup.TextColumns 
'Make spacing between columns wider.
columns.Spacing = 100
'This creates two columns of equal width.
columns.SetCount(2)
 
builder.Writeln("Text in column 1.")
builder.InsertBreak(BreakType.ColumnBreak)
builder.Writeln("Text in column 2.")

</code></example>
    </member>
    <member name="P:Aspose.Word.PageSetup.RtlGutter">
      <summary>
Gets or sets whether Microsoft Word uses gutters for the section based on a right-to-left language or a left-to-right language.
</summary>
    </member>
    <member name="P:Aspose.Word.PageSetup.BorderAlwaysInFront">
      <summary>
Specifies where the page border is positioned relative to intersecting texts and objects.
</summary>
    </member>
    <member name="P:Aspose.Word.PageSetup.BorderDistanceFrom">
      <summary>
Gets or sets a value that indicates whether the specified page border is measured from 
the edge of the page or from the text it surrounds.
</summary>
    </member>
    <member name="P:Aspose.Word.PageSetup.BorderAppliesTo">
      <summary>
Specifies which pages the page border is printed on.
</summary>
    </member>
    <member name="T:Aspose.Word.ParagraphFormat">
      <summary>
            Represents all the formatting for a paragraph.
            </summary>
    </member>
    <member name="M:Aspose.Word.ParagraphFormat.ClearFormatting">
      <summary>
            Resets to default paragraph formatting.
            </summary>
      <remarks>
            Default paragraph formatting is Normal style, left aligned, no indentation,
            no spacing, no borders and no shading.
            </remarks>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.Alignment">
      <summary>
            Gets or sets text alignment for the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.KeepTogether">
      <summary>
            True if all lines in the paragraph are to remain on the same page. 
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.KeepWithNext">
      <summary>
            True if the paragraph is to remains on the same page as the paragraph that follows it.
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.PageBreakBefore">
      <summary>
            True if  a page break is forced before the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.WidowControl">
      <summary>
            True if the first and last lines in the paragraph are to remain on the same page as the rest of the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.Bidi">
      <summary>
            Gets or sets whether this is a rigt-to-left paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.LeftIndent">
      <summary>
            Gets or sets the value (in points) that represents the left indent for paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.RightIndent">
      <summary>
            Gets or sets the value (in points) that represents the right indent for paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.FirstLineIndent">
      <summary>
            Gets or sets the value (in points) for a first line or hanging indent. 
            Use a positive value to set a first-line indent, and use a negative value to set a hanging indent.
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.SpaceBeforeAuto">
      <summary>
            True if the amount of spacing before the paragraph is set automatically.
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.SpaceAfterAuto">
      <summary>
            True if the amount of spacing after the paragraph is set automatically.
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.SpaceBefore">
      <summary>
            Gets or sets the amount of spacing (in points) before the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.SpaceAfter">
      <summary>
            Gets or sets the amount of spacing (in points) after the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.LineSpacingRule">
      <summary>
            Gets or sets the line spacing for the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.LineSpacing">
      <summary>
            Gets or sets the line spacing (in points) for the paragraph.
            </summary>
      <remarks>
        <p>When LineSpacingRule property is set to AtLeast, the line spacing can be greater than or equal to, 
            but never less than the specified LineSpacing value.</p>
        <p>When LineSpacingRule propert is set to Exactly, the line spacing never changes from 
            the specified LineSpacing value, even if a larger font is used within the paragraph.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.IsListItem">
      <summary>
            True when the paragraph is an item in a bulleted or numbered list.
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.Shading">
      <summary>
            Returns a Shading object that refers to the shading formatting for the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.Borders">
      <summary>
            Gets collection of borders of the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.Style">
      <summary>
            Gets the paragraph style applied to this formatting.
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.StyleName">
      <summary>
            Gets or sets the name of the paragraph style applied to this formatting.
            </summary>
    </member>
    <member name="P:Aspose.Word.ParagraphFormat.StyleIdentifier">
      <summary>
            Gets or sets the locale independent style identifier of the paragraph style applied to this formatting.
            </summary>
    </member>
    <member name="T:Aspose.Word.PictureFormat">
      <summary>
Contains properties and methods that apply to pictures.
</summary>
    </member>
    <member name="M:Aspose.Word.PictureFormat.#ctor">
      <summary>
Initializes an instance of this class.
</summary>
    </member>
    <member name="F:Aspose.Word.PictureFormat.NeutralContrast">
      <summary>
            50% is the default picture contrast.
            </summary>
    </member>
    <member name="F:Aspose.Word.PictureFormat.NeutralBrightness">
      <summary>
            50% is the default picture brightness.
            </summary>
    </member>
    <member name="P:Aspose.Word.PictureFormat.Brightness">
      <summary>
Gets or sets the brightness of the specified picture. The value 
for this property must be a number from 0.0 (dimmest) to 1.0 (brightest). 
</summary>
    </member>
    <member name="P:Aspose.Word.PictureFormat.ColorType">
      <summary>
Gets or sets the type of color transformation applied to the specified picture.
</summary>
    </member>
    <member name="P:Aspose.Word.PictureFormat.Contrast">
      <summary>
Gets or sets the contrast for the specified picture. The value 
for this property must be a number from 0.0 (the least contrast) to 1.0 (the greatest contrast). 
</summary>
    </member>
    <member name="P:Aspose.Word.PictureFormat.CropBottom">
      <summary>
Returns or sets the number of points that are cropped off the bottom of the specified picture.
</summary>
    </member>
    <member name="P:Aspose.Word.PictureFormat.CropLeft">
      <summary>
Returns or sets the number of points that are cropped off the left side of the specified picture.
</summary>
    </member>
    <member name="P:Aspose.Word.PictureFormat.CropRight">
      <summary>
Returns or sets the number of points that are cropped off the right side of the specified picture.
</summary>
    </member>
    <member name="P:Aspose.Word.PictureFormat.CropTop">
      <summary>
Returns or sets the number of points that are cropped off the top of the specified picture.
</summary>
    </member>
    <member name="T:Aspose.Word.RowFormat">
      <summary>
            Represents all formatting for a table row.
            </summary>
      <dev>
            I don't expose Shading here because default shading in MS Word works very strange,
            cells do not seem to inherit the shading specified for the table so it will be pretty
            confusing to work with. Setting row shading should actually go and set shading for
            all of the cells in the row.
            </dev>
    </member>
    <member name="M:Aspose.Word.RowFormat.ClearCellPadding">
      <summary>
            Sets default cell margins (padding) to zero.
            </summary>
    </member>
    <member name="P:Aspose.Word.RowFormat.Alignment">
      <summary>
            Gets or sets a value that represents the alignment for the row.
            </summary>
    </member>
    <member name="P:Aspose.Word.RowFormat.AllowAutoFit">
      <summary>
            Allows Microsoft Word to automatically resize cells in a table to fit their contents.
            </summary>
    </member>
    <member name="P:Aspose.Word.RowFormat.Borders">
      <summary>
            Gets the collection of default cell borders for the row.
            </summary>
    </member>
    <member name="P:Aspose.Word.RowFormat.Bidi">
      <summary>
            Gets or sets whether this is a rigt-to-left table.
            </summary>
    </member>
    <member name="P:Aspose.Word.RowFormat.LeftPadding">
      <summary>
            Gets or sets the amount of space (in points) to add to the left of the contents of cells.
            </summary>
    </member>
    <member name="P:Aspose.Word.RowFormat.RightPadding">
      <summary>
            Gets or sets the amount of space (in points) to add to the right of the contents of cells.
            </summary>
    </member>
    <member name="P:Aspose.Word.RowFormat.TopPadding">
      <summary>
            Gets or sets the amount of space (in points) to add above the contents of cells.
            </summary>
    </member>
    <member name="P:Aspose.Word.RowFormat.BottomPadding">
      <summary>
            Gets or sets the amount of space (in points) to add below the contents of cells.
            </summary>
    </member>
    <member name="P:Aspose.Word.RowFormat.Height">
      <summary>
            Gets or sets the height of the table row in points.
            </summary>
    </member>
    <member name="P:Aspose.Word.RowFormat.HeightRule">
      <summary>
            Gets or sets the rule for determining the height of the table row.
            </summary>
    </member>
    <member name="P:Aspose.Word.RowFormat.AllowBreakAcrossPages">
      <summary>
            True if the text in a table row is allowed to split across a page break.
            </summary>
    </member>
    <member name="P:Aspose.Word.RowFormat.HeadingFormat">
      <summary>
            True if the row is repeated as a table heading on every page when the table spans more than one page.
            </summary>
    </member>
    <member name="P:Aspose.Word.RowFormat.LeftIndent">
      <summary>
            Gets or sets the value that represents the left indent of the table row.
            </summary>
    </member>
    <member name="T:Aspose.Word.Shading">
      <summary>
            Contains shading attributes for an object.
            </summary>
      <dev>
            This is a model and also presentation class that allows to see and modify shading attributes.
            </dev>
    </member>
    <member name="M:Aspose.Word.Shading.ClearFormatting">
      <summary>
            Removes shading from the object.
            </summary>
    </member>
    <member name="P:Aspose.Word.Shading.BackgroundPatternColor">
      <summary>
            Gets or sets the color that's applied to the background of the Shading object.
            </summary>
    </member>
    <member name="P:Aspose.Word.Shading.ForegroundPatternColor">
      <summary>
            Gets or sets the color that's applied to the foreground of the Shading object.
            </summary>
    </member>
    <member name="P:Aspose.Word.Shading.Texture">
      <summary>
            Gets or sets the shading texture.
            </summary>
    </member>
    <member name="T:Aspose.Word.TextColumn">
      <dev>
            This is both a presentation and a model class. Represents width and spacing of a single column 
            in a section. Only used for custom width columns (not for evenly spaced columns).
            </dev>
      <summary>
Represents a single text column. <b>TextColumn</b> is a member of the <see cref="T:Aspose.Word.TextColumns" /> collection. 
The <b>TextColumns</b> collection includes all the columns in a section of a document.
</summary>
      <remarks>
        <p>
          <b>TextColumn</b> objects are only used to specify columns with custom width and spacing. If you want
the columns in the document to be of equal width, set TextColumns.<see cref="P:Aspose.Word.TextColumns.EvenlySpaced" /> to <b>true</b>.</p>
        <p>When a new <b>TextColumn</b> is created it has its width and spacing set to zero.</p>
        <seealso cref="T:Aspose.Word.TextColumns" />
        <seealso cref="T:Aspose.Word.PageSetup" />
        <seealso cref="T:Aspose.Word.Section" />
      </remarks>
      <example>
This example shows how to create several text columns and specify their widths and spacing between the columns.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

TextColumns columns = builder.PageSetup.TextColumns;
//Show vertical line between columns.
columns.LineBetween = true;
//Indicate we want to create column with different widths.
columns.EvenlySpaced = false;
//Create two columns, note they will be created with zero widths, need to set them.
columns.SetCount(2);

//Set the first column to be narrow.
TextColumn c1 = columns[0];
c1.Width = 100;
c1.SpaceAfter = 20;

//Set the second column to take the rest of the space available on the page.
TextColumn c2 = columns[1];
c2.Width = builder.PageSetup.UseablePageWidth - c1.Width - c1.SpaceAfter;

builder.Writeln("Narrow column 1.");
builder.InsertBreak(BreakType.ColumnBreak);
builder.Writeln("Wide column 2.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 
 
Dim columns As TextColumns =  builder.PageSetup.TextColumns 
'Show vertical line between columns.
columns.LineBetween = True
'Indicate we want to create column with different widths.
columns.EvenlySpaced = False
'Create two columns, note they will be created with zero widths, need to set them.
columns.SetCount(2)
 
'Set the first column to be narrow.
Dim c1 As TextColumn =  columns(0) 
c1.Width = 100
c1.SpaceAfter = 20
 
'Set the second column to take the rest of the space available on the page.
Dim c2 As TextColumn =  columns(1) 
c2.Width = builder.PageSetup.UseablePageWidth - c1.Width - c1.SpaceAfter
 
builder.Writeln("Narrow column 1.")
builder.InsertBreak(BreakType.ColumnBreak)
builder.Writeln("Wide column 2.")
</code></example>
    </member>
    <member name="P:Aspose.Word.TextColumn.Width">
      <summary>
Gets or sets the width of the text column in points.
</summary>
    </member>
    <member name="P:Aspose.Word.TextColumn.SpaceAfter">
      <summary>
Gets or sets the space between this column and the next column in points. Not required for the last column.
</summary>
    </member>
    <member name="T:Aspose.Word.TextColumns">
      <summary>
A collection of <see cref="T:Aspose.Word.TextColumn" /> objects that represent all the columns of text in a section of a document.
</summary>
      <remarks>
        <p>Use <see cref="M:Aspose.Word.TextColumns.SetCount(System.Int32)" /> to set the number of text columns.</p>
        <p>To make all columns equal width and spaced evenly, set <see cref="P:Aspose.Word.TextColumns.EvenlySpaced" /> to <b>true</b>
and specify the amount of space between the columns in <see cref="P:Aspose.Word.TextColumns.Spacing" />. MS Word will
automatically calculate column widths.</p>
        <p>If you have <b>EvenlySpaced</b> set to <b>false</b>, you need to specify width and spacing for each 
column individually. Use the indexer to access individual <see cref="T:Aspose.Word.TextColumn" /> objects.</p>
        <p>When using custom column widths, make sure the sum of all column widths and spacings between them 
equals page width minus left and right page margins.</p>
        <seealso cref="T:Aspose.Word.PageSetup" />
        <seealso cref="T:Aspose.Word.Section" />
      </remarks>
      <example>
This example shows how to create several text columns of equal width.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

TextColumns columns = builder.PageSetup.TextColumns;
//Make spacing between columns wider.
columns.Spacing = 100;
//This creates two columns of equal width.
columns.SetCount(2);

builder.Writeln("Text in column 1.");
builder.InsertBreak(BreakType.ColumnBreak);
builder.Writeln("Text in column 2.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 
 
Dim columns As TextColumns =  builder.PageSetup.TextColumns 
'Make spacing between columns wider.
columns.Spacing = 100
'This creates two columns of equal width.
columns.SetCount(2)
 
builder.Writeln("Text in column 1.")
builder.InsertBreak(BreakType.ColumnBreak)
builder.Writeln("Text in column 2.")

</code></example>
      <dev>
            This is a pure presentation class. Does not store any model data, just provides friendly
            access to section attributes that are related to managing text columns.
            </dev>
    </member>
    <member name="M:Aspose.Word.TextColumns.SetCount(System.Int32)">
      <summary>
Arranges text into the specified number of text columns.
</summary>
      <remarks>
        <p>When <see cref="P:Aspose.Word.TextColumns.EvenlySpaced" /> is <b>false</b> and you increase the number of columns, 
new <see cref="T:Aspose.Word.TextColumn" /> objects are created with zero width and spacing. 
You need to set width and spacing for the new columns.</p>
      </remarks>
      <param name="newCount">The number of columns the text is to be arranged into.</param>
      <example>
This example shows how to create several text columns of equal width.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

TextColumns columns = builder.PageSetup.TextColumns;
//Make spacing between columns wider.
columns.Spacing = 100;
//This creates two columns of equal width.
columns.SetCount(2);

builder.Writeln("Text in column 1.");
builder.InsertBreak(BreakType.ColumnBreak);
builder.Writeln("Text in column 2.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 
 
Dim columns As TextColumns =  builder.PageSetup.TextColumns 
'Make spacing between columns wider.
columns.Spacing = 100
'This creates two columns of equal width.
columns.SetCount(2)
 
builder.Writeln("Text in column 1.")
builder.InsertBreak(BreakType.ColumnBreak)
builder.Writeln("Text in column 2.")

</code></example>
    </member>
    <member name="P:Aspose.Word.TextColumns.EvenlySpaced">
      <summary>
        <b>True</b> if text columns are evenly spaced.
</summary>
      <example>
This example shows how to create several text columns and specify their widths and spacing between the columns.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

TextColumns columns = builder.PageSetup.TextColumns;
//Show vertical line between columns.
columns.LineBetween = true;
//Indicate we want to create column with different widths.
columns.EvenlySpaced = false;
//Create two columns, note they will be created with zero widths, need to set them.
columns.SetCount(2);

//Set the first column to be narrow.
TextColumn c1 = columns[0];
c1.Width = 100;
c1.SpaceAfter = 20;

//Set the second column to take the rest of the space available on the page.
TextColumn c2 = columns[1];
c2.Width = builder.PageSetup.UseablePageWidth - c1.Width - c1.SpaceAfter;

builder.Writeln("Narrow column 1.");
builder.InsertBreak(BreakType.ColumnBreak);
builder.Writeln("Wide column 2.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 
 
Dim columns As TextColumns =  builder.PageSetup.TextColumns 
'Show vertical line between columns.
columns.LineBetween = True
'Indicate we want to create column with different widths.
columns.EvenlySpaced = False
'Create two columns, note they will be created with zero widths, need to set them.
columns.SetCount(2)
 
'Set the first column to be narrow.
Dim c1 As TextColumn =  columns(0) 
c1.Width = 100
c1.SpaceAfter = 20
 
'Set the second column to take the rest of the space available on the page.
Dim c2 As TextColumn =  columns(1) 
c2.Width = builder.PageSetup.UseablePageWidth - c1.Width - c1.SpaceAfter
 
builder.Writeln("Narrow column 1.")
builder.InsertBreak(BreakType.ColumnBreak)
builder.Writeln("Wide column 2.")
</code></example>
    </member>
    <member name="P:Aspose.Word.TextColumns.Spacing">
      <summary>
When columns are evenly spaced, gets or sets the amount of space between each column in points.
</summary>
      <remarks>
Has effect only when <see cref="P:Aspose.Word.TextColumns.EvenlySpaced" /> is set to <b>true</b>.
</remarks>
      <example>
This example shows how to create several text columns of equal width.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

TextColumns columns = builder.PageSetup.TextColumns;
//Make spacing between columns wider.
columns.Spacing = 100;
//This creates two columns of equal width.
columns.SetCount(2);

builder.Writeln("Text in column 1.");
builder.InsertBreak(BreakType.ColumnBreak);
builder.Writeln("Text in column 2.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 
 
Dim columns As TextColumns =  builder.PageSetup.TextColumns 
'Make spacing between columns wider.
columns.Spacing = 100
'This creates two columns of equal width.
columns.SetCount(2)
 
builder.Writeln("Text in column 1.")
builder.InsertBreak(BreakType.ColumnBreak)
builder.Writeln("Text in column 2.")

</code></example>
    </member>
    <member name="P:Aspose.Word.TextColumns.Width">
      <summary>
When columns are evenly spaced, gets the width of the columns.
</summary>
      <remarks>
Has effect only when <see cref="P:Aspose.Word.TextColumns.EvenlySpaced" /> is set to <b>true</b>.
</remarks>
    </member>
    <member name="P:Aspose.Word.TextColumns.LineBetween">
      <summary>
When <b>true</b>, adds a vertical line between columns.
</summary>
      <example>
This example shows how to create several text columns and specify their widths and spacing between the columns.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

TextColumns columns = builder.PageSetup.TextColumns;
//Show vertical line between columns.
columns.LineBetween = true;
//Indicate we want to create column with different widths.
columns.EvenlySpaced = false;
//Create two columns, note they will be created with zero widths, need to set them.
columns.SetCount(2);

//Set the first column to be narrow.
TextColumn c1 = columns[0];
c1.Width = 100;
c1.SpaceAfter = 20;

//Set the second column to take the rest of the space available on the page.
TextColumn c2 = columns[1];
c2.Width = builder.PageSetup.UseablePageWidth - c1.Width - c1.SpaceAfter;

builder.Writeln("Narrow column 1.");
builder.InsertBreak(BreakType.ColumnBreak);
builder.Writeln("Wide column 2.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 
 
Dim columns As TextColumns =  builder.PageSetup.TextColumns 
'Show vertical line between columns.
columns.LineBetween = True
'Indicate we want to create column with different widths.
columns.EvenlySpaced = False
'Create two columns, note they will be created with zero widths, need to set them.
columns.SetCount(2)
 
'Set the first column to be narrow.
Dim c1 As TextColumn =  columns(0) 
c1.Width = 100
c1.SpaceAfter = 20
 
'Set the second column to take the rest of the space available on the page.
Dim c2 As TextColumn =  columns(1) 
c2.Width = builder.PageSetup.UseablePageWidth - c1.Width - c1.SpaceAfter
 
builder.Writeln("Narrow column 1.")
builder.InsertBreak(BreakType.ColumnBreak)
builder.Writeln("Wide column 2.")
</code></example>
    </member>
    <member name="P:Aspose.Word.TextColumns.Count">
      <summary>
Gets the number of columns in the section of a document.
</summary>
    </member>
    <member name="P:Aspose.Word.TextColumns.Item(System.Int32)">
      <summary>
Returns a text column at the specified index.
</summary>
      <example>
This example shows how to create several text columns and specify their widths and spacing between the columns.
<code>
[C#]
DocumentBuilder builder = new DocumentBuilder();

TextColumns columns = builder.PageSetup.TextColumns;
//Show vertical line between columns.
columns.LineBetween = true;
//Indicate we want to create column with different widths.
columns.EvenlySpaced = false;
//Create two columns, note they will be created with zero widths, need to set them.
columns.SetCount(2);

//Set the first column to be narrow.
TextColumn c1 = columns[0];
c1.Width = 100;
c1.SpaceAfter = 20;

//Set the second column to take the rest of the space available on the page.
TextColumn c2 = columns[1];
c2.Width = builder.PageSetup.UseablePageWidth - c1.Width - c1.SpaceAfter;

builder.Writeln("Narrow column 1.");
builder.InsertBreak(BreakType.ColumnBreak);
builder.Writeln("Wide column 2.");


[VB]
Dim builder As DocumentBuilder =  New DocumentBuilder() 
 
Dim columns As TextColumns =  builder.PageSetup.TextColumns 
'Show vertical line between columns.
columns.LineBetween = True
'Indicate we want to create column with different widths.
columns.EvenlySpaced = False
'Create two columns, note they will be created with zero widths, need to set them.
columns.SetCount(2)
 
'Set the first column to be narrow.
Dim c1 As TextColumn =  columns(0) 
c1.Width = 100
c1.SpaceAfter = 20
 
'Set the second column to take the rest of the space available on the page.
Dim c2 As TextColumn =  columns(1) 
c2.Width = builder.PageSetup.UseablePageWidth - c1.Width - c1.SpaceAfter
 
builder.Writeln("Narrow column 1.")
builder.InsertBreak(BreakType.ColumnBreak)
builder.Writeln("Wide column 2.")
</code></example>
    </member>
    <member name="T:Aspose.Word.ViewOptions">
      <summary>
            Provides various options that control how a document is shown in Microsoft Word.
            </summary>
    </member>
    <member name="P:Aspose.Word.ViewOptions.ViewType">
      <summary>
            Controls the view mode in Microsoft Word.
            </summary>
    </member>
    <member name="P:Aspose.Word.ViewOptions.ZoomType">
      <summary>
            Gets or sets a zoom value based on the size of the window.
            </summary>
    </member>
    <member name="P:Aspose.Word.ViewOptions.ZoomPercent">
      <summary>
            Gets or sets the percentage (between 10 and 500) at which you want to view your document.
            </summary>
    </member>
    <member name="P:Aspose.Word.ViewOptions.DoNotDisplayPageBoundaries">
      <summary>
            Turns off display of the space between the top of the text and the top edge of the page.
            </summary>
      <remarks>
        <p>Currently works only for documents in WordML format.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.ViewOptions.DisplayBackgroundShape">
      <summary>
            Controls display of the background shape in print layout view.
            </summary>
      <remarks>
        <p>Currently works only for documents in WordML format.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.ViewOptions.FormsDesign">
      <summary>
            Specifies whether the document is in forms design mode. 
            </summary>
      <remarks>
        <p>Currently works only for documents in WordML format.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Word.Reporting.MailMerge">
      <summary>
Represents the mail merge functionality.
</summary>
      <remarks>
        <p>For mail merge operation to work, the document should contain Word MERGEFIELD and 
optionally NEXT fields. During mail merge operation, merge fields in the document are 
replaced with values from your data source.</p>
        <p>There are two distinct ways to use mail merge: with mail merge regions and without.</p>
        <p>The simplest mail merge is without regions and it is very similar to how mail merge
works in Word. Use <see cref="M:Aspose.Word.Reporting.MailMerge.Execute(System.String[],System.Object[])" /> method to merge information from some 
data source such as <b>DataTable</b>, <b>DataView</b>, <b>IDataReader</b> or an array of 
objects into your document. The <b>MailMerge</b> object processes all records of the data 
source and copies and appends content of the whole document for each record.</p>
        <p>Note that when <b>MailMerge</b> object encounters a NEXT field, it selects next record 
in the data source and continues merging without copying any content.</p>
        <p>Use <see cref="M:Aspose.Word.Reporting.MailMerge.ExecuteWithRegions(System.Data.DataSet)" /> method to merge information into a 
document with mail merge regions defined. You can use <b>DataSet</b>, <b>DataTable</b>,
<b>DataView</b> or <b>IDataReader</b> as data sources for this operation.</p>
        <p>You need to use mail merge regions if you want to dynamically grow portions inside the 
document. Without mail merge regions whole document will be repeated for every record of
the data source.</p>
      </remarks>
      <example>
        <code>
[C#]

doc.MailMerge.Execute(table);
doc.Save(dstFileName);

[Visual Basic]

doc.MailMerge.Execute(table)
doc.Save(dstFileName)
</code>
      </example>
    </member>
    <member name="M:Aspose.Word.Reporting.MailMerge.Execute(System.String[],System.Object[])">
      <overloads>Performs a mail merge operation.</overloads>
      <summary>
Performs a mail merge operation.
</summary>
      <remarks>
        <p>Use this method to fill mail merge fields in the document with values from 
an array of objects.</p>
        <p>Note this method does not use mail merge regions and for multiple records the 
document will grow by repeating the whole document.</p>
      </remarks>
      <example>
        <code>
[C#]

//Fill the fields in the document with user data.
doc.MailMerge.Execute(
	new string[] {"FullName", "Company", "Address", "Address2", "City"},
	new object[] {fullNameEdit.Text, companyEdit.Text, addressEdit.Text, address2Edit.Text, cityEdit.Text});

//Save the document in Word format.
doc.Save("PersonalizedLetter.doc", SaveFormat.FormatDocument);

[Visual Basic]

'Fill the fields in the document with user data.
doc.MailMerge.Execute(
	New String() {"FullName", "Company", "Address", "Address2", "City"},
	New Object() {fullNameEdit.Text, companyEdit.Text, addressEdit.Text, address2Edit.Text, cityEdit.Text})

'Save the document in Word format.
doc.Save("PersonalizedLetter.doc", SaveFormat.FormatDocument)
</code>
      </example>
      <param name="fieldNames">Array of merge field names. Field names are not case sensitive.
If a field name that is not found in the document is encountered, it is ignored.</param>
      <param name="values">Array of values to be inserted into the merge fields.
Number of elements in this array must be the same as the number of elements in fieldNames.</param>
    </member>
    <member name="M:Aspose.Word.Reporting.MailMerge.Execute(System.Data.DataTable)">
      <summary>
Performs mail merge from a DataTable into the document.
</summary>
      <remarks>
        <p>Use this method to fill mail merge fields in the document with values from a <b>DataTable</b>.</p>
        <p>All records from the table are merged into the document.</p>
        <p>You can use NEXT field in the Word document to cause <b>MailMerge</b> object to select 
next record from the <b>DataTable</b> and continue merging. This can be used when creating 
documents such as mailing labels.</p>
        <p>When <b>MailMerge</b> object reaches end of the main document and there are still more 
rows in the <b>DataTable</b>, it copies entire content of the main document and appends it 
to the end of the destination document using a section break as a separator.</p>
      </remarks>
      <example>
        <code>
[C#]

//This example creates a table, but you would normally load table from a database. 
DataTable table = new DataTable("Test");
table.Columns.Add("FirstName");
table.Columns.Add("Location");
table.Rows.Add(new object[] {"James Bond", "MI5 Headquarters"});
table.Rows.Add(new object[] {"Roman Korchagin", "Auckland, Birkdale"});

//Field values from the table are inserted into the mail merge fields found in the document.
doc.MailMerge.Execute(table);
doc.Save(dstFileName);

[Visual Basic]

'This example creates a table, but you would normally load table from a database. 
Dim table As DataTable = New DataTable("Test") 
table.Columns.Add("FirstName")
table.Columns.Add("Location")
table.Rows.Add(New Object() {"James Bond", "MI5 Headquarters"})
table.Rows.Add(New Object() {"Roman Korchagin", "Auckland, Birkdale"})

'Field values from the table are inserted into the mail merge fields found in the document.
doc.MailMerge.Execute(table)
doc.Save(dstFileName)
</code>
      </example>
      <param name="table">Table that contains data to be inserted into mail merge fields.
Field names are not case sensitive.
If a field name that is not found in the document is encountered, it is ignored.</param>
    </member>
    <member name="M:Aspose.Word.Reporting.MailMerge.ExecuteADO(System.Object)">
      <summary>
Performs mail merge from an ADO Recordset object into the document.
</summary>
      <remarks>
        <p>This method is useful when you intend to use Aspose.Word classes as 
COM objects from unmanaged code such as an application built using
ASP or Visual Basic 6.0.</p>
        <p>For more information see description of MailMerge.Execute(DataTable).</p>
      </remarks>
      <example>
        <code>
[VBScript]

Dim RS
Set RS = CreateObject("ADODB.Recordset")
RS.Open _
	"SELECT TOP 50 * FROM Customers ORDER BY Country, CompanyName", _
	"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=Northwind.mdb"

Dim License
Set License = CreateObject("Aspose.Word.License")
License.SetLicense "C:\MyPath\MyLicense.lic"

Dim Word 
Set Word = CreateObject("Aspose.Word.Word")
Dim Doc
Set Doc = Word.Open("CustomerLabels.doc")

Doc.MailMerge.ExecuteADO RS
Doc.Save "C:\MyPath\CustomerLabels Out VBScript.doc"
</code>
      </example>
      <param name="recordset">ADO Recordset or Record object.</param>
    </member>
    <member name="M:Aspose.Word.Reporting.MailMerge.Execute(System.Data.IDataReader)">
      <summary>
Performs mail merge from IDataReader into the document.
</summary>
      <remarks>
        <p>You can pass <b>SqlDataReader</b> or <b>OleDbDataReader</b> object into this
method as a parameter because they both implemented <b>IDataReader</b> interface.</p>
        <p>Note this method does not use mail merge regions and for multiple records the 
document will grow by repeating the whole document.</p>
      </remarks>
      <example>
        <code>
[C#]

//Open the template document
Document doc = new Document(curPath + "\\..\\Documents\\CustomerLabels.doc");

OleDbConnection conn = null;
OleDbDataReader dataReader = null;
try
{
	//Open database connection.
	conn = new OleDbConnection(GetConnString());
	conn.Open();
	OleDbCommand cmd = new OleDbCommand(
		"SELECT TOP 50 * FROM Customers ORDER BY Country, CompanyName", conn);

	//Open the data reader.
	dataReader = cmd.ExecuteReader();

	//Perform the mail merge
	doc.MailMerge.Execute(dataReader);
}
finally
{
	if (dataReader != null)
		dataReader.Close();
	if (conn != null)
		conn.Close();
}

[Visual Basic]

'Open the template document
Dim doc As Document = new Document(curPath + "\\..\\Documents\\CustomerLabels.doc")

Dim conn As OleDbConnection = Nothing
Dim dataReader As OleDbDataReader = Nothing
Try
	'Open database connection.
	conn = New OleDbConnection(GetConnString())
	conn.Open()
	Dim cmd As OleDbCommand = New OleDbCommand( _
		"SELECT TOP 50 * FROM Customers ORDER BY Country, CompanyName", conn)

	'Open the data reader.
	dataReader = cmd.ExecuteReader()

	'Perform the mail merge
	doc.MailMerge.Execute(dataReader)
Finally
	If Not dataReader Is Nothing Then
		dataReader.Close()
	End If
	If Not conn Is Nothing Then
		conn.Close()
	End If
End Try

'This is useful if you want to delete any MERGEFIELD records that might
'be left at the end of the table.
doc.MailMerge.DeleteFields()
</code>
      </example>
      <param name="dataReader">Data source for the mail merge operation.</param>
    </member>
    <member name="M:Aspose.Word.Reporting.MailMerge.Execute(System.Data.DataView)">
      <summary>
Performs mail merge from a DataView into the document.
</summary>
      <remarks>
        <p>This method is useful if you retrieve data into a <b>DataTable</b> but then
need to apply a filter or sort before the mail merge.</p>
        <p>Note this method does not use mail merge regions and for multiple records the 
document will grow by repeating the whole document.</p>
      </remarks>
      <example>
        <code>
[C#]

DataView orderDetails = new DataView(GetTestOrderDetails());
orderDetails.Sort = "ExtendedPrice DESC";
doc.MailMerge.Execute(orderDetails);

[Visual Basic]

Dim orderDetails As DataView = New DataView(GetTestOrderDetails())
orderDetails.Sort = "ExtendedPrice DESC"
doc.MailMerge.Execute(orderDetails)

</code>
      </example>
      <param name="dataView">Data source for the mail merge operation.</param>
    </member>
    <member name="M:Aspose.Word.Reporting.MailMerge.Execute(System.Data.DataRow)">
      <summary>
Performs mail merge from a DataRow into the document.
</summary>
      <remarks>
        <p>Use this method to fill mail merge fields in the document with values from a <b>DataRow</b>.</p>
      </remarks>
      <param name="row">Row that contains data to be inserted into mail merge fields.
Field names are not case sensitive.
If a field name that is not found in the document is encountered, it is ignored.</param>
    </member>
    <member name="M:Aspose.Word.Reporting.MailMerge.ExecuteWithRegions(System.Data.DataSet)">
      <overloads>Performs a mail merge operation into a document with mail merge regions.</overloads>
      <summary>
Performs mail merge from a DataSet into a document with mail merge regions.
</summary>
      <remarks>
        <p>Use this method to perform mail merge from one or more tables into repeatable mail 
merge regions in the document. The mail merge regions inside the document will dynamically
grow to accomodate records in the corresponding tables.</p>
        <p>Every table in the DataSet must have a name.</p>
        <p>The document must have mail merge regions defined with names that refer to the tables
in the DataSet.</p>
        <p>To specify a mail merge region in the document you need to insert two mail merge fields
to mark beginning and end of the mail merge region.</p>
        <p>All document content that is included inside a mail merge region will be automatically 
repeated for every record in the DataTable.</p>
        <p>To mark beginning of a mail merge region insert a MERGEFIELD with name TableStart:MyTable,
where MyTable corresponds to one of the table names in your DataSet.</p>
        <p>To mark the end of the mail merge region insert another MERGEFIELD with name TableEnd:MyTable.</p>
        <p>To insert a MERGEFIELD in Word use Insert/Field command and select MergeField then type the
name of the field.</p>
        <p>Note that TableStart and TableEnd fields must be inside the same section in your document.</p>
        <p>If used inside a table, TableStart and TableEnd must be inside the same row in the table.</p>
        <p>Note that mail merge regions cannot be nested inside each other and they should be well
formed (there is always a pair of matching TableStart and TableEnd with the same table name).</p>
      </remarks>
      <example>
        <code>
[C#]

DataSet dataSet = new DataSet();

//Populate tables and add to the dataset.
dataSet.Tables.Add(GetTestOrder());
dataSet.Tables.Add(GetTestOrderDetails());
dataSet.Tables.Add(GetTestOrderTotals());

//The document should have mail merge regions designated with 
//MERGEFIELD TableStart:MyTableName and TableEnd:MyTableName.
Document doc = new Document(curPath + "\\..\\Documents\\Invoice.doc");

doc.MailMerge.ExecuteWithRegions(dataSet);

[Visual Basic]

Dim dataSet As dataSet = New dataSet()

'Populate tables and add to the dataset.
dataSet.Tables.Add(GetTestOrder())
dataSet.Tables.Add(GetTestOrderDetails())
dataSet.Tables.Add(GetTestOrderTotals())

'The document should have mail merge regions designated with 
'MERGEFIELD TableStart:MyTableName and TableEnd:MyTableName.
Dim doc As Document = new Document(curPath + "\\..\\Documents\\Invoice.doc")

doc.MailMerge.ExecuteWithRegions(dataSet)
</code>
      </example>
      <param name="dataSet">DataSet that contains data to be inserted into mail merge fields.</param>
    </member>
    <member name="M:Aspose.Word.Reporting.MailMerge.ExecuteWithRegions(System.Data.DataTable)">
      <summary>
Performs mail merge from a DataTable into the document with mail merge regions.
</summary>
      <remarks>
        <p>The document must have a mail merge region defined with name that matches 
<b>DataTable.TableName</b>.</p>
        <p>If there are other mail merge regions defined in the document they are left intact.
This allows to perform several mail merge operations.</p>
      </remarks>
      <example>
        <code>
[C#]

Document doc = new Document(curPath + "\\..\\Documents\\Invoice.doc");

//Perform several mail merge operations populating only part of the document each time.
doc.MailMerge.ExecuteWithRegions(GetTestOrder());
doc.MailMerge.ExecuteWithRegions(GetTestOrderTotals());

//This shows how to use a DataView for custom sort or filter, for example.
DataView orderDetails = new DataView(GetTestOrderDetails());
orderDetails.Sort = "ExtendedPrice DESC";
doc.MailMerge.ExecuteWithRegions(orderDetails);

[Visual Basic]

Dim doc As Document = new Document(curPath + "\\..\\Documents\\Invoice.doc")

'Perform several mail merge operations populating only part of the document each time.
doc.MailMerge.ExecuteWithRegions(GetTestOrder())
doc.MailMerge.ExecuteWithRegions(GetTestOrderTotals())

'This shows how to use a DataView for custom sort or filter, for example.
Dim orderDetails As DataView = New DataView(GetTestOrderDetails())
orderDetails.Sort = "ExtendedPrice DESC"
doc.MailMerge.ExecuteWithRegions(orderDetails)
</code>
      </example>
      <param name="dataTable">Data source for the mail merge operation. The table must
have its <b>TableName</b> property set.</param>
    </member>
    <member name="M:Aspose.Word.Reporting.MailMerge.ExecuteWithRegionsADO(System.Object,System.String)">
      <summary>
Performs mail merge from an ADO Recordset object into the document with mail merge regions.
</summary>
      <remarks>
        <p>This method is useful when you intend to use Aspose.Word classes as 
COM objects from unmanaged code such as an application built using
ASP or Visual Basic 6.0.</p>
        <p>For more information see description of MailMerge.ExecuteWithRegions(DataTable).</p>
      </remarks>
      <example>
        <code>
[VBScript]

Dim RS
Set RS = CreateObject("ADODB.Recordset")
RS.Open _
	"SELECT * FROM AsposeWordOrderDetails WHERE OrderId = 10444 ORDER BY ProductID", _
	"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=Northwind.mdb"

Dim Word 
Set Word = CreateObject("Aspose.Word.Word")

Dim Doc
Set Doc = Word.Open("Invoice.doc")

Doc.MailMerge.ExecuteWithRegionsADO RS, "OrderDetails"
Doc.Save "Invoice Out VBScript.doc"
</code>
      </example>
      <param name="recordset">ADO Recordset or Record object.</param>
      <param name="tableName">Name of the mail merge region in the document to populate.</param>
    </member>
    <member name="M:Aspose.Word.Reporting.MailMerge.ExecuteWithRegions(System.Data.DataView)">
      <summary>
Performs mail merge from a DataView into the document with mail merge regions.
</summary>
      <remarks>
        <p>This method is useful if you retrieve data into a <b>DataTable</b> but then
need to apply a filter or sort before the mail merge.</p>
        <p>The document must have a mail merge region defined with name that matches 
<b>DataView.Table.TableName</b>.</p>
        <p>If there are other mail merge regions defined in the document they are left intact.
This allows to perform several mail merge operations.</p>
      </remarks>
      <example>
        <code>
[C#]

Document doc = new Document(curPath + "\\..\\Documents\\Invoice.doc");

//Perform several mail merge operations populating only part of the document each time.
doc.MailMerge.ExecuteWithRegions(GetTestOrder());
doc.MailMerge.ExecuteWithRegions(GetTestOrderTotals());

//This shows how to use a DataView for custom sort or filter, for example.
DataView orderDetails = new DataView(GetTestOrderDetails());
orderDetails.Sort = "ExtendedPrice DESC";
doc.MailMerge.ExecuteWithRegions(orderDetails);

[Visual Basic]

Dim doc As Document = new Document(curPath + "\\..\\Documents\\Invoice.doc")

'Perform several mail merge operations populating only part of the document each time.
doc.MailMerge.ExecuteWithRegions(GetTestOrder())
doc.MailMerge.ExecuteWithRegions(GetTestOrderTotals())

'This shows how to use a DataView for custom sort or filter, for example.
Dim orderDetails As DataView = New DataView(GetTestOrderDetails())
orderDetails.Sort = "ExtendedPrice DESC"
doc.MailMerge.ExecuteWithRegions(orderDetails)
</code>
      </example>
      <param name="dataView">Data source for the mail merge operation. The source table
of the <b>DataView</b> must have its <b>TableName</b> property set.</param>
    </member>
    <member name="M:Aspose.Word.Reporting.MailMerge.ExecuteWithRegions(System.Data.IDataReader,System.String)">
      <summary>
Performs mail merge from IDataReader into the document with mail merge regions.
</summary>
      <remarks>
        <p>You can pass <b>SqlDataReader</b> or <b>OleDbDataReader</b> object into this
method as a parameter because they both implemented <b>IDataReader</b> interface.</p>
      </remarks>
      <param name="dataReader">Source of the data records for mail merge such as OleDbDataReader or SqlDataReader.</param>
      <param name="tableName">Name of the mail merge region in the document to populate.</param>
    </member>
    <member name="M:Aspose.Word.Reporting.MailMerge.GetFieldNames">
      <summary>
Returns a collection of mail merge field names available in the document. 
Supports extended syntax in field names. 
</summary>
      <remarks>
        <p>Returns full merge field names including optional prefix. Does not eliminate duplicate field names.</p>
        <p>A new string[] array is created on every call.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Reporting.MailMerge.DeleteFields">
      <summary>
Removes mail merge related fields from the document.
</summary>
      <remarks>
        <p>This method removes MERGEFIELD and NEXT fields from the document.</p>
        <p>This method could be useful if your mail merge operation does not always need
to populate all fields in the document. Use this method to remove all remaining
mail merge fields.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Reporting.MailMerge.RemoveEmptyParagraphs">
      <summary>
Specifies whether paragraphs that contained mail merge fields with no
data should be removed from the document.
</summary>
    </member>
    <member name="P:Aspose.Word.Reporting.MailMerge.UseNonMergeFields">
      <summary>
When true, specifies that in addition to MERGEFIELD fields, mail merge is performed into some other types of fields.
</summary>
      <remarks>
        <p>Normally, mail merge is only performed into MERGEFIELD fields, but several customers had their reporting
built using other fields and had many documents created this way. To simplify migration (and because this 
approach was independetly used by several customers) the ability to mail merge into other fields was introduced.</p>
        <p>When <b>UseNonMergeFields</b> is set to true, mail merge will be performed into the following fields:</p>
        <p>MERGEFIELD FieldName</p>
        <p>MACROBUTTON NOMACRO FieldName</p>
        <p>IF 0 = 0 "{FieldName}" ""</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Reporting.MailMerge.MappedDataFields">
      <summary>
            Returns a collection that represents mapped data fields for the mail merge operation.
            </summary>
      <remarks>
        <p>
            Mapped data fields allow to automatically map between names of fields in your data source
            and names of mail merge fields in the document.
            </p>
      </remarks>
    </member>
    <member name="E:Aspose.Word.Reporting.MailMerge.MergeField">
      <summary>
Occurs during mail merge when a simple mail merge field is encountered in the document.
</summary>
    </member>
    <member name="E:Aspose.Word.Reporting.MailMerge.MergeImageField">
      <summary>
Occurs during mail merge when an image mail merge field is encountered in the document.
</summary>
    </member>
    <member name="T:Aspose.Word.Node">
      <summary>
            Base class for all nodes of a Word document.
            </summary>
      <remarks>
        <p>A document is represented as a tree of nodes, similar to DOM or XmlDocument.</p>
        <p>For more info see the Composite design pattern.</p>
        <p>The Node class:</p>
        <list type="bullet">
          <item>Defines the child node interface.</item>
          <item>Defines the interface for visiting nodes.</item>
          <item>Provides default cloning capability.</item>
          <item>Implements parent node and owner document mechanisms.</item>
          <item>Implements access to sibling nodes.</item>
        </list>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Node.Clone(System.Boolean)">
      <summary>
Creates a duplicate of the node.
</summary>
      <param name="isCloneChildren">True to recursively clone the subtree under the specified node; 
false to clone only the node itself.</param>
      <returns>The cloned node.</returns>
      <remarks>
        <p>This method serves as a copy constructor for nodes. 
The cloned node has no parent, but belongs to the same document as the original node.</p>
        <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
specifies whether to perform copy all child nodes as well.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Node.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
Accepts a visitor.
</summary>
      <param name="visitor">The visitor that will visit the nodes.</param>
      <returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
      <remarks>
        <p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Node.GetText">
      <summary>
             Gets the text of this node and of all its children.
             </summary>
      <remarks>
        <p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Word.ControlChar" />.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Node.GetAncestor(System.Type)">
      <summary>
            Gets the first ancestor of the specified type.
            </summary>
      <param name="ancestorType">The type of the ancestor to retrieve.</param>
      <returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
      <remarks>
        <p>The ancestor type matches if it is equal to ancestorType or derived from ancestorType.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Node.Remove">
      <summary>
            Removes itself from the parent.
            </summary>
    </member>
    <member name="P:Aspose.Word.Node.NodeType">
      <summary>
            Gets the type of this node.
            </summary>
    </member>
    <member name="P:Aspose.Word.Node.ParentNode">
      <summary>
            Gets the immediate parent of this node.
            </summary>
      <remarks>
        <p>If a node has just been created and not yet added to the tree, 
            or if it has been removed from the tree, the parent is null.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Node.Document">
      <summary>
            Gets the document to which this node belongs.
            </summary>
      <remarks>
        <p>The node always belongs to a document even if it has just been created
            and not yed added to the tree, or if it has been removed from the tree.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Node.PreviousSibling">
      <summary>
            Gets the node immediately preceding this node.
            </summary>
      <remarks>
        <p>If there is no preceding node, a null is returned.</p>
        <note>Calculating the value of this property iterates from the first child node of ParenNode 
            to this node.</note>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Node.NextSibling">
      <summary>
            Gets the node immediately following this node.
            </summary>
      <remarks>
            If there is no next node, a null is returned.
            </remarks>
    </member>
    <member name="P:Aspose.Word.Node.IsComposite">
      <summary>
            Returns true if this node can contain other nodes.
            </summary>
      <value>This method returns false as Node cannot have child nodes.</value>
    </member>
    <member name="P:Aspose.Word.Node.HasInnerText">
      <summary>
Returns true if the node or one of the child nodes contain text excluding paragraph, cell and section breaks. 
</summary>
      <remarks>
        <p>This operation is faster than getting all text and comparing to an empty string.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Node.Range">
      <summary>
            Returns a <b>Range</b> object that represents the portion of a document that is contained in this node.
            </summary>
    </member>
    <member name="T:Aspose.Word.Reporting.MappedDataFields">
      <summary>
            Allows to automatically map between names of fields in your data source
            and names of mail merge fields in the document.
            </summary>
      <remarks>
        <p>
            This is implemented as a collection of string keys into string values.
            The keys are the names of mail merge fields in the document and the values
            are the names of fields in your data source.
            </p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Reporting.MappedDataFields.Add(System.String,System.String)">
      <summary>
            Adds a new field mapping.
            </summary>
      <param name="documentFieldName">The name of the mail merge field in the document.</param>
      <param name="dataSourceFieldName">The name of the field in the data source.</param>
    </member>
    <member name="M:Aspose.Word.Reporting.MappedDataFields.Remove(System.String)">
      <summary>
            Removes a field mapping.
            </summary>
      <param name="documentFieldName">The name of the mail merge field in the document.</param>
    </member>
    <member name="P:Aspose.Word.Reporting.MappedDataFields.Item(System.String)">
      <summary>
            Gets or sets the name of the field in the data source associated with the specified mail merge field.
            </summary>
    </member>
    <member name="T:Aspose.Word.Reporting.MergeFieldEventHandler">
      <summary>
            Represents the method that will handle the MergeField event.
            </summary>
    </member>
    <member name="T:Aspose.Word.Reporting.MergeFieldEventArgs">
      <summary>
            Provides data for the <b>MergeField</b> event.
            </summary>
      <remarks>
        <p>
            The <b>MergeField</b> event occurs during mail merge when a simple mail merge
            field is encountered in the document. You can respond to this event to return
            text for the mail merge engine to insert into the document.
            </p>
      </remarks>
    </member>
    <member name="T:Aspose.Word.Reporting.MergeFieldEventArgsBase">
      <summary>
            Base class for <see cref="T:Aspose.Word.Reporting.MergeFieldEventArgs" /> and <see cref="T:Aspose.Word.Reporting.MergeImageFieldEventArgs" />.
            </summary>
    </member>
    <member name="P:Aspose.Word.Reporting.MergeFieldEventArgsBase.Document">
      <summary>
            Returns the <see cref="P:Aspose.Word.Reporting.MergeFieldEventArgsBase.Document" /> object for which the mail merge is performed.
            </summary>
    </member>
    <member name="P:Aspose.Word.Reporting.MergeFieldEventArgsBase.TableName">
      <summary>
            Gets the name of the data table for the current merge operation or empty string if the name is not available.
            </summary>
    </member>
    <member name="P:Aspose.Word.Reporting.MergeFieldEventArgsBase.RecordIndex">
      <summary>
            Gets the zero based index of the record that is being merged.
            </summary>
    </member>
    <member name="P:Aspose.Word.Reporting.MergeFieldEventArgsBase.FieldName">
      <summary>
            Gets the name of the merge field in the data source.
            </summary>
      <remarks>
        <p>If you have a mapping from a document field name to a different data source field name, 
            then this is the mapped field name.</p>
        <p>If you specified a field name prefix, for example "Image:MyFieldName" in the document,
            then <b>FieldName</b> returns field name without the prefix, that is "MyFieldName".</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Reporting.MergeFieldEventArgsBase.DocumentFieldName">
      <summary>
            Gets the name of the merge field as specified in the document.
            </summary>
      <remarks>
        <p>If you have a mapping from a document field name to a different data source field name,
            then this is the original field name as specified in the document.</p>
        <p>If you specified a field name prefix, for example "Image:MyFieldName" in the document,
            then <b>DocumentFieldName</b> returns field name without the prefix, that is "MyFieldName".</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Reporting.MergeFieldEventArgsBase.FieldValue">
      <summary>
            Gets the value of the field from the data source.
            </summary>
      <remarks>
            This property contains a value that has just been selected from your data source
            for this field by the mail merge engine.
            </remarks>
    </member>
    <member name="P:Aspose.Word.Reporting.MergeFieldEventArgsBase.Field">
      <summary>
            Gets the object that represents the current merge field.
            </summary>
    </member>
    <member name="P:Aspose.Word.Reporting.MergeFieldEventArgs.Text">
      <summary>
            Gets or sets the text that will be inserted into the document for the current merge field.
            </summary>
      <remarks>
        <p>When your event handler is called, this property is set to null.</p>
        <p>If you leave Text as null, the mail merge engine will insert <see cref="P:Aspose.Word.Reporting.MergeFieldEventArgsBase.FieldValue" /> in place of the merge field.</p>
        <p>If you set Text to a non empty string, the string will be inserted into the document in place of the merge field.</p>
        <p>If you set Text to an empty string, the mail merge engine will remove the merge field.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Word.Reporting.MergeImageFieldEventHandler">
      <summary>
            Represents the method that will handle the MergeImageField event.
            </summary>
    </member>
    <member name="T:Aspose.Word.Reporting.MergeImageFieldEventArgs">
      <summary>
            Provides data for the <b>MergeImageField</b> event.
            </summary>
      <remarks>
        <p>
            The <b>MergeImageField</b> event occurs during mail merge when an image mail merge
            field is encountered in the document. You can respond to this event to return a
            file name, stream, or an <b>Image</b> object to the mail merge engine so it is
            inserted into the document.
            </p>
        <p>
            There are three properties avaialable <b>ImageFileName</b>, <b>ImageStream</b> and
            <b>Image</b> to specify where the image must be taken from. Set only one of these properties.
            </p>
        <p>
            To insert an image mail merge field into a document in Word, select Insert/Field command,
            then select MergeField and type Image:MyFieldName.
            </p>
      </remarks>
      <example>
            This example shows how to insert images stored in a database BLOB field into the report.
            <code>
            [C#]
            
            Open database connection.
            conn = new OleDbConnection(GetConnString());
            conn.Open();
            OleDbCommand cmd = new OleDbCommand("SELECT * FROM Employees", conn);
            
            //Open the data reader. It needs to be in the normal mode that reads all record at once.
            dataReader = cmd.ExecuteReader();
            
            //Set up the event handler for image fields and perform mail merge.
            doc.MailMerge.MergeImageField += new MergeImageFieldEventHandler(HandleMergeEmployeePhoto);
            doc.MailMerge.ExecuteWithRegions(dataReader, "Employees");
            
            ...
            
            //This is called when mail merge engine encounters Image:XXX merge field in the document.
            //You have a chance to return an Image object, file name or a stream that contains the image.
            private void HandleMergeEmployeePhoto(object sender, MergeImageFieldEventArgs e)
            {
            	//The field value is a byte array, just cast it and create a stream on it.
            	MemoryStream imageStream = new MemoryStream((byte[])e.FieldValue);
            	//Now the mail merge engine will retrieve the image from the stream.
            	e.ImageStream = imageStream; 
            }
            
            [VB]
            
            'Open database connection.
            conn = New OleDbConnection(GetConnString())
            conn.Open()
            Dim cmd As OleDbCommand = New OleDbCommand("SELECT * FROM Employees", conn)
            
            'Open the data reader. It needs to be in the normal mode that reads all record at once.
            dataReader = cmd.ExecuteReader()
            
            'Set up the event handler for image fields and perform mail merge.
            AddHandler doc.MailMerge.MergeImageField, AddressOf HandleMergeEmployeePhoto
            doc.MailMerge.ExecuteWithRegions(dataReader, "Employees")
            
            ...
            
            'This is called when mail merge engine encounters Image:XXX field in the document.
            'You have a chance to return an Image object, file name or a stream that contains the image.
            Private Sub HandleMergeEmployeePhoto(ByVal sender As Object, ByVal e As MergeImageFieldEventArgs)
            	'The field value is a byte array, just cast it and create a stream on it.
            	Dim imageStream As MemoryStream = New MemoryStream(CType(e.FieldValue, Byte()))
            	'Now the mail merge engine will retrieve the image from the stream.
            	e.ImageStream = imageStream
            End Sub
            </code></example>
    </member>
    <member name="P:Aspose.Word.Reporting.MergeImageFieldEventArgs.ImageFileName">
      <summary>
            Sets the file name of the image that the mail merge engine must insert into the document.
            </summary>
    </member>
    <member name="P:Aspose.Word.Reporting.MergeImageFieldEventArgs.ImageStream">
      <summary>
            Specifies the stream for the mail merge engine to read an image from.
            </summary>
    </member>
    <member name="P:Aspose.Word.Reporting.MergeImageFieldEventArgs.Image">
      <summary>
            Specifies the image that the mail merge engine must insert into the document.
            </summary>
    </member>
    <member name="T:Aspose.Word.Style">
      <summary>
            Represents a single built-in or user-defined style.
            </summary>
    </member>
    <member name="P:Aspose.Word.Style.Name">
      <summary>
            Gets the name of the style. 
            </summary>
      <remarks>
            Names of built-in styles in documents created in different languages of MS Word can be different.
            <seealso cref="P:Aspose.Word.Style.StyleIdentifier" /></remarks>
    </member>
    <member name="P:Aspose.Word.Style.StyleIdentifier">
      <summary>
            Gets the locale independent style identifier.
            </summary>
    </member>
    <member name="P:Aspose.Word.Style.Type">
      <summary>
            Gets the style tpe (paragraph or character).
            </summary>
    </member>
    <member name="P:Aspose.Word.Style.BaseStyle">
      <summary>
            Gets/sets the name of the style this style is based on.
            </summary>
      <remarks>
            This will be an empty string if the style is not based on any other style and it can be set 
            to an empty string.
            </remarks>
    </member>
    <member name="P:Aspose.Word.Style.NextParagraphStyle">
      <summary>
            Gets/sets the name of the style to be applied automatically to a new paragraph inserted after a 
            paragraph formatted with the specified style. 
            </summary>
      <remarks>
            This property is not used by Aspose.Word. The next paragraph style will only
            be applied automatically when you edit the document in MS Word.
            </remarks>
    </member>
    <member name="P:Aspose.Word.Style.BuiltIn">
      <summary>
            True if the specified object is one of the built-in styles in MS Word.
            </summary>
    </member>
    <member name="P:Aspose.Word.Style.Font">
      <summary>
            Gets the character formatting of the style.
            </summary>
    </member>
    <member name="P:Aspose.Word.Style.ParagraphFormat">
      <summary>
            Gets the paragraph formatting of the style.
            </summary>
      <remarks>
            This property is not applicable for character styles.
            </remarks>
    </member>
    <member name="T:Aspose.Word.Styles">
      <summary>
            A collection of Style objects that represent both the built-in and user-defined styles in a document.
            </summary>
      <dev>
            At the moment the styles are identified by istd (style index) that never changes (it only changes
            when importing a style from another document). Will it be better if I used a string name as an
            identifier? Note however, it should not change once it has been assigned, otherwise will need to
            update all references to the style in the model.
            
            It is not ideal that this model class has some raw binary attributes (as read from the DOC file),
            but there is no other way in this case, see notes in StyleFiler for more info.
            </dev>
    </member>
    <member name="M:Aspose.Word.Styles.Add(Aspose.Word.StyleType,System.String)">
      <summary>
            Creates a new user defined style and adds it the collection. 
            </summary>
      <param name="type">The type of the style to create.</param>
      <param name="name">Case sensitive name of the style to create.</param>
      <remarks>
        <p>Throws an exception if a style with this name already exists.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Styles.Add(Aspose.Word.Style)">
      <summary>
            Adds the style to the collection of styles.
            </summary>
    </member>
    <member name="P:Aspose.Word.Styles.Count">
      <summary>
            Gets the number of styles in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Word.Styles.Item(System.String)">
      <overloads>Retrieves a style from the collection.</overloads>
      <summary>
            Gets a style by name or alias.
            </summary>
      <remarks>
        <p>Case sensitive, returns null if the style with the given name is not found.</p>
        <p>If this is an English name of a built in style that does not yet exist, automatically creates it.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Styles.Item(Aspose.Word.StyleIdentifier)">
      <summary>
            Gets a built-in style by its locale independent identifier.
            </summary>
      <remarks>
            When accessing a style that does not yet exist, automatically creates it.
            </remarks>
    </member>
    <member name="P:Aspose.Word.Styles.Item(System.Int32)">
      <summary>
            Gets a style by index.
            </summary>
      <dev>
            Gets by index, not by istd.
            </dev>
    </member>
    <member name="T:Aspose.Word.Body">
      <summary>
            Represents a container for the main text of a section.
            </summary>
      <remarks>
        <p>
          <b>Body</b> can contain <b>Paragraph</b> and <b>Table</b> child nodes.</p>
        <p>
          <b>Body</b> is a section-level node and can only be a child of <b>Section</b>. 
            There can only be one <b>Body</b> in a <b>Section</b>.</p>
        <p>A minimal valid <b>Body</b> needs to contain at least one <b>Paragraph</b>.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Word.Story">
      <summary>
            Base class for section-level stories.
            </summary>
      <remarks>
        <p>Text of a Word document is stored in several stories. 
            The main text is stored in the main text story represented by <see cref="T:Aspose.Word.Body" />, 
            each header and footer is stored in a separate story represented by <see cref="T:Aspose.Word.HeaderFooter" />.</p>
        <p>
          <b>Story</b> is a container for block-level nodes <see cref="T:Aspose.Word.Paragraph" /> and <see cref="T:Aspose.Word.Table" />.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Word.CompositeNode">
      <summary>
            Base class for nodes that can contain other nodes.
            </summary>
      <remarks>
        <p>A document is represented as a tree of nodes, similar to DOM or XmlDocument.</p>
        <p>For more info see the Composite design pattern.</p>
        <p>The CompositeNode class:</p>
        <list type="bullet">
          <item>Provides access to the child nodes.</item>
          <item>Implements Composite operations such as insert and remove children.</item>
          <item>Provides methods for XPath navigation.</item>
        </list>
      </remarks>
      <dev>
            Maintains a pointer to the list of children.
            
            Provides helper methods to insert or remove a whole range of nodes.
            
            Inserting and removing children are the most important features here.
            
            Public API methods for insert and remove verify the arguments well and raise the insert/delete 
            node events to the owner document.
            
            The child nodes are stored in a single linked list and the composite node knows only its last child. 
            This approach was taken from XmlElement. Inserting or removing a node just means updating the 
            NextSibling and ParentNode of the appropriate nodes.
            
            Note that navigating forward via NextSibling is fast, while navigating backward via PreviousSibling 
            is slow because it requires traversal of all children starting from the FirstChild.  
            I presume that users don't need to traverse the document backward too often. 
            Note that due to the same reason InsertAfter is normally faster than InsertBefore.
            </dev>
    </member>
    <member name="M:Aspose.Word.CompositeNode.Clone(System.Boolean)">
      <summary>
Creates a duplicate of the node.
</summary>
      <param name="isCloneChildren">True to recursively clone the subtree under the specified node; 
false to clone only the node itself.</param>
      <returns>The cloned node.</returns>
      <remarks>
        <p>This method serves as a copy constructor for nodes. 
The cloned node has no parent, but belongs to the same document as the original node.</p>
        <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
specifies whether to perform copy all child nodes as well.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.CompositeNode.GetText">
      <summary>
             Gets the text of this node and of all its children.
             </summary>
      <remarks>
        <p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Word.ControlChar" />.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.CompositeNode.GetChildNodes(Aspose.Word.NodeType,System.Boolean)">
      <summary>
            Returns a collection of child nodes that match the specified type.
            </summary>
      <param name="nodeType">The type of nodes to select.</param>
      <param name="isDeep">True to select from all child nodes recursively. 
            False to select only among immediate children. </param>
      <returns>A live collection of child nodes of the specified type.</returns>
    </member>
    <member name="M:Aspose.Word.CompositeNode.GetChild(Aspose.Word.NodeType,System.Int32,System.Boolean)">
      <summary>
            Returns an Nth child node that matches the specified type.
            </summary>
      <param name="nodeType">The type of the child node.</param>
      <param name="index">Zero based index of the child node to select. 
            Negative indexes are also allowed and indicate access from the end, 
            that is -1 means the last node.</param>
      <param name="isDeep">True to select from all child nodes recursively. 
            False to select only among immediate children. </param>
      <returns>The child node that matches the criteria or null if no matching node is found.</returns>
      <remarks>
        <p>If index is out of range, a null is returned.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.CompositeNode.SelectNodes(System.String)">
      <summary>
            Selects a list of nodes matching the XPath expression.
            </summary>
      <param name="xpath">The XPath expression.</param>
      <returns>A list of nodes matching the XPath query.</returns>
    </member>
    <member name="M:Aspose.Word.CompositeNode.SelectSingleNode(System.String)">
      <summary>
            Selects the first Node that matches the XPath expression.
            </summary>
      <param name="xpath">The XPath expression.</param>
      <returns>The first Node that matches the XPath query or null if no matching node is found.</returns>
    </member>
    <member name="M:Aspose.Word.CompositeNode.GetEnumerator">
      <summary>
            Provides support for the for each style iteration over the child nodes of this node.
            </summary>
    </member>
    <member name="M:Aspose.Word.CompositeNode.AppendChild(Aspose.Word.Node)">
      <summary>
            Adds the specified node to the end of the list of child nodes for this node.
            </summary>
      <param name="newChild">The node to add.</param>
      <returns>The node added.</returns>
      <remarks>
        <p>If the newChild is already in the tree, it is first removed.</p>
        <p>If the node being inserted was created from another document, you should use 
<see cref="M:Aspose.Word.Document.ImportNode(Aspose.Word.Node,System.Boolean)" /> to import the node to the current document. 
The imported node can then be inserted into the current document.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.CompositeNode.PrependChild(Aspose.Word.Node)">
      <summary>
            Adds the specified node to the beginning of the list of child nodes for this node.
            </summary>
      <param name="newChild">The node to add.</param>
      <returns>The node added.</returns>
      <remarks>
        <p>If the newChild is already in the tree, it is first removed.</p>
        <p>If the node being inserted was created from another document, you should use 
<see cref="M:Aspose.Word.Document.ImportNode(Aspose.Word.Node,System.Boolean)" /> to import the node to the current document. 
The imported node can then be inserted into the current document.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.CompositeNode.InsertAfter(Aspose.Word.Node,Aspose.Word.Node)">
      <summary>
            Inserts the specified node immediately after the specified reference node.
            </summary>
      <param name="newChild">The Node to insert.</param>
      <param name="refChild">The Node that is the reference node. The newNode is placed after the refNode. </param>
      <returns>The inserted node.</returns>
      <remarks>
        <p>If refChild is null, inserts newChild at the beginning of the list of child nodes.</p>
        <p>If the newChild is already in the tree, it is first removed.</p>
        <p>If the node being inserted was created from another document, you should use 
<see cref="M:Aspose.Word.Document.ImportNode(Aspose.Word.Node,System.Boolean)" /> to import the node to the current document. 
The imported node can then be inserted into the current document.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.CompositeNode.InsertBefore(Aspose.Word.Node,Aspose.Word.Node)">
      <summary>
            Inserts the specified node immediately before the specified reference node.
            </summary>
      <param name="newChild">The Node to insert.</param>
      <param name="refChild">The Node that is the reference node. The newChild is placed before this node.</param>
      <returns>The inserted node.</returns>
      <remarks>
        <p>If refChild is null, inserts newChild at the end of the list of child nodes.</p>
        <p>If the newChild is already in the tree, it is first removed.</p>
        <p>If the node being inserted was created from another document, you should use 
<see cref="M:Aspose.Word.Document.ImportNode(Aspose.Word.Node,System.Boolean)" /> to import the node to the current document. 
The imported node can then be inserted into the current document.</p>
        <note>InsertBefore could be slower than InsertAfter because
            it needs to iterate over all nodes from the first child to the reference node.</note>
      </remarks>
    </member>
    <member name="M:Aspose.Word.CompositeNode.RemoveChild(Aspose.Word.Node)">
      <summary>
            Removes the specified child node.
            </summary>
      <param name="oldChild">The node to remove.</param>
      <returns>The removed node.</returns>
      <remarks>
        <p>The parent of oldChild is set to null after the node is removed.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.CompositeNode.RemoveAllChildren">
      <summary>
            Removes all the child nodes of the current node.
            </summary>
    </member>
    <member name="M:Aspose.Word.CompositeNode.InsertAfter(Aspose.Word.Node,Aspose.Word.Node,Aspose.Word.Node)">
      <summary>
            Inserts nodes starting from the start node up to, but not including the end node 
            into this node after the reference node.
            </summary>
      <param name="start">Node to start moving from.</param>
      <param name="end">Can be null to indicate move all from start to the end.</param>
      <param name="refNode">The nodes will be inserted after this node.</param>
    </member>
    <member name="P:Aspose.Word.CompositeNode.IsComposite">
      <summary>
            Returns true as this node can have child nodes.
            </summary>
    </member>
    <member name="P:Aspose.Word.CompositeNode.HasChildNodes">
      <summary>
            Returns true if this node has any child nodes.
            </summary>
    </member>
    <member name="P:Aspose.Word.CompositeNode.ChildNodes">
      <summary>
            Gets all immediate child nodes of this node. 
            </summary>
      <remarks>
        <p>If there are no child nodes, this property returns an empty collection.</p>
        <p>ChildNodes is equivalent to calling <c>GetChildNodes(NodeType.Any, false)</c>.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.CompositeNode.FirstChild">
      <summary>
            Gets the first child of the node.
            </summary>
      <remarks>
            If there is no first child node, a null is returned.
            </remarks>
    </member>
    <member name="P:Aspose.Word.CompositeNode.LastChild">
      <summary>
            Gets the last child of the node.
            </summary>
      <remarks>
            If there is no last child node, a null is returned.
            </remarks>
    </member>
    <member name="P:Aspose.Word.CompositeNode.HasInnerText">
      <summary>
Returns true if the node or one of the child nodes contain text excluding paragraph, cell and section breaks. 
</summary>
      <remarks>
        <p>This operation is faster than getting all text and comparing to an empty string.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Story.Clone(System.Boolean)">
      <summary>
Creates a duplicate of the node.
</summary>
      <param name="isCloneChildren">True to recursively clone the subtree under the specified node; 
false to clone only the node itself.</param>
      <returns>The cloned node.</returns>
      <remarks>
        <p>This method serves as a copy constructor for nodes. 
The cloned node has no parent, but belongs to the same document as the original node.</p>
        <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
specifies whether to perform copy all child nodes as well.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Story.DeleteShapes">
      <summary>
            Deletes all floating shapes from the text of this story.
            </summary>
    </member>
    <member name="P:Aspose.Word.Story.StoryType">
      <summary>
            Gets the type of this story.
            </summary>
    </member>
    <member name="P:Aspose.Word.Story.ParentSection">
      <summary>
            Gets the parent section of this story.
            </summary>
      <remarks>
        <p>
          <b>ParentSection</b> is equivalent to <c>(Section)ParentNode</c>.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Story.Paragraphs">
      <summary>
            Gets a collection of paragraphs that are immediate children of the story.
            </summary>
    </member>
    <member name="P:Aspose.Word.Story.Tables">
      <summary>
            Gets a collection of tables that are immediate children of the story.
            </summary>
    </member>
    <member name="M:Aspose.Word.Body.#ctor(Aspose.Word.Document)">
      <summary>
            Initializes a new instance of the <b>Body</b> class.
            </summary>
      <param name="doc">The owner document.</param>
      <remarks>
        <p>When <b>Body</b> is created, it belongs to the specified document, but is not 
            yet part of the document and <b>ParentNode</b> is null.</p>
        <p>To append <b>Body</b> to a <b>Section</b> use Section.InsertAfter or Section.InsertBefore.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Body.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
Accepts a visitor.
</summary>
      <param name="visitor">The visitor that will visit the nodes.</param>
      <returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
      <remarks>
        <p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
      <remarks>
            Calls DocumentVisitor.VisitBodyStart, then calls Accept for all child nodes of the section
            and calls DocumentVisitor.VisitBodyEnd at the end.
            </remarks>
    </member>
    <member name="M:Aspose.Word.Body.EnsureMinimum">
      <summary>
            If <b>Body</b> contains no paragraphs, creates and appends one empty <b>Paragraph</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.Body.NodeType">
      <summary>
            Returns <b>NodeType.Body</b>.
            </summary>
    </member>
    <member name="T:Aspose.Word.Bookmark">
      <summary>
            Represents a single bookmark.
            </summary>
      <remarks>
        <p>
          <b>Bookmark</b> is a "facade" object that encapsulates two nodes <b>BookmarkStart</b>
            and <b>BookmarkEnd</b> in a document tree and allows to work with a bookmark
            as a single object.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Bookmark.Remove">
      <summary>
            Removes the bookmark from the document. Does not remove text inside the bookmark.
            </summary>
    </member>
    <member name="P:Aspose.Word.Bookmark.Name">
      <summary>
            Gets the name of the bookmark.
            </summary>
      <remarks>
            Note that if you change the name of a bookmark to a name that already exists in the document,
            no error will be given and only the first bookmark will be stored when you save the document.
            </remarks>
    </member>
    <member name="P:Aspose.Word.Bookmark.Text">
      <summary>
            Gets/sets the text enclosed in the bookmark.
            </summary>
    </member>
    <member name="P:Aspose.Word.Bookmark.BookmarkStart">
      <summary>
            Gets the node that represents the start of the bookmark.
            </summary>
    </member>
    <member name="P:Aspose.Word.Bookmark.BookmarkEnd">
      <summary>
            Gets the node that represents the end of the bookmark.
            </summary>
    </member>
    <member name="T:Aspose.Word.BookmarkEnd">
      <summary>
            Represents an end of a bookmark in a Word document.
            </summary>
      <remarks>
        <p>A complete bookmark in a Word document consists of a <b>BookmarkStart</b>
            and a matching <b>BookmarkEnd</b> with the same bookmark name.</p>
        <p>
          <b>BookmarkStart</b> and <b>BookmarkEnd</b> are just markers inside a document
            that specify where the bookmark starts and ends.</p>
        <p>Use the <see cref="T:Aspose.Word.Bookmark" /> class as a "facade" to work with a bookmark
            as a single object.</p>
        <note>Currently bookmarks are only supported in <b>Body</b> (main text story)
            of the document.</note>
        <note>Currently bookmarks are supported only at the inline-level, that is 
            inside <b>Paragraph</b>. However <b>BookmarkStart</b> and <b>BookmarkEnd</b>
            can be in different paragraphs.</note>
      </remarks>
    </member>
    <member name="M:Aspose.Word.BookmarkEnd.#ctor(Aspose.Word.Document,System.String)">
      <summary>
            Initializes a new instance of the <b>BookmarkEnd</b> class.
            </summary>
      <param name="doc">The owner document.</param>
      <param name="name">The name of the bookmark.</param>
    </member>
    <member name="M:Aspose.Word.BookmarkEnd.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
            Accepts a visitor.
            </summary>
      <param name="visitor">The visitor that will visit the node.</param>
      <returns>False if the visitor requested the enumeration to stop.</returns>
      <remarks>
        <p>Calls DocumentVisitor.VisitBookmarkEnd.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.BookmarkEnd.NodeType">
      <summary>
            Returns <b>NodeType.BookmarkEnd</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.BookmarkEnd.Name">
      <summary>
            Gets the name of the bookmark.
            </summary>
    </member>
    <member name="T:Aspose.Word.Bookmarks">
      <summary>
            A collection of <see cref="T:Aspose.Word.Bookmark" /> objects that represent the bookmarks in the specified range.
            </summary>
    </member>
    <member name="M:Aspose.Word.Bookmarks.Remove(Aspose.Word.Bookmark)">
      <summary>
            Removes the specified bookmark from the document.
            </summary>
      <param name="bookmark">The bookmark to remove.</param>
    </member>
    <member name="M:Aspose.Word.Bookmarks.Remove(System.String)">
      <summary>
            Removes a bookmark with the specified name.
            </summary>
      <param name="bookmarkName">The case-insensitive name of the bookmark to remove.</param>
    </member>
    <member name="M:Aspose.Word.Bookmarks.RemoveAt(System.Int32)">
      <summary>
            Removes a bookmark at the specified index.
            </summary>
      <param name="index">The zero-based index of the bookmark to remove.</param>
    </member>
    <member name="P:Aspose.Word.Bookmarks.Count">
      <summary>
            Returns the number of bookmarks in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Word.Bookmarks.Item(System.Int32)">
      <summary>
            Returns a bookmark at the specified index.
            </summary>
      <param name="index">An index into the collection.</param>
      <remarks>
        <p>The index is zero-based.</p>
        <p>Negative indexes are allowed and indicate access from the back of the collection. 
For example -1 means the last item, -2 means the second before last and so on.</p>
        <p>If index is greater than or equal to the number of items in the list, this returns a null reference.</p>
        <p>If index is negative and its absolute value is greater than the number of items in the list, this returns a null reference.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Bookmarks.Item(System.String)">
      <summary>
            Returns a bookmark by name.
            </summary>
      <param name="bookmarkName">Case-insensitive name of the bookmark.</param>
      <remarks>
        <p>Returns null if the bookmark with the specified name cannot be found.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Word.BookmarkStart">
      <summary>
            Represents a start of a bookmark in a Word document.
            </summary>
      <remarks>
        <p>A complete bookmark in a Word document consists of a <b>BookmarkStart</b>
            and a matching <b>BookmarkEnd</b> with the same bookmark name.</p>
        <p>
          <b>BookmarkStart</b> and <b>BookmarkEnd</b> are just markers inside a document
            that specify where the bookmark starts and ends.</p>
        <p>Use the <see cref="P:Aspose.Word.BookmarkStart.Bookmark" /> class as a "facade" to work with a bookmark
            as a single object.</p>
        <note>Currently bookmarks are only supported in <b>Body</b> (main text story)
            of the document.</note>
        <note>Currently bookmarks are supported only at the inline-level, that is 
            inside <b>Paragraph</b>. However <b>BookmarkStart</b> and <b>BookmarkEnd</b>
            can be in different paragraphs.</note>
      </remarks>
    </member>
    <member name="M:Aspose.Word.BookmarkStart.#ctor(Aspose.Word.Document,System.String)">
      <summary>
            Initializes a new instance of the <b>BookmarkStart</b> class.
            </summary>
      <param name="doc">The owner document.</param>
      <param name="name">The name of the bookmark.</param>
    </member>
    <member name="M:Aspose.Word.BookmarkStart.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
            Accepts a visitor.
            </summary>
      <param name="visitor">The visitor that will visit the node.</param>
      <returns>False if the visitor requested the enumeration to stop.</returns>
      <remarks>
        <p>Calls DocumentVisitor.VisitBookmarkStart.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.BookmarkStart.GetText">
      <summary>
            Returns an empty string.
            </summary>
      <returns>An empty string.</returns>
    </member>
    <member name="P:Aspose.Word.BookmarkStart.NodeType">
      <summary>
            Returns <b>NodeType.BookmarkStart</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.BookmarkStart.Name">
      <summary>
            Get the bookmark name.
            </summary>
    </member>
    <member name="P:Aspose.Word.BookmarkStart.Bookmark">
      <summary>
            Gets the facade object that encapsulates this bookmark start and end.
            </summary>
    </member>
    <member name="T:Aspose.Word.Cell">
      <summary>
            Represents a table cell.
            </summary>
      <remarks>
        <p>
          <b>Cell</b> can only be a child of a <b>Row</b>.</p>
        <p>
          <b>Cell</b> can contain block-level nodes <b>Paragraph</b> and <b>Table</b>.</p>
        <p>A minimal valid cell needs to have at least one <b>Paragraph</b>.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Cell.#ctor(Aspose.Word.Document)">
      <summary>
            Initializes a new instance of the <b>Cell</b> class.
            </summary>
      <param name="doc">The owner document.</param>
      <remarks>
        <p>When <b>Cell</b> is created, it belongs to the specified document, but is not 
            yet part of the document and <b>ParentNode</b> is null.</p>
        <p>To append <b>Cell</b> to the document use InsertAfter or InsertBefore 
            on the row where you want the cell inserted.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Cell.Clone(System.Boolean)">
      <summary>
Creates a duplicate of the node.
</summary>
      <param name="isCloneChildren">True to recursively clone the subtree under the specified node; 
false to clone only the node itself.</param>
      <returns>The cloned node.</returns>
      <remarks>
        <p>This method serves as a copy constructor for nodes. 
The cloned node has no parent, but belongs to the same document as the original node.</p>
        <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
specifies whether to perform copy all child nodes as well.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Cell.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
Accepts a visitor.
</summary>
      <param name="visitor">The visitor that will visit the nodes.</param>
      <returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
      <remarks>
        <p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
      <remarks>
            Calls DocumentVisitor.VisitCellStart, then calls Accept for all child nodes of the section
            and calls DocumentVisitor.VisitCellEnd at the end.
            </remarks>
    </member>
    <member name="M:Aspose.Word.Cell.EnsureMinimum">
      <summary>
            If the <b>Cell</b> has no paragraphs, creates and appends one <b>Paragraph</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.Cell.NodeType">
      <summary>
            Returns <b>NodeType.Cell</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.Cell.ParentRow">
      <summary>
            Returns the immediate parent row of the cell.
            </summary>
      <remarks>Equivalent to <c>(Row)ParentNode</c>.</remarks>
    </member>
    <member name="P:Aspose.Word.Cell.FirstParagraph">
      <summary>
            Gets the first paragraph among the immediate children.
            </summary>
    </member>
    <member name="P:Aspose.Word.Cell.LastParagraph">
      <summary>
            Gets the last paragraph among the immediate children.
            </summary>
    </member>
    <member name="P:Aspose.Word.Cell.IsFirstCell">
      <summary>
            True if this is the first cell inside a row; false otherwise.
            </summary>
    </member>
    <member name="P:Aspose.Word.Cell.IsLastCell">
      <summary>
            True if this is the last cell inside a row; false otherwise;
            </summary>
    </member>
    <member name="P:Aspose.Word.Cell.CellFormat">
      <summary>
            Provides access to the formatting properties of the cell.
            </summary>
    </member>
    <member name="P:Aspose.Word.Cell.Paragraphs">
      <summary>
            Gets a collection of paragraphs that are immediate children of the cell.
            </summary>
    </member>
    <member name="P:Aspose.Word.Cell.Tables">
      <summary>
            Gets a collection of tables that are immediate children of the cell.
            </summary>
    </member>
    <member name="T:Aspose.Word.Cells">
      <summary>
            Provides typed access to a collection of <see cref="T:Aspose.Word.Cell" /> nodes.
            </summary>
    </member>
    <member name="T:Aspose.Word.NodeCollection">
      <summary>
            Represents a "live" collection of nodes of a specific type.
            </summary>
      <remarks>
        <p>
          <b>NodeCollection</b> does not own the nodes it contains, rather, is just a selection of nodes 
            of the specified type, but the nodes are stored in the tree under their respective parent nodes.</p>
        <p>
          <b>NodeCollection</b> supports indexed access, iteration and provides add and remove methods.</p>
        <p>The <b>NodeCollection</b> collection is "live"; that is, changes to the children of the node object 
            that it was created from are immediately reflected in the nodes returned by the <b>NodeCollection</b>
            properties and methods.</p>
        <p>
          <b>NodeCollection</b> is returned by <see cref="M:Aspose.Word.CompositeNode.GetChildNodes(Aspose.Word.NodeType,System.Boolean)" /> and also
            serves as a base class for typed node collections such as <see cref="T:Aspose.Word.Sections" />, <see cref="T:Aspose.Word.Paragraphs" /> etc.</p>
        <p>
          <b>NodeCollection</b> can be "flat" and contain only immediate children of the node it was created
            from, or it can be "deep" and contain all descendant children.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.NodeCollection.Add(Aspose.Word.Node)">
      <summary>
            Adds a node to the end of the collection.
            </summary>
      <param name="node">The node to be added to the end of the collection.</param>
      <exception cref="T:System.NotSupportedException">The <b>NodeCollection</b> is a "deep" collection.</exception>
      <remarks>
        <p>The node is inserted as a child into the node object from which the collection was created.</p>
        <p>If the newChild is already in the tree, it is first removed.</p>
        <p>If the node being inserted was created from another document, you should use 
<see cref="M:Aspose.Word.Document.ImportNode(Aspose.Word.Node,System.Boolean)" /> to import the node to the current document. 
The imported node can then be inserted into the current document.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.NodeCollection.Insert(System.Int32,Aspose.Word.Node)">
      <summary>
            Inserts a node into the collection at the specified index.
            </summary>
      <param name="index">The zero-based index of the node.
            Negative indexes are allowed and indicate access from the back of the list. 
            For example -1 means the last node, -2 means the second before last and so on.</param>
      <param name="node">The node to insert.</param>
      <exception cref="T:System.NotSupportedException">The <b>NodeCollection</b> is a "deep" collection.</exception>
      <remarks>
        <p>The node is inserted as a child into the node object from which the collection was created.</p>
        <p>If the newChild is already in the tree, it is first removed.</p>
        <p>If the node being inserted was created from another document, you should use 
<see cref="M:Aspose.Word.Document.ImportNode(Aspose.Word.Node,System.Boolean)" /> to import the node to the current document. 
The imported node can then be inserted into the current document.</p>
        <p>If the index is equal to or greater than Count, the node is added at the end of the collection.</p>
        <p>If the index is negative and its absolute value is greater than Count, the node is added at the end of the collection.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.NodeCollection.Remove(Aspose.Word.Node)">
      <summary>
            Removes the node from the collection.
            </summary>
      <param name="node">The node to remove.</param>
    </member>
    <member name="M:Aspose.Word.NodeCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the node at the specified index from the collection.
            </summary>
      <param name="index">The zero-based index of the node.
            Negative indexes are allowed and indicate access from the back of the list. 
            For example -1 means the last node, -2 means the second before last and so on.</param>
    </member>
    <member name="M:Aspose.Word.NodeCollection.Clear">
      <summary>
            Removes all nodes from the collection.
            </summary>
    </member>
    <member name="M:Aspose.Word.NodeCollection.Contains(Aspose.Word.Node)">
      <summary>
            Determines whether a node is in the collection.
            </summary>
      <param name="node">The node to locate.</param>
      <returns>True if item is found in the collection; otherwise, false.</returns>
      <remarks>
        <p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.NodeCollection.IndexOf(Aspose.Word.Node)">
      <summary>
            Returns the zero-based index of the specified node.
            </summary>
      <param name="node">The node to locate.</param>
      <returns>The zero-based index of the node within the collection, if found; otherwise, -1.</returns>
      <remarks>
        <p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.NodeCollection.GetEnumerator">
      <summary>
            Provides a simple "foreach" style iteration over the collection of nodes.
            </summary>
      <returns>An IEnumerator.</returns>
    </member>
    <member name="P:Aspose.Word.NodeCollection.Item(System.Int32)">
      <summary>
            Retrieves a node at the given index.
            </summary>
      <param name="index">An index into the collection of nodes.</param>
      <remarks>
        <p>The index is zero-based.</p>
        <p>Negative indexes are allowed and indicate access from the back of the collection. 
For example -1 means the last item, -2 means the second before last and so on.</p>
        <p>If index is greater than or equal to the number of items in the list, this returns a null reference.</p>
        <p>If index is negative and its absolute value is greater than the number of items in the list, this returns a null reference.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.NodeCollection.Count">
      <summary>
            Gets the number of nodes in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Word.Cells.Item(System.Int32)">
      <summary>
            Retrieves a <b>Cell</b> at the given index.
            </summary>
      <param name="index">An index into the collection.</param>
      <remarks>
        <p>The index is zero-based.</p>
        <p>Negative indexes are allowed and indicate access from the back of the collection. 
For example -1 means the last item, -2 means the second before last and so on.</p>
        <p>If index is greater than or equal to the number of items in the list, this returns a null reference.</p>
        <p>If index is negative and its absolute value is greater than the number of items in the list, this returns a null reference.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Word.Comment">
      <summary>
            Represents a container for text of a comment.
            </summary>
      <remarks>
        <p>
          <b>Comment</b> is an inline-level node and can only be a child of <b>Paragraph</b>.</p>
        <p>
          <b>Comment</b> can contain <b>Paragraph</b> and <b>Table</b> child nodes.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Word.InlineStory">
      <summary>
            Base class for inline-level nodes that can contain paragraphs and tables.
            </summary>
      <remarks>
        <p>
          <b>InlineStory</b> is a container for block-level nodes <see cref="T:Aspose.Word.Paragraph" /> and <see cref="T:Aspose.Word.Table" />.</p>
        <p>The classes that derive from <b>InlineStory</b> are inline-level nodes that can contain 
            their own text (paragraphs and tables). For example <b>Shape</b> can have shape text and 
            <b>Footnote</b> can have footnote text.</p>
        <p>
          <b>InlineStory</b> is represented by an anchor character in a <b>Paragraph</b>.</p>
      </remarks>
      <dev>
            This should probably add \x0005, \x0008 etc as their first character. 
            This would allow Range to position cursor in the main text before shape, 
            at the beginning of the shape text, at the end of the shape text and after the 
            shape text in the main text.
            </dev>
    </member>
    <member name="M:Aspose.Word.InlineStory.Clone(System.Boolean)">
      <summary>
Creates a duplicate of the node.
</summary>
      <param name="isCloneChildren">True to recursively clone the subtree under the specified node; 
false to clone only the node itself.</param>
      <returns>The cloned node.</returns>
      <remarks>
        <p>This method serves as a copy constructor for nodes. 
The cloned node has no parent, but belongs to the same document as the original node.</p>
        <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
specifies whether to perform copy all child nodes as well.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.InlineStory.StoryType">
      <summary>
            Returns the type of the story.
            </summary>
    </member>
    <member name="P:Aspose.Word.InlineStory.ParentParagraph">
      <summary>
            Returns the immediate parent paragraph.
            </summary>
      <remarks>Equivalent to <c>(Paragraph)ParentNode</c>.</remarks>
    </member>
    <member name="P:Aspose.Word.InlineStory.FirstParagraph">
      <summary>
            Gets the first paragraph in the story.
            </summary>
    </member>
    <member name="P:Aspose.Word.InlineStory.LastParagraph">
      <summary>
            Gets the last paragraph in the story.
            </summary>
    </member>
    <member name="P:Aspose.Word.InlineStory.Paragraphs">
      <summary>
            Gets a collection of paragraphs that are immediate children of the story.
            </summary>
    </member>
    <member name="P:Aspose.Word.InlineStory.Tables">
      <summary>
            Gets a collection of tables that are immediate children of the story.
            </summary>
    </member>
    <member name="M:Aspose.Word.Comment.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
Accepts a visitor.
</summary>
      <param name="visitor">The visitor that will visit the nodes.</param>
      <returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
      <remarks>
        <p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
      <remarks>
            Calls DocumentVisitor.VisitCommentStart, then calls Accept for all child nodes of the comment
            and calls DocumentVisitor.VisitCommentEnd at the end.
            </remarks>
    </member>
    <member name="P:Aspose.Word.Comment.NodeType">
      <summary>
            Returns <b>NodeType.Comment</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.Comment.StoryType">
      <summary>
            Returns <b>StoryType.Comments</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.Comment.Initial">
      <summary>
            Returns or sets the initials of the user associated with a specific comment.
            </summary>
    </member>
    <member name="P:Aspose.Word.Comment.Date">
      <summary>
            TODO 1 Gets the date and time that the comment was made.
            </summary>
    </member>
    <member name="P:Aspose.Word.Comment.Author">
      <summary>
            Returns or sets the author name for a comment.
            </summary>
    </member>
    <member name="T:Aspose.Word.Document">
      <summary>
Represents a Word document.
</summary>
      <remarks>
        <p>The <b>Document</b> is a central object in the Aspose.Word library.</p>
        <p>The following document formats are supported:</p>
        <list type="bullet">
          <item>Microsoft Word 97 and higher binary DOC format.</item>
          <item>HTML with inline CSS styles.</item>
          <item>Export to Aspose.Pdf.Xml for further conversion to PDF.</item>
        </list>
        <p>To open an existing DOC or HTML document, pass a file name or a stream into one of the <b>Document</b>
constructors. To create a blank document, call the constructor without parameters.</p>
        <p>Use one of the Save method overloads to save the document in DOC, HTML or Aspose.Pdf.Xml format.
When the document is saved in Aspose.Pdf.Xml format, it can be converted into PDF using 
<see href="http://www.aspose.com/Products/Aspose.Pdf/">Aspose.Pdf</see> (purchased separately).</p>
        <p>
          <see cref="P:Aspose.Word.Document.MailMerge" /> is the Aspose.Word's reporting engine that allows to populate
reports designed in Microsoft Word with data from various data sources quickly and easily.
The data can be from a DataSet, DataTable, DataView, IDataReader or an array of values.
<b>MailMerge</b> will go through the records found in the data source and insert them into 
mail merge fields in the document growing it as necessary.</p>
        <p>
          <b>Document</b> stores document-wide information such as <see cref="P:Aspose.Word.Document.Styles" />, 
<see cref="P:Aspose.Word.Document.BuiltInDocumentProperties" />, <see cref="P:Aspose.Word.Document.CustomDocumentProperties" />, lists and macros. 
Most of these objects are accessible via the corresponding properties of the <b>Document</b>.</p>
        <p>The <b>Document</b> is a root node of a tree that contains all other nodes of the document.
The tree is a Composite design pattern and in many ways similar to XmlDocument. 
The content of the document can be manipulated freely programmatically:</p>
        <list type="bullet">
          <item>The nodes of the document can be accessed via typed collections, for example <see cref="P:Aspose.Word.Document.Sections" />,
<see cref="T:Aspose.Word.Paragraphs" /> etc.</item>
          <item>The nodes of the document can be selected by their node type using <see cref="M:Aspose.Word.CompositeNode.GetChildNodes(Aspose.Word.NodeType,System.Boolean)" />
or using an XPath query with <see cref="M:Aspose.Word.CompositeNode.SelectNodes(System.String)" /> or <see cref="M:Aspose.Word.CompositeNode.SelectSingleNode(System.String)" />.</item>
          <item>Content nodes can be added or removed from anywhere in the document using 
<see cref="M:Aspose.Word.CompositeNode.InsertBefore(Aspose.Word.Node,Aspose.Word.Node)" />, <see cref="M:Aspose.Word.CompositeNode.InsertAfter(Aspose.Word.Node,Aspose.Word.Node)" />, <see cref="M:Aspose.Word.CompositeNode.RemoveChild(Aspose.Word.Node)" /> and other 
methods provided by the base class <see cref="T:Aspose.Word.CompositeNode" />.</item>
          <item>The formatting attributes of each node can be changed via the properties of that node.</item>
        </list>
        <p>Consider using <see cref="T:Aspose.Word.DocumentBuilder" /> that simplifies the task of programmatically creating 
or populating the document tree.</p>
        <p>The <b>Document</b> can contain only <see cref="T:Aspose.Word.Section" /> objects.</p>
        <p>In Microsoft Word, a valid document needs to have at least one section.</p>
      </remarks>
      <example>
        <code>
[C#]

//Open precreated designer file.
Document doc = new Document(MapPath("") + "\\PersonalizedLetter.doc");

//Fill the fields in the document with user data.
doc.MailMerge.Execute(
	new string[] {"FullName", "Company", "Address", "Address2", "City"},
	new object[] {fullNameEdit.Text, companyEdit.Text, addressEdit.Text, address2Edit.Text, cityEdit.Text});

//Send the document in Word format to the client browser.
doc.Save(
	"PersonalizedLetter.doc", 
	SaveFormat.FormatDocument, 
	(saveTypeBtn.SelectedIndex == 0) ? SaveType.OpenInBrowser : SaveType.OpenInWord,
	this.Response);

[Visual Basic]

'Open precreated designer file.
Dim doc As Document = new Document(MapPath("") + "\\PersonalizedLetter.doc")

'Fill the fields in the document with user data.
doc.MailMerge.Execute( _
	New String() {"FullName", "Company", "Address", "Address2", "City"}, _
	New Object() {fullNameEdit.Text, companyEdit.Text, addressEdit.Text, address2Edit.Text, cityEdit.Text})

'Send the document in Word format to the client browser.
doc.Save( _
	"PersonalizedLetter.doc", _
	SaveFormat.FormatDocument, _
	IIf(saveTypeBtn.SelectedIndex = 0, SaveType.OpenInBrowser, SaveType.OpenInWord), _
	Me.Response)
</code>
      </example>
    </member>
    <member name="M:Aspose.Word.Document.#ctor(System.Boolean)">
      <summary>
            Ctor that allows to create a completely empty document node or load a blank document.
            </summary>
    </member>
    <member name="M:Aspose.Word.Document.#ctor">
      <overloads>Creates or loads a document.</overloads>
      <summary>
Creates a blank Word document.
</summary>
      <remarks>
        <p>The document paper size is Letter by default. If you want to change page setup, use
<see cref="P:Aspose.Word.Section.PageSetup">Section.PageSetup</see>.</p>
        <p>After creation, you can use <see cref="T:Aspose.Word.DocumentBuilder" /> to add document content easily.</p>
      </remarks>
      <example>
        <code>
[C#]

Document doc = new Document();
DocumentBuilder builder = new DocumentBuilder(doc);

//Specify font formatting for the hyperlink.
builder.Font.Color = System.Drawing.Color.Blue;
builder.Font.Underline = Underline.Single;

//Insert the link.
builder.InsertHyperlink("Aspose Website", "http://www.aspose.com", false);

//Clear hyperlink formatting.
builder.Font.ClearFormatting();

doc.Save("Test.doc");

[VB]

Document doc = new Document()
Dim builder As DocumentBuilder =  New DocumentBuilder(doc) 

'Specify font formatting for the hyperlink.
builder.Font.Color = System.Drawing.Color.Blue
builder.Font.Underline = Underline.Single

'Insert the link.
builder.InsertHyperlink("Aspose Website", "http://www.aspose.com", False)

'Clear hyperlink formatting.
builder.Font.ClearFormatting()

doc.Save("Test.doc")
</code>
      </example>
      <dev>
            Main public ctor, loads an empty document.
            </dev>
    </member>
    <member name="M:Aspose.Word.Document.#ctor(System.String)">
      <summary>
Opens an existing document from a file. Automatically detects the file format.
</summary>
      <param name="fileName">File name of the document to open.</param>
      <remarks>
        <p>The file can be in DOC or HTML format.</p>
      </remarks>
      <example>
        <code>
[C#]

Document doc = new Document(fileName);

[Visual Basic]

Dim doc as Document = new Document(fileName)
</code>
      </example>
    </member>
    <member name="M:Aspose.Word.Document.#ctor(System.String,Aspose.Word.LoadFormat,System.String)">
      <summary>
Opens an existing document from a file.
</summary>
      <param name="fileName">File name of the document to open.</param>
      <param name="loadFormat">The format of the document.</param>
      <param name="password">A password to open an encrypted Word document. Pass null or empty string
if the document is not encrypted.</param>
      <remarks>
        <p>If you know the format of the document upfront, you can use this constructor
and specify the format. It will work slightly faster than
other constructors that detect the format of the file automatically.</p>
        <p>Use this constructor to open an encrypted Microsoft Word document. You need to know
the password to open an encrypted document. If the document is not encrypted, pass null or empty string.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Document.#ctor(System.IO.Stream)">
      <summary>
Opens an existing document from a stream. Automatically detects the file format.
</summary>
      <param name="stream">Stream where to load the document from.</param>
      <remarks>
        <p>The file can be in DOC or HTML format.</p>
      </remarks>
      <example>
        <code>
[C#]

Document doc = new Document(stream);

[Visual Basic]

Dim doc as Document = new Document(stream)
</code>
      </example>
    </member>
    <member name="M:Aspose.Word.Document.#ctor(System.IO.Stream,System.String)">
      <summary>
Opens an existing document from a stream. Automatically detects the file format.
</summary>
      <param name="stream">The stream where to load the document from.</param>
      <param name="baseUri">The base URI. Can be null or empty string.</param>
      <remarks>
        <p>The file can be in DOC or HTML format.</p>
        <p>The <i>baseUri</i> parameter is used to resolve relative URIs found in the document 
to absolute URIs in the following cases:</p>
        <list type="number">
          <item>When loading an HTML document from a stream and the document contains images with 
relative URIs and does not have a base URI specified in the BASE HTML element, 
the <i>baseUri</i> parameter is used to find the images.</item>
          <item>When saving in HTML or PDF format, <i>baseUri</i> is used to find images linked in the 
document using relative paths.</item>
        </list>
      </remarks>
      <example>
        <code>
[C#]

Document doc = new Document(stream, "http://www.aspose.com/MyFile.html");

[Visual Basic]

Dim doc as Document = new Document(stream, "http://www.aspose.com/MyFile.html")
</code>
      </example>
    </member>
    <member name="M:Aspose.Word.Document.#ctor(System.IO.Stream,System.String,Aspose.Word.LoadFormat,System.String)">
      <summary>
Opens an existing document from a stream. 
</summary>
      <param name="stream">The stream where to load the document from.</param>
      <param name="baseUri">The base URI. Can be null or empty string.</param>
      <param name="loadFormat">The format of the document.</param>
      <param name="password">A password to open an encrypted Word document. Pass null or empty string
if the document is not encrypted.</param>
      <remarks>
        <p>The <i>baseUri</i> parameter is used to resolve relative URIs found in the document 
to absolute URIs.</p>
        <p>If you know the format of the document upfront, you can use this constructor
and specify the format. It will work slightly faster than
other constructors that detect the format of the file automatically.</p>
        <p>Use this constructor to open an encrypted Microsoft Word document. You need to know
the password to open an encrypted document. If the document is not encrypted, pass null or empty string.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Document.Clone(System.Boolean)">
      <summary>
Creates a duplicate of the document.
</summary>
      <param name="isCloneChildren">True to recursively clone the content of the document; 
false to clone only the document node and document-wide objects styles, lists, document properties etc.</param>
      <returns>The cloned document.</returns>
      <remarks>
        <p>If you need to generate many documents from a single document,
just load the document into memory once, clone it and populate the cloned
document with your data. This speeds up generation of documents because there is 
no need to load and parse the document from file every time.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Document.Clone">
      <summary>
Performs a deep copy of the <see cref="T:Aspose.Word.Document" />.
</summary>
      <returns>The cloned document.</returns>
      <dev>Kept to remain compatiable with the old API.</dev>
    </member>
    <member name="M:Aspose.Word.Document.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
Accepts a visitor.
</summary>
      <param name="visitor">The visitor that will visit the nodes.</param>
      <returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
      <remarks>
        <p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
      <remarks>
            Calls DocumentVisitor.VisitDocumentStart, then calls Accept for all child nodes of the document
            and calls DocumentVisitor.VisitDocumentEnd at the end.
            </remarks>
    </member>
    <member name="M:Aspose.Word.Document.DetectFileFormat(System.String)">
      <summary>
Detects and returns the format of a file.
</summary>
      <param name="fileName">The file name.</param>
      <returns>The detected file format.</returns>
      <remarks>
        <p>Detection of DOC format checks for the signature of a Microsoft Word binary document.</p>
        <p>Detection of HTML format tries to find "&lt;html" within the 
first 512 bytes of the file. It will not recognize HTML in Unicode encoding.</p>
        <p>Detection of RTF format checks for "{\rtf" at the beginning of the document.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Document.DetectFileFormat(System.IO.Stream)">
      <summary>
Detects and returns the format of a file.
</summary>
      <param name="stream">The stream.</param>
      <returns>The detected file format.</returns>
      <remarks>
        <p>Detection of DOC format checks for the signature of a Microsoft Word binary document.</p>
        <p>Detection of HTML format tries to find "&lt;html" within the 
first 512 bytes of the file. It will not recognize HTML in Unicode encoding.</p>
        <p>Detection of RTF format checks for "{\rtf" at the beginning of the document.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Document.Save(System.String)">
      <overloads>Saves the document.</overloads>
      <summary>
Saves the document to a file in Micrsoft Word format.
</summary>
      <example>
        <code>
[C#]

Document doc = new Document(srcFileName);

//... do something

doc.Save(dstFileName);

[Visual Basic]

Dim doc as Document =  new Document(srcFileName)

'... do something

doc.Save(dstFileName)
</code>
      </example>
      <param name="fileName">The name for the document. If a document with the 
specified file name already exists, the existing document is overwritten.</param>
    </member>
    <member name="M:Aspose.Word.Document.Save(System.String,Aspose.Word.SaveFormat)">
      <summary>
Saves the document with a new name or format.
</summary>
      <example>
        <code>
[C#]

Document doc = new Document(srcFileName);

//... do something

doc.Save(dstFileName, SaveFormat.FormatDocument);

[Visual Basic]

Dim doc as Document = new Document(srcFileName)

'... do something

doc.Save(dstFileName, SaveFormat.FormatDocument)
</code>
      </example>
      <param name="fileName">The name for the document. If a document with the 
specified file name already exists, the existing document is overwritten.</param>
      <param name="fileFormat">The format in which the document is saved.</param>
      <remarks>
        <p>
          <see cref="P:Aspose.Word.Document.SaveOptions" /> allows to specify additional options when saving a file.</p>
        <seealso cref="P:Aspose.Word.Document.SaveOptions" />
      </remarks>
    </member>
    <member name="M:Aspose.Word.Document.Save(System.IO.Stream,Aspose.Word.SaveFormat)">
      <summary>
Saves the document to a stream.
</summary>
      <param name="stream">Stream where to save the document.</param>
      <param name="fileFormat">The format in which the document is saved.</param>
      <remarks>
        <p>
          <see cref="P:Aspose.Word.Document.SaveOptions" /> allows to specify additional options when saving a file.</p>
        <seealso cref="P:Aspose.Word.Document.SaveOptions" />
      </remarks>
    </member>
    <member name="M:Aspose.Word.Document.Save(System.Object,Aspose.Word.SaveFormat)">
      <summary>
Saves the document to a file or to a stream. Use from COM clients (ASP for example).
</summary>
      <param name="destination">Can be a file name or a <see cref="T:System.IO.Stream" />.</param>
      <param name="fileFormat">The format in which to save the document.</param>
      <remarks>
        <p>Use this overload if you want to save the document to a .NET stream
or a file from an ASP page or other COM client.</p>
        <p>Note that there are several Save overloads and for COM clients this method will 
be available as <b>Save_4</b>.</p>
        <p>
          <see cref="P:Aspose.Word.Document.SaveOptions" /> allows to specify additional options when saving a file.</p>
        <seealso cref="P:Aspose.Word.Document.SaveOptions" />
      </remarks>
      <example>
        <code>
[ASP]

&lt;%@ LANGUAGE="VBScript" %&gt;
&lt;%

Option Explicit

Dim doc
Set doc = CreateObject("ASpose.Word.Document")

'Create a .NET memory stream to save the document to.
Dim stream
Set stream = CreateObject("System.IO.MemoryStream")

'Save the document to the stream.
'0 save in DOC format
'1 - TXT format
'3 - HTML format
doc.Save_4 stream, 0

'Specify the document type.
Response.ContentType = "application/msword"
'Other options:
'Response.ContentType = "text/plain"
'Response.ContentType = "text/html"

'Specify how the document is sent to the browser.
Response.AddHeader "content-disposition","attachment; filename=MyDocument.doc"
'Another option could be:
'Response.AddHeader("content-disposition","inline; filename=MyDocument.doc"); 

'Get data bytes from the stream and send it to the response.
Dim bytes
bytes = stream.ToArray()
Response.BinaryWrite(bytes)

Response.End
%&gt;
</code>
      </example>
    </member>
    <member name="M:Aspose.Word.Document.Save(System.String,Aspose.Word.SaveFormat,Aspose.Word.SaveType,System.Web.HttpResponse)">
      <summary>
Sends the document to the client browser.
</summary>
      <param name="fileName">The name for the document that will appear at the client browser.
The name should not contain path.</param>
      <param name="fileFormat">The format in which to send the document.</param>
      <param name="saveType">Specifies how the document is presented at the client browser.</param>
      <param name="response">Response object where to save the document.</param>
    </member>
    <member name="M:Aspose.Word.Document.ImportNode(Aspose.Word.Node,System.Boolean)">
      <overloads>Imports a node from another document to the current document.</overloads>
      <summary>
        <P>Imports a node from another document to the current document.</P>
      </summary>
      <param name="srcNode">The node being imported.</param>
      <param name="isImportChildren">True to import all child nodes recursively; otherwise, false.</param>
      <returns>The cloned node that belongs to the current document.</returns>
      <remarks>
        <p>This method uses the <see cref="F:Aspose.Word.ImportFormatMode.UseDestinationStyles">ImportFormatMode.UseDestinationStyles</see> 
option to resolve formatting.</p>
      </remarks>
      <!-- No matching elements were found for the following include tag -->
      <include file="Ue\Document.xml" path="Topics/Topic[@name=&quot;Document.ImportNodeCommonRemarks)&quot;]/*" />
    </member>
    <member name="M:Aspose.Word.Document.ImportNode(Aspose.Word.Node,System.Boolean,Aspose.Word.ImportFormatMode)">
      <summary>
        <P>Imports a node from another document to the current document with an option to control formatting.</P>
      </summary>
      <param name="srcNode">The node being imported.</param>
      <param name="isImportChildren">True to import all child nodes recursively; otherwise, false.</param>
      <param name="importFormatMode">Specifies how to merge style formatting that clashes.</param>
      <returns>The cloned node that belongs to the current document.</returns>
      <remarks>
        <p>This overload is useful to control how styles and formatting are imported.</p>
        <seealso cref="T:Aspose.Word.ImportFormatMode" />
      </remarks>
      <!-- No matching elements were found for the following include tag -->
      <include file="Ue\Document.xml" path="Topics/Topic[@name=&quot;Document.ImportNodeCommonRemarks)&quot;]/*" />
    </member>
    <member name="M:Aspose.Word.Document.EnsureMinimum">
      <summary>
If the document contains no sections, creates one section with one paragraph.
</summary>
    </member>
    <member name="M:Aspose.Word.Document.AcceptAllRevisions">
      <summary>
Accepts all tracked changes in the document.
</summary>
    </member>
    <member name="M:Aspose.Word.Document.Protect(Aspose.Word.ProtectionType)">
      <summary>
Protects the document from changes. 
</summary>
      <remarks>
        <p>When a document is protected, the user can make only limited changes, 
such as adding annotations, making revisions, or completing a form.</p>
        <p>When you protect a document, and the document does not have a protection password,
Aspose.Word assigns a random password that makes it impossible to unprotect the document 
in MS Word, but you still can unprotect the document in Aspose.Word as it does not 
require a password when unprotecting.</p>
        <p>When you protect a document, and the document already has a protection password,
the existing protection password is not changed.</p>
      </remarks>
      <param name="type">The protection type for the specified document.</param>
    </member>
    <member name="M:Aspose.Word.Document.Unprotect">
      <summary>
Removes protection from the document. 
</summary>
      <remarks>
This method unprotects the document even if it has a protection password.
</remarks>
    </member>
    <member name="M:Aspose.Word.Document.UpdateWordCount">
      <summary>
            Updates word count properties of the document.
            </summary>
      <remarks>
        <p>
          <b>UpdateWordCount</b> recalculates and updates Characters, Words and Paragraphs
            properties in the <see cref="P:Aspose.Word.Document.BuiltInDocumentProperties" /> collection of the <b>Document</b>.</p>
        <p>Note that <b>UpdateWordCount</b> does not update number of lines and pages properties.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Document.NodeType">
      <summary>
Returns <b>NodeType.Document</b>.
</summary>
    </member>
    <member name="P:Aspose.Word.Document.BuiltInDocumentProperties">
      <summary>
Returns a collection that represents all the built-in document properties of the document.
</summary>
    </member>
    <member name="P:Aspose.Word.Document.CustomDocumentProperties">
      <summary>
Returns a collection that represents all the custom document properties of the document.
</summary>
    </member>
    <member name="P:Aspose.Word.Document.Variables">
      <summary>
            Returns the collection of variables added to a document or template. 
            </summary>
    </member>
    <member name="P:Aspose.Word.Document.Styles">
      <summary>
Returns a collection of styles defined in the document.
</summary>
    </member>
    <member name="P:Aspose.Word.Document.MailMerge">
      <summary>
Returns a <b>MailMerge</b> object that represents the mail merge functionality for the document.
</summary>
    </member>
    <member name="P:Aspose.Word.Document.ProtectionType">
      <summary>
Gets or sets the document protection type.
</summary>
      <remarks>
        <p>
          <b>ProtectionType</b> allows to retrieve and change document protection type.</p>
        <p>
          <b>Protect</b> and <b>Unprotect</b> methods allow to change protection type,
but do not allow to retrieve it and are available to mimic Microsoft Word object model.</p>
        <p>When a document is protected, the user can make only limited changes, 
such as adding annotations, making revisions, or completing a form.</p>
        <p>When you protect a document, and the document does not have a protection password,
Aspose.Word assigns a random password that makes it impossible to unprotect the document 
in MS Word, but you still can unprotect the document in Aspose.Word as it does not 
require a password when unprotecting.</p>
        <p>When you protect a document, and the document already has a protection password,
the existing protection password is not changed.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Document.Sections">
      <summary>
Returns a <b>Sections</b> collection that represents the sections in the document.
</summary>
    </member>
    <member name="P:Aspose.Word.Document.FirstSection">
      <summary>
Gets the first section in the document.
</summary>
      <remarks>
Returns null if there are no sections.
</remarks>
    </member>
    <member name="P:Aspose.Word.Document.LastSection">
      <summary>
Gets the last section in the document.
</summary>
      <remarks>
Returns null if there are no sections.
</remarks>
    </member>
    <member name="P:Aspose.Word.Document.SaveOptions">
      <summary>
            Provides options to control how the document is saved.
            </summary>
    </member>
    <member name="P:Aspose.Word.Document.ViewOptions">
      <summary>
            Provides options to control how the document is displayed in Microsoft Word.
            </summary>
    </member>
    <member name="P:Aspose.Word.Document.HasRevisions">
      <summary>
            Returns true if the document has any tracked changes.
            </summary>
    </member>
    <member name="E:Aspose.Word.Document.NodeInserting">
      <summary>
Occurs when a node belonging to this document is about to be inserted into another node.
</summary>
    </member>
    <member name="E:Aspose.Word.Document.NodeInserted">
      <summary>
Occurs when a node belonging to this document has been inserted into another node.
</summary>
    </member>
    <member name="E:Aspose.Word.Document.NodeRemoving">
      <summary>
Occurs when a node belonging to this document is about to be removed from the document.
</summary>
    </member>
    <member name="E:Aspose.Word.Document.NodeRemoved">
      <summary>
Occurs when a node belonging to this document has been removed from its parent.
</summary>
    </member>
    <member name="T:Aspose.Word.VisitorAction">
      <summary>
            Allows the visitor to control the enumeration of nodes.
            </summary>
    </member>
    <member name="F:Aspose.Word.VisitorAction.Continue">
      <summary>
            The visitor requests the enumeration to continue.
            </summary>
    </member>
    <member name="F:Aspose.Word.VisitorAction.SkipThisNode">
      <summary>
            The visitor requests to skip the current node and continue enumeration.
            </summary>
    </member>
    <member name="F:Aspose.Word.VisitorAction.Stop">
      <summary>
            The visitor requests the enumeration of nodes to stop.
            </summary>
    </member>
    <member name="T:Aspose.Word.DropDownItems">
      <summary>
            A collection of strings that represent all the items in a drop-down form field.
            </summary>
    </member>
    <member name="M:Aspose.Word.DropDownItems.Add(System.String)">
      <summary>
            Adds a string to the end of the collection.
            </summary>
      <param name="s">The string to add to the end of the collection.</param>
      <returns>The zero-based index at which the new element is inserted.</returns>
    </member>
    <member name="M:Aspose.Word.DropDownItems.Insert(System.Int32,System.String)">
      <summary>
            Inserts a string into the collection at the specified index.
            </summary>
      <param name="index">The zero-based index at which value is inserted.</param>
      <param name="value">The string to insert.</param>
    </member>
    <member name="P:Aspose.Word.DropDownItems.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
    </member>
    <member name="T:Aspose.Word.FieldEnd">
      <summary>
            Represents an end of a Word field in a document.
            </summary>
      <remarks>
        <p>A complete field in a Word document is a complex structure consisting of
            a field start character, field code, field separator character, field result
            and field end character. Some fields only have field start, field code and field end.</p>
        <p>Use <see cref="M:Aspose.Word.DocumentBuilder.InsertField(System.String,System.String)">DocumentBuilder.InsertField</see>
            to create a field in a document.</p>
        <p>
          <b>FieldEnd</b> is an inline-level node and represented 
            by the <b>ControlChar.FieldEnd</b> character in the document.</p>
        <p>
          <b>FieldEnd</b> can only be a child of <b>Paragraph</b>.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Word.SpecialChar">
      <summary>
            Base class for special characters in the document.
            </summary>
      <remarks>
        <p>A Microsoft Word document can include a number of special characters
            that represent fields, form fields, shapes, OLE objects, footnotes etc. For the list
            of special characters see <see cref="T:Aspose.Word.ControlChar" />.</p>
        <p>
          <b>SpecialChar</b> is an inline-node and can only be a child of <b>Paragraph</b>.</p>
        <p>
          <b>SpecialChar</b> char is used as a base class for more specific classes
            that represent special characters that Aspose.Word provides programmatic access for.
            The <b>SpecialChar</b> class is also used itself to represent special character for which
            Aspose.Word does not provide detailed programmatic access.</p>
      </remarks>
      <dev>
            Used to represent dead field start and end. Dead fields in MS Word are:
            Index Entry, Table of Contents Entry, Document Reference, Mark Table of Authorities Entry,
            Macro, Private. Probably should make FieldStart and FieldEnd cater for dead fields too.
            </dev>
    </member>
    <member name="T:Aspose.Word.Inline">
      <summary>
            Base class for inline-level nodes that consist of a single run of text with font formatting.
            </summary>
      <remarks>
        <p>A class derived from <b>Inline</b> can be a child of <b>Paragraph</b>.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Inline.Clone(System.Boolean)">
      <summary>
Creates a duplicate of the node.
</summary>
      <param name="isCloneChildren">True to recursively clone the subtree under the specified node; 
false to clone only the node itself.</param>
      <returns>The cloned node.</returns>
      <remarks>
        <p>This method serves as a copy constructor for nodes. 
The cloned node has no parent, but belongs to the same document as the original node.</p>
        <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
specifies whether to perform copy all child nodes as well.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Inline.ParentParagraph">
      <summary>
            Returns the immediate parent paragraph.
            </summary>
      <remarks>Equivalent to <c>(Paragraph)ParentNode</c>.</remarks>
    </member>
    <member name="P:Aspose.Word.Inline.Font">
      <summary>
            Provides access to the font formatting of this object.
            </summary>
    </member>
    <member name="M:Aspose.Word.SpecialChar.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
            Accepts a visitor.
            </summary>
      <param name="visitor">The visitor that will visit the node.</param>
      <returns>False if the visitor requested the enumeration to stop.</returns>
      <remarks>
        <p>Calls DocumentVisitor.VisitSpecialChar.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.SpecialChar.GetText">
      <summary>
            Gets the special character that this node represents.
            </summary>
      <returns>The string that contains the character that this node represents.</returns>
    </member>
    <member name="P:Aspose.Word.SpecialChar.NodeType">
      <summary>
            Returns <b>NodeType.SpecialChar</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.SpecialChar.HasInnerText">
      <summary>
            Returns true because <b>SpecialChar</b> always have text - the special character.
            </summary>
    </member>
    <member name="M:Aspose.Word.FieldEnd.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
            Accepts a visitor.
            </summary>
      <param name="visitor">The visitor that will visit the node.</param>
      <returns>False if the visitor requested the enumeration to stop.</returns>
      <remarks>
        <p>Calls DocumentVisitor.VisitFieldEnd.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.FieldEnd.NodeType">
      <summary>
            Returns <b>NodeType.FieldEnd</b>.
            </summary>
    </member>
    <member name="T:Aspose.Word.FieldSeparator">
      <summary>
            Represents a Word field separator that separates the field code from the field result.
            </summary>
      <remarks>
        <p>A complete field in a Word document is a complex structure consisting of
            a field start character, field code, field separator character, field result
            and field end character. Some fields only have field start, field code and field end.</p>
        <p>Use <see cref="M:Aspose.Word.DocumentBuilder.InsertField(System.String,System.String)">DocumentBuilder.InsertField</see>
            to create a field in a document.</p>
        <p>
          <b>FieldSeparator</b> is an inline-level node and represented 
            by the <b>ControlChar.FieldSeparator</b> character in the document.</p>
        <p>
          <b>FieldSeparator</b> can only be a child of <b>Paragraph</b>.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.FieldSeparator.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
            Accepts a visitor.
            </summary>
      <param name="visitor">The visitor that will visit the node.</param>
      <returns>False if the visitor requested the enumeration to stop.</returns>
      <remarks>
        <p>Calls DocumentVisitor.VisitFieldSeparator.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.FieldSeparator.NodeType">
      <summary>
            Returns <b>NodeType.FieldSeparator</b>.
            </summary>
    </member>
    <member name="T:Aspose.Word.FieldStart">
      <summary>
            Represents a start of a Word field in a document.
            </summary>
      <remarks>
        <p>A complete field in a Word document is a complex structure consisting of
            a field start character, field code, field separator character, field result
            and field end character. Some fields only have field start, field code and field end.</p>
        <p>Use <see cref="M:Aspose.Word.DocumentBuilder.InsertField(System.String,System.String)">DocumentBuilder.InsertField</see>
            to create a field in a document.</p>
        <p>
          <b>FieldStart</b> is an inline-level node and represented by the <b>ControlChar.FieldStart</b>
            character in the document.</p>
        <p>
          <b>FieldStart</b> can only be a child of <b>Paragraph</b>.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.FieldStart.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
            Accepts a visitor.
            </summary>
      <param name="visitor">The visitor that will visit the node.</param>
      <returns>False if the visitor requested the enumeration to stop.</returns>
      <remarks>
        <p>Calls DocumentVisitor.VisitFieldStart.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.FieldStart.NodeType">
      <summary>
            Returns <b>NodeType.FieldStart</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.FieldStart.FieldType">
      <summary>
            Returns the type of the field.
            </summary>
    </member>
    <member name="T:Aspose.Word.Footnote">
      <summary>
            Represents a container for text of a footnote or endnote.
            </summary>
      <remarks>
        <p>The <b>Footnote</b> class is used to represent both footnotes and endnotes in a Word document.</p>
        <p>
          <b>Footnote</b> is an inline-level node and can only be a child of <b>Paragraph</b>.</p>
        <p>
          <b>Footnote</b> can contain <b>Paragraph</b> and <b>Table</b> child nodes.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Footnote.#ctor(Aspose.Word.Document,Aspose.Word.FootnoteType)">
      <summary>
            Initializes an instance of the <b>Footnote</b> class.
            </summary>
      <param name="doc">The owner document.</param>
      <param name="footnoteType">Specifies whether this is a footnote or endnote.</param>
      <remarks>
        <p>When <b>Footnote</b> is created, it belongs to the specified document, but is not 
            yet part of the document and <b>ParentNode</b> is null.</p>
        <p>To append <b>Footnote</b> to the document use InsertAfter or InsertBefore 
            on the paragraph where you want the footnote inserted.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Footnote.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
Accepts a visitor.
</summary>
      <param name="visitor">The visitor that will visit the nodes.</param>
      <returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
      <remarks>
        <p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
      <remarks>
            Calls DocumentVisitor.VisitFootnoteStart, then calls Accept for all child nodes of the footnote
            and calls DocumentVisitor.VisitFootnoteEnd at the end.
            </remarks>
    </member>
    <member name="P:Aspose.Word.Footnote.NodeType">
      <summary>
            Returns <b>NodeType.Footnote</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.Footnote.StoryType">
      <summary>
            Returns <b>StoryType.Footnotes</b> or <b>StoryType.Endnotes</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.Footnote.FootnoteType">
      <summary>
            Returns a value that specifies whether this is a footnote or endnote.
            </summary>
    </member>
    <member name="T:Aspose.Word.FormField">
      <summary>
            Represents a single form field. 
            </summary>
      <remarks>
        <p>Microsoft Word provides the following form fields: checkbox, text input and dropdown (combobox).</p>
        <p>
          <b>FormField</b> is an inline-node and can only be a child of <b>Paragraph</b>.</p>
        <p>
          <b>FormField</b> is represented in a document by a special character and 
            positioned as a character within a line of text.</p>
        <p>A complete form field in a Word document is a complex structure represented by several
            nodes: field start, field code such as FORMTEXT, form field data, field separator,
            field result, field end and a bookmark. To programmatically create form fields in a Word document use 
            <see cref="M:Aspose.Word.DocumentBuilder.InsertCheckBox(System.String,System.Boolean,System.Int32)">DocumentBuilder.InsertCheckBox</see>,
            <see cref="M:Aspose.Word.DocumentBuilder.InsertTextInput(System.String,Aspose.Word.TextFormFieldType,System.String,System.String,System.Int32)">DocumentBuilder.InsertTextInput</see> and
            <see cref="M:Aspose.Word.DocumentBuilder.InsertComboBox(System.String,System.String[],System.Int32)">DocumentBuilder.InsertComboBox</see> which
            make sure all of the form field nodes are created in a correct order and in a suitable state.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.FormField.Clone(System.Boolean)">
      <summary>
Creates a duplicate of the node.
</summary>
      <param name="isCloneChildren">True to recursively clone the subtree under the specified node; 
false to clone only the node itself.</param>
      <returns>The cloned node.</returns>
      <remarks>
        <p>This method serves as a copy constructor for nodes. 
The cloned node has no parent, but belongs to the same document as the original node.</p>
        <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
specifies whether to perform copy all child nodes as well.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.FormField.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
            Accepts a visitor.
            </summary>
      <param name="visitor">The visitor that will visit the node.</param>
      <returns>False if the visitor requested the enumeration to stop.</returns>
      <remarks>
        <p>Calls DocumentVisitor.VisitFormField.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.FormField.SetTextInputValue(System.Object)">
      <summary>
            Sets the new value in a text form field with text formatting.
            </summary>
      <param name="newValue">Can be a string, number or a DateTime object.</param>
      <remarks>
        <p>Applies the text formatting specified in <see cref="P:Aspose.Word.FormField.TextInputFormat" />
            and stores the value in <see cref="P:Aspose.Word.FormField.Result" />.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.FormField.NodeType">
      <summary>
            Returns <b>NodeType.FormField</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.FormField.Name">
      <summary>
            Gets or sets the form field name.
            </summary>
      <remarks>
        <p>In Word documents form field name is a bookmark.</p>
        <p>Returns an empty string if no bookmark is associated with this form field or no name is defined.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.FormField.Type">
      <summary>
            Returns the field type.
            </summary>
    </member>
    <member name="P:Aspose.Word.FormField.Result">
      <summary>
            Gets or sets a string that represents the result of this form field.
            </summary>
      <remarks>
        <p>For a text form field the result is the text that is in the field.</p>
        <p>For a checkbox form field the result can be "1" or "0" to indicate checked or unchecked.</p>
        <p>For a dropdown form field the result is the string selected in the dropdown.</p>
        <p>Note that setting <b>Result</b> for a text form field does not apply formatting
            specified in <see cref="P:Aspose.Word.FormField.TextInputFormat" />. If you want to set a value and apply the 
            formatting, use the <see cref="M:Aspose.Word.FormField.SetTextInputValue(System.Object)" />.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.FormField.StatusText">
      <summary>
            Returns or sets the text that's displayed in the status bar when a form field has the focus.
            </summary>
      <remarks>
        <p>If the OwnStatus property is set to true, the StatusText property specifies the status bar text. 
            If the OwnStatus property is set to false, the StatusText property specifies the name of an AutoText 
            entry that contains status bar text for the form field.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.FormField.OwnStatus">
      <summary>
            Specifies the source of the text that's displayed in the status bar when a form field has the focus.
            </summary>
      <remarks>
        <p>If true, the text specified by the StatusText property is displayed. 
            If false, the text of the AutoText entry specified by the StatusText property is displayed.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.FormField.HelpText">
      <summary>
            Returns or sets the text that's displayed in a message box when the form field has the focus and the user presses F1.
            </summary>
      <remarks>
        <p>If the OwnHelp property is set to True, HelpText specifies the text string value. 
            If OwnHelp is set to False, HelpText specifies the name of an AutoText entry that contains help 
            text for the form field.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.FormField.OwnHelp">
      <summary>
            Specifies the source of the text that's displayed in a message box when a form field has the focus and the user presses F1.
            </summary>
      <remarks>
        <p>If True, the text specified by the HelpText property is displayed. 
            If False, the text in the AutoText entry specified by the HelpText property is displayed.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.FormField.CalculateOnExit">
      <summary>
            True if references to the specified form field are automatically updated whenever the field is exited.
            </summary>
      <remarks>
        <p>Setting <b>CalculateOnExit</b> only affects the behavior of the form field when
            the document is opened in Microsoft Word. Aspose.Word never updates references
            to the form field.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.FormField.EntryMacro">
      <summary>
            Returns or sets an entry macro name for the form field.
            </summary>
      <remarks>
            The entry macro runs when the form field gets the focus in Microsoft Word.</remarks>
    </member>
    <member name="P:Aspose.Word.FormField.ExitMacro">
      <summary>
            Returns or sets an exit macro name for the form field. 
            </summary>
      <remarks>
        <p>The exit macro runs when the form field loses the focus in Microsoft Word.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.FormField.Enabled">
      <summary>
            True if a form field is enabled. 
            </summary>
      <remarks>
        <p>If a form field is enabled, its contents can be changed as the form is filled in.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.FormField.TextInputFormat">
      <summary>
            Returns or sets the text formatting for a text form field.
            </summary>
      <remarks>
        <p>If the text form field contains regular text, then valid format strings are
            "", "UPPERCASE", "LOWERCASE", "FIRST CAPITAL" and "TITLE CASE".</p>
        <p>If the text form field contains a number or a date/time value, then valid 
            format strings are number or date and time format strings.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.FormField.TextInputType">
      <summary>
            Returns or sets the type of a text form field.
            </summary>
    </member>
    <member name="P:Aspose.Word.FormField.DropDownItems">
      <summary>
            Provides access to the items of a dropdown form field.
            </summary>
      <remarks>
        <p>Microsoft Word allows maximum 25 items in a dropdown form field.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.FormField.DropDownSelectedIndex">
      <summary>
            Gets or sets the index specifying the currently selected item in a dropdown form field.
            </summary>
    </member>
    <member name="T:Aspose.Word.FormFields">
      <summary>
            A collection of <b>FormField</b> objects that represent all the form fields in a range.
            </summary>
      <dev>Facade wrapper for a collection of form field objects.</dev>
    </member>
    <member name="P:Aspose.Word.FormFields.Count">
      <summary>
            Returns the number of form fields in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Word.FormFields.Item(System.Int32)">
      <summary>
            Returns a form field at the specified index.
            </summary>
      <param name="index">An index into the collection.</param>
      <remarks>
        <p>The index is zero-based.</p>
        <p>Negative indexes are allowed and indicate access from the back of the collection. 
For example -1 means the last item, -2 means the second before last and so on.</p>
        <p>If index is greater than or equal to the number of items in the list, this returns a null reference.</p>
        <p>If index is negative and its absolute value is greater than the number of items in the list, this returns a null reference.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.FormFields.Item(System.String)">
      <summary>
            Returns a form field by bookmark name.
            </summary>
      <param name="bookmarkName">Case-insensitive bookmark name.</param>
      <remarks>
            Returns null if the form field with the specified bookmark name cannot be found.
            </remarks>
    </member>
    <member name="T:Aspose.Word.HeaderFooter">
      <summary>
            Represents a container for the header or footer text of a section.
            </summary>
      <remarks>
        <p>
          <b>HeaderFooter</b> can contain <b>Paragraph</b> and <b>Table</b> child nodes.</p>
        <p>
          <b>HeaderFooter</b> is a section-level node and can only be a child of <b>Section</b>. 
            There can only be one <b>HeaderFooter</b> or each <see cref="P:Aspose.Word.HeaderFooter.HeaderFooterType" /> in a <b>Section</b>.</p>
        <p>If <b>Section</b> does not have a <b>HeaderFooter</b> of a specific type or
            the <b>HeaderFooter</b> has no child nodes, this header/footer is considered linked to 
            the header/footer of the same type of the previous section in Microsoft Word.</p>
        <p>When <b>HeaderFooter</b> contains at least one one <b>Paragraph</b>, it is no longer
            considered linked to previous in Microsoft Word.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.HeaderFooter.#ctor(Aspose.Word.Document,Aspose.Word.HeaderFooterType)">
      <summary>
            Creates a new header or footer of the specified type.
            </summary>
      <param name="doc">The owner document.</param>
      <param name="headerFooterType">The type of the header or footer.</param>
      <remarks>
        <p>When <b>HeaderFooter</b> is created, it belongs to the specified document, but is not 
            yet part of the document and <b>ParentNode</b> is null.</p>
        <p>To append <b>HederFooter</b> to a <b>Section</b> use Section.InsertAfter, Section.InsertBefore,
            HeadersFooters.Add or HeadersFooters.Insert.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.HeaderFooter.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
Accepts a visitor.
</summary>
      <param name="visitor">The visitor that will visit the nodes.</param>
      <returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
      <remarks>
        <p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
      <remarks>
            Calls DocumentVisitor.VisitHeaderFooterStart, then calls Accept for all child nodes of the section
            and calls DocumentVisitor.VisitHeaderFooterEnd at the end.
            </remarks>
    </member>
    <member name="P:Aspose.Word.HeaderFooter.NodeType">
      <summary>
            Returns <b>NodeType.HeaderFooter</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.HeaderFooter.HeaderFooterType">
      <summary>
            Gets the type of this header/footer.
            </summary>
    </member>
    <member name="P:Aspose.Word.HeaderFooter.IsHeader">
      <summary>
            True if this <b>HeaderFooter</b> object is a header. 
            </summary>
    </member>
    <member name="P:Aspose.Word.HeaderFooter.IsLinkedToPrevious">
      <summary>
            True if this header or footer is linked to the corresponding header or footer 
            in the previous section.
            </summary>
      <remarks>
        <p>Default is true.</p>
        <p>Note, when your link a header or footer, its contents is cleared.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Word.HeadersFooters">
      <summary>
            Provides typed access to <see cref="T:Aspose.Word.HeaderFooter" /> nodes of a <b>Section</b>.
            </summary>
      <remarks>
        <p>There can be maximum of one <b>HeaderFooter</b></p> of each <see cref="T:Aspose.Word.HeaderFooterType" /> per
            <b>Section</b>.
            <p><b>HeaderFooter</b> objects can occur in any order in the collection.</p></remarks>
    </member>
    <member name="M:Aspose.Word.HeadersFooters.LinkToPrevious(System.Boolean)">
      <summary>
            Links or unlinks all headers and footers to the corresponding
            headers and footers in the previous section.
            </summary>
      <param name="isLinkToPrevious">True to link the headers and footers to the previous section;
            false to unlink them.</param>
      <remarks>
        <p>If any of the headers or footers do not exist, creates them automatically.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.HeadersFooters.LinkToPrevious(Aspose.Word.HeaderFooterType,System.Boolean)">
      <summary>
            Links or unlinks the specified header or footer to the corresponding
            header or footer in the previous section.
            </summary>
      <param name="headerFooterType">The header or footer to link/unlink.</param>
      <param name="isLinkToPrevious">True to link the header or footer to the previous section; 
            false to unlink.</param>
      <remarks>
        <p>If the header or footer of the specified type does not exist, creates it automatically.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.HeadersFooters.Item(System.Int32)">
      <summary>
            Retrieves a <b>HeaderFooter</b> at the given index.
            </summary>
      <param name="index">An index into the collection.</param>
      <remarks>
        <p>The index is zero-based.</p>
        <p>Negative indexes are allowed and indicate access from the back of the collection. 
For example -1 means the last item, -2 means the second before last and so on.</p>
        <p>If index is greater than or equal to the number of items in the list, this returns a null reference.</p>
        <p>If index is negative and its absolute value is greater than the number of items in the list, this returns a null reference.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.HeadersFooters.Item(Aspose.Word.HeaderFooterType)">
      <summary>
            Retrieves a <b>HeaderFooter</b> of the specified type.
            </summary>
      <param name="headerFooterType">The type of the header/footer to retrieve.</param>
      <remarks>
            Returns null if the header/footer of the specified type is not found.
            </remarks>
    </member>
    <member name="T:Aspose.Word.InlineShapeType">
      <summary>
            Specifies the type of shape stored inside <see cref="T:Aspose.Word.InlineShape" />.
            </summary>
      <preliminary />
    </member>
    <member name="F:Aspose.Word.InlineShapeType.LinkedPicture">
      <summary>
            The <b>InlineShape</b> is a picture linked into the document.
            </summary>
    </member>
    <member name="F:Aspose.Word.InlineShapeType.Picture">
      <summary>
            The <b>InlineShape</b> is a picture embedded in the document.
            </summary>
    </member>
    <member name="F:Aspose.Word.InlineShapeType.Other">
      <summary>
            Other inline shape type, not programmatically exposed by Aspose.Word.
            </summary>
    </member>
    <member name="T:Aspose.Word.InlineShape">
      <summary>
             Represents a graphical object in the text layer of a document. 
             </summary>
      <remarks>
        <p>An inline shape can only be a picture, an OLE object, or an ActiveX control.</p>
        <p>
          <b>InlineShape</b> objects are treated like characters and are positioned as 
             characters within a line of text.</p>
        <p>
          <b>InlineShape</b> can only be a child of <b>Paragraph</b>.</p>
        <p>At the moment a new <b>InlineShape</b> cannot be created programmatically.</p>
      </remarks>
      <preliminary>[The properties and methods of this class are subject to change.]</preliminary>
      <dev>
             1. Most of the time this is used to represent just an inline picture and occurs in the document on its own.
             Note it can contain the name of the file of the linked picture (instead of the picture itself?).
             
             2. Sometimes it represents a "preview" of an embedded object, in this case it occurs as
             [FieldStart]EMBED xxx[FieldSeparator with ObjectId][InlineShape][FieldEnd]
             
             3. Yet in other cases it is used alongside an inline Escher shape like this:
             [FieldStart]SHAPE[FieldSeparator][Shape][InlineShape][FieldEnd]
             
             In this case InlineShape contains only one shape PictureFrame and probably represents
             the drawing canvas on which the actual shape is to be drawn.
             
             In WordML inline shape is represented nicely using one [pict] with all VML inside it.
             So ideally I should store both normal and inline shapes in the model in the same way like WordML does.
             
             In WordML inline picture is stored nicely using one [pict] and VML with binary data.
             
             For embedded OLE2 objects, WordML also creates [pict] with VML which contains 
             a picture in emz format (enhanced metafile zipped probably) followed by [OLEObject] element.
            
            It would be nice if I parse EMBED and SHAPE fields into these high level presentations too,
            but probably later.
             </dev>
    </member>
    <member name="M:Aspose.Word.InlineShape.Clone(System.Boolean)">
      <summary>
Creates a duplicate of the node.
</summary>
      <param name="isCloneChildren">True to recursively clone the subtree under the specified node; 
false to clone only the node itself.</param>
      <returns>The cloned node.</returns>
      <remarks>
        <p>This method serves as a copy constructor for nodes. 
The cloned node has no parent, but belongs to the same document as the original node.</p>
        <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
specifies whether to perform copy all child nodes as well.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.InlineShape.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
            Accepts a visitor.
            </summary>
      <param name="visitor">The visitor that will visit the node.</param>
      <returns>False if the visitor requested the enumeration to stop.</returns>
      <remarks>
        <p>Calls DocumentVisitor.VisitInlineShape.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.InlineShape.NodeType">
      <summary>
            Returns <b>NodeType.InlineShape</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.InlineShape.InlineShapeType">
      <summary>
            Gets the type of inline shape.
            </summary>
    </member>
    <member name="P:Aspose.Word.InlineShape.ImageFormat">
      <summary>
            Gets the format of the image. 
            </summary>
      <remarks>
            If the shape is not an image, returns null.
            </remarks>
    </member>
    <member name="P:Aspose.Word.InlineShape.ImageBytes">
      <summary>
            Gets the bytes of the image. 
            </summary>
      <remarks>
        <p>The bytes of the image can be saved into a file or loaded into a .NET <b>Image</b> object.</p>
        <p>If the shape is not an image, returns null.</p>
        <seealso cref="P:Aspose.Word.InlineShape.ImageFormat" />
      </remarks>
    </member>
    <member name="P:Aspose.Word.InlineShape.Width">
      <summary>
            Gets or sets the width of the shape in points.
            </summary>
    </member>
    <member name="P:Aspose.Word.InlineShape.Height">
      <summary>
            Gets or sets the height of the shape in points.
            </summary>
    </member>
    <member name="P:Aspose.Word.InlineShape.LinkedFileName">
      <summary>
            Gets the name of the linked image file. 
            </summary>
      <remarks>
        <p>If the shape is not a linked image, returns null. Used for images inserted using INCLUDEPICTURE field. </p>
      </remarks>
      <dev>
            Note we have linked filename stored in three! places: in the field, here and in the escher properties.
            </dev>
    </member>
    <member name="T:Aspose.Word.RawOle2Field">
      <summary>
            Represents an embedded OLE2 object that Aspose.Word does not parse.
            </summary>
      <preliminary>[The properties and methods of this class are subject to change.]</preliminary>
      <dev>
            Most of the time OLE2 objects are included like this:
            [FieldStart]EMBED xxx[FieldSeparator with ObjectId][InlineShape][FieldEnd]
            In DOC this InlineShape is represented as PictureChar with PICF.
            
            But on one occassion I've encountered it like this:
            [FieldStart]EMBED xxx[FieldSeparator with ObjectId][Ole2Field][FieldEnd]
            In DOC this Ole2Field is represented as PictureChar with ObjectId.
            </dev>
    </member>
    <member name="M:Aspose.Word.RawOle2Field.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
            Accepts a visitor.
            </summary>
      <param name="visitor">The visitor that will visit the node.</param>
      <returns>False if the visitor requested the enumeration to stop.</returns>
      <remarks>
        <p>Calls DocumentVisitor.VisitRawOle2Field.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.RawOle2Field.NodeType">
      <summary>
            Returns <b>NodeType.RawOle2Field</b>.
            </summary>
    </member>
    <member name="T:Aspose.Word.Paragraph">
      <summary>
            Represents a paragraph of text.
            </summary>
      <remarks>
        <p>
          <b>Paragraph</b> is a block-level node and can be a child of classes derived from 
            <b>Story</b> or <b>InlineStory</b>.</p>
        <p>
          <b>Paragraph</b> can contain any number of inline-level nodes and bookmarks. 
            The inline nodes include all classes derived from <see cref="T:Aspose.Word.Inline" /> and <see cref="T:Aspose.Word.InlineStory" />.</p>
        <p>The complete list of child nodes that can occur inside a paragraph consists of
            <see cref="T:Aspose.Word.Run" />, <see cref="T:Aspose.Word.BookmarkStart" />, <see cref="T:Aspose.Word.BookmarkEnd" />,
            <see cref="T:Aspose.Word.Shape" />, <see cref="T:Aspose.Word.Footnote" />, <see cref="T:Aspose.Word.Comment" />, <see cref="T:Aspose.Word.InlineShape" />,
            <see cref="T:Aspose.Word.FieldStart" />, <see cref="T:Aspose.Word.FieldSeparator" />, <see cref="T:Aspose.Word.FieldEnd" />, 
            <see cref="T:Aspose.Word.SpecialChar" />, <see cref="T:Aspose.Word.RawOle2Field" />.</p>
        <p>A valid paragraph in Microsoft Word always ends with a paragraph break character and
            a minimal valid paragraph consists just of a paragraph break. The <b>Paragraph</b>
            class automatically appends the appropriate paragraph break character at the end
            and this character is not part of the child nodes of the <b>Paragraph</b>, therefore
            a <b>Paragraph</b> can be empty.</p>
        <p>Do not include the end of paragraph <see cref="F:Aspose.Word.ControlChar.ParagraphBreak">ControlChar.ParagraphBreak</see> 
            or end of cell <see cref="F:Aspose.Word.ControlChar.Cell">ControlChar.Cell</see> characters inside the text of 
            the paragraph as it might make the paragraph invalid when the document is opened in Microsoft Word.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Paragraph.#ctor(Aspose.Word.Document)">
      <summary>
            Initializes a new instance of the <b>Paragraph</b> class.
            </summary>
      <param name="doc">The owner document.</param>
      <remarks>
        <p>When <b>Paragraph</b> is created, it belongs to the specified document, but is not 
            yet part of the document and <b>ParentNode</b> is null.</p>
        <p>To append <b>Paragraph</b> to the document use InsertAfter or InsertBefore 
            on the story where you want the paragraph inserted.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Paragraph.Clone(System.Boolean)">
      <summary>
Creates a duplicate of the node.
</summary>
      <param name="isCloneChildren">True to recursively clone the subtree under the specified node; 
false to clone only the node itself.</param>
      <returns>The cloned node.</returns>
      <remarks>
        <p>This method serves as a copy constructor for nodes. 
The cloned node has no parent, but belongs to the same document as the original node.</p>
        <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
specifies whether to perform copy all child nodes as well.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Paragraph.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
Accepts a visitor.
</summary>
      <param name="visitor">The visitor that will visit the nodes.</param>
      <returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
      <remarks>
        <p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
      <remarks>
            Calls DocumentVisitor.VisitParagraphStart, then calls Accept for all child nodes of the section
            and calls DocumentVisitor.VisitParagraphEnd at the end.
            </remarks>
    </member>
    <member name="M:Aspose.Word.Paragraph.GetText">
      <summary>
             Gets the text of this paragraph including the end of paragraph character.
             </summary>
      <remarks>
        <p>The text of all child nodes is concatenated and the end of paragraph character is appended as follows:</p>
        <list type="bullet">
          <item>If the paragraph is the last paragraph of <see cref="T:Aspose.Word.Body" />, then 
            <see cref="F:Aspose.Word.ControlChar.SectionBreak">ControlChar.SectionBreak</see> (\x000c) is appended.</item>
          <item>If the paragraph is the last paragraph of <see cref="T:Aspose.Word.Cell" />, then 
            <see cref="F:Aspose.Word.ControlChar.Cell">ControlChar.Cell</see> (\x0007) is appended.</item>
          <item>For all other paragraphs 
            <see cref="F:Aspose.Word.ControlChar.ParagraphBreak">ControlChar.ParagraphBreak</see> (\r) is appended.</item>
        </list>
        <p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Word.ControlChar" />.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Paragraph.NodeType">
      <summary>
            Returns <b>NodeType.Paragraph</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.Paragraph.ParentSection">
      <summary>
            Retrieves the parent <b>Section</b> of the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Word.Paragraph.IsInCell">
      <summary>
            True if this paragraph is an immediate child of <b>Cell</b>; false otherwise.
            </summary>
    </member>
    <member name="P:Aspose.Word.Paragraph.IsEndOfCell">
      <summary>
            True if this paragraph is the last paragraph in a <b>Cell</b>; false otherwise.
            </summary>
    </member>
    <member name="P:Aspose.Word.Paragraph.IsEndOfSection">
      <summary>
            True if this paragraph is the last paragraph in the <b>Body</b> (main text story) of a <b>Section</b>; false otherwise.
            </summary>
    </member>
    <member name="P:Aspose.Word.Paragraph.IsEndOfDocument">
      <summary>
            True if this paragraph is the last paragraph in the last section of the document.
            </summary>
    </member>
    <member name="P:Aspose.Word.Paragraph.ParagraphFormat">
      <summary>
            Provides access to the paragraph formatting properties.
            </summary>
    </member>
    <member name="P:Aspose.Word.Paragraph.ListFormat">
      <summary>
            Provides access to the list formatting properties of the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Word.Paragraph.Runs">
      <summary>
            Provides access to the typed collection of pieces of text inside the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Word.Paragraph.Font">
      <summary>
            Provides access to the font formatting of the paragraph break character.
            </summary>
    </member>
    <member name="T:Aspose.Word.Paragraphs">
      <summary>
            Provides typed access to a collection of <see cref="T:Aspose.Word.Paragraph" /> nodes.
            </summary>
    </member>
    <member name="P:Aspose.Word.Paragraphs.Item(System.Int32)">
      <summary>
            Retrieves a <b>Paragraph</b> at the given index.
            </summary>
      <param name="index">An index into the collection.</param>
      <remarks>
        <p>The index is zero-based.</p>
        <p>Negative indexes are allowed and indicate access from the back of the collection. 
For example -1 means the last item, -2 means the second before last and so on.</p>
        <p>If index is greater than or equal to the number of items in the list, this returns a null reference.</p>
        <p>If index is negative and its absolute value is greater than the number of items in the list, this returns a null reference.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Word.Range">
      <summary>
Represents a contiguous area in a document.
</summary>
      <remarks>
        <p>The document is represented by a tree of nodes and the nodes provide operations
to work with the tree, but some operations are easier to perform if the document 
is treated as a contiguous sequence of text.</p>
        <p>
          <b>Range</b> is a "facade" interface that provide methods that treat the document 
or portions of the document as "flat" text regardless of the fact that the document
nodes are stored in a tree-like object model.</p>
        <p>
          <b>Range</b> does not contain any text or nodes, it is merely a view or "window"
over a fragment of a document.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Range.Delete">
      <summary>
Deletes all characters of the range.
</summary>
      <example>
This example shows how to delete a section from a Word document.
<code>
[C#]

//Open Word document.
Document doc = new Document("MyDocument.doc");
	
//Delete first section from the document.
doc.Sections[0].Range.Delete();

 
[Visual Basic]
	
'Open Word document.
Dim doc As Document = new Document("MyDocument.doc")

'Delete first section from the document.
doc.Sections(0).Range.Delete()
</code></example>
    </member>
    <member name="M:Aspose.Word.Range.Replace(System.String,System.String,System.Boolean,System.Boolean)">
      <overloads>Replaces all occurrences of a specified string in this range, with another string.</overloads>
      <summary>
            Replaces all occurrences of a specified string with another string.
            </summary>
      <param name="oldValue">A string to be replaced.</param>
      <param name="newValue">A string to replace all occurrences of oldValue.</param>
      <param name="isMatchCase">True indicates case-sensitive comparison, false indicates case-insensitive comparision.</param>
      <param name="isMatchWholeWord">True indicates the oldValue must be a standalone word.</param>
      <returns>The number of replacements made.</returns>
      <remarks>
        <p>An exception is thrown if a captured or replacement string contain one
            or more special characters: paragraph break, cell break, section break, 
            field start, field separator, field end, inline picture, drawing object, footnote.</p>
      </remarks>
      <example>
        <code>
            [C#]
            
            Document doc = new Document(@"MyDocument.doc");
            doc.Range.Replace("CustomerName", "James Bond", false, false);
            doc.Save(@"MyDocument Out.doc");
            
            
            [Visual Basic]
            
            Dim doc As Document = New Document("MyDocument.doc") 
            doc.Range.Replace("CustomerName", "James Bond", False, False) 
            doc.Save("MyDocument Out.doc")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Word.Range.Replace(System.Text.RegularExpressions.Regex,System.String)">
      <summary>
            Replaces all occurrences of a character pattern specified by a regular expression with another string.
            </summary>
      <param name="pattern">A regular expression pattern used to find matches.</param>
      <param name="replacement">A string to replace all occurrences of oldValue.</param>
      <returns>The number of replacements made.</returns>
      <remarks>
        <p>Replaces the whole match captured by the regular expression.</p>
        <p>An exception is thrown if a captured or replacement string contain one
            or more special characters: paragraph break, cell break, section break, 
            field start, field separator, field end, inline picture, drawing object, footnote.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Range.Replace(System.Text.RegularExpressions.Regex,Aspose.Word.ReplaceEvaluator,System.Boolean)">
      <summary>
            Finds all occurrences of a character pattern specified by a regular expression and calls a
            user defined replace evaluator method.
            </summary>
      <param name="pattern">A regular expression pattern used to find matches.</param>
      <param name="evaluator">The user-defined method which evaluates replacement at each step.</param>
      <param name="isForward">True to replace from the beginning of the range to the end.</param>
      <returns>The number of replacements made.</returns>
      <remarks>
        <p>An exception is thrown if a captured or replacement string contain one
            or more special characters: paragraph break, cell break, section break, 
            field start, field separator, field end, inline picture, drawing object, footnote.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Range.UpdateFields">
      <summary>
            Updates the values of document fields in this range. 
            </summary>
      <remarks>
            At the moment updates the results of DOCPROPERTY and DOCVARIABLE fields only.
            </remarks>
    </member>
    <member name="P:Aspose.Word.Range.Text">
      <summary>
Gets the text of the range.
</summary>
      <remarks>
        <p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Word.ControlChar" />.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Range.FormFields">
      <summary>
Returns a <see cref="P:Aspose.Word.Range.FormFields" /> collection that represents all form fields in the range.
</summary>
      <remarks>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Range.Bookmarks">
      <summary>
Returns a <see cref="P:Aspose.Word.Range.Bookmarks" /> collection that represents all bookmarks in the range.
</summary>
      <remarks>
      </remarks>
    </member>
    <member name="T:Aspose.Word.Row">
      <summary>
            Represents a table row.
            </summary>
      <remarks>
        <p>
          <b>Row</b> can only be a child of a <b>Table</b>.</p>
        <p>
          <b>Row</b> can contain one or more <b>Cell</b> nodes.</p>
        <p>A minimal valid row needs to have at least one <b>Cell</b>.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Row.#ctor(Aspose.Word.Document)">
      <summary>
            Initializes a new instance of the <b>Row</b> class.
            </summary>
      <param name="doc">The owner document.</param>
      <remarks>
        <p>When <b>Row</b> is created, it belongs to the specified document, but is not 
            yet part of the document and <b>ParentNode</b> is null.</p>
        <p>To append <b>Row</b> to the document use InsertAfter or InsertBefore 
            on the table where you want the row inserted.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Row.Clone(System.Boolean)">
      <summary>
Creates a duplicate of the node.
</summary>
      <param name="isCloneChildren">True to recursively clone the subtree under the specified node; 
false to clone only the node itself.</param>
      <returns>The cloned node.</returns>
      <remarks>
        <p>This method serves as a copy constructor for nodes. 
The cloned node has no parent, but belongs to the same document as the original node.</p>
        <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
specifies whether to perform copy all child nodes as well.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Row.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
Accepts a visitor.
</summary>
      <param name="visitor">The visitor that will visit the nodes.</param>
      <returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
      <remarks>
        <p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
      <remarks>
            Calls DocumentVisitor.VisitRowStart, then calls Accept for all child nodes of the section
            and calls DocumentVisitor.VisitRowEnd at the end.
            </remarks>
    </member>
    <member name="M:Aspose.Word.Row.GetText">
      <summary>
             Gets the text of all cells in this row including the end of row character.
             </summary>
      <remarks>
        <p>Returns concatenated text of all child nodes with the end of row character 
             <see cref="F:Aspose.Word.ControlChar.Cell">ControlChar.Cell</see> appended at the end.</p>
        <p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Word.ControlChar" />.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Row.EnsureMinimum">
      <summary>
            If the <b>Row</b> has no cells, creates and appends one <b>Cell</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.Row.NodeType">
      <summary>
            Returns <b>NodeType.Row</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.Row.ParentTable">
      <summary>
            Returns the immediate parent table of the row.
            </summary>
      <remarks>Equivalent to <c>(Table)ParentNode</c>.</remarks>
    </member>
    <member name="P:Aspose.Word.Row.IsFirstRow">
      <summary>
            True if this is the first row in a table; false otherwise.
            </summary>
    </member>
    <member name="P:Aspose.Word.Row.IsLastRow">
      <summary>
            True if this is the last row in a table; false otherwise.
            </summary>
    </member>
    <member name="P:Aspose.Word.Row.FirstCell">
      <summary>
            Returns the first <b>Cell</b> in the row.
            </summary>
    </member>
    <member name="P:Aspose.Word.Row.LastCell">
      <summary>
            Returns the last <b>Cell</b> in the row.
            </summary>
    </member>
    <member name="P:Aspose.Word.Row.Cells">
      <summary>
            Provides typed access to the <b>Cell</b> child nodes of the row.
            </summary>
    </member>
    <member name="P:Aspose.Word.Row.RowFormat">
      <summary>
            Provides access to the formatting properties of the row.
            </summary>
    </member>
    <member name="T:Aspose.Word.Rows">
      <summary>
            Provides typed access to a collection of <see cref="T:Aspose.Word.Row" /> nodes.
            </summary>
    </member>
    <member name="P:Aspose.Word.Rows.Item(System.Int32)">
      <summary>
            Retrieves a <b>Row</b> at the given index.
            </summary>
      <param name="index">An index into the collection.</param>
      <remarks>
        <p>The index is zero-based.</p>
        <p>Negative indexes are allowed and indicate access from the back of the collection. 
For example -1 means the last item, -2 means the second before last and so on.</p>
        <p>If index is greater than or equal to the number of items in the list, this returns a null reference.</p>
        <p>If index is negative and its absolute value is greater than the number of items in the list, this returns a null reference.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Word.Run">
      <summary>
            Represents a run of characters with the same font formatting.
            </summary>
      <remarks>
        <p>All text of the document is stored in runs of text.</p>
        <p>
          <b>Run</b> can only be a child of <b>Paragraph</b>.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Run.#ctor(Aspose.Word.Document)">
      <summary>
            Initializes a new instance of the <b>Run</b> class.
            </summary>
      <param name="doc">The owner document.</param>
      <remarks>
        <p>When <b>Run</b> is created, it belongs to the specified document, but is not 
            yet part of the document and <b>ParentNode</b> is null.</p>
        <p>To append <b>Run</b> to the document use InsertAfter or InsertBefore 
            on the paragraph where you want the run inserted.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Run.#ctor(Aspose.Word.Document,System.String)">
      <summary>
            Initializes a new instance of the <b>Run</b> class.
            </summary>
      <param name="doc">The owner document.</param>
      <param name="text">The text of the run.</param>
      <remarks>
        <p>When <b>Run</b> is created, it belongs to the specified document, but is not 
            yet part of the document and <b>ParentNode</b> is null.</p>
        <p>To append <b>Run</b> to the document use InsertAfter or InsertBefore 
            on the paragraph where you want the run inserted.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Run.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
            Accepts a visitor.
            </summary>
      <param name="visitor">The visitor that will visit the node.</param>
      <returns>False if the visitor requested the enumeration to stop.</returns>
      <remarks>
        <p>Calls DocumentVisitor.VisitRun.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Run.GetText">
      <summary>
            Gets the text of the run.
            </summary>
      <returns>The text of the run.</returns>
    </member>
    <member name="P:Aspose.Word.Run.NodeType">
      <summary>
            Returns <b>NodeType.Run</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.Run.Text">
      <summary>
            Gets or sets the text of the run.
            </summary>
    </member>
    <member name="P:Aspose.Word.Run.HasInnerText">
      <summary>
            True if <b>Text</b> is not an empty string.
            </summary>
    </member>
    <member name="T:Aspose.Word.Runs">
      <summary>
            Provides typed access to a collection of <see cref="T:Aspose.Word.Run" /> nodes.
            </summary>
    </member>
    <member name="P:Aspose.Word.Runs.Item(System.Int32)">
      <summary>
            Retrieves a <b>Run</b> at the given index.
            </summary>
      <param name="index">An index into the collection.</param>
      <remarks>
        <p>The index is zero-based.</p>
        <p>Negative indexes are allowed and indicate access from the back of the collection. 
For example -1 means the last item, -2 means the second before last and so on.</p>
        <p>If index is greater than or equal to the number of items in the list, this returns a null reference.</p>
        <p>If index is negative and its absolute value is greater than the number of items in the list, this returns a null reference.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Word.SaveOptions">
      <summary>
            Provides various options that control how a document is saved.
            </summary>
      <remarks>
        <p>
          <b>SaveOptions</b> is a set of options that allow you to control how Aspose.Word
            saves a <b>Document</b>. <b>SaveOptions</b> is not persisted with the <b>Document</b>.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.SaveOptions.HtmlExportTextInputFormFieldAsText">
      <summary>
            Specifies how to export Word text input form fields into HTML.
            </summary>
      <remarks>
        <p>True to export Word text input form fields as normal text; 
            false to export the fields are INPUT elements in HTML.</p>
        <p>Default value is false.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.SaveOptions.ExportImagesFolder">
      <summary>
            Specifies the physical folder where the images will be saved when exporting a document.
            </summary>
      <remarks>
        <p>Note, this property has effect only when saving into a <b>Stream</b> in HTML or Aspose.Pdf.Xml format.</p>
        <p>When you save a <see cref="T:Aspose.Word.Document" /> in HTML or Aspose.Pdf.Xml format,
            Aspose.Word needs to save all images embedded in the document as standalone files.
            If you save the document into a file and provide a file name, Aspose.Word saves the 
            embedded images in the same folder where the document file is saved.</p>
        <p>However, if you save the document into a stream, Aspose.Word does not have a folder 
            where to save the images, but still needs to save the embedded images somewhere as files. 
            In this case, <see cref="P:Aspose.Word.SaveOptions.ExportImagesFolder" /> allows you to specify where the images will be saved
            and <see cref="P:Aspose.Word.SaveOptions.HtmlExportImagesFolderAlias" /> allows to specify how the image URI written into the file
            will be constructed.</p>
        <p>If <b>ExportImagesFolder</b> is null or empty string, then the images will be saved 
            into a temporary folder provided by the operating system.</p>
        <seealso cref="P:Aspose.Word.SaveOptions.HtmlExportImagesFolderAlias" />
      </remarks>
    </member>
    <member name="P:Aspose.Word.SaveOptions.HtmlExportImagesFolderAlias">
      <summary>
            Specifies the name of the folder used to construct image URIs written into the exported document.
            </summary>
      <remarks>
        <p>Note, this property has effect only when saving into a <b>Stream</b> in HTML format.</p>
        <p>When you save a <see cref="T:Aspose.Word.Document" /> in HTML format,
            Aspose.Word needs to save all images embedded in the document as standalone files.
            If you save the document into a file and provide a file name, Aspose.Word saves the 
            embedded images in the same folder where the document file is saved.</p>
        <p>However, if you save the document into a stream, Aspose.Word does not have a folder 
            where to save the images, but still needs to save the embedded images somewhere as files. 
            In this case, <see cref="P:Aspose.Word.SaveOptions.ExportImagesFolder" /> allows you to specify where the images will be saved
            and <see cref="P:Aspose.Word.SaveOptions.HtmlExportImagesFolderAlias" /> allows to specify how the image URI written into the file
            will be constructed.</p>
        <p>Aspose.Word automatically generates a unique file name for every embedded image
            when exporting into HTML format. The image file name looks like
            <i>Aspose.Word.&lt;document guid&gt;.&lt;image number&gt;.&lt;extension&gt;</i>.</p>
        <p>If <b>HtmlExportImagesFolderAlias</b> is not null, then the full image URI is
            constructed as <i>HtmlExportImagesFolderAlias + UniqueImageFileName</i>.</p>
        <p>If <b>HtmlExportImagesFolderAlias</b> is null, then the image URI is
            constructed as <i>ExportImagesFolder + UniqueImageFileName</i>.</p>
        <seealso cref="P:Aspose.Word.SaveOptions.ExportImagesFolder" />
      </remarks>
    </member>
    <member name="T:Aspose.Word.Section">
      <summary>
Represents a single section in a document.
</summary>
      <remarks>
        <p>
          <b>Section</b> can have one <see cref="P:Aspose.Word.Section.Body" /> and maximum one <see cref="T:Aspose.Word.HeaderFooter" />
of each <see cref="T:Aspose.Word.HeaderFooterType" />. <b>Body</b> and <b>HeaderFooter</b> nodes 
can be in any order inside <b>Section</b>.</p>
        <p>A minimal valid section needs to have <b>Body</b> with one <b>Paragraph</b>.</p>
        <p>Each section has its own set of properties that specify page size, orientation, margins etc.</p>
        <p>You can create a copy of a section using <see cref="M:Aspose.Word.Section.Clone" />. The copy can be inserted into
the same or different document.</p>
        <p>To add, insert or remove a whole section including section break and
section properties use methods of the <b>Sections</b> object.</p>
        <p>To copy and insert just content of the section excluding the section break
and section properties use <b>AppendContent</b> and <b>PrependContent</b> methods.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Section.#ctor(Aspose.Word.Document)">
      <summary>
            Initializes a new instance of the Section class.
            </summary>
      <param name="doc">The owner document.</param>
      <remarks>
        <p>When the section is created, it belongs to the specified document, but is not 
            yet part of the document and <b>ParentNode</b> is null.</p>
        <p>To include Section into a document use Document.InsertAfter, Document.InsertBefore
            or Sections.Add and Section.Insert methods.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Section.Clone">
      <summary>
            Creates a duplicate of this section.
            </summary>
      <dev>Kept to remain compatiable with the old API.</dev>
    </member>
    <member name="M:Aspose.Word.Section.Clone(System.Boolean)">
      <summary>
Creates a duplicate of the node.
</summary>
      <param name="isCloneChildren">True to recursively clone the subtree under the specified node; 
false to clone only the node itself.</param>
      <returns>The cloned node.</returns>
      <remarks>
        <p>This method serves as a copy constructor for nodes. 
The cloned node has no parent, but belongs to the same document as the original node.</p>
        <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
specifies whether to perform copy all child nodes as well.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Section.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
Accepts a visitor.
</summary>
      <param name="visitor">The visitor that will visit the nodes.</param>
      <returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
      <remarks>
        <p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
      <remarks>
            Calls DocumentVisitor.VisitSectionStart, then calls Accept for all child nodes of the section
            and calls DocumentVisitor.VisitSectionEnd at the end.
            </remarks>
    </member>
    <member name="M:Aspose.Word.Section.PrependContent(Aspose.Word.Section)">
      <summary>
Inserts a copy of content of the source section at the beginning of this section. 
</summary>
      <remarks>
        <p>Only content of Body of the source section is copied, headers and footers are not copied.</p>
        <p>The nodes are automatically imported if the sourceSection belongs to a different document.</p>
        <p>No new section is created in the destination document.</p>
      </remarks>
      <param name="sourceSection">The section to copy content from.</param>
    </member>
    <member name="M:Aspose.Word.Section.AppendContent(Aspose.Word.Section)">
      <summary>
Inserts a copy of content of the source section at the end of this section. 
</summary>
      <remarks>
        <p>Only content of Body of the source section is copied, headers and footers are not copied.</p>
        <p>The nodes are automatically imported if the sourceSection belongs to a different document.</p>
        <p>No new section is created in the destination document.</p>
      </remarks>
      <param name="sourceSection">The section to copy content from.</param>
    </member>
    <member name="M:Aspose.Word.Section.ClearContent">
      <summary>
Clears the section.
</summary>
      <remarks>
        <p>The text of Body is cleared, only one empty paragraph is left that represents the section break.</p>
        <p>The text of all headers and footers is cleared, but HeaderFooter objects themselves are not removed.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Section.ClearHeadersFooters">
      <summary>
Clears the headers and footers of this section.
</summary>
      <remarks>
        <p>The text of all headers and footers is cleared, but HeaderFooter objects themselves are not removed.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Section.DeleteHeaderFooterShapes">
      <summary>
Deletes all free-floating shapes from the headers and footers of this section.
</summary>
    </member>
    <member name="M:Aspose.Word.Section.EnsureMinimum">
      <summary>
            Ensures that the section has Body with one Paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Word.Section.NodeType">
      <summary>
            Returns <b>NodeType.Section</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.Section.Body">
      <summary>
            Returns the <b>Body</b> child node of the section.
            </summary>
      <remarks>
        <p>
          <b>Body</b> contains main text of the section.</p>
        <p>Returns null if the section does not have a <b>Body</b> node among its children.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Section.HeadersFooters">
      <summary>
            Provides access to the headers and footers nodes of the section.
            </summary>
    </member>
    <member name="P:Aspose.Word.Section.PageSetup">
      <summary>
Returns an object that represents page setup and section properties.
</summary>
    </member>
    <member name="P:Aspose.Word.Section.ProtectedForForms">
      <summary>
True if the section is protected for forms. When a section is protected for forms, 
users can select and modify text only in form fields in Microsoft Word. 
</summary>
      <example>
        <code>
[C#]

//Create a blank document
Document doc = new Document();

//Insert two sections with some text
DocumentBuilder builder = new DocumentBuilder(doc);
builder.Writeln("Section 1. Unprotected.");
builder.InsertBreak(BreakType.SectionBreakContinous);
builder.Writeln("Section 2. Protected.");

//Section protection only works when document protection is turned and only editing in form fields is allowed.
doc.Protect(ProtectionType.AllowOnlyFormFields);

//By default, all sections are protected, but we can selectively turn protection off.
doc.Sections[0].ProtectedForForms = false;

doc.Save(@"ProtectSection Out.doc");


[Visual Basic]

'Create a blank document
Document doc  =  New Document()
 
'Insert two sections with some text
Dim builder As DocumentBuilder =  New DocumentBuilder(doc) 
builder.Writeln("Section 1. Unprotected.")
builder.InsertBreak(BreakType.SectionBreakContinous)
builder.Writeln("Section 2. Protected.")
 
'Section protection only works when document protection is turned and only editing in form fields is allowed.
doc.Protect(ProtectionType.AllowOnlyFormFields)
 
'By default, all sections are protected, but we can selectively turn protection off.
doc.Sections(0).ProtectedForForms = False
 
doc.Save("ProtectSection Out.doc")
</code>
      </example>
    </member>
    <member name="T:Aspose.Word.Sections">
      <summary>
A collection of <b>Section</b> objects in the document.
</summary>
      <remarks>
        <p>A Microsoft Word document can contain multiple sections. To create a section in a Microsoft Word, 
select the Insert/Break command and select a break type. The break specifies whether section starts 
on a new page or on the same page.</p>
        <p>Programmatically inserting and removing sections can be used to customize documents produced
during mail merge. If a document needs to have different content or parts of the
content depending on some criteria, then you can create a "master" document that contains 
multiple sections and delete some of the sections before or after mail merge.</p>
      </remarks>
      <example>
        <code>
[C#]

//Delete the first section from the document
if (!isNeedCoverPage)
	doc.Sections.RemoveAt(0);
		
//Duplicate last section and append the copy to the end of the document.
int lastSectionIdx = doc.Sections.Count - 1;
Section newSection = doc.Sections[lastSectionIdx].Clone();
doc.Sections.Add(newSection);

[VB]

'Delete first section from the document
If Not isNeedCoverPage Then
	doc.Sections.RemoveAt(0)
End If

'Duplicate last section and append the copy to the end of the document.
Dim lastSectionIdx As Integer = doc.Sections.Count - 1 
Dim NewSection As Section =  doc.Sections(lastSectionIdx).Clone() 
doc.Sections.Add(NewSection) 
</code>
      </example>
    </member>
    <member name="P:Aspose.Word.Sections.Item(System.Int32)">
      <summary>
            Retrieves a section at the given index.
            </summary>
      <param name="index">An index into the list of sections.</param>
      <remarks>
        <p>The index is zero-based.</p>
        <p>Negative indexes are allowed and indicate access from the back of the collection. 
For example -1 means the last item, -2 means the second before last and so on.</p>
        <p>If index is greater than or equal to the number of items in the list, this returns a null reference.</p>
        <p>If index is negative and its absolute value is greater than the number of items in the list, this returns a null reference.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Word.Shape">
      <summary>
            Represents an object in the drawing layer, such as an AutoShape, freeform, OLE object, ActiveX control, or picture.
            </summary>
      <remarks>
        <p>
          <b>Shape</b> is an inline-level node and can only be a child of <b>Paragraph</b>.</p>
        <p>When <b>Shape</b> is a drawing object such as textbox or an AutoShape, it can contain text 
            in <b>Paragraph</b> and <b>Table</b> child nodes.</p>
        <p>A shape is always attached to an anchor character in the document and can be positioned
            anywhere on the page that contains the anchor.</p>
        <p>At the moment a new <b>Shape</b> cannot be created programmatically, but existing shapes
            can be removed or manipulated via the available properties.</p>
      </remarks>
      <preliminary>[The properties and methods of this class are subject to change.]</preliminary>
      <dev>
            In a Word document, the shape is represented as char #8 and has corresponding CHP. 
            I have trouble representing the shape as both a container and a run here so I don't 
            keep the char #8, but I keep the original chp. Although I think only fSpec and fcData 
            are used in the CHP and they can be generated on save.
            </dev>
    </member>
    <member name="M:Aspose.Word.Shape.Clone(System.Boolean)">
      <summary>
Creates a duplicate of the node.
</summary>
      <param name="isCloneChildren">True to recursively clone the subtree under the specified node; 
false to clone only the node itself.</param>
      <returns>The cloned node.</returns>
      <remarks>
        <p>This method serves as a copy constructor for nodes. 
The cloned node has no parent, but belongs to the same document as the original node.</p>
        <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
specifies whether to perform copy all child nodes as well.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Shape.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
Accepts a visitor.
</summary>
      <param name="visitor">The visitor that will visit the nodes.</param>
      <returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
      <remarks>
        <p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
      <remarks>
            Calls DocumentVisitor.VisitShapeStart, then calls Accept for all child nodes of the section
            and calls DocumentVisitor.VisitShapeEnd at the end.
            </remarks>
    </member>
    <member name="P:Aspose.Word.Shape.NodeType">
      <summary>
            Returns <b>NodeType.Shape</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.Shape.StoryType">
      <summary>
            Returns <b>StoryType.TextFrame</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.Shape.ImageFormat">
      <summary>
            Gets the format of the image. 
            </summary>
      <remarks>
        <p>If the shape is not an image, returns null.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.Shape.ImageBytes">
      <summary>
            Gets the bytes of the image. 
            </summary>
      <remarks>
        <p>The bytes of the image can be saved into a file or loaded into a .NET <b>Image</b> object.</p>
        <p>If the shape is not an image, returns null.</p>
        <seealso cref="P:Aspose.Word.Shape.ImageFormat" />
      </remarks>
    </member>
    <member name="P:Aspose.Word.Shape.Left">
      <summary>
            Gets or sets the left position of the shape in points.
            </summary>
    </member>
    <member name="P:Aspose.Word.Shape.Top">
      <summary>
            Gets or sets the top position of the shape in points.
            </summary>
    </member>
    <member name="P:Aspose.Word.Shape.Width">
      <summary>
            Gets or sets the width of the shape in points.
            </summary>
    </member>
    <member name="P:Aspose.Word.Shape.Height">
      <summary>
            Gets or sets the height of the shape in points.
            </summary>
    </member>
    <member name="T:Aspose.Word.Table">
      <summary>
            Represents a table in a Word document.
            </summary>
      <remarks>
        <p>
          <b>Table</b> is a block-level node and can be a child of classes derived from <b>Story</b> or 
            <b>InlineStory</b>.</p>
        <p>
          <b>Table</b> can contain one or more <b>Row</b> nodes.</p>
        <p>A minimal valid table needs to have at least one <b>Row</b>.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Table.#ctor(Aspose.Word.Document)">
      <summary>
            Initializes a new instance of the <b>Table</b> class.
            </summary>
      <param name="doc">The owner document.</param>
      <remarks>
        <p>When <b>Table</b> is created, it belongs to the specified document, but is not 
            yet part of the document and <b>ParentNode</b> is null.</p>
        <p>To append <b>Table</b> to the document use InsertAfter or InsertBefore 
            on the story where you want the table inserted.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Table.Clone(System.Boolean)">
      <summary>
Creates a duplicate of the node.
</summary>
      <param name="isCloneChildren">True to recursively clone the subtree under the specified node; 
false to clone only the node itself.</param>
      <returns>The cloned node.</returns>
      <remarks>
        <p>This method serves as a copy constructor for nodes. 
The cloned node has no parent, but belongs to the same document as the original node.</p>
        <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
specifies whether to perform copy all child nodes as well.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.Table.Accept(Aspose.Word.DocumentVisitor)">
      <summary>
Accepts a visitor.
</summary>
      <param name="visitor">The visitor that will visit the nodes.</param>
      <returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
      <remarks>
        <p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
        <p>For more info see the Visitor design pattern.</p>
      </remarks>
      <remarks>
            Calls DocumentVisitor.VisitTableStart, then calls Accept for all child nodes of the section
            and calls DocumentVisitor.VisitTableEnd at the end.
            </remarks>
    </member>
    <member name="M:Aspose.Word.Table.EnsureMinimum">
      <summary>
            If the table has now rows, creates and appends one <b>Row</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.Table.NodeType">
      <summary>
            Returns <b>NodeType.Table</b>.
            </summary>
    </member>
    <member name="P:Aspose.Word.Table.FirstRow">
      <summary>
            Returns the first <b>Row</b> node in the table.
            </summary>
    </member>
    <member name="P:Aspose.Word.Table.LastRow">
      <summary>
            Returns the last <b>Row</b> node in the table.
            </summary>
    </member>
    <member name="P:Aspose.Word.Table.Rows">
      <summary>
            Provides typed access to the rows of the table.
            </summary>
    </member>
    <member name="T:Aspose.Word.Tables">
      <summary>
            Provides typed access to a collection of <see cref="T:Aspose.Word.Table" /> nodes.
            </summary>
    </member>
    <member name="P:Aspose.Word.Tables.Item(System.Int32)">
      <summary>
            Retrieves a <b>Table</b> at the given index.
            </summary>
      <param name="index">An index into the collection.</param>
      <remarks>
        <p>The index is zero-based.</p>
        <p>Negative indexes are allowed and indicate access from the back of the collection. 
For example -1 means the last item, -2 means the second before last and so on.</p>
        <p>If index is greater than or equal to the number of items in the list, this returns a null reference.</p>
        <p>If index is negative and its absolute value is greater than the number of items in the list, this returns a null reference.</p>
      </remarks>
    </member>
    <member name="T:Aspose.Word.Variables">
      <summary>
            A collection of document variables.
            </summary>
      <remarks>
        <p>Variable names and values are strings.</p>
        <p>Variable names are case insensitive.</p>
      </remarks>
      <dev>
            Digital signature is stored as a document variable called "Sign".
            It seems to actually contain some binary data but reading and writing it as a Unicode string
            seems to work okay and does not invalidate the signature so I leave it as a string.
            </dev>
    </member>
    <member name="M:Aspose.Word.Variables.Clone">
      <summary>
            Makes a deep copy of the collection.
            </summary>
    </member>
    <member name="P:Aspose.Word.Variables.Item(System.String)">
      <summary>
            Gets or a sets a document variable by case-insensitive name.
            </summary>
    </member>
    <member name="T:Aspose.Word.Word">
      <summary>
            Provides methods for COM clients to load a document. 
            </summary>
      <remarks>
        <p>Use the <b>Word</b> class to load a document from a file or stream into a <b>Document</b> object
            in a COM application.</p>
        <p>The <see cref="T:Aspose.Word.Document" /> class provides a default constructor to create a new document
            and also provides overloaded constructors to load a document from a file or stream.
            If you are using Aspose.Word from a .NET application, you can use all of the <b>Document</b>
            constructors directly, but if you are using Aspose.Word from a COM application,
            only the default <b>Document</b> constructor is available.</p>
      </remarks>
      <example>
        <code>
            [VBScript]
            
            Dim word
            Set word = CreateObject("Aspose.Word.Word")
            
            Dim doc
            Set doc = word.Open(fileName)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Word.Word.#ctor">
      <summary>
            Initializes a new instance of this class.
            </summary>
    </member>
    <member name="M:Aspose.Word.Word.Open(System.String)">
      <overloads>Allows a COM application to load a document.</overloads>
      <summary>
            Allows a COM application to load a <b>Document</b> from a file.
            </summary>
      <remarks>
        <p>This method is same as calling the <b>Document</b> constructor with a file name parameter.</p>
      </remarks>
      <param name="fileName">Filename of the document to load.</param>
      <returns>A <see cref="T:Aspose.Word.Document" /> object that represents a Word document.</returns>
      <example>
        <code>
            [VBScript]
            
            Dim word
            Set word = CreateObject("Aspose.Word.Word")
            
            Dim doc
            Set doc = word.Open(fileName)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Word.Word.Open(System.IO.Stream)">
      <summary>
            Allows a COM application to load <b>Document</b> from a stream.
            </summary>
      <remarks>
        <p>This method is same as calling the <b>Document</b> constructor with a stream parameter.</p>
      </remarks>
      <param name="stream">A .NET stream object that contains the document to load.</param>
      <returns>A <see cref="T:Aspose.Word.Document" /> object that represents a Word document.</returns>
    </member>
    <member name="T:Aspose.Word.NodeChangedAction">
      <summary>
            Specifies the type of node change.
            </summary>
    </member>
    <member name="F:Aspose.Word.NodeChangedAction.Insert">
      <summary>
            A node is being inserted in the tree.
            </summary>
    </member>
    <member name="F:Aspose.Word.NodeChangedAction.Remove">
      <summary>
            A node is being removed from the tree.
            </summary>
    </member>
    <member name="T:Aspose.Word.NodeChangedEventArgs">
      <summary>
            Provides data for the <see cref="E:Aspose.Word.Document.NodeInserted" />, <see cref="E:Aspose.Word.Document.NodeInserting" />,
            <see cref="E:Aspose.Word.Document.NodeRemoved" /> and <see cref="E:Aspose.Word.Document.NodeRemoving" /> events.
            </summary>
    </member>
    <member name="P:Aspose.Word.NodeChangedEventArgs.Node">
      <summary>
            Gets the <see cref="P:Aspose.Word.NodeChangedEventArgs.Node" /> that is being added or removed.
            </summary>
    </member>
    <member name="P:Aspose.Word.NodeChangedEventArgs.OldParent">
      <summary>
            Gets the node's parent before the operation began.
            </summary>
    </member>
    <member name="P:Aspose.Word.NodeChangedEventArgs.NewParent">
      <summary>
            Gets the node's parent that will be set after the operation completes.
            </summary>
    </member>
    <member name="P:Aspose.Word.NodeChangedEventArgs.Action">
      <summary>
            Gets a value indicating what type of node change event is occurring.
            </summary>
    </member>
    <member name="T:Aspose.Word.NodeChangedEventHandler">
      <summary>
            Represents the method that handles <see cref="E:Aspose.Word.Document.NodeInserted" />, <see cref="E:Aspose.Word.Document.NodeInserting" />,
            <see cref="E:Aspose.Word.Document.NodeRemoved" /> and <see cref="E:Aspose.Word.Document.NodeRemoving" /> events.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:Aspose.Word.NodeList">
      <summary>
            Represents a collection of nodes.
            </summary>
      <remarks>
        <p>
          <b>NodeList</b> is returned by <see cref="M:Aspose.Word.CompositeNode.SelectNodes(System.String)" /> and contains a collection 
            of nodes matching the XPath query.</p>
        <p>
          <b>NodeList</b> supports indexed access and iteration.</p>
        <note>Treat the <b>NodeList</b> collection as a "snapshot" collection. <b>NodeList</b> starts 
            as a "live" collection because the nodes are not actually retrieved when the XPath query is run. 
            The nodes are only retrieved upon access and at this time the node and all nodes that precede 
            it are cached forming a "snapshot" collection.</note>
      </remarks>
    </member>
    <member name="M:Aspose.Word.NodeList.GetEnumerator">
      <summary>
            Provides a simple "foreach" style iteration over the collection of nodes.
            </summary>
      <returns>An IEnumerator.</returns>
    </member>
    <member name="P:Aspose.Word.NodeList.Item(System.Int32)">
      <summary>
            Retrieves a node at the given index.
            </summary>
      <param name="index">An index into the list of nodes.</param>
      <remarks>
        <p>The index is zero-based.</p>
        <p>Negative indexes are allowed and indicate access from the back of the collection. 
For example -1 means the last item, -2 means the second before last and so on.</p>
        <p>If index is greater than or equal to the number of items in the list, this returns a null reference.</p>
        <p>If index is negative and its absolute value is greater than the number of items in the list, this returns a null reference.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.NodeList.Count">
      <summary>
            Gets the number of nodes in the list.
            </summary>
    </member>
    <member name="T:Aspose.Word.NodeType">
      <summary>
            Specifies the type of a Word document node.
            </summary>
      <dev>
        <p>Enumerated node types are provided as a common denominator to ensure all functionality 
            is accessible to all clients (including COM applications that might not have full access 
            to the runtime type information).</p>
      </dev>
    </member>
    <member name="F:Aspose.Word.NodeType.Any">
      <summary>
            Indicates all node types. Allows to select all children.
            </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.Document">
      <summary>
        <p>A document object that, as the root of the document tree, provides access 
            to the entire Word document.</p>
        <p>A <b>Document</b> node can have <b>Section</b> nodes.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.Section">
      <summary>
        <p>A section object that corresponds to one section in a Word document.</p>
        <p>A <b>Section</b> node can have <b>Body</b> and <b>HeaderFooter</b> nodes.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.Body">
      <summary>
        <p>A container for the main text of a section (main text story).</p>
        <p>A <b>Body</b> node can have <b>Paragraph</b> and <b>Table</b> nodes.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.HeaderFooter">
      <summary>
        <p>A container for text of a particular header or footer inside a section.</p>
        <p>A <b>HeaderFooter</b> node can have <b>Paragraph</b> and <b>Table</b> nodes.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.Table">
      <summary>
        <p>A table in a Word document.</p>
        <p>A <b>Table</b> node can have <b>Row</b> nodes.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.Row">
      <summary>
        <p>A row of a table.</p>
        <p>A <b>Row</b> node can have <b>Cell</b> nodes.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.Cell">
      <summary>
        <p>A cell of a table row.</p>
        <p>A <b>Cell</b> node can have <b>Paragraph</b> and <b>Table</b> nodes.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.Paragraph">
      <summary>
        <p>A paragraph of text.</p>
        <p>
            A <b>Paragraph</b> node is a container for inline level elements 
            <b>Run</b>, <b>FieldStart</b>, <b>FieldSeparator</b>, <b>FieldEnd</b>,
            <b>FormField</b>, <b>InlineShape</b>, <b>Shape</b>, <b>Footnote</b>
            as well as <b>BookmarkStart</b> and <b>BookmarkEnd</b>.
            </p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.BookmarkStart">
      <summary>
        <p>A beginning of a bookmark marker.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.BookmarkEnd">
      <summary>
        <p>An end of a bookmark marker.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.Shape">
      <summary>
        <p>A floating drawing object.</p>
        <p>A <b>Shape</b> node can have <b>Paragraph</b> and <b>Table</b> nodes.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.Comment">
      <summary>
        <p>A comment in a Word document.</p>
        <p>A <b>Comment</b> node can have <b>Paragraph</b> and <b>Table</b> nodes.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.Footnote">
      <summary>
        <p>A footnote or endnote in a Word document.</p>
        <p>A <b>Footnote</b> node can have <b>Paragraph</b> and <b>Table</b> nodes.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.Run">
      <summary>
        <p>A run of text.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.FieldStart">
      <summary>
        <p>A special character that designates the start of a Word field.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.FieldSeparator">
      <summary>
        <p>A special character that separates the field code from the field result.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.FieldEnd">
      <summary>
        <p>A special character that designates the end of a Word field.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.InlineShape">
      <summary>
        <p>An inline picture.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.FormField">
      <summary>
        <p>A form field.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.SpecialChar">
      <summary>
        <p>A special character that is not one of the more specific special character types.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.RawOle2Field">
      <summary>
        <p>An unparsed/unknown OLE2 object.</p>
      </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.System">
      <summary>
            Reserved for internal use by Aspose.Word.
            </summary>
    </member>
    <member name="F:Aspose.Word.NodeType.Null">
      <summary>
            Reserved for internal use by Aspose.Word.
            </summary>
    </member>
    <member name="T:Aspose.Word.DocumentBuilder">
      <summary>
Provides methods to insert text, images and other content, specify font, paragraph and section formatting.
</summary>
      <remarks>
        <p>
          <b>DocumentBuilder</b> makes the process of building a <b>Document</b> easier.
<b>Document</b> is a composite object consisting of a tree of nodes and while inserting content
nodes directly into the tree is possible, it requires good understanding of the tree structure.
<b>DocumentBuilder</b> is a "facade" for the complex structure of <b>Document</b> and allows
to insert content and formatting quickly and easily.</p>
        <p>Create a <b>DocumentBuilder</b> and associate it with a <see cref="P:Aspose.Word.DocumentBuilder.Document" />.</p>
        <p>The <b>DocumentBuilder</b> has an internal cursor where the text will be inserted
when you call <see cref="M:Aspose.Word.DocumentBuilder.Write(System.String)" />, <see cref="M:Aspose.Word.DocumentBuilder.Writeln(System.String)" />, <see cref="M:Aspose.Word.DocumentBuilder.InsertBreak(Aspose.Word.BreakType)" /> and other methods.
You can navigate the <b>DocumentBuilder</b> cursor to a different location in a document 
using various MoveToXXX methods.</p>
        <p>Use the <see cref="P:Aspose.Word.DocumentBuilder.Font" /> property to specify character formatting that will apply to
all text inserted from the current position in the document onwards.</p>
        <p>Use the <see cref="P:Aspose.Word.DocumentBuilder.ParagraphFormat" /> property to specify paragraph formatting for the current
and all paragraphs that will be inserted.</p>
        <p>Use the <see cref="P:Aspose.Word.DocumentBuilder.PageSetup" /> property to specify page and section properties for the current
section and all section that will be inserted.</p>
        <p>Use the <see cref="P:Aspose.Word.DocumentBuilder.CellFormat" /> and <see cref="P:Aspose.Word.DocumentBuilder.RowFormat" /> properties to specify
formatting properties for table cells and rows. User the <see cref="M:Aspose.Word.DocumentBuilder.InsertCell" /> and
<see cref="M:Aspose.Word.DocumentBuilder.EndRow" /> methods to build a table.</p>
        <p>Note that <b>Font</b>, <b>ParagraphFormat</b> and <b>PageSetup</b> properties are updated whenever 
you navigate to a different place in the document to reflect formatting properties available at the new location.</p>
      </remarks>
      <example>
        <code>
[C#]

DocumentBuilder builder = new DocumentBuilder(doc);

//Specify font formatting before adding text.
builder.Font.Size = 16;
builder.Font.Bold = true;
builder.Font.Color = System.Drawing.Color.Blue;
builder.Font.Name = "Arial";
builder.Underline = Underline.Dash;
builder.Write("Sample text."); 

[VB]

Dim builder As DocumentBuilder =  New DocumentBuilder(doc) 

'Specify font formatting before adding text.
builder.Font.Size = 16
builder.Font.Bold = True
builder.Font.Color = System.Drawing.Color.Blue
builder.Font.Name = "Arial"
builder.Underline = Underline.Dash
builder.Write("Sample text.")
</code>
      </example>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.#ctor">
      <summary>
Initializes a new instance of this class.
</summary>
      <remarks>
Creates a new <b>DocumentBuilder</b> object and attaches it to a new <see cref="P:Aspose.Word.DocumentBuilder.Document" /> object.
</remarks>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.#ctor(Aspose.Word.Document)">
      <summary>
Initializes a new instance of this class.
</summary>
      <remarks>
Creates a new <b>DocumentBuilder</b> object, attaches to the specified <see cref="P:Aspose.Word.DocumentBuilder.Document" /> object.
The cursor is positioned at the beginning of the document.
</remarks>
      <param name="doc">The Document object to attach to.</param>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.MoveToDocumentStart">
      <summary>
Moves the cursor to the beginning of the document.
</summary>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.MoveToDocumentEnd">
      <summary>
Moves the cursor to the end of the document.
</summary>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.MoveToSection(System.Int32)">
      <summary>
Moves the cursor to the beginning of a specified section.
</summary>
      <param name="sectionIndex">The index of the section to move to.</param>
      <remarks>
        <p>When sectionIndex is greater than or equal to 0, it specifies an index from 
the beginning of the document with 0 being the first section. When sectionIndex is less than 0, 
it specified an index from the end of the document with -1 being the last section.</p>
        <p>The cursor is moved to the first paragraph in the <b>Body</b> of the specified section.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.MoveToHeaderFooter(Aspose.Word.HeaderFooterType)">
      <summary>
Moves the cursor to the beginning of a header or footer in the current section.
</summary>
      <param name="headerFooterType">The header or footer to move to.</param>
      <remarks>
        <p>After you moved the cursor into a header or footer, you can use the rest of DocumentBuilder
methods to modify the contents of the header or footer.</p>
        <p>If you want to create headers and footers different for the first page, you need
to set <see cref="P:Aspose.Word.PageSetup.DifferentFirstPageHeaderFooter" />.</p>
        <p>If you want to create headers and footers different for even and odd pages, you need
to set <see cref="P:Aspose.Word.PageSetup.OddAndEvenPagesHeaderFooter" />.</p>
        <p>Use <see cref="M:Aspose.Word.DocumentBuilder.MoveToSection(System.Int32)" /> to move out of the header into the main text.</p>
      </remarks>
      <example>
This example shows how to create headers and footers in the document.
<code>
[C#]

//Open blank document
Document doc = new Document();
DocumentBuilder builder = new DocumentBuilder(doc);

//Specify that we want headers and footers different for first, even and odd pages.
builder.PageSetup.DifferentFirstPageHeaderFooter = true;
builder.PageSetup.OddAndEvenPagesHeaderFooter = true;

//Create the headers
builder.MoveToHeaderFooter(HeaderFooterType.HeaderFirst);
builder.Write("Header First");
builder.MoveToHeaderFooter(HeaderFooterType.HeaderEven);
builder.Write("Header Even");
builder.MoveToHeaderFooter(HeaderFooterType.HeaderPrimary);
builder.Write("Header Odd");

//Create three sections in the document
builder.MoveToSection(0);
builder.Writeln("Page1");
builder.InsertBreak(BreakType.PageBreak);
builder.Writeln("Page2");
builder.InsertBreak(BreakType.PageBreak);
builder.Writeln("Page3");

doc.Save("HeadersAndFooters.doc");

[VB]

'Open blank document
Dim doc As Document = New Document()
Dim builder As DocumentBuilder = New DocumentBuilder(doc)

'Specify that we want headers and footers different for first, even and odd pages.
builder.PageSetup.DifferentFirstPageHeaderFooter = True
builder.PageSetup.OddAndEvenPagesHeaderFooter = True

'Create the headers
builder.MoveToHeaderFooter(HeaderFooterType.HeaderFirst)
builder.Write("Header First")
builder.MoveToHeaderFooter(HeaderFooterType.HeaderEven)
builder.Write("Header Even")
builder.MoveToHeaderFooter(HeaderFooterType.HeaderPrimary)
builder.Write("Header Odd")

'Create three sections in the document
builder.MoveToSection(0)
builder.Writeln("Page1")
builder.InsertBreak(BreakType.PageBreak)
builder.Writeln("Page2")
builder.InsertBreak(BreakType.PageBreak)
builder.Writeln("Page3")

doc.Save("HeadersAndFooters.doc")
</code></example>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.MoveToMergeField(System.String)">
      <summary>
Moves the cursor to a position just beyond the specified merge field and removes the merge field.
</summary>
      <param name="fieldName">The name of the mail merge field you want to move the cursor to.</param>
      <returns>True if the merge field was found; false otherwise.</returns>
      <remarks>
        <p>Note that moving cursor to a merge field deletes the merge field from the document.</p>
        <p>The comparison is not case-sensitive. If the merge field was not found, false is returned
and the cursor is not moved.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.MoveToField(Aspose.Word.Field,System.Boolean)">
      <summary>
            Moves the cursor to a field in the document.
            </summary>
      <param name="field">The field to move the cursor to.</param>
      <param name="isAfter">When true, moves the cursor to be after the field end. 
            When false, moves the cursor to be before the field start. </param>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.MoveToBookmark(System.String)">
      <summary>
Moves the cursor to a bookmark.
</summary>
      <param name="bookmarkName">The name of the bookmark to move the cursor to.</param>
      <returns>True if the bookmark was found; false otherwise.</returns>
      <remarks>
        <p>Moves the cursor to a position just after the start of the bookmark with the 
specified name.</p>
        <p>The comparison is not case-sensitive. If the bookmark was not found, false is
returned and the cursor is not moved.</p>
        <p>Inserting new text does not replace existing text of the bookmark.</p>
        <p>Note that some bookmarks in the document are assigned to form fields.
Moving to such a bookmark and inserting text there inserts the text into the
form field code. Although this will not invalidate the form field, the inserted
text will not be visible because it becomes part of the field code.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.MoveToBookmark(System.String,System.Boolean,System.Boolean)">
      <summary>
Moves the cursor to a bookmark with greater precision.
</summary>
      <param name="bookmarkName">The name of the bookmark to move the cursor to.</param>
      <param name="isStart">When true, moves the cursor to the beginning of the bookmark.
When false, moves the cursor to the end of the bookmark.</param>
      <param name="isAfter">When true, moves the cursor to be after the bookmark
start or end position. When false, moves the cursor to be before the bookmark
start or end position.</param>
      <returns>True if the bookmark was found; false otherwise.</returns>
      <remarks>
        <p>Moves the cursor to a position before or after the bookmark start or end.</p>
        <p>The comparison is not case-sensitive. If the bookmark was not found, false is
returned and the cursor is not moved.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.MoveToParagraph(System.Int32,System.Int32)">
      <summary>
Moves the cursor to a paragraph in the current section.
</summary>
      <remarks>
        <p>The navigation is performed inside the current story of the current section.
That is, if you moved the cursor to the primary header of the first section,
then paragraphIndex specified the index of the paragraph inside that header
of that section.</p>
        <p>When paragraphIndex is greater than or equal to 0, it specifies an index from 
the beginning of the section with 0 being the first paragraph. When paragraphIndex is less than 0, 
it specified an index from the end of the section with -1 being the last paragraph.</p>
      </remarks>
      <param name="paragraphIndex">The index of the paragraph to move to.</param>
      <param name="characterIndex">The index of the character inside the paragraph.
Currently can only specify 0 to move to the beginning of the paragraph or -1 to
move to the end of the paragraph.
</param>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.MoveToCell(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
Moves the cursor to a table cell in the current section.
</summary>
      <remarks>
        <p>The navigation is performed inside the current story of the current section.</p>
        <p>For the index parameters, when index is greater than or equal to 0, it specifies an index from 
the beginning with 0 being the first element. When index is less than 0, it specified an index from 
the end with -1 being the last element.</p>
      </remarks>
      <param name="tableIndex">The index of the table to move to.</param>
      <param name="rowIndex">The index of the row in the table.</param>
      <param name="columnIndex">The index of the column in the table.</param>
      <param name="characterIndex">The index of the character inside the cell.
Currently can only specify 0 to move to the beginning of the cell or -1 to
move to the end of the cell.
</param>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.MoveTo(Aspose.Word.Paragraph,Aspose.Word.Node)">
      <summary>
            If inline node is not null, moves to it, otherwise moves to the paragraph node.
            </summary>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.MoveTo(Aspose.Word.Node)">
      <summary>
            Moves the cursor to an inline node or to the end of a paragraph.
            </summary>
      <param name="node">The node must be a paragraph or a direct child of a paragraph.</param>
      <remarks>
        <p>When <i>node</i> is an inline-level node, the cursor is moved to this node
            and further content will be inserted before that node.</p>
        <p>When <i>node</i> is a <b>Paragraph</b>, the cursor is moved to the end of the paragraph
            and further content will be inserted just before the paragraph break.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.DeleteRow(System.Int32,System.Int32)">
      <summary>
Deletes a row from a table.
</summary>
      <param name="tableIndex">The index of the table.</param>
      <param name="rowIndex">The index of the row in the table.</param>
      <remarks>
        <p>If the cursor is inside the row that is being deleted, the cursor is moved
out to the next row or to the next paragraph after the table.</p>
        <p>If you delete a row from a table that contains only one row, the whole 
table is deleted.</p>
        <p>For the index parameters, when index is greater than or equal to 0, it specifies an index from 
the beginning with 0 being the first element. When index is less than 0, it specified an index from 
the end with -1 being the last element.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.Write(System.String)">
      <summary>
Inserts a string into the document at the current insert position.
</summary>
      <remarks>
Current font formatting specified by the <see cref="P:Aspose.Word.DocumentBuilder.Font" /> property is used.
</remarks>
      <param name="text">The string to insert into the document.</param>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.Writeln(System.String)">
      <summary>
Inserts a string and a paragraph break into the document.
</summary>
      <remarks>
Current font and paragraph formatting specified by the <see cref="P:Aspose.Word.DocumentBuilder.Font" /> and <see cref="P:Aspose.Word.DocumentBuilder.ParagraphFormat" /> properties are used.
</remarks>
      <param name="text">The string to insert into the document.</param>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.InsertParagraph">
      <summary>
Inserts a paragraph break into the document.
</summary>
      <remarks>
Current paragraph formatting specified by the <see cref="P:Aspose.Word.DocumentBuilder.ParagraphFormat" /> property is used.
</remarks>
      <dev>
            Breaks the current paragraph in two. 
            After inserting the paragraph, the cursor is at the beginning of the second paragraph.
            </dev>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.InsertBreak(Aspose.Word.BreakType)">
      <summary>
Inserts a break of the specified type into the document.
</summary>
      <remarks>
Use this method to insert paragraph, page, column, section or line break into the document.
</remarks>
      <param name="breakType">The break to insert.</param>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.InsertTableOfContents(System.String)">
      <summary>
Inserts a TOC (table of contents) field into the document.
</summary>
      <remarks>
        <p>
This method inserts a TOC (table of contents) field into the document at 
the current position.
</p>
        <p>
A table of contents in a Word document can be built in a number of ways
and formatted using a variety of options. The way the table is built and 
displayed by Microsoft Word is controlled by the field switches.
</p>
        <p>
The easiest way to specify the switches is to insert and configure a table of 
contents into a Word document using the Insert-&gt;Reference-&gt;Index and Tables menu,
then switch display of field codes on to see the switches. You can press Alt+F9 in 
Microsoft Word to toggle display of field codes on or off.
</p>
        <p>
For example, after creating a table of contents, the following field is inserted
into the document: <b>{ TOC \o "1-3" \h \z \u }</b>.
You can copy <b>\o "1-3" \h \z \u</b> and use it as the switches parameter.
</p>
        <p>
Note that <b>InsertTableOfContents</b> will only insert a TOC field, but 
will not actually build the table of contents. The table of contents is built by
Microsoft Word when the field is updated.
</p>
        <p>
If you insert a table of contents using this method and then open the file 
in Microsoft Word, you will not see the table of contents because the TOC field
has not yet been updated.
</p>
        <p>
In Microsoft Word, fields are not automatically updated when a document is opened,
but you can update fields in a document at any time by pressing F9.
</p>
      </remarks>
      <param name="switches">The TOC field switches.</param>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.InsertField(System.String,System.String)">
      <summary>
Inserts a Word field into the document.
</summary>
      <remarks>
        <p>Fields in MS Word documents consist of a field code and a field result.
The field code is like a formula and the field result is like the value that
the formula produces. The field code may also contain field switches 
that are like additional instructions to perform a specific action.</p>
        <p>You can switch between displaying field codes and results in your document in 
MS Word using the keyboard shortcut Alt+F9. Field codes appear between curly braces ( { } ).</p>
        <p>To create fields using <see cref="M:Aspose.Word.DocumentBuilder.InsertField(System.String,System.String)" />, you need to specify a field type,
field code and field value. If you are not sure about particular field code
syntax, create the field in MS Word first and switch to see its field code.</p>
      </remarks>
      <example>
This example shows how to insert a merge field into a document.
<code>

[C#]

Document doc = new Document();
DocumentBuilder builder = new DocumentBuilder(doc);
builder.InsertField(@"MERGEFIELD MyFieldName \* MERGEFORMAT", "");

[VB]

Dim doc as Document = new Document()
Dim builder As DocumentBuilder = New DocumentBuilder(doc) 
builder.InsertField("MERGEFIELD MyFieldName \* MERGEFORMAT", "")
</code></example>
      <param name="fieldCode">Field code to insert (without curly braces).</param>
      <param name="fieldValue">Field value to insert. Pass null for fields that do not have a value.</param>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.InsertHyperlink(System.String,System.String,System.Boolean)">
      <summary>
Inserts a hyperlink into the document.
</summary>
      <param name="displayText">Text of the link to be displayed in the document.</param>
      <param name="url">Link destination. Can be a url or a name of a bookmark inside the document.
This method always adds apostrophes at the beginning and end of the url.</param>
      <param name="isLocal">True if the url is a name of a bookmark inside the document.</param>
      <remarks>
        <p>This methods internally calls <see cref="M:Aspose.Word.DocumentBuilder.InsertField(System.String,System.String)" /> to insert an MS Word HYPERLINK field
into the document. The HYPERLINK field is created by this method in the following format:</p>
        <p>HYPERLINK \l "bookmarkName"</p>
        <p>HYPERLINK "http://www.mydomain.com/myurl"</p>
        <p>Note that you need to specify font formatting for the hyperlink display text explicitly
using the <see cref="P:Aspose.Word.DocumentBuilder.Font" /> property.</p>
      </remarks>
      <example>
        <code>
[C#]

Document doc = new Document();
DocumentBuilder builder = new DocumentBuilder(doc);

//Specify font formatting for the hyperlink.
builder.Font.Color = System.Drawing.Color.Blue;
builder.Font.Underline = Underline.Single;

//Insert the link.
builder.InsertHyperlink("Aspose Website", "http://www.aspose.com", false);

//Clear hyperlink formatting.
builder.Font.ClearFormatting();

doc.Save("Test.doc");

[VB]

Document doc = new Document()
Dim builder As DocumentBuilder =  New DocumentBuilder(doc) 
	
'Specify font formatting for the hyperlink.
builder.Font.Color = System.Drawing.Color.Blue
builder.Font.Underline = Underline.Single
	
'Insert the link.
builder.InsertHyperlink("Aspose Website", "http://www.aspose.com", False)

'Clear hyperlink formatting.
builder.Font.ClearFormatting()

doc.Save("Test.doc")
</code>
      </example>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.InsertTextInput(System.String,Aspose.Word.TextFormFieldType,System.String,System.String,System.Int32)">
      <summary>
Inserts a text form field at the current position.
</summary>
      <remarks>
        <p>If you specify a name for the form field, then a bookmark is automatically created with the same name.</p>
      </remarks>
      <param name="name">The name of the form field. Can be an empty string.</param>
      <param name="type">Type of the text form field.</param>
      <param name="format">Format string used to format the value of the form field.</param>
      <param name="fieldValue">Text that will be shown in the field.</param>
      <param name="maxLength">Maximum length the user can enter into the form field. Set to zero for unlimited length.</param>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.InsertCheckBox(System.String,System.Boolean,System.Int32)">
      <summary>
Inserts a checkbox form field at the current position.
</summary>
      <remarks>
        <p>If you specify a name for the form field, then a bookmark is automatically created with the same name.</p>
      </remarks>
      <param name="name">The name of the form field. Can be an empty string.</param>
      <param name="defaultValue">Default value of the form field.</param>
      <param name="size">Specifies the size of the checkbox in points. Specify 0 for MS Word
to calculate the size of the checkbox automatically.</param>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.InsertComboBox(System.String,System.String[],System.Int32)">
      <summary>
Inserts a combobox form field at the current position.
</summary>
      <remarks>
        <p>If you specify a name for the form field, then a bookmark is automatically created with the same name.</p>
      </remarks>
      <param name="name">The name of the form field. Can be an empty string.</param>
      <param name="items">The items of the combobox. Maximum is 25 items.</param>
      <param name="selectedIndex">The index of the selected item in the combobox.</param>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.InsertImage(System.Drawing.Image)">
      <summary>
Inserts an inline image into the document.
</summary>
      <remarks>
        <p>
The image is inserted as an inline graphic.
</p>
        <p>
If the image is an EMF or WMF metafile, it will be inserted into the document 
in metafile format. All other images will be stored in Png format.
</p>
      </remarks>
      <param name="image">The image to insert into the document.</param>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.InsertImage(System.String)">
      <summary>
Inserts an inline image into the document.
</summary>
      <remarks>
        <p>
The image is inserted as an inline graphic.
</p>
        <p>
If the image is an EMF or WMF metafile, it will be inserted into the document 
in metafile format. All other images will be stored in Png format.
</p>
      </remarks>
      <param name="fileName">The file that contains the image.</param>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.InsertImage(System.Drawing.Image,System.Double,System.Double,Aspose.Word.PictureFormat)">
      <summary>
Inserts an inline image into the document and scales it to the specified size.
</summary>
      <param name="image">The image to insert into the document.</param>
      <param name="width">The width of the image in points.</param>
      <param name="height">The height if the image in points.</param>
      <param name="pictureFormat">Specifies picture properties. Optional, can be null.</param>
      <remarks>
        <p>The image is inserted as an inline graphic.</p>
        <p>If the image is an EMF or WMF metafile, it will be inserted into the document 
in metafile format. All other images will be stored in Png format.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.InsertImage(System.String,System.Double,System.Double,Aspose.Word.PictureFormat)">
      <summary>
Inserts an inline image into the document and scales it to the specified size.
</summary>
      <param name="fileName">The file that contains the image.</param>
      <param name="width">The width of the image in points.</param>
      <param name="height">The height if the image in points.</param>
      <param name="pictureFormat">Specifies picture properties. Optional, can be null.</param>
      <remarks>
        <p>The image is inserted as an inline graphic.</p>
        <p>If the image is an EMF or WMF metafile, it will be inserted into the document 
in metafile format. All other images will be stored in Png format.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.InsertImage(System.Drawing.Image,Aspose.Word.RelativeHorizontalPosition,System.Double,Aspose.Word.RelativeVerticalPosition,System.Double,System.Double,System.Double,Aspose.Word.WrapType,Aspose.Word.WrapSide,System.Boolean,Aspose.Word.PictureFormat)">
      <summary>
Inserts a floating image at the specified position.
</summary>
      <param name="image">The image to insert into the document.</param>
      <param name="leftOrigin">Where to measure the distance to the image from.</param>
      <param name="left">Distance in points from the origin to the left side of the image.</param>
      <param name="topOrigin">Where to measure the distance to the image from.</param>
      <param name="top">Distance in points from the origin to the top side of the image.</param>
      <param name="width">The width of the image in points.</param>
      <param name="height">The height if the image in points.</param>
      <param name="wrapType">Specifies how to wrap text around the image.</param>
      <param name="wrapSide">Specifies how to wrap text around image sides.</param>
      <param name="isBelowText">Specifies whether the image appears below or above text when wrapType is None.</param>
      <param name="pictureFormat">Specifies picture properties. Optional, can be null.</param>
      <remarks>
        <p>The image is inserted as a floating object.</p>
        <p>If the image is an EMF or WMF metafile, it will be inserted into the document 
in metafile format. All other images will be stored in Png format.</p>
        <p>For more info and for a code example see the other overloads of this method.</p>
      </remarks>
      <example>
This example shows how to insert a watermark image into a document.
<code>
[C#]

Document doc = new Document();
DocumentBuilder builder = new DocumentBuilder(doc);

//The best place for the watermark image is in the header or footer so it is shown on every page.
builder.MoveToHeaderFooter(HeaderFooterType.HeaderPrimary);

System.Drawing.Image image = System.Drawing.Image.FromFile("Watermark.png");

double useablePageWidth = builder.PageSetup.PageWidth - builder.PageSetup.LeftMargin - builder.PageSetup.RightMargin;
double useablePageHeight = builder.PageSetup.PageHeight - builder.PageSetup.TopMargin - builder.PageSetup.BottomMargin;

//Calculate image width and height in points.
const int PointsPerInch = 72;
double imageWidth = (image.Width / image.HorizontalResolution) * PointsPerInch;
double imageHeight = (image.Height / image.VerticalResolution) * PointsPerInch;

//Calculate image left and top position so it appears in the centre of the page.
double imageLeft = (useablePageWidth - imageWidth) / 2;
double imageTop = (useablePageHeight - imageHeight) / 2;

//Insert a floating picture.
builder.InsertImage(
	image,
	RelativeHorizontalPosition.Margin,
	imageLeft,
	RelativeVerticalPosition.Margin,
	imageTop,
	imageWidth,
	imageHeight,
	WrapType.None,	//Don't need wrapping
	WrapSide.Both,	//Does not matter in this case
	true,
	null);			

doc.Save("TestWatermark.doc");

[VB}

Dim doc As Document = New Document () 
Dim builder As DocumentBuilder = New DocumentBuilder (doc) 

'The best place for the watermark image is in the header or footer so it is shown on every page.
builder.MoveToHeaderFooter(HeaderFooterType.HeaderPrimary) 

Dim image As System.Drawing.Image = System.Drawing.Image.FromFile("Watermark.png") 

Dim useablePageWidth As Double = builder.PageSetup.PageWidth - builder.PageSetup.LeftMargin - builder.PageSetup.RightMargin 
Dim useablePageHeight As Double = builder.PageSetup.PageHeight - builder.PageSetup.TopMargin - builder.PageSetup.BottomMargin 

'Calculate image width and height in points.
Const Dim PointsPerInch As Integer = 72 
Dim imageWidth As Double = (image.Width / image.HorizontalResolution) * PointsPerInch 
Dim imageHeight As Double = (image.Height / image.VerticalResolution) * PointsPerInch 

'Calculate image left and top position so it appears in the centre of the page.
Dim imageLeft As Double = (useablePageWidth - imageWidth) / 2 
Dim imageTop As Double = (useablePageHeight - imageHeight) / 2 

'Insert a floating picture.
builder.InsertImage(image, RelativeHorizontalPosition.Margin, imageLeft, RelativeVerticalPosition.Margin, imageTop, imageWidth, imageHeight, WrapType.None, WrapSide.Both, True, null) 

doc.Save("TestWatermark.doc")
</code></example>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.InsertImage(System.String,Aspose.Word.RelativeHorizontalPosition,System.Double,Aspose.Word.RelativeVerticalPosition,System.Double,System.Double,System.Double,Aspose.Word.WrapType,Aspose.Word.WrapSide,System.Boolean,Aspose.Word.PictureFormat)">
      <summary>
Inserts a floating image at the specified position.
</summary>
      <param name="fileName">The file that contains the image.</param>
      <param name="leftOrigin">Where to measure the distance to the image from.</param>
      <param name="left">Distance in points from the origin to the left side of the image.</param>
      <param name="topOrigin">Where to measure the distance to the image from.</param>
      <param name="top">Distance in points from the origin to the top side of the image.</param>
      <param name="width">The width of the image in points.</param>
      <param name="height">The height if the image in points.</param>
      <param name="wrapType">Specifies how to wrap text around the image.</param>
      <param name="wrapSide">Specifies how to wrap text around image sides.</param>
      <param name="isBelowText">Specifies whether the image appears below or above text when wrapType is None.</param>
      <param name="pictureFormat">Specifies picture properties. Optional, can be null.</param>
      <remarks>
        <p>The image is inserted as a floating object.</p>
        <p>If the image is an EMF or WMF metafile, it will be inserted into the document 
in metafile format. All other images will be stored in Png format.</p>
        <p>For more info and for a code example see the other overloads of this method.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.InsertHtml(System.String)">
      <summary>
Inserts HTML string into the document.
</summary>
      <remarks>
        <p>You can use InsertHtml to insert an HTML fragment or whole HTML document.</p>
      </remarks>
      <example>
        <code>
[C#]

Document doc = new Document();
DocumentBuilder builder = new DocumentBuilder(this.doc);

builder.InsertHtml(
	"&lt;P align='right'&gt;Paragraph right&lt;/P&gt;" +
	"&lt;b&gt;Implicit paragraph left&lt;/b&gt;" +
	"&lt;div align='center'&gt;Div center&lt;/div&gt;" +
	"&lt;h1 align='left'&gt;Heading 1 left.&lt;/h1&gt;");

doc.Save("TestInsertHtml.doc");

[VB]

Dim doc As Document = New Document () 
Dim builder As DocumentBuilder = New DocumentBuilder (Me.doc) 

builder.InsertHtml( _
	"&lt;P align='right'&gt;Paragraph right&lt;/P&gt;" + _
	"&lt;b&gt;Implicit paragraph left&lt;/b&gt;" + _
	"&lt;div align='center'&gt;Div center&lt;/div&gt;" + _
	"&lt;h1 align='left'&gt;Heading 1 left.&lt;/h1&gt;") 
	
doc.Save("TestInsertHtml.doc")
</code>
      </example>
      <param name="html">HTML string to insert into the document.</param>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.InsertCell">
      <summary>
Inserts a table cell into the document.
</summary>
      <remarks>
        <p>To start a table, just call <b>InsertCell</b>. After this, any content you add using 
other methods of the <see cref="T:Aspose.Word.DocumentBuilder" /> class will be added to the current cell.</p>
        <p>To start a new cell in the same row, call <b>InsertCell</b> again.</p>
        <p>To end a table row call <see cref="M:Aspose.Word.DocumentBuilder.EndRow" />.</p>
        <p>Use the <see cref="P:Aspose.Word.DocumentBuilder.CellFormat" /> property to specify cell formatting.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.StartTable">
      <summary>
Starts a table in the document.
</summary>
      <remarks>
        <p>The next method to call is <see cref="M:Aspose.Word.DocumentBuilder.InsertCell" />.</p>
        <p>This method starts a nested table when called inside a cell.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.EndTable">
      <summary>
Ends a table in the document.
</summary>
      <remarks>
        <p>This method should be called only once after <see cref="M:Aspose.Word.DocumentBuilder.EndRow" /> was called. When called, 
<b>EndTable</b> moves the cursor out of the current cell to point just after the table.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.EndRow">
      <summary>
Ends a table row in the document.
</summary>
      <remarks>
        <p>Call <b>EndRow</b> to end a table row. If you call <see cref="M:Aspose.Word.DocumentBuilder.InsertCell" /> immediately
after that, then the table continues on a new row.</p>
        <p>Use the <see cref="P:Aspose.Word.DocumentBuilder.RowFormat" /> property to specify row formatting.</p>
      </remarks>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.StartBookmark(System.String)">
      <summary>
Marks the current position in the document as a bookmark start. 
</summary>
      <remarks>
        <p>Bookmarks in a document can overlap and span any range. To create a valid bookmark you need to 
call both <see cref="M:Aspose.Word.DocumentBuilder.StartBookmark(System.String)" /> and <see cref="M:Aspose.Word.DocumentBuilder.EndBookmark(System.String)" /> with the same <b>bookmarkName</b> 
parameter.</p>
        <p>Badly formed bookmarks or bookmarks with duplicate names will be ignored when the document is saved.</p>
      </remarks>
      <example>
This examples adds some text into the document and encloses the text in a bookmark.
<code>
[C#]

DocumentBuilder builder = new DocumentBuilder(doc);
builder.StartBookmark("MyBookmark");
builder.Writeln("Text inside a bookmark.");
builder.EndBookmark("MyBookmark");

[VB]

Dim builder As DocumentBuilder =  New DocumentBuilder(doc) 
builder.StartBookmark("MyBookmark")
builder.Writeln("Text inside a bookmark.")
builder.EndBookmark("MyBookmark")		
</code></example>
      <param name="bookmarkName">Name of the bookmark.</param>
    </member>
    <member name="M:Aspose.Word.DocumentBuilder.EndBookmark(System.String)">
      <summary>
Marks the current position in the document as a bookmark end.
</summary>
      <remarks>
        <p>Bookmarks in a document can overlap and span any range. To create a valid bookmark you need to 
call both <see cref="M:Aspose.Word.DocumentBuilder.StartBookmark(System.String)" /> and <see cref="M:Aspose.Word.DocumentBuilder.EndBookmark(System.String)" /> with the same <b>bookmarkName</b> 
parameter.</p>
        <p>Badly formed bookmarks or bookmarks with duplicate names will be ignored when the document is saved.</p>
      </remarks>
      <example>
This examples adds some text into the document and encloses the text in a bookmark.
<code>
[C#]

DocumentBuilder builder = new DocumentBuilder(doc);
builder.StartBookmark("MyBookmark");
builder.Writeln("Text inside a bookmark.");
builder.EndBookmark("MyBookmark");

[VB]

Dim builder As DocumentBuilder =  New DocumentBuilder(doc) 
builder.StartBookmark("MyBookmark")
builder.Writeln("Text inside a bookmark.")
builder.EndBookmark("MyBookmark")		
</code></example>
      <param name="bookmarkName">Name of the bookmark.</param>
    </member>
    <member name="P:Aspose.Word.DocumentBuilder.Document">
      <summary>
Gets or sets <see cref="P:Aspose.Word.DocumentBuilder.Document" /> that this object is attached to.
</summary>
    </member>
    <member name="P:Aspose.Word.DocumentBuilder.Font">
      <summary>
Returns an object that represents current font formatting properties.
</summary>
      <remarks>
        <p>Use <b>Font</b> to access and modify font formatting properties.</p>
        <p>Specify font formatting before inserting text.</p>
      </remarks>
    </member>
    <member name="P:Aspose.Word.DocumentBuilder.Bold">
      <summary>
True if the font is formatted as bold.
</summary>
    </member>
    <member name="P:Aspose.Word.DocumentBuilder.Italic">
      <summary>
True if the font is formatted as italic.
</summary>
    </member>
    <member name="P:Aspose.Word.DocumentBuilder.Underline">
      <summary>
Gets/sets underline type for the current font.
</summary>
    </member>
    <member name="P:Aspose.Word.DocumentBuilder.ParagraphFormat">
      <summary>
Returns an object that represents current paragraph formatting properties.
</summary>
    </member>
    <member name="P:Aspose.Word.DocumentBuilder.ListFormat">
      <summary>
Returns an object that represents current list formatting properties.
</summary>
    </member>
    <member name="P:Aspose.Word.DocumentBuilder.PageSetup">
      <summary>
Returns an object that represents current page setup and section properties.
</summary>
    </member>
    <member name="P:Aspose.Word.DocumentBuilder.RowFormat">
      <summary>
Returns an object that represents current table row formatting properties.
</summary>
    </member>
    <member name="P:Aspose.Word.DocumentBuilder.CellFormat">
      <summary>
Returns an object that represents current table cell formatting properties.
</summary>
    </member>
    <member name="P:Aspose.Word.DocumentBuilder.CurrentNode">
      <summary>
            Gets the node that is currently selected in this DocumentBuilder.
            </summary>
      <remarks>
        <p>
          <b>CurrentNode</b> is a cursor of <b>DocumentBuilder</b> and points to a <b>Node</b> 
            that is a direct child of a <b>Paragraph</b>. Any insert operations you perform using 
            <b>DocumentBuilder</b> will insert before the <b>CurrentNode</b>.</p>
        <p>When the current paragraph is empty or the cursor is positioned just
            before the end of the paragraph, <b>CurrentNode</b> returns null.</p>
        <seealso cref="P:Aspose.Word.DocumentBuilder.CurrentParagraph" />
      </remarks>
    </member>
    <member name="P:Aspose.Word.DocumentBuilder.CurrentParagraph">
      <summary>
            Gets the paragraph that is currently selected in this DocumentBuilder.
            </summary>
      <remarks>
        <see cref="P:Aspose.Word.DocumentBuilder.CurrentNode" />
      </remarks>
    </member>
    <member name="T:Aspose.Word.Viewer.PageEventArgs">
      <preliminary />
      <summary>
            Contains pagination info such as page settings and page number.
            </summary>
    </member>
    <member name="M:Aspose.Word.Viewer.PageEventArgs.#ctor(Aspose.Word.PageSetup,System.Int32,System.Drawing.Graphics)">
      <preliminary />
      <summary>
            Constructs an instance of Aspose.Word.Visualizer.
            </summary>
      <param name="pageSetup">Page settings.</param>
      <param name="pageNumber">Page number.</param>
      <param name="graphics">
      </param>
    </member>
    <member name="P:Aspose.Word.Viewer.PageEventArgs.PageSetup">
      <preliminary />
      <summary>
            Gets current page settings.
            </summary>
    </member>
    <member name="P:Aspose.Word.Viewer.PageEventArgs.PageNumber">
      <preliminary />
      <summary>
            Gets current page number.
            </summary>
    </member>
    <member name="P:Aspose.Word.Viewer.PageEventArgs.Graphics">
      <preliminary />
      <summary>
            Gets or sets graphics surface for the current page;
            </summary>
    </member>
    <member name="T:Aspose.Word.Viewer.PageEventHandler">
      <preliminary />
      <summary>
            Represents an event handler for all Page events.
            </summary>
    </member>
    <member name="T:Aspose.Word.Viewer.DocumentRenderer">
      <summary>
            Renders or prints a Microsoft Word document.
            </summary>
      <remarks>
        <p>DocumentRenderer is the main class to render or print a document. It accepts a <b>Document</b> object
            to render. Use the <b>GetPage</b> and <b>GetPages</b> methods to get the rendered pages as bitmaps. Use
            the <b>Print</b> method to print current document.</p>
      </remarks>
      <preliminary />
    </member>
    <member name="M:Aspose.Word.Viewer.DocumentRenderer.#ctor">
      <summary>
            Constructs a new instance of the <b>DocumentRenderer</b>.
            </summary>
    </member>
    <member name="M:Aspose.Word.Viewer.DocumentRenderer.#ctor(System.String)">
      <preliminary />
      <summary>
            Opens a document from a file.
            </summary>
      <param name="fileName">Name of the document file.</param>
    </member>
    <member name="M:Aspose.Word.Viewer.DocumentRenderer.#ctor(System.IO.Stream)">
      <preliminary />
      <summary>
            Opens a document from a stream.
            </summary>
      <param name="stream">A stream object containing document data.</param>
    </member>
    <member name="M:Aspose.Word.Viewer.DocumentRenderer.#ctor(Aspose.Word.Document)">
      <preliminary />
      <summary>
            Initializes a new instance of the visualizer with existing Aspose.Word.Document object.
            </summary>
      <param name="document">An Aspose.Word.Document object.</param>
    </member>
    <member name="M:Aspose.Word.Viewer.DocumentRenderer.Print">
      <summary>
            Performs document printing.
            </summary>
      <remarks>
            Call this method to start printing of the document. Use <b>CancelPrinting</b> to cancell the printing process.
            </remarks>
    </member>
    <member name="M:Aspose.Word.Viewer.DocumentRenderer.CancelPrinting">
      <summary>
            Cancels document printing.
            </summary>
    </member>
    <member name="M:Aspose.Word.Viewer.DocumentRenderer.GetPage(System.Int32)">
      <summary>
            Gets a Bitmap object that contains page with specified number.
            </summary>
      <param name="pageNumber">The number of the page.</param>
      <returns>The drawn page.</returns>
      <remarks>
            Use this method to obtain a bitmap with the specified rendered page.
            </remarks>
    </member>
    <member name="M:Aspose.Word.Viewer.DocumentRenderer.GetPages">
      <summary>
            Gets an array of all the pages of the document.
            </summary>
      <returns>The drawn pages.</returns>
      <remarks>
            Use this method to get an array of bitmaps with rendered pages.
            </remarks>
    </member>
    <member name="E:Aspose.Word.Viewer.DocumentRenderer.StartDocument">
      <summary>
            Occurs when document visualization is started.
            </summary>
    </member>
    <member name="E:Aspose.Word.Viewer.DocumentRenderer.EndDocument">
      <summary>
            Occurs when document visualization is finished.
            </summary>
    </member>
    <member name="E:Aspose.Word.Viewer.DocumentRenderer.StartPage">
      <summary>
            Occurs when page visualization is started.
            </summary>
    </member>
    <member name="E:Aspose.Word.Viewer.DocumentRenderer.EndPage">
      <summary>
            Occurs when page visualization is finished.
            </summary>
    </member>
    <member name="P:Aspose.Word.Viewer.DocumentRenderer.Document">
      <summary>
            Gets or sets document to render or print.
            </summary>
    </member>
    <member name="P:Aspose.Word.Viewer.DocumentRenderer.PageBounds">
      <summary>
            Gets or sets page design.
            </summary>
    </member>
    <member name="P:Aspose.Word.Viewer.DocumentRenderer.BackgroundColor">
      <summary>
            Gets or sets background color of the pages.
            </summary>
    </member>
    <member name="T:Aspose.Word.Viewer.PageNavigator">
      <summary>
            Allows to navigate through the document pages.
            </summary>
      <remarks>
        <b>PageNavigator</b> allows to navigate through document pages. It accepts a <b>DocumentRenderer</b>
            object and supports various methods to move to previous, next, firs, last, and specified page.
            Use the <b>CurrentPage</b> property to obtain the current page.
            </remarks>
      <preliminary />
    </member>
    <member name="M:Aspose.Word.Viewer.PageNavigator.#ctor(Aspose.Word.Viewer.DocumentRenderer)">
      <summary>
            Constructs a page navigator instance.
            </summary>
      <param name="renderer">
        <b>DocumentRenderer</b> used to render the document.</param>
    </member>
    <member name="M:Aspose.Word.Viewer.PageNavigator.MoveToPreviousPage">
      <summary>
            Moves to previous page.
            </summary>
    </member>
    <member name="M:Aspose.Word.Viewer.PageNavigator.MoveToNextPage">
      <summary>
            Moves to next page.
            </summary>
    </member>
    <member name="M:Aspose.Word.Viewer.PageNavigator.MoveToFirstPage">
      <summary>
            Moves to first page.
            </summary>
    </member>
    <member name="M:Aspose.Word.Viewer.PageNavigator.MoveToLastPage">
      <summary>
            Moves to last page.
            </summary>
    </member>
    <member name="M:Aspose.Word.Viewer.PageNavigator.GoToPage(System.Int32)">
      <summary>
            Goes to a page with the specified number.
            </summary>
      <param name="pageNumber">Desired page number.</param>
    </member>
    <member name="P:Aspose.Word.Viewer.PageNavigator.Renderer">
      <summary>
            Returns the <b>DocumentRenderer</b> object.
            </summary>
    </member>
    <member name="P:Aspose.Word.Viewer.PageNavigator.PageCount">
      <summary>
            Gets total number of pages.
            </summary>
    </member>
    <member name="P:Aspose.Word.Viewer.PageNavigator.CurrentPage">
      <summary>
            Gets a <b>Bitmap</b> object that represents current page.
            </summary>
    </member>
    <member name="P:Aspose.Word.Viewer.PageNavigator.CurrentPageNumber">
      <summary>
            Gets number of current page.
            </summary>
    </member>
    <member name="P:Aspose.Word.Viewer.PageNavigator.IsFirstPage">
      <summary>
            Returns true if current page is first.
            </summary>
    </member>
    <member name="P:Aspose.Word.Viewer.PageNavigator.IsLastPage">
      <summary>
            Returns true if current page is last.
            </summary>
    </member>
    <member name="P:Aspose.Word.Viewer.PageNavigator.PageCounterString">
      <summary>
            Returns a string "Page x of y" where <i>x</i> is current page number and <i>y</i> is total number of pages.
            </summary>
    </member>
    <member name="T:Aspose.Word.Viewer.PageBounds">
      <summary>
            Specifies how page bounds look like.
            </summary>
    </member>
    <member name="F:Aspose.Word.Viewer.PageBounds.None">
      <summary>
            No page bounds are drawn.
            </summary>
    </member>
    <member name="F:Aspose.Word.Viewer.PageBounds.Separator">
      <summary>
            Dotted separator between pages.
            </summary>
    </member>
    <member name="F:Aspose.Word.Viewer.PageBounds.Border">
      <summary>
            Rectangular border.
            </summary>
    </member>
    <member name="F:Aspose.Word.Viewer.PageBounds.Border3D">
      <summary>
            Rectangular border with shadow.
            </summary>
    </member>
    <member name="T:Aspose.Word.License">
      <summary>
            Provides methods to license the component.
            </summary>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code></example>
    </member>
    <member name="M:Aspose.Word.License.#ctor">
      <summary>
            Initializes a new instance of this class.
            </summary>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code></example>
    </member>
    <member name="M:Aspose.Word.License.SetLicense(System.String)">
      <summary>
            Licenses the component.
            </summary>
      <param name="licenseName">Can be a full or short file name or name of an embedded resource.
            Use an empty string to switch to evaluation mode.</param>
      <remarks>
        <p>Tries to find the license in the following locations:</p>
        <p>1. Explicit path.</p>
        <p>2. The folder of the component assembly.</p>
        <p>3. The folder of the client's calling assembly.</p>
        <p>4. The folder of the entry assembly.</p>
        <p>5. An embedded resource in the client's calling assembly.</p>
      </remarks>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As License = New License
            license.SetLicense("MyLicense.lic")
            </code></example>
    </member>
    <member name="M:Aspose.Word.License.SetLicense(System.IO.Stream)">
      <summary>
            Licenses the component.
            </summary>
      <param name="stream">A stream that contains the license. Use null to switch to evaluation mode.</param>
      <remarks>
        <p>Use this method to load a license from a stream.</p>
      </remarks>
      <example>
        <code>
            [C#]
            
            License license = new License();
            license.SetLicense(myStream);
            
            
            [Visual Basic]
            
            Dim license as License = new License
            license.SetLicense(myStream)
            </code>
      </example>
    </member>
    <member name="T:Aspose.Word.PleaseReportException">
      <summary>
            Thrown when something unexpected or undocumented is encountered in a DOC file.
            </summary>
      <remarks>
            Since MS Word file format is not 100% documented, this exception is thrown when 
            we would like you to post the error and the document that caused the exception 
            in the Aspose.Forums (http://www.aspose.com/Forums) for Aspose developers to 
            investigate and fix.
            </remarks>
    </member>
    <member name="T:Aspose.Word.SaveFormat">
      <summary>
            Indicates the format in which the document is saved.
            </summary>
      <example>
        <p>This example shows how to save a DOC file in PDF format. This requires Aspose.Pdf (purchased separately).</p>
        <p>To convert a document into PDF format it needs to be saved in Aspose.Pdf.Xml format,
            then Aspose.Pdf can read the XML file and produce a PDF file.</p>
        <p>If the document contains images, <b>Aspose.Word</b> will save every image into a 
            separate file and include the file name in the produced XML file. The image files 
            are created in the same folder where the XML file is saved. If you are saving the 
            XML file to a stream, <b>Aspose.Word</b> will save images to the Windows temporary folder.</p>
        <note>
          <b>Aspose.Word</b> does not automatically delete the image files.
            The responsibility to delete the image files lies with <b>Aspose.Pdf</b>. To instruct
            <b>Aspose.Pdf</b> to delete image files, set <b>Pdf.IsImagesInXmlDeleteNeeded</b>
            property to true.</note>
        <note>Some formatting specified in a Microsoft Word document might be
            lost when converting to PDF.</note>
        <code>
            [C#]
            
            //Open the DOC file using Aspose.Word.
            Aspose.Word.Word word = new Aspose.Word.Word();
            Document doc = word.Open("MyDocument.doc");
            
            //...You can merge data/manipulate document content here.
            
            //Save the document in Aspose.Pdf.Xml format.
            doc.Save("MyDocument.xml", SaveFormat.FormatAsposePdf);
            
            //Read the document in Aspose.Pdf.Xml format into Aspose.Pdf.
            Aspose.Pdf.Pdf pdf = new Aspose.Pdf.Pdf();
            pdf.BindXML("MyDocument.xml", null);
            
            //Instruct to delete temporary image files.
            pdf.IsImagesInXmlDeleteNeeded = true;
            
            //Produce the PDF file.
            pdf.Save("MyDocument.pdf");
            
            
            [VB]
            
            'Open the DOC file using Aspose.Word.
            Dim word As Aspose.Word.Word =  New Aspose.Word.Word() 
            Document doc  =  word.Open("MyDocument.doc")
            
            'You can merge data/manipulate document content here.
            
            'Save the document in Aspose.Pdf.Xml format.
            doc.Save("MyDocument.xml", SaveFormat.FormatAsposePdf)
            
            'Read the document in Aspose.Pdf.Xml format into Aspose.Pdf.
            Dim pdf As Aspose.Pdf.Pdf =  New Aspose.Pdf.Pdf() 
            pdf.BindXML("MyDocument.xml", Nothing)
            
            'Instruct to delete temporary image files.
            pdf.IsImagesInXmlDeleteNeeded = true;
             
            'Produce the PDF file.
            pdf.Save("MyDocument.pdf")
            </code>
      </example>
    </member>
    <member name="F:Aspose.Word.SaveFormat.FormatDocument">
      <summary>
            Saves as a Word document.
            </summary>
    </member>
    <member name="F:Aspose.Word.SaveFormat.FormatText">
      <summary>
            Saves text without formatting. Uses UTF8 encoding.
            </summary>
    </member>
    <member name="F:Aspose.Word.SaveFormat.FormatAsposePdf">
      <summary>
            Saves the document in Aspose.Pdf.Xml format that can be read by Aspose.Pdf to produce a PDF file.
            </summary>
    </member>
    <member name="F:Aspose.Word.SaveFormat.FormatHtml">
      <summary>
            Saves the document in HTML format.
            </summary>
    </member>
    <member name="T:Aspose.Word.LoadFormat">
      <summary>
            Indicates the format of the document that is to be loaded.
            </summary>
    </member>
    <member name="F:Aspose.Word.LoadFormat.FormatDocument">
      <summary>
            Microsoft Word binary .DOC format.
            </summary>
    </member>
    <member name="F:Aspose.Word.LoadFormat.FormatHtml">
      <summary>
            HTML format.
            </summary>
    </member>
    <member name="F:Aspose.Word.LoadFormat.FormatRtf">
      <summary>
            RTF format.
            </summary>
    </member>
    <member name="F:Aspose.Word.LoadFormat.FormatUnknown">
      <summary>
            Unrecognized format, cannot be loaded by Aspose.Word.
            </summary>
    </member>
    <member name="F:Aspose.Word.LoadFormat.FormatAuto">
      <summary>
            Instructs Aspose.Word to recognize the format automatically.
            </summary>
    </member>
    <member name="F:Aspose.Word.LoadFormat.FormatWordML">
      <summary>
            WordProcessingML (Word 2003 XML) format.
            </summary>
    </member>
    <member name="T:Aspose.Word.ProtectionType">
      <summary>
            Protection type for a document.
            </summary>
    </member>
    <member name="F:Aspose.Word.ProtectionType.AllowOnlyComments">
      <summary>
            User can only modify comments in the document.
            </summary>
    </member>
    <member name="F:Aspose.Word.ProtectionType.AllowOnlyFormFields">
      <summary>
            User can only enter data in the form fields in the document.
            </summary>
    </member>
    <member name="F:Aspose.Word.ProtectionType.AllowOnlyRevisions">
      <summary>
            User can only add revision marks to the document.
            </summary>
    </member>
    <member name="F:Aspose.Word.ProtectionType.ReadOnly">
      <summary>
            No changes are allowed to the document. Available in MS Word 2003.
            </summary>
    </member>
    <member name="F:Aspose.Word.ProtectionType.NoProtection">
      <summary>
            The document is not protected.
            </summary>
    </member>
    <member name="T:Aspose.Word.SaveType">
      <summary>
            Enumerates different ways of presenting the document at the client browser. 
            </summary>
    </member>
    <member name="F:Aspose.Word.SaveType.OpenInWord">
      <summary>
            Send the document to the browser and present an option to save the
            document to disk or open in an application associated with .doc extension.
            </summary>
    </member>
    <member name="F:Aspose.Word.SaveType.OpenInBrowser">
      <summary>
            Send the document to the browser and presents an option to save the 
            document to disk or open inside the browser.
            </summary>
    </member>
    <member name="T:Aspose.Word.HeaderFooterType">
      <summary>
            Identifies the type of header or footer found in a Word file.
            </summary>
      <rev>
            This is a per section header/footer. 
            Do not renumber as the value of the enum used as an index into plcfhdd.
            </rev>
    </member>
    <member name="F:Aspose.Word.HeaderFooterType.HeaderEven">
      <summary>
            Header for even numbered pages.
            </summary>
    </member>
    <member name="F:Aspose.Word.HeaderFooterType.HeaderPrimary">
      <summary>
            Primary header, also used for odd numbered pages.
            </summary>
    </member>
    <member name="F:Aspose.Word.HeaderFooterType.FooterEven">
      <summary>
            Footer for even numbered pages.
            </summary>
    </member>
    <member name="F:Aspose.Word.HeaderFooterType.FooterPrimary">
      <summary>
            Primary footer, also used for odd numbered pages.
            </summary>
    </member>
    <member name="F:Aspose.Word.HeaderFooterType.HeaderFirst">
      <summary>
            Header for the first page of the section.
            </summary>
    </member>
    <member name="F:Aspose.Word.HeaderFooterType.FooterFirst">
      <summary>
            Footer for the first page of the section.
            </summary>
    </member>
    <member name="T:Aspose.Word.BreakType">
      <summary>
            Specifies type of a break inside a document.
            </summary>
    </member>
    <member name="F:Aspose.Word.BreakType.ParagraphBreak">
      <summary>
            Break between paragraphs.
            </summary>
    </member>
    <member name="F:Aspose.Word.BreakType.PageBreak">
      <summary>
            Explicit page break.
            </summary>
    </member>
    <member name="F:Aspose.Word.BreakType.ColumnBreak">
      <summary>
            Explicit column break. 
            </summary>
    </member>
    <member name="F:Aspose.Word.BreakType.SectionBreakContinuous">
      <summary>
            Specifies start of new section on the same page as the previous section.
            </summary>
    </member>
    <member name="F:Aspose.Word.BreakType.SectionBreakNewColumn">
      <summary>
            Specifies start of new section in the new column.
            </summary>
    </member>
    <member name="F:Aspose.Word.BreakType.SectionBreakNewPage">
      <summary>
            Specifies start of new section on a new page.
            </summary>
    </member>
    <member name="F:Aspose.Word.BreakType.SectionBreakEvenPage">
      <summary>
            Specifies start of new section on a new even page.
            </summary>
    </member>
    <member name="F:Aspose.Word.BreakType.SectionBreakOddPage">
      <summary>
            Specifies start of new section on a odd page.
            </summary>
    </member>
    <member name="F:Aspose.Word.BreakType.LineBreak">
      <summary>
            Explicit line break.
            </summary>
    </member>
    <member name="T:Aspose.Word.SectionStart">
      <summary>
            The type of break at the beginning of the section.
            </summary>
    </member>
    <member name="F:Aspose.Word.SectionStart.Continuous">
      <summary>
            The new section starts on the same page as the previous section.
            </summary>
    </member>
    <member name="F:Aspose.Word.SectionStart.NewColumn">
      <summary>
            The section starts from a new column.
            </summary>
    </member>
    <member name="F:Aspose.Word.SectionStart.NewPage">
      <summary>
            The section starts from a new page.
            </summary>
    </member>
    <member name="F:Aspose.Word.SectionStart.EvenPage">
      <summary>
            The section starts on a new even page.
            </summary>
    </member>
    <member name="F:Aspose.Word.SectionStart.OddPage">
      <summary>
            The section starts on a new odd page.
            </summary>
    </member>
    <member name="T:Aspose.Word.ControlChar">
      <summary>
            Control characters often encountered in documents.
            </summary>
      <remarks>
            Provides both char and string versions of the same constants. For example:
            string ControlChar.LineBreak and char ControlChar.LineBreakChar have the same value.
            </remarks>
    </member>
    <member name="F:Aspose.Word.ControlChar.PictureChar">
      <summary>
            Placeholder for an inline picture: (char)1.
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.FootnoteRefChar">
      <summary>
            Footnote reference character: (char)2.
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.AnnotationRefChar">
      <summary>
            Annotation (comment) reference character: (char)5.
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.CellChar">
      <summary>
            End of non-nested table cell or row character: (char)7 or "\a". 
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.DrawnObjectChar">
      <summary>
            Placeholder for a drawing object: (char)8 or "\b".
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.TabChar">
      <summary>
            Tab character: (char)9 or "\t".
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.LineFeedChar">
      <summary>
            Line feed character: (char)10 or "\n".
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.LineBreakChar">
      <summary>
            Line break character: (char)11 or "\v".
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.PageBreakChar">
      <summary>
            Page break character: (char)12 or "\f".
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.SectionBreakChar">
      <summary>
            End of section character: (char)12 or "\f". 
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.ParagraphBreakChar">
      <summary>
            End of paragraph character: (char)13. 
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.ColumnBreakChar">
      <summary>
            Enf of column character: (char)14.
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.FieldStartChar">
      <summary>
            Start of MS Word field character: (char)19.
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.FieldSeparatorChar">
      <summary>
            Field separator character separates field code from field value. Optional in some fields. Value: (char)20.
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.FieldEndChar">
      <summary>
            End of MS Word field character: (char)21.
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.NonBreakingSpaceChar">
      <summary>
            Non-breaking space character: (char)160.
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.DefaultTextInputChar">
      <summary>
            This is the "o" character used as a default value in text input form fields.
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.Picture">
      <summary>
            Placeholder for an inline picture: "\x0001".
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.FootnoteRef">
      <summary>
            Footnote reference character: "\x0002".
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.AnnotationRef">
      <summary>
            Annotation (comment) reference character: "\x0005".
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.DrawnObject">
      <summary>
            Placeholder for a drawing object: "\x0008" or "\b".
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.Cell">
      <summary>
            End of non-nested table cell or row character: "\x0007" or "\a". Nested table cells and rows end with <see cref="F:Aspose.Word.ControlChar.ParagraphBreak" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.Tab">
      <summary>
            Tab character: "\x0009" or "\t".
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.Lf">
      <summary>
            Line feed character: "\x000a" or "\n". Same as <see cref="F:Aspose.Word.ControlChar.LineFeed" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.LineFeed">
      <summary>
            Line feed character: "\x000a" or "\n". Same as <see cref="F:Aspose.Word.ControlChar.Lf" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.LineBreak">
      <summary>
            Line break character: "\x000b" or "\v".
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.PageBreak">
      <summary>
            Page break character: "\x000c" or "\f". Note it has the same value as <see cref="F:Aspose.Word.ControlChar.SectionBreak" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.SectionBreak">
      <summary>
            End of section character: "\x000c" or "\f". Note it has the same value as <see cref="F:Aspose.Word.ControlChar.PageBreak" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.Cr">
      <summary>
            Carriage return character: "\x000d" or "\r". Same as <see cref="F:Aspose.Word.ControlChar.ParagraphBreak" />. 
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.ParagraphBreak">
      <summary>
            End of paragraph chracter: "\x000d" or "\r". Same as <see cref="F:Aspose.Word.ControlChar.Cr" /></summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.ColumnBreak">
      <summary>
            Enf of column character: "\x000e".
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.CrLf">
      <summary>
            Carriage return followed by line feed character: "\x000d\x000a" or "\r\n". 
            Commonly used in text files for paragraph breaks.
            </summary>
    </member>
    <member name="F:Aspose.Word.ControlChar.NonBreakingSpace">
      <summary>
            Non-breaking space character: "x\00a0".
            </summary>
    </member>
    <member name="T:Aspose.Word.StoryType">
      <summary>
            Text of a Word document is stored in stories. <b>StoryType</b> identifies a story.
            </summary>
    </member>
    <member name="F:Aspose.Word.StoryType.MainText">
      <summary>
            Contains the main text of the document, represented by <see cref="T:Aspose.Word.Body" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.StoryType.Footnotes">
      <summary>
            Contains footnote text, represented by <see cref="T:Aspose.Word.Footnote" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.StoryType.Endnotes">
      <summary>
            Contains endnotes text, represented by <see cref="T:Aspose.Word.Footnote" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.StoryType.Comments">
      <summary>
            Contains document comments (annotations). 
            </summary>
    </member>
    <member name="F:Aspose.Word.StoryType.TextFrame">
      <summary>
            Contains shape or textbox text, represented by <see cref="T:Aspose.Word.Shape" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.StoryType.EvenPagesHeader">
      <summary>
            Contains text of the even pages header, represented by <see cref="T:Aspose.Word.HeaderFooter" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.StoryType.PrimaryHeader">
      <summary>
            Contains text of the primary header. When header is different for odd and even pages,
            contains text of the odd pages header. Represented by <see cref="T:Aspose.Word.HeaderFooter" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.StoryType.EvenPagesFooter">
      <summary>
            Contains text of the even pages footer, represented by <see cref="T:Aspose.Word.HeaderFooter" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.StoryType.PrimaryFooter">
      <summary>
            Contains text of the primary footer. When footer is different for odd and even pages,
            contains text of the odd pages footer. Represented by <see cref="T:Aspose.Word.HeaderFooter" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.StoryType.FirstPageHeader">
      <summary>
            Contains text of the first page header, represented by <see cref="T:Aspose.Word.HeaderFooter" />.
            </summary>
    </member>
    <member name="F:Aspose.Word.StoryType.FirstPageFooter">
      <summary>
            Contains text of the first page footer, represented by <see cref="T:Aspose.Word.HeaderFooter" />.
            </summary>
    </member>
    <member name="T:Aspose.Word.FieldType">
      <summary>
            Enumeration that identifies all different types of Word fields.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldFormula">
      <summary>
            Calculates the result of an expression.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldAdvance">
      <summary>
            Offset subsequent text within a line to the left, right, up or down.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldAddin">
      <summary>
            Unsupported.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldAsk">
      <summary>
            Prompt the user for text to assign to a bookmark.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldAuthor">
      <summary>
            The name of the document's author from Summary Info.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldAutoNum">
      <summary>
            Insert an automatic number.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldAutoNumLegal">
      <summary>
            Insert an automatic number in legal format.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldAutoNumOutline">
      <summary>
            Insert an automatic number in outline format.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldAutoText">
      <summary>
            Insert an AutoText entry.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldAutoTextList">
      <summary>
            Insert text based on style.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldBarCode">
      <summary>
            Insert a delivery point barcode.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldComments">
      <summary>
            The comments from Summary Info.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldCompare">
      <summary>
            Compares two values.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldCreateDate">
      <summary>
            The date the document was created.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldData">
      <summary>
            Unsupported.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldDatabase">
      <summary>
            Insert data from an external database.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldDate">
      <summary>
            Today's date.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldDDE">
      <summary>
            Unsupported.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldDDEAuto">
      <summary>
            Unsupported.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldDocProperty">
      <summary>
            Insert the value of the property.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldDocVariable">
      <summary>
            Insert the value of the document variable.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldEditTime">
      <summary>
            The total document editing time.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldEmbed">
      <summary>
            OLE2 embedded object.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldEmpty">
      <summary>
            Unsupported.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldExpression">
      <summary>
            Create a scientific equation.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldFileName">
      <summary>
            The document's name and location.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldFileSize">
      <summary>
            The size on disk of the active document.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldFillIn">
      <summary>
            Prompt the user for text to insert in the document.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldFootnoteRef">
      <summary>
            Unsupported.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldFormCheckBox">
      <summary>
            Check box control.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldFormDropDown">
      <summary>
            Drop down control.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldFormTextInput">
      <summary>
            Text control.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldGlossary">
      <summary>
            Unsupported.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldGoToButton">
      <summary>
            Move the insertion point to a new location.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldHTMLActiveX">
      <summary>
            Unsupported.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldHyperlink">
      <summary>
            Open and jump to the specified file.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldIf">
      <summary>
            Evaluate arguments conditionally.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldInclude">
      <summary>
            Unsupported.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldIncludePicture">
      <summary>
            Insert a picture from a file.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldIncludeText">
      <summary>
            Insert text from a file.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldIndex">
      <summary>
            Create an index.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldIndexEntry">
      <summary>
            Mark an index entry.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldInfo">
      <summary>
            Data from Summary Info.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldImport">
      <summary>
            Unsupported.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldKeyWord">
      <summary>
            The keywords from Summary Info.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldLastSavedBy">
      <summary>
            Name of user who last saved the document.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldLink">
      <summary>
            Insert part of a file by using OLE.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldListNum">
      <summary>
            Insert an element in a list.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldMacroButton">
      <summary>
            Run a macro.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldMergeField">
      <summary>
            Insert a mail merge field.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldMergeRec">
      <summary>
            The number of the current merge record.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldMergeSeq">
      <summary>
            Merge record sequence number.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldNext">
      <summary>
            Go to the next record in a mail merge.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldNextIf">
      <summary>
            Conditionally go to the next record in a mail merge.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldNoteRef">
      <summary>
            Insert the number of a footnote or endnote.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldNumChars">
      <summary>
            The number of characters in the document.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldNumPages">
      <summary>
            The number of pages in the document.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldNumWords">
      <summary>
            The number of words in the document.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldOCX">
      <summary>
            This is used for controls such as command button etc.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldPage">
      <summary>
            Insert the number of the current page.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldPageRef">
      <summary>
            Insert the number of the page containing the specified bookmark.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldPrint">
      <summary>
            Download commands to a printer.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldPrintDate">
      <summary>
            The date the document was last printed.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldPrivate">
      <summary>
            Store data for documents converted from other file formats.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldQuote">
      <summary>
            Insert literal text.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldRef">
      <summary>
            Insert the text marked by a bookmark.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldRefDoc">
      <summary>
            Create an index, table of contents, table of figures, and/or table of authorities by using multiple documents.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldRevisionNum">
      <summary>
            Insert the number of times the document has been saved.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldSaveDate">
      <summary>
            The date the document was last saved.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldSection">
      <summary>
            Insert the number of the current section.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldSectionPages">
      <summary>
            Insert the total number of pages in the section.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldSequence">
      <summary>
            Insert an automatic sequence number.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldSet">
      <summary>
            Assign new text to a bookmark.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldSkipIf">
      <summary>
            Conditionally skip a record in a mail merge.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldStyleRef">
      <summary>
            Insert the text from a like-style paragraph.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldSubject">
      <summary>
            The document's subject from Summary Info.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldSubscriber">
      <summary>
            Unsupported.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldSymbol">
      <summary>
            Insert a special character.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldTemplate">
      <summary>
            The name of the template attached to the document.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldTime">
      <summary>
            The current time.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldTitle">
      <summary>
            The document's title from Summary Info.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldTOA">
      <summary>
            Create a table of authorities.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldTOAEntry">
      <summary>
            Make a table of authorities entry.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldTOC">
      <summary>
            Create a table of contents.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldTOCEntry">
      <summary>
            Make a table of contents entry.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldUserAddress">
      <summary>
            Address from Tools Options User Info.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldUserInitials">
      <summary>
            Initials form Tools Options User Info.
            </summary>
    </member>
    <member name="F:Aspose.Word.FieldType.FieldUserName">
      <summary>
            Name from Tools Options User Info.
            </summary>
    </member>
    <member name="T:Aspose.Word.Underline">
      <summary>
            Indicates type of the underline applied to a font.
            </summary>
    </member>
    <member name="F:Aspose.Word.Underline.None">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.Underline.Single">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.Underline.Words">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.Underline.Double">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.Underline.Dotted">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.Underline.Thick">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.Underline.Dash">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.Underline.DashLong">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.Underline.DotDash">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.Underline.DotDotDash">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.Underline.Wavy">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.Underline.DottedHeavy">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.Underline.DashHeavy">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.Underline.DashLongHeavy">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.Underline.DotDashHeavy">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.Underline.DotDotDashHeavy">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.Underline.WavyHeavy">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.Underline.WavyDouble">
      <summary>
      </summary>
    </member>
    <member name="T:Aspose.Word.TextureIndex">
      <summary>
            Specifies shading texture.
            </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture10Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture12Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture15Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture17Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture20Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture22Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture25Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture27Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture2Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture30Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture32Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture35Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture37Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture40Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture42Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture45Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture47Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture50Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture52Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture55Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture57Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture60Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture62Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture65Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture67Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture70Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture72Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture75Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture77Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture7Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture80Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture82Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture85Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture87Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture90Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture92Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture95Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.Texture97Pt5Percent">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.TextureCross">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.TextureDarkCross">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.TextureDarkDiagonalCross">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.TextureDarkDiagonalDown">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.TextureDarkDiagonalUp">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.TextureDarkHorizontal">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.TextureDarkVertical">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.TextureDiagonalCross">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.TextureDiagonalDown">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.TextureDiagonalUp">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.TextureHorizontal">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.TextureNone">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.TextureSolid">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.TextureIndex.TextureVertical">
      <summary>
      </summary>
    </member>
    <member name="T:Aspose.Word.ParagraphAlignment">
      <summary>
            Specifies text alignment in a paragraph.
            </summary>
    </member>
    <member name="F:Aspose.Word.ParagraphAlignment.Left">
      <summary>
            Text is aligned to the left.
            </summary>
    </member>
    <member name="F:Aspose.Word.ParagraphAlignment.Center">
      <summary>
            Text is centered horizontally.
            </summary>
    </member>
    <member name="F:Aspose.Word.ParagraphAlignment.Right">
      <summary>
            Text is aligned to the right.
            </summary>
    </member>
    <member name="F:Aspose.Word.ParagraphAlignment.Justify">
      <summary>
            Text is aligned to both left and right.
            </summary>
    </member>
    <member name="F:Aspose.Word.ParagraphAlignment.Distributed">
      <summary>
            Text is evenly distributed.
            </summary>
    </member>
    <member name="T:Aspose.Word.RowAlignment">
      <summary>
            Specifies alignment for a table row.
            </summary>
    </member>
    <member name="F:Aspose.Word.RowAlignment.Left">
      <summary>
            The row is aligned to the left.
            </summary>
    </member>
    <member name="F:Aspose.Word.RowAlignment.Center">
      <summary>
            The row is centered.
            </summary>
    </member>
    <member name="F:Aspose.Word.RowAlignment.Right">
      <summary>
            The row is aligned to the right.
            </summary>
    </member>
    <member name="T:Aspose.Word.LineSpacingRule">
      <summary>
            Specifies line spacing values for a paragraph.
            </summary>
    </member>
    <member name="F:Aspose.Word.LineSpacingRule.AtLeast">
      <summary>
            The line spacing can be greater than or equal to, but never less than, 
            the specified LineSpacing value.
            </summary>
    </member>
    <member name="F:Aspose.Word.LineSpacingRule.Exactly">
      <summary>
            The line spacing never changes from the specified LineSpacing value, 
            even if a larger font is used within the paragraph.
            </summary>
    </member>
    <member name="F:Aspose.Word.LineSpacingRule.Multiple">
      <summary>
            A LineSpacing property value must be specified, in points.
            </summary>
    </member>
    <member name="T:Aspose.Word.LineStyle">
      <summary>
            Specifies available line styles.
            </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.None">
      <summary>
      </summary>
      <dev>
            In MS Word binary format LineStyle.None means no border for all objects, except table cells.
            
            For table cells LineStyle.None means inherit from the default table border.
            
            Apparently this looks like a very bad hack made by someone at MS and I work around it
            by making LineStyle.None to mean "no border" for any object in the model including table cells.
            The translation is performed in the binary cell reader/writer.
            
            I also use a single approach to indicate that a border is inherited. At first the border attribute 
            is simply missing, but if a use requests it, a Border object is instantiated in "inherited" mode.
            </dev>
    </member>
    <member name="F:Aspose.Word.LineStyle.Single">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.Thick">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.Double">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.Hairline">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.Dot">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.DashLargeGap">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.DotDash">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.DotDotDash">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.Triple">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.ThinThickSmallGap">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.ThinThinSmallGap">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.ThinThickThinSmallGap">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.ThinThickMediumGap">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.ThickThinMediumGap">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.ThickThickThinMediumGap">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.ThinThickLargeGap">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.ThickThinLargeGap">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.ThinThickThinLargeGap">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.Wave">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.DoubleWave">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.DashSmallGap">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.DashDotStroker">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.Emboss3D">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.LineStyle.Engrave3D">
      <summary>
      </summary>
    </member>
    <member name="T:Aspose.Word.BorderType">
      <summary>
            Specifies sides of a border.
            </summary>
    </member>
    <member name="F:Aspose.Word.BorderType.Bottom">
      <summary>
            Specifies the bottom border of a paragraph or a table cell.
            </summary>
    </member>
    <member name="F:Aspose.Word.BorderType.Left">
      <summary>
            Specifies the left border of a paragraph or a table cell.
            </summary>
    </member>
    <member name="F:Aspose.Word.BorderType.Right">
      <summary>
            Specifies the right border of a paragraph or a table cell.
            </summary>
    </member>
    <member name="F:Aspose.Word.BorderType.Top">
      <summary>
            Specifies the top border of a paragraph or a table cell.
            </summary>
    </member>
    <member name="F:Aspose.Word.BorderType.Horizontal">
      <summary>
            Specifies the horizontal border between cells in a table.
            </summary>
    </member>
    <member name="F:Aspose.Word.BorderType.Vertical">
      <summary>
            Specifies the vertical border between cells in a table.
            </summary>
    </member>
    <member name="F:Aspose.Word.BorderType.DiagonalDown">
      <summary>
            Specifies the diagonal border in a table cell.
            </summary>
    </member>
    <member name="F:Aspose.Word.BorderType.DiagonalUp">
      <summary>
            Specifies the diagonal border in a table cell.
            </summary>
    </member>
    <member name="T:Aspose.Word.Orientation">
      <summary>
            Specifies page orientation.
            </summary>
    </member>
    <member name="F:Aspose.Word.Orientation.Portrait">
      <summary>
            Portrait page orientation (narrow and tall).
            </summary>
    </member>
    <member name="F:Aspose.Word.Orientation.Landscape">
      <summary>
            Landscape page orientation (wide and short).
            </summary>
    </member>
    <member name="T:Aspose.Word.PageVerticalAlignment">
      <summary>
            Specifies vertical justification of text on each page.
            </summary>
    </member>
    <member name="F:Aspose.Word.PageVerticalAlignment.Bottom">
      <summary>
            Text is aligned at the bottom of the page.
            </summary>
    </member>
    <member name="F:Aspose.Word.PageVerticalAlignment.Center">
      <summary>
            Text is aligned in the middle of the page.
            </summary>
    </member>
    <member name="F:Aspose.Word.PageVerticalAlignment.Justify">
      <summary>
            Text is spread to fill the page.
            </summary>
    </member>
    <member name="F:Aspose.Word.PageVerticalAlignment.Top">
      <summary>
            Text is aligned at the top of the page.
            </summary>
    </member>
    <member name="T:Aspose.Word.PaperSize">
      <summary>
            Specifies paper size.
            </summary>
    </member>
    <member name="F:Aspose.Word.PaperSize.A3">
      <summary>
            297 x 420 mm.
            </summary>
    </member>
    <member name="F:Aspose.Word.PaperSize.A4">
      <summary>
            210 x 297 mm.
            </summary>
    </member>
    <member name="F:Aspose.Word.PaperSize.A5">
      <summary>
            148 x 210 mm.
            </summary>
    </member>
    <member name="F:Aspose.Word.PaperSize.B4">
      <summary>
            250 x 353 mm.
            </summary>
    </member>
    <member name="F:Aspose.Word.PaperSize.B5">
      <summary>
            176 x 250 mm.
            </summary>
    </member>
    <member name="F:Aspose.Word.PaperSize.Executive">
      <summary>
            7.25 x 10.5 inches.
            </summary>
    </member>
    <member name="F:Aspose.Word.PaperSize.Folio">
      <summary>
            8 x 13 inches.
            </summary>
    </member>
    <member name="F:Aspose.Word.PaperSize.Ledger">
      <summary>
            11 x 17 inches.
            </summary>
    </member>
    <member name="F:Aspose.Word.PaperSize.Legal">
      <summary>
            8.5 x 14 inches.
            </summary>
    </member>
    <member name="F:Aspose.Word.PaperSize.Letter">
      <summary>
            8.5 x 11 inches.
            </summary>
    </member>
    <member name="F:Aspose.Word.PaperSize.EnvelopeDL">
      <summary>
            110 x 220 mm.
            </summary>
    </member>
    <member name="F:Aspose.Word.PaperSize.Quarto">
      <summary>
            8 x 10 inches.
            </summary>
    </member>
    <member name="F:Aspose.Word.PaperSize.Statement">
      <summary>
            8.5 x 5.5 inches.
            </summary>
    </member>
    <member name="F:Aspose.Word.PaperSize.Tabloid">
      <summary>
            11 x 17 inches.
            </summary>
    </member>
    <member name="F:Aspose.Word.PaperSize.Paper10x14">
      <summary>
            10 x 14 inches.
            </summary>
    </member>
    <member name="F:Aspose.Word.PaperSize.Paper11x17">
      <summary>
            11 x 17 inches.
            </summary>
    </member>
    <member name="F:Aspose.Word.PaperSize.Custom">
      <summary>
            Custom paper size.
            </summary>
    </member>
    <member name="T:Aspose.Word.PictureColorType">
      <summary>
            Specifies the type of color transformation applied to a picture.
            </summary>
    </member>
    <member name="F:Aspose.Word.PictureColorType.Automatic">
      <summary>
            No color transformation.
            </summary>
    </member>
    <member name="F:Aspose.Word.PictureColorType.BlackAndWhite">
      <summary>
            The picture is rendered in black and white.
            </summary>
    </member>
    <member name="F:Aspose.Word.PictureColorType.Grayscale">
      <summary>
            The picture is rendered in grayscale.
            </summary>
    </member>
    <member name="T:Aspose.Word.StyleIdentifier">
      <summary>
            Locale independent style identifier.
            </summary>
      <remarks>
        <p>The names of built-in styles in MS Word are localized for different languages.
            Using a style identifier you can find the correct style regardless of the document language.</p>
        <p>All user defined styles are assigned the StyleIdentifier.User value.</p>
      </remarks>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Normal">
      <summary>
            The Normal style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Heading1">
      <summary>
            The Heading 1 style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Heading2">
      <summary>
            The Heading 2 style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Heading3">
      <summary>
            The Heading 3 style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Heading4">
      <summary>
            The Heading 4 style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Heading5">
      <summary>
            The Heading 5 style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Heading6">
      <summary>
            The Heading 6 style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Heading7">
      <summary>
            The Heading 7 style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Heading8">
      <summary>
            The Heading 8 style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Heading9">
      <summary>
            The Heading 9 style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Index1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Index2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Index3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Index4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Index5">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Index6">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Index7">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Index8">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Index9">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Toc1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Toc2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Toc3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Toc4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Toc5">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Toc6">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Toc7">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Toc8">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Toc9">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.NormalIndent">
      <summary>
            The Normal Indent style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.FootnoteText">
      <summary>
            The Footnote Text style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.CommentText">
      <summary>
            The Annotation (Comment) Text style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Header">
      <summary>
            The Header style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Footer">
      <summary>
            The Footer style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.IndexHeading">
      <summary>
            The Index Heading style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Caption">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableOfFigures">
      <summary>
            The Table of Figures style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.EnvelopeAddress">
      <summary>
            The Envelope Address style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.EnvelopeReturn">
      <summary>
            The Envelope Return style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.FootnoteReference">
      <summary>
            The Footnote Reference style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.CommentReference">
      <summary>
            The Annotation (Comment) Reference style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.LineNumber">
      <summary>
            The Line Number style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.PageNumber">
      <summary>
            The Page Number style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.EndnoteReference">
      <summary>
            The Endnote Reference style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.EndnoteText">
      <summary>
            The Endnote Text style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableOfAuthorities">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Macro">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.ToaHeading">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.List">
      <summary>
            The List style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.ListBullet">
      <summary>
            The List Bullet style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.ListNumber">
      <summary>
            The List Number style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.List2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.List3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.List4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.List5">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.ListBullet2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.ListBullet3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.ListBullet4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.ListBullet5">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.ListNumber2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.ListNumber3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.ListNumber4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.ListNumber5">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Title">
      <summary>
            The Title style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Closing">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Signature">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.DefaultParagraphFont">
      <summary>
            The Default Paragraph Font style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.BodyText">
      <summary>
            The Body Text style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.BodyTextInd">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.ListContinue">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.ListContinue2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.ListContinue3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.ListContinue4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.ListContinue5">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.MessageHeader">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Subtitle">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Salutation">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Date">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.BodyText1I">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.BodyText1I2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.NoteHeading">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.BodyText2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.BodyText3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.BodyTextInd2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.BodyTextInd3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.BlockQuotation">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Hyperlink">
      <summary>
            The Hyperlink style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.HyperlinkFollowed">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Strong">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Emphasis">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.DocumentMap">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.PlainText">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.EmailSignature">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.NormalWeb">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.HtmlAcronym">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.HtmlAddress">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.HtmlCite">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.HtmlCode">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.HtmlDefinition">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.HtmlKeyboard">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.HtmlPreformatted">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.HtmlSample">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.HtmlTypewriter">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.HtmlVariable">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableNormal">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.CommentSubject">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.NoList">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.OutlineList1">
      <summary>
            The 1 / a / i style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.OutlineList2">
      <summary>
            The 1 / 1.1 / 1.1.1 style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.OutlineList3">
      <summary>
            The Article / Section style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableSimple1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableSimple2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableSimple3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableClassic1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableClassic2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableClassic3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableClassic4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableColorful1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableColorful2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableColorful3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableColumns1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableColumns2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableColumns3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableColumns4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableColumns5">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableGrid1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableGrid2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableGrid3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableGrid4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableGrid5">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableGrid6">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableGrid7">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableGrid8">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableList1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableList2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableList3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableList4">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableList5">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableList6">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableList7">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableList8">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Table3DEffects1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Table3DEffects2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Table3DEffects3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableContemporary">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableElegant">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableProfessional">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableSubtle1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableSubtle2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableWeb1">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableWeb2">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableWeb3">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.BalloonText">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableGrid">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.TableTheme">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.User">
      <summary>
            A user defined style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleIdentifier.Nil">
      <summary>
            Reserved for system use.
            </summary>
    </member>
    <member name="T:Aspose.Word.StyleType">
      <summary>
            Represents type of the style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleType.Paragraph">
      <summary>
            The style is a paragraph style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleType.Character">
      <summary>
            The style is a character style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleType.Table">
      <summary>
            The style is a table style.
            </summary>
    </member>
    <member name="F:Aspose.Word.StyleType.List">
      <summary>
            The style is a list style.
            </summary>
    </member>
    <member name="T:Aspose.Word.HeightRule">
      <summary>
            Specifies the rule for determining the height of an object.
            </summary>
    </member>
    <member name="F:Aspose.Word.HeightRule.AtLeast">
      <summary>
            The height will be at least the specified height in points. It will grow, if needed,
            to accommodate all text inside an object.
            </summary>
    </member>
    <member name="F:Aspose.Word.HeightRule.Exactly">
      <summary>
            The height is specified exactly in points. Please note that if the text cannot
            fit inside the object of this height, it will appear truncated.
            </summary>
    </member>
    <member name="F:Aspose.Word.HeightRule.Auto">
      <summary>
            The height will grow automatically to accommodate all text inside an object.
            </summary>
    </member>
    <member name="T:Aspose.Word.NumberStyle">
      <summary>
            Specifies the number style for a list, footnotes and endnotes, page numbers.
            </summary>
    </member>
    <member name="F:Aspose.Word.NumberStyle.Arabic">
      <summary>
            Arabic numbering (1, 2, 3, ...) 
            </summary>
    </member>
    <member name="F:Aspose.Word.NumberStyle.UppercaseRoman">
      <summary>
            Upper case Roman (I, II, III, ...) 
            </summary>
    </member>
    <member name="F:Aspose.Word.NumberStyle.LowercaseRoman">
      <summary>
            Lower case Roman (i, ii, iii, ...) 
            </summary>
    </member>
    <member name="F:Aspose.Word.NumberStyle.UppercaseLetter">
      <summary>
            Upper case Letter (A, B, C, ...) 
            </summary>
    </member>
    <member name="F:Aspose.Word.NumberStyle.LowercaseLetter">
      <summary>
            Lower case letter (a, b, c, ...) 
            </summary>
    </member>
    <member name="F:Aspose.Word.NumberStyle.Ordinal">
      <summary>
            Ordinal (1., 2., 3., ...) 
            </summary>
    </member>
    <member name="F:Aspose.Word.NumberStyle.Number">
      <summary>
            Numbered (One, Two, Three, ...) 
            </summary>
    </member>
    <member name="F:Aspose.Word.NumberStyle.OrdinalText">
      <summary>
            Ordinal (text) (First, Second, Third, ...) 
            </summary>
    </member>
    <member name="F:Aspose.Word.NumberStyle.LeadingZero">
      <summary>
            Leading Zero (01, 02,..., 09, 10, 11,..., 99, 100, 101,...) 
            </summary>
    </member>
    <member name="F:Aspose.Word.NumberStyle.Bullet">
      <summary>
            Bullet (check the character code in the text)
            </summary>
    </member>
    <member name="T:Aspose.Word.FootnoteType">
      <summary>
            Specifies whether this is a footnote or an endnote.
            </summary>
    </member>
    <member name="F:Aspose.Word.FootnoteType.Footnote">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.FootnoteType.Endnote">
      <summary>
      </summary>
    </member>
    <member name="T:Aspose.Word.TextFormFieldType">
      <summary>
            Specifies the type of a text form field.
            </summary>
    </member>
    <member name="F:Aspose.Word.TextFormFieldType.RegularText">
      <summary>
            Text form field can contain any text.
            </summary>
    </member>
    <member name="F:Aspose.Word.TextFormFieldType.NumberText">
      <summary>
            Text form field can contain only numbers.
            </summary>
    </member>
    <member name="F:Aspose.Word.TextFormFieldType.DateText">
      <summary>
            Text for field can contain only a valid date value.
            </summary>
    </member>
    <member name="T:Aspose.Word.TextOrientation">
      <summary>
            Specifies orientation of text in a table cell or a text frame.
            </summary>
    </member>
    <member name="F:Aspose.Word.TextOrientation.Horizontal">
      <summary>
            Text is left to right, then top to bottom.
            </summary>
    </member>
    <member name="F:Aspose.Word.TextOrientation.Upward">
      <summary>
            Text is bottom to top, then left left to right.
            </summary>
    </member>
    <member name="F:Aspose.Word.TextOrientation.Downward">
      <summary>
            Text is top to bottom, then right to left.
            </summary>
    </member>
    <member name="T:Aspose.Word.RelativeHorizontalPosition">
      <summary>
            Specifies to what the horizontal position of a shape or text frame is relative.
            </summary>
    </member>
    <member name="F:Aspose.Word.RelativeHorizontalPosition.Margin">
      <summary>
            The distance is measured from the left page margin.
            </summary>
    </member>
    <member name="F:Aspose.Word.RelativeHorizontalPosition.Page">
      <summary>
            The distance is measured from the left edge of the page.
            </summary>
    </member>
    <member name="F:Aspose.Word.RelativeHorizontalPosition.Column">
      <summary>
            The distance is measured from the left side of the column.
            </summary>
    </member>
    <member name="F:Aspose.Word.RelativeHorizontalPosition.Character">
      <summary>
            The distance is measured from the left side of the paragraph.
            </summary>
    </member>
    <member name="T:Aspose.Word.RelativeVerticalPosition">
      <summary>
            Specifies to what the vertical position of a shape or text frame is relative.
            </summary>
    </member>
    <member name="F:Aspose.Word.RelativeVerticalPosition.Margin">
      <summary>
            The distance is measured from the top page margin.
            </summary>
    </member>
    <member name="F:Aspose.Word.RelativeVerticalPosition.Page">
      <summary>
            The distance is measured from the top edge of the page.
            </summary>
    </member>
    <member name="F:Aspose.Word.RelativeVerticalPosition.Paragraph">
      <summary>
            The distance is measured from the top of the paragraph that contains the anchor.
            </summary>
    </member>
    <member name="F:Aspose.Word.RelativeVerticalPosition.Line">
      <summary>
            The distance is measured from the top of the line that contains the anchor.
            </summary>
    </member>
    <member name="T:Aspose.Word.WrapType">
      <summary>
            Specifies how text is wrapped around a shape or picture.
            </summary>
    </member>
    <member name="F:Aspose.Word.WrapType.Inline">
      <summary>
            The shape remains on the same layer as text and treated as a character.
            </summary>
    </member>
    <member name="F:Aspose.Word.WrapType.TopBottom">
      <summary>
            The text stops at the top of the shape and restarts on the line below the shape.
            </summary>
    </member>
    <member name="F:Aspose.Word.WrapType.Square">
      <summary>
            Wraps text around all sides of the square bounding box of the shape.
            </summary>
    </member>
    <member name="F:Aspose.Word.WrapType.None">
      <summary>
            No text wrapping around the shape. The shape is placed behind or in front of text.
            </summary>
    </member>
    <member name="F:Aspose.Word.WrapType.Tight">
      <summary>
            Wraps tightly around the edges of the shape, instead of wrapping around the bounding box.
            </summary>
    </member>
    <member name="F:Aspose.Word.WrapType.Through">
      <summary>
            Same as Tight, but wraps inside any parts of the shape that are open.
            </summary>
    </member>
    <member name="T:Aspose.Word.WrapSide">
      <summary>
            Specifies what side(s) of the shape or picture the text wraps around.
            </summary>
    </member>
    <member name="F:Aspose.Word.WrapSide.Both">
      <summary>
            The document text wraps on both sides of the shape.
            </summary>
    </member>
    <member name="F:Aspose.Word.WrapSide.Left">
      <summary>
            The document text wraps on the left side of the shape only. There is a text free area on the right of the shape.
            </summary>
    </member>
    <member name="F:Aspose.Word.WrapSide.Right">
      <summary>
            The document text wraps on the right side of the shape only. There is a text free area on the left side of the shape.
            </summary>
    </member>
    <member name="F:Aspose.Word.WrapSide.Largest">
      <summary>
            The document text wraps on the side of the shape that is fartherst from the page margin, leaving text free area on the other side of the shape.
            </summary>
    </member>
    <member name="T:Aspose.Word.PaperTray">
      <summary>
            Specifies the paper tray (bin) where the printer needs to take the paper from.
            </summary>
    </member>
    <member name="F:Aspose.Word.PaperTray.AutomaticSheetFeed">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.PaperTray.DefaultBin">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.PaperTray.EnvelopeFeed">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.PaperTray.FormSource">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.PaperTray.LargeCapacityBin">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.PaperTray.LargeFormatBin">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.PaperTray.LowerBin">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.PaperTray.ManualEnvelopeFeed">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.PaperTray.ManualFeed">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.PaperTray.MiddleBin">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.PaperTray.OnlyBin">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.PaperTray.PaperCassette">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.PaperTray.SmallFormatBin">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.PaperTray.TractorFeed">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.PaperTray.UpperBin">
      <summary>
      </summary>
    </member>
    <member name="T:Aspose.Word.ViewType">
      <summary>
            Possible values for the view mode in Microsoft Word.
            </summary>
    </member>
    <member name="F:Aspose.Word.ViewType.Normal">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.ViewType.Outline">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.ViewType.PageLayout">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.ViewType.Web">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.ViewType.Reading">
      <summary>
      </summary>
    </member>
    <member name="T:Aspose.Word.ZoomType">
      <summary>
            Possible values for how large or small the document appears on the screen in Microsoft Word.
            </summary>
    </member>
    <member name="F:Aspose.Word.ZoomType.None">
      <summary>
            Indicates to use the explicit zoom percentage.
            </summary>
    </member>
    <member name="F:Aspose.Word.ZoomType.FullPage">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.ZoomType.PageWidth">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.ZoomType.TextFit">
      <summary>
      </summary>
    </member>
    <member name="T:Aspose.Word.LineNumberRestartMode">
      <summary>
            Determines when automatic line numbering restarts.
            </summary>
    </member>
    <member name="F:Aspose.Word.LineNumberRestartMode.RestartPage">
      <summary>
            Line numbering restarts at the start of every page.
            </summary>
    </member>
    <member name="F:Aspose.Word.LineNumberRestartMode.RestartSection">
      <summary>
            Line numbering restarts at the section start.
            </summary>
    </member>
    <member name="F:Aspose.Word.LineNumberRestartMode.Continuous">
      <summary>
            Line numbering continious from the previous section.
            </summary>
    </member>
    <member name="T:Aspose.Word.PageBorderDistanceFrom">
      <summary>
            Specifies the positioning of the page border relative to the page margin.
            </summary>
    </member>
    <member name="F:Aspose.Word.PageBorderDistanceFrom.Text">
      <summary>
            Border position is measured from the page margin.
            </summary>
    </member>
    <member name="F:Aspose.Word.PageBorderDistanceFrom.PageEdge">
      <summary>
            Border position is measured from the page edge.
            </summary>
    </member>
    <member name="T:Aspose.Word.PageBorderAppliesTo">
      <summary>
            Specifies which pages the page border is printed on.
            </summary>
    </member>
    <member name="F:Aspose.Word.PageBorderAppliesTo.AllPages">
      <summary>
            Page border is shown on all pages of the section.
            </summary>
    </member>
    <member name="F:Aspose.Word.PageBorderAppliesTo.FirstPage">
      <summary>
            Page border is shown on the first page of the section only.
            </summary>
    </member>
    <member name="F:Aspose.Word.PageBorderAppliesTo.OtherPages">
      <summary>
            Page border is shown on all pages except the first page of the section.
            </summary>
    </member>
    <member name="T:Aspose.Word.CellMerge">
      <summary>
            Specifies how a cell in a table is merged with other cells.
            </summary>
    </member>
    <member name="F:Aspose.Word.CellMerge.None">
      <summary>
            The cell is not merged.
            </summary>
    </member>
    <member name="F:Aspose.Word.CellMerge.First">
      <summary>
            The cell is the first cell in a range of merged cells.
            </summary>
    </member>
    <member name="F:Aspose.Word.CellMerge.Previous">
      <summary>
            The cell is merged to the previous cell horizontally or vertically.
            </summary>
    </member>
    <member name="T:Aspose.Word.CellVerticalAlignment">
      <summary>
            Specifies vertical justification of text inside a table cell.
            </summary>
    </member>
    <member name="F:Aspose.Word.CellVerticalAlignment.Top">
      <summary>
            Text is aligned at the top of a cell.
            </summary>
    </member>
    <member name="F:Aspose.Word.CellVerticalAlignment.Center">
      <summary>
            Text is aligned in the middle of a cell.
            </summary>
    </member>
    <member name="F:Aspose.Word.CellVerticalAlignment.Bottom">
      <summary>
            Text is aligned at the bottom of the cell.
            </summary>
    </member>
    <member name="T:Aspose.Word.ChapterPageSeparator">
      <summary>
            Defines the separator character that appears between the chapter and page number.
            </summary>
    </member>
    <member name="F:Aspose.Word.ChapterPageSeparator.Hyphen">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.ChapterPageSeparator.Period">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.ChapterPageSeparator.Colon">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.ChapterPageSeparator.EmDash">
      <summary>
      </summary>
    </member>
    <member name="F:Aspose.Word.ChapterPageSeparator.EnDash">
      <summary>
      </summary>
    </member>
    <member name="T:Aspose.Word.ImportFormatMode">
      <summary>
            Specifies how formatting is merged when importing content from another document.
            </summary>
      <remarks>
        <p>When you copy nodes from one document to another, this option specifies how formatting 
            is resolved when both documents have a style with the same name, but different formatting.</p>
        <p>The formatting is resolved as follows:</p>
        <list type="number">
          <item>Built-in styles are matched using their locale independent style identifier.
            User defined styles are matched using case-sensitive style name.</item>
          <item>If a matching style is not found in the destination document, the style
            (and all styles referenced by it) are copied into the destination document
            and the imported nodes are updated to reference the new style.</item>
          <item>If a matching style already exists in the destination document, what happens 
            depends on the <c>importFormatMode</c> parameter passed to <see cref="M:Aspose.Word.Document.ImportNode(Aspose.Word.Node,System.Boolean)">
            Document.ImportNode</see> as described below.</item>
        </list>
        <p>When using the <b>UseDestinationStyles</b> option, if a matching style already exists 
            in the destination document, the style is not copied and the imported nodes are updated 
            to reference the existing style.</p>
        <p>The drawback of using <b>UseDestinationStyles</b> is that the imported text might
            look different in the destination document comparing to the source document. 
            For example, the "Heading 1" style in the source document uses Arial 16pt font and
            the "Heading 1" style in the destination document uses Times New Roman 14pt font.
            When importing text of "Heading 1" style with no other direct formatting, it will 
            appear as Times New Roman 14pt font in the destination document.</p>
        <p>Using the <b>KeepSourceFormatting</b> option allows to make sure the imported
            text looks in the destination document exactly like it was in the source document.
            If a matching style already exists in the destination document, the source style 
            is copied and given a unique name by appending a suffix number to it, for example
            "Normal_0" or "Heading 1_5".</p>
        <p>The drawback of using <b>KeepSourceFormatting</b> is that if you perform several imports, 
            you could end up with many styles in the destination document and that could make using 
            consistent style formatting in Microsoft Word difficult for this document.</p>
        <seealso cref="M:Aspose.Word.Document.ImportNode(Aspose.Word.Node,System.Boolean)" />
      </remarks>
    </member>
    <member name="F:Aspose.Word.ImportFormatMode.UseDestinationStyles">
      <summary>
            Use the destination document styles and copy new styles. This is the default option.
            </summary>
    </member>
    <member name="F:Aspose.Word.ImportFormatMode.KeepSourceFormatting">
      <summary>
            Copy all required styles to the destination document, generate unique style names if needed.
            </summary>
    </member>
    <member name="T:Aspose.Word.WordConvert">
      <summary>
            Provides helper functions to convert between various measurement units.
            </summary>
    </member>
    <member name="M:Aspose.Word.WordConvert.PointToPixel(System.Double)">
      <overloads>Converts points to pixels.</overloads>
      <summary>
            Converts points to pixels at 96 dpi.
            </summary>
      <param name="points">The value to convert.</param>
      <remarks>
            1 inch equals 72 points.
            </remarks>
    </member>
    <member name="M:Aspose.Word.WordConvert.PointToPixel(System.Double,System.Double)">
      <summary>
            Converts points to pixels at the specified pixel resolution.
            </summary>
      <param name="points">The value to convert.</param>
      <param name="resolution">The dpi (dots per inch) resolution.</param>
      <remarks>
            1 inch equals 72 points.
            </remarks>
    </member>
    <member name="M:Aspose.Word.WordConvert.PixelToPoint(System.Double)">
      <overloads>Converts pixels to points.</overloads>
      <summary>
            Convers pixels to points at 96 dpi.
            </summary>
      <param name="pixels">The value to convert.</param>
      <remarks>
            1 inch equals 72 points.
            </remarks>
    </member>
    <member name="M:Aspose.Word.WordConvert.PixelToPoint(System.Double,System.Double)">
      <summary>
            Converts pixels to points at the specified pixel resolution.
            </summary>
      <param name="pixels">The value to convert.</param>
      <param name="resolution">The dpi (dots per inch) resolution.</param>
      <remarks>
            1 inch equals 72 points.
            </remarks>
    </member>
    <member name="M:Aspose.Word.WordConvert.InchToPoint(System.Double)">
      <summary>
            Converts inches to points.
            </summary>
      <param name="inches">The value to convert.</param>
      <remarks>
            1 inch equals 72 points.
            </remarks>
    </member>
    <member name="M:Aspose.Word.WordConvert.PointToInch(System.Double)">
      <summary>
            Converts points to inches.
            </summary>
      <param name="points">The value to convert.</param>
      <remarks>
            1 inch equals 72 points.
            </remarks>
    </member>
  </members>
</doc>