<?xml version="1.0"?>
<doc>
    <assembly>
        <name>aspNetIMAP</name>
    </assembly>
    <members>
        <member name="T:aspNetIMAP.FlagCollection">
            <summary>
            Strongly typed collection of Message or Folder Flags.
            </summary>
            <example>
            	<code>
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
             
            //get the flags of the first message 
            FlagCollection fc  = mc.Flags(1);
            Console.WriteLine( fc.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
            'get the flags of the first message 
            Dim fc As FlagCollection = mc.Flags(1)
            Console.WriteLine(fc.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.#ctor">
            <summary>
              Empty constructor. 
              This will initialize the collection to 5 items.
            </summary>		
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //build the FlagCollection
            FlagCollection fc = new FlagCollection();
            fc.Add( new Flag( FlagTypes.Answered) );
            fc.Add( new Flag( FlagTypes.Seen ) );
             
            //set the \answered and \seen flags 
            mc.SetFlags( 1, fc  );
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="[New Example]">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'build the FlagCollection
            Dim fc As New FlagCollection()
            fc.Add(New Flag(FlagTypes.Answered))
            fc.Add(New Flag(FlagTypes.Seen))
             
            'set the \answered and \seen flags 
            mc.SetFlags(1, fc)
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.#ctor(System.Int32)">
            <summary>
              Initializes the container to hold the specified number of items.
            </summary>
            <param name="initialCount">
              The initial size of the collection. 
            </param>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //build the FlagCollection
            FlagCollection fc = new FlagCollection(2);
            fc.Add( new Flag( FlagTypes.Answered) );
            fc.Add( new Flag( FlagTypes.Seen ) );
             
            //set the \answered and \seen flags 
            mc.SetFlags( 1, fc  );
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="[New Example]">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'build the FlagCollection
            Dim fc As New FlagCollection(2)
            fc.Add(New Flag(FlagTypes.Answered))
            fc.Add(New Flag(FlagTypes.Seen))
             
            'set the \answered and \seen flags 
            mc.SetFlags(1, fc)
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.#ctor(System.String)">
            <summary>
            Creates an instance of a flag collection, from an IMAP flag server response.
            </summary>
            <param name="rawFlags"></param>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.#ctor(System.String,System.Int32)">
            <summary>
            Creates an instance of a flag collection, from an IMAP flag server response.
            </summary>
            <param name="rawFlags">Raw flags from the server.</param>
            <param name="messageId">The associated message id.</param>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.Contains(aspNetIMAP.Flag)">
            <summary>Locates the Flag within the collection.</summary>
            <returns>
              True if the Flag exists in the collection.
            </returns>
            <param name="flag">
              Flag to locate.
            </param>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.CopyTo(System.Array,System.Int32)">
            <summary>
              Copies the items from this collection into the array at the specified index.
            </summary>
            <param name="array">
              Array to copy the items to.
            </param>
            <param name="index">
              Index of position within the array to being copying at.
            </param>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.CopyTo(aspNetIMAP.FlagCollection)">
            <summary>
              Copies all the Flags from this collection to another Flag Collection.
            </summary>
            <param name="flags">
              Collection to copy to.
            </param>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.Add(aspNetIMAP.Flag)">
            <summary>
              Adds a flag to the collection.
            </summary>
            <param name="flag">
              Flag to add to the collection.
            </param>
            <returns>
              Index at which the Flag was added.
            </returns>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.System#Collections#IList#Add(System.Object)">
            <summary>
              For IList implementation only. Do Not Use.
            </summary>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.Clear">
            <summary>
              Clears the collection.
            </summary>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.IndexOf(aspNetIMAP.Flag)">
            <summary>
              Returns the index for the Flag within the collection.
            </summary>
            <param name="flag">
              Flag to locate within the collection.
            </param>
            <returns>
              Index of the Flag.
            </returns>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.Insert(System.Int32,aspNetIMAP.Flag)">
            <summary>
              Inserts the Flag into the collection at the specified position.
            </summary>
            <param name="index">
              Position at which to insert the flag.
            </param>
            <param name="flag">
              Flag to insert.
            </param>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.Remove(aspNetIMAP.Flag)">
            <summary>
              Removes the first occurrence of a specific Flag from the Collection.
            </summary>
            <param name="flag">
              The Flag to remove.
            </param>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.RemoveAt(System.Int32)">
            <summary>
              Removes the element at the specified index of the Collection.
            </summary>
            <param name="index">
              Index of the element to remove.
            </param>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.GetEnumerator">
            <summary>
               Returns an enumerator that can iterate through the Collection.
             </summary>
             <returns>
               An IEnumerator for the entire Collection.
             </returns>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.GetEnumerator(System.Int32,System.Int32)">
            <summary>
              Returns an enumerator that can iterate through the Collection.
            </summary>
            <param name="index">
              The zero-based starting index of the Collection section that the enumerator should refer to. 
            </param>
            <param name="count">
              The number of elements in the Collection section that the enumerator should refer to. 
            </param>
            <returns>
              An IEnumerator for the specified section of the Collection.
            </returns>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.ToString">
            <summary>
            Converts the FlagCollection to a properly formatted IMAP string.
            </summary>
            <returns>Formatted Flag IMAP string.</returns>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.Remove(System.String)">
            <summary>
              Removes all Flags with the specified Name.
            </summary>
            <param name="flagValue">
              Value of the flag to remove.
            </param>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.Contains(System.String)">
            <summary>
              Returns true if the specified flag is contained within the collection.
            </summary>
            <param name="flagValue">
              Value of the flag to look for in the collection.
            </param>
            <returns>
              True if the flag is contained in the collection.
            </returns>
        </member>
        <member name="M:aspNetIMAP.FlagCollection.IndexOf(System.String)">
            <summary>
              Returns the index for the Flag with the given name within the collection.
            </summary>
            <param name="flagValue">
              Value of the Flag to locate within the collection.
            </param>
            <returns>
              Index of the Flag with the given Name.
            </returns>
        </member>
        <member name="P:aspNetIMAP.FlagCollection.MessageId">
            <summary>
            The message number or unique id (UID).
            </summary>
        </member>
        <member name="P:aspNetIMAP.FlagCollection.Item(System.Int32)">
            <summary>
              Gets or Sets items in this collection.
            </summary>
            <param name="index">index of the Flag</param>
        </member>
        <member name="P:aspNetIMAP.FlagCollection.System#Collections#IList#$Item$(System.Int32)">
            <summary>
              For IList implementation purposes only.
            </summary>
        </member>
        <member name="P:aspNetIMAP.FlagCollection.Count">
            <summary>
              Returns the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:aspNetIMAP.FlagCollection.IsSynchronized">
            <summary>
              Gets a value indicating whether access to the Collection is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:aspNetIMAP.FlagCollection.SyncRoot">
            <summary>
              Gets an object that can be used to synchronize access to the Collection.
            </summary>
        </member>
        <member name="P:aspNetIMAP.FlagCollection.IsFixedSize">
            <summary>
              Gets a value indicating whether the collection is a fixed size.
            </summary>
        </member>
        <member name="P:aspNetIMAP.FlagCollection.IsReadOnly">
            <summary>
              Gets a value indicating whether the Collection is read-only.
            </summary>
        </member>
        <member name="P:aspNetIMAP.FlagCollection.Item(System.String)">
            <summary>
              Returns the flag with the specified name.
            </summary>
        </member>
        <member name="P:aspNetIMAP.FlagCollection.Item(aspNetIMAP.FlagTypes)">
            <summary>
              Returns the flag with the specified name.
            </summary>
        </member>
        <member name="T:aspNetIMAP.MailFolderCollection">
            <summary>
            Strongly typed collection of mail folders.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.#ctor">
            <summary>Creates a new Collection of MailFolders</summary>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.#ctor(aspNetIMAP.IMAP4)">
            <summary>
              Empty constructor. 
              This will initialize the collection to 5 items.
            </summary>
            <remarks>
            Typically the constructor is called internally by aspNetIMAP, and does not need
            to be called by the developer.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
            <param name="imap">The parent IMAP4 connection object</param>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.#ctor(System.Int32)">
            <summary>
              Initializes the container to hold the specified number of items.
            </summary>
            <remarks>
            Typically, this constructor is called internally by aspNetIMAP and does not need
            to be called by the developer.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.Clear">
            <summary>
              Clears the collection.
            </summary>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.Contains(aspNetIMAP.MailFolder)">
            <summary>
              Attempts to locate the MailFolder within the collection.
            </summary>
            <param name="mailFolder">
              MailFolder to locate.
            </param>
            <returns>
              True if the MailFolder exists in the collection.
            </returns>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.Contains(System.String)">
            <summary>
              Returns true if the specified mailFolder is contained within the collection.
            </summary>
            <param name="path">
              Path of the mailFolder to look for in the collection.
            </param>
            <returns>
              True if the mailFolder is contained in the collection.
            </returns>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.CopyTo(System.Array,System.Int32)">
            <summary>
              Copies the items from this collection into the array at the specified index.
            </summary>
            <param name="array">
              Array to copy the items to.
            </param>
            <param name="index">
              Index of position within the array to being copying at.
            </param>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.CopyTo(aspNetIMAP.MailFolderCollection)">
            <summary>
              Copies all the MailFolders from this collection to another MailFolder Collection.
            </summary>
            <param name="mailFolders">
              Collection to copy to.
            </param>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.GetEnumerator">
            <summary>
               Returns an enumerator that can iterate through the Collection.
             </summary>
             <returns>
               An IEnumerator for the entire Collection.
             </returns>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.GetEnumerator(System.Int32,System.Int32)">
            <summary>
              Returns an enumerator that can iterate through the Collection.
            </summary>
            <param name="index">
              The zero-based starting index of the Collection section that the enumerator should refer to. 
            </param>
            <param name="count">
              The number of elements in the Collection section that the enumerator should refer to. 
            </param>
            <returns>
              An IEnumerator for the specified section of the Collection.
            </returns>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.IndexOf(System.String)">
            <summary>
              Returns the index for the MailFolder with the given name within the collection.
            </summary>
            <param name="path">
              Path of the MailFolder to locate within the collection.
            </param>
            <returns>
              Index of the MailFolder with the given Name.
            </returns>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.IndexOf(aspNetIMAP.MailFolder)">
            <summary>
              Returns the index for the MailFolder within the collection.
            </summary>
            <param name="mailFolder">
              MailFolder to locate within the collection.
            </param>
            <returns>
              Index of the MailFolder.
            </returns>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.ToString">
            <summary>
            Converts the collection to line delimited folder list.
            </summary>
            <remarks>A formatted string of MailFolder paths</remarks>
            <example>
            	<code lang="C#" title="ToString() Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            imap.Disconnect();
             
            //write out the collection as a string
            Console.WriteLine( mfc.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
            </code>
            	<code lang="VB.NET" title="ToString() Example">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
             
            imap.Disconnect()
             
            'write out the collection as a string
            Console.WriteLine(mfc.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.ToDataTable">
            <summary>Converts the MailFolderCollection to a DataTable.</summary>
            <remarks>
            Converts to the MailFolderCollection to a DataTable so it can be bound to objects
            such as the ASP.NET DataGrid
            </remarks>
            <example>
            	<code lang="C#" title="ToDataTable()">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            imap.Disconnect();
             
            //bind the MailFolderCollection to a DataGrid
            DataGrid dg = new DataGrid();
            dg.DataSource = mfc.ToDataTable();
            dg.DataBind();
             
            Page.Controls.Add( dg );
                </code>
            	<code lang="VB.NET" title="ToDataTable()">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
             
            imap.Disconnect()
             
            'bind the MailFolderCollection to a DataGrid
            Dim dg As New DataGrid()
            dg.DataSource = mfc.ToDataTable()
            dg.DataBind()
             
            Page.Controls.Add(dg)
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.ToDataTable(System.Boolean)">
            <summary>Converts the MailFolderCollection to a DataTable.</summary>
            <remarks>
            Converts to the MailFolderCollection to a DataTable so it can be bound to objects
            such as the ASP.NET DataGrid
            </remarks>
            <example>
            	<code lang="C#" title="ToDataTable()">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            imap.Disconnect();
             
            //bind the MailFolderCollection to a DataGrid
            DataGrid dg = new DataGrid();
            dg.DataSource = mfc.ToDataTable( true );
            dg.DataBind();
             
            Page.Controls.Add( dg );
                </code>
            	<code lang="VB.NET" title="ToDataTable()">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
             
            imap.Disconnect()
             
            'bind the MailFolderCollection to a DataGrid
            Dim dg As New DataGrid()
            dg.DataSource = mfc.ToDataTable( True )
            dg.DataBind()
             
            Page.Controls.Add(dg)
                </code>
            </example>
            <param name="htmlEncode">HTML encodes the mail folder names.</param>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.ToDataSet">
            <summary>Converts the MailFolderCollection to a DataSet.</summary>
            <remarks>
            Converts to the MailFolderCollection to a DataSet so it can be bound to objects
            such as the ASP.NET DataGrid
            </remarks>
            <example>
            	<code lang="C#" title="ToDataTable()">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            imap.Disconnect();
             
            //bind the MailFolderCollection to a DataGrid
            DataGrid dg = new DataGrid();
            dg.DataSource = mfc.ToDataSet();
            dg.DataBind();
             
            Page.Controls.Add( dg );
                </code>
            	<code lang="VB.NET" title="ToDataTable()">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
             
            imap.Disconnect()
             
            'bind the MailFolderCollection to a DataGrid
            Dim dg As New DataGrid()
            dg.DataSource = mfc.ToDataSet()
            dg.DataBind()
             
            Page.Controls.Add(dg)
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.ToDataSet(System.Boolean)">
            <summary>Converts the MailFolderCollection to a DataSet.</summary>
            <remarks>
            Converts to the MailFolderCollection to a DataSet so it can be bound to objects
            such as the ASP.NET DataGrid
            </remarks>
            <example>
            	<code lang="C#" title="ToDataTable()">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            imap.Disconnect();
             
            //bind the MailFolderCollection to a DataGrid
            DataGrid dg = new DataGrid();
            dg.DataSource = mfc.ToDataSet( true );
            dg.DataBind();
             
            Page.Controls.Add( dg );
                </code>
            	<code lang="VB.NET" title="ToDataTable()">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
             
            imap.Disconnect()
             
            'bind the MailFolderCollection to a DataGrid
            Dim dg As New DataGrid()
            dg.DataSource = mfc.ToDataSet( True )
            dg.DataBind()
             
            Page.Controls.Add(dg)
                </code>
            </example>
            <param name="htmlEncode">HTML encodes the folder names.</param>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.ToXmlString">
            <summary>Converts the MailFolderCollection to a XML Formatted string</summary>
            <remarks>Converts the MailFolderCollection to a properly formattted XML string.</remarks>
            <example>
            	<code lang="C#" title="ToXmlString()">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            imap.Disconnect();
             
            //write out the collection as a string
            Console.WriteLine( mfc.ToXmlString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
            </code>
            	<code lang="VB.NET" title="ToXmlString()">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
             
            imap.Disconnect()
             
            'write out the collection as a string
            Console.WriteLine(mfc.ToXmlString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.ToXmlString(System.Data.XmlWriteMode)">
            <summary>
            Converts the MailFolderCollection to a XML Formatted string, based upon
            XmlWriteMode options.
            </summary>
            <remarks>Converts the MailFolderCollection to a properly formattted XML string.</remarks>
            <example>
            	<code lang="C#" title="ToXmlString()">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            imap.Disconnect();
             
            //write out the collection as a string
            Console.WriteLine( mfc.ToXmlString(XmlWriteMode.WriteSchema) );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
            </code>
            	<code lang="VB.NET" title="ToXmlString()">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
             
            imap.Disconnect()
             
            'write out the collection as a string
            Console.WriteLine(mfc.ToXmlString(XmlWriteMode.WriteSchema))
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.ToArrayList">
            <summary>Converts the MailFolderCollection to an ArrayList.</summary>
            <remarks>Returns the MailFolderCollection as an ArrayList</remarks>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.ToArray">
            <summary>Converts the MailFolderCollection to an array of MailFolders.</summary>
            <example>
            	<code lang="C#" title="Array Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            imap.Disconnect();
             
            //convert the collection to an array, and write it out
            MailFolder[] folders = mfc.ToArray();
             
            foreach( MailFolder f in folders )
            {
                Console.WriteLine( f.Path );
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Array Example">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
             
            imap.Disconnect()
             
            'convert the collection to an array, and write it out
            Dim folders As MailFolder() = mfc.ToArray()
             
            Dim f As MailFolder
            For Each f In  folders
               Console.WriteLine(f.Path)
            Next f
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.System#Collections#IList#Add(System.Object)">
            <summary>
              For IList implementation only. Do Not Use.
            </summary>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.Add(aspNetIMAP.MailFolder)">
            <summary>Adds a MailFolder to the collection.</summary>
            <returns>
              Index at which the MailFolder was added.
            </returns>
            <example>
            	<code lang="C#" title="AddMailFolder">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            //write out the mailfolders
            Console.WriteLine( mfc.ToString() );
             
            //add a new mail folder
            MailFolder mf = new MailFolder();
            mf.Path = "NewFolder";
            mfc.Add(  mf );
             
            //now write out the collection again, to show it has been added
            Console.WriteLine( mfc.ToString() );
             
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="AddMailFolder">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
             
            'write out the mailfolders
            Console.WriteLine(mfc.ToString())
             
            'add a new mail folder
            Dim mf As New MailFolder()
            mf.Path = "NewFolder"
            mfc.Add(mf)
             
            'now write out the collection again, to show it has been added
            Console.WriteLine(mfc.ToString())
             
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>By default, this method does not add the folder to the IMAP server.</remarks>
            <param name="mailFolder">A new MailFolder.</param>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.Add(aspNetIMAP.MailFolder,System.Boolean)">
            <summary>
            Adds a MailFolder to the collection, and allows the MailFolder to be added to the
            underlying IMAP server.
            </summary>
            <example>
            	<code lang="C#" title="AddNewFolder">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            //write out the mailfolders
            Console.WriteLine( mfc.ToString() );
             
            //add a new mail folder
            MailFolder mf = new MailFolder();
            mf.Path = "NewFolder";
            mfc.Add(  mf, true );
             
            //Get the folders again, to verify it has been added
            MailFolderCollection mfc2 = imap.FolderList();
            Console.WriteLine( mfc2.ToString() );
                
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
            </code>
            	<code lang="VB.NET" title="AddNewFolder">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
             
            'write out the mailfolders
            Console.WriteLine(mfc.ToString())
             
            'add a new mail folder
            Dim mf As New MailFolder()
            mf.Path = "NewFolder"
            mfc.Add(mf, True)
             
            'Get the folders again, to verify it has been added
            Dim mfc2 As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc2.ToString())
             
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="mailFolder">MailFolder to be added to the collection.</param>
            <param name="addToIMAPServer">
            If set to true, the MailFolderCollection will create a MailFolder, using it's
            path, on the underlying IMAP server.
            </param>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.Insert(System.Int32,aspNetIMAP.MailFolder)">
            <summary>
              Inserts the MailFolder into the collection at the specified position.
            </summary>
            <example>
            	<code lang="C#" title="Insert">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            //write out the mailfolders
            Console.WriteLine( mfc.ToString() );
             
            //add a new mail folder
            MailFolder mf = new MailFolder();
            mf.Path = "NewFolder";
            mfc.Insert( 2,  mf );
             
            //Verify it has been added
            Console.WriteLine( mfc.ToString() );
                
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Insert">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
             
            'write out the mailfolders
            Console.WriteLine(mfc.ToString())
             
            'add a new mail folder
            Dim mf As New MailFolder()
            mf.Path = "NewFolder"
            mfc.Add(2, mf )
             
            'Verify it has been added
            Console.WriteLine(mfc.ToString())
             
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="index">Position at which to insert the MailFolder.</param>
            <param name="mailFolder">
              MailFolder to insert.
            </param>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.Insert(System.Int32,aspNetIMAP.MailFolder,System.Boolean)">
            <summary>
            Inserts the MailFolder at the specified index, and allows the MailFolder to be
            added to the underlying IMAP server.
            </summary>
            <summary>Inserts the MailFolder into the collection at the specified position.</summary>
            <example>
            	<code lang="C#" title="Insert">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            //write out the mailfolders
            Console.WriteLine( mfc.ToString() );
             
            //add a new mail folder
            MailFolder mf = new MailFolder();
            mf.Path = "NewFolder";
            mfc.Insert( 2,  mf, true );
             
            //Verify it has been added
            MailFolderCollection mfc2 = imap.FolderList();
            Console.WriteLine( mfc2.ToString() );
             
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Insert">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
             
            'write out the mailfolders
            Console.WriteLine(mfc.ToString())
             
            'add a new mail folder
            Dim mf As New MailFolder()
            mf.Path = "NewFolder"
            mfc.Insert(2, mf, True)
             
            'Verify it has been added
            Dim mfc2 As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc2.ToString())
             
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>
            Because aspNetIMAP cannot control how the mail server implements new folders, if
            the folder is added to the mail server, it may not be in the same index as added to the
            MailFolderCollection
            </remarks>
            <param name="index">Position to insert the MailFolder</param>
            <param name="mailFolder">MailFolder to insert.</param>
            <param name="addToIMAPServer">If True, adds the MailFolder to the underlying IMAP server.</param>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.Remove(aspNetIMAP.MailFolder)">
            <summary>
              Removes the first occurrence of a specific MailFolder from the Collection.
            </summary>
            <summary>
            Removes the MailFolder from the collection, and allows the MailFolder to be
            removed from the underlying IMAP server.
            </summary>
            <example>
            	<code lang="C#" title="RemoveFolder">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            //write out the mailfolders
            Console.WriteLine( mfc.ToString() );
             
            //remvoe a recently created "NewFolder"
            MailFolder mf = new MailFolder();
            mf.Path = "NewFolder";
            mfc.Remove(  mf );
             
            //verify it has been removed
            Console.WriteLine( mfc.ToString() );
                
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="RemoveFolder">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
             
            'write out the mailfolders
            Console.WriteLine(mfc.ToString())
             
            'remvoe a recently created "NewFolder"
            Dim mf As New MailFolder()
            mf.Path = "NewFolder"
            mfc.Remove(mf)
             
            'Verify it has been removed
            Console.WriteLine(mfc.ToString())
             
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="mailFolder">
              The MailFolder to remove.
            </param>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.Remove(aspNetIMAP.MailFolder,System.Boolean)">
            <summary>
            Removes the MailFolder from the collection, and allows the MailFolder to be
            removed from the underlying IMAP server.
            </summary>
            <example>
            	<code lang="C#" title="RemoveFolder">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            //write out the mailfolders
            Console.WriteLine( mfc.ToString() );
             
            //remvoe a recently created "NewFolder"
            MailFolder mf = new MailFolder();
            mf.Path = "NewFolder";
            mfc.Remove(  mf, true );
             
            //Get the folders again, to verify it has been removed
            MailFolderCollection mfc2 = imap.FolderList();
            Console.WriteLine( mfc2.ToString() );
                
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="RemoveFolder">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
             
            'write out the mailfolders
            Console.WriteLine(mfc.ToString())
             
            'remvoe a recently created "NewFolder"
            Dim mf As New MailFolder()
            mf.Path = "NewFolder"
            mfc.Remove(mf, True)
             
            'Get the folders again, to verify it has been removed
            Dim mfc2 As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc2.ToString())
             
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="mailFolder">The MailFolder to remove from the collection.</param>
            <param name="deleteFromIMAPServer">
            If set to true, removes the MailFolder, using MailFolder.Path, from the
            underlying IMAP server.
            </param>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
              For IList implementation only. Do not use.
            </summary>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.Remove(System.String)">
            <summary>
              Removes all MailFolders with the specified Name.
            </summary>
            <example>
            	<code lang="C#" title="Remove">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            //write out the mailfolders
            Console.WriteLine( mfc.ToString() );
             
            //remove a recently created "NewFolder" 
            mfc.Remove( "NewFolder"  );
             
            //Verify it has been removed
            Console.WriteLine( mfc.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Remove">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
             
            'write out the mailfolders
            Console.WriteLine(mfc.ToString())
             
            'remove a recently created "NewFolder" 
            mfc.Remove("NewFolder" )
             
            'Verify it has been removed
            Console.WriteLine(mfc.ToString())
             
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="path">
              Path of the MailFolder to remove.
            </param>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.Remove(System.String,System.Boolean)">
            <summary>
            ;;Removes a MailFolder by its specified path, and allows the MailFolder to be
            removed from the underlying IMAP server.
            </summary>
            <example>
            	<code lang="C#" title="Remove">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            //write out the mailfolders
            Console.WriteLine( mfc.ToString() );
             
            //remove a recently created "NewFolder" 
            mfc.Remove( "NewFolder", true );
             
            //Verify it has been removed
            MailFolderCollection mfc2 = imap.FolderList();
            Console.WriteLine( mfc2.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Remove">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
             
            'write out the mailfolders
            Console.WriteLine(mfc.ToString())
             
            'remove a recently created "NewFolder" 
            mfc.Remove("NewFolder", True)
             
            'Verify it has been removed
            Dim mfc2 As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc2.ToString())
             
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="path">Full path of the MailFolder to remove.</param>
            <param name="deleteFromIMAPServer">If True, the MailFolder will be deleted from the server.</param>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.RemoveAt(System.Int32)">
            <summary>
              Removes the element at the specified index of the Collection.
            </summary>
            <example>
            	<code lang="C#" title="Remove">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            //write out the mailfolders
            Console.WriteLine( mfc.ToString() );
             
            //Add a recently created "NewFolder" 
            MailFolder mf = new MailFolder();
            mf.Path = "NewFolder";
            mfc.Add( mf, true );
             
            //verify it has been added
            Console.WriteLine( mfc.ToString() );
             
            int i = mfc.IndexOf( mf.Path );
             
            //now remove it
            mfc.RemoveAt( i );
             
            //verify it has been removed
            Console.WriteLine( mfc.ToString() );
             
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Remove">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
             
            'write out the mailfolders
            Console.WriteLine(mfc.ToString())
             
            'Add a recently created "NewFolder" 
            Dim mf As New MailFolder()
            mf.Path = "NewFolder"
            mfc.Add(mf, True)
             
            'verify it has been added
            Console.WriteLine(mfc.ToString())
             
            Dim i As Integer = mfc.IndexOf(mf.Path)
             
            'now remove it
            mfc.RemoveAt(i)
             
            'verify it has been removed
            Console.WriteLine(mfc.ToString())
             
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="index">
              Index of the element to remove.
            </param>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.RemoveAt(System.Int32,System.Boolean)">
            <summary>
            Removes a MailFolder by its index in the collection, and allows the MailFolder to
            be removed from the underlying IMAP server.
            </summary>
            <example>
            	<code lang="C#" title="Remove">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            //write out the mailfolders
            Console.WriteLine( mfc.ToString() );
             
            //Add a recently created "NewFolder" 
            MailFolder mf = new MailFolder();
            mf.Path = "NewFolder";
            mfc.Add( mf, true );
             
            //verify it has been added
            MailFolderCollection mfc2 = imap.FolderList();
            Console.WriteLine( mfc2.ToString() );
             
            int i = mfc.IndexOf( mf.Path );
             
            //now remove it
            mfc.RemoveAt( i, true );
             
            //verify it has been removed
            MailFolderCollection mfc3 = imap.FolderList();
            Console.WriteLine( mfc3.ToString() );
             
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Remove">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
             
            //write out the mailfolders
            Console.WriteLine( mfc.ToString() );
             
            //Add a recently created "NewFolder" 
            MailFolder mf = new MailFolder();
            mf.Path = "NewFolder";
            mfc.Add( mf, true );
             
            //verify it has been added
            MailFolderCollection mfc2 = imap.FolderList();
            Console.WriteLine( mfc2.ToString() );
             
            int i = mfc.IndexOf( mf.Path );
             
            //now remove it
            mfc.RemoveAt( i, true );
             
            //verify it has been removed
            MailFolderCollection mfc3 = imap.FolderList();
            Console.WriteLine( mfc3.ToString() );
             
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            </example>
            <param name="index">Index of the folder to remove.</param>
            <param name="deleteFromIMAPServer">If True, deletes a folder with the same path, from the mail server.</param>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.Parse(System.String,aspNetIMAP.IMAP4)">
            <summary>
            Parses the server response into a MailFolderCollection.
            </summary>
            <param name="serverResponse">Raw server response.</param>
            <param name="imap">The IMAP4 connection to the server.</param>
            <returns>MailFolderCollection of folders.</returns>
            <remarks>This method is used internally by aspNetIMAP.</remarks>
        </member>
        <member name="M:aspNetIMAP.MailFolderCollection.Parse(System.String,aspNetIMAP.IMAP4,System.Text.Encoding)">
            <summary>
            Parses the server response into a MailFolderCollection.
            </summary>
            <param name="serverResponse">Raw server response.</param>
            <param name="imap">The IMAP4 connection to the server.</param>
            <param name="folderEncoding">Encoding used to decode the foldernames.</param>
            <returns>MailFolderCollection of folders.</returns>
            <remarks>This method is used internally by aspNetIMAP.</remarks>
        </member>
        <member name="P:aspNetIMAP.MailFolderCollection.Item(System.Int32)">
            <summary>
              Gets or Sets items in this collection.
            </summary>
            <param name="index">The index of the MailFolder to return.</param>
        </member>
        <member name="P:aspNetIMAP.MailFolderCollection.System#Collections#IList#$Item$(System.Int32)">
            <summary>
              For IList implementation purposes only.
            </summary>
        </member>
        <member name="P:aspNetIMAP.MailFolderCollection.Item(System.String)">
            <summary>
              Returns the Mail Folder with the specified name.
            </summary>
        </member>
        <member name="P:aspNetIMAP.MailFolderCollection.Count">
            <summary>
              Returns the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:aspNetIMAP.MailFolderCollection.IsFixedSize">
            <summary>
              Gets a value indicating whether the collection is a fixed size.
            </summary>
        </member>
        <member name="P:aspNetIMAP.MailFolderCollection.IsReadOnly">
            <summary>
              Gets a value indicating whether the Collection is read-only.
            </summary>
        </member>
        <member name="P:aspNetIMAP.MailFolderCollection.IsSynchronized">
            <summary>
              Gets a value indicating whether access to the Collection is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:aspNetIMAP.MailFolderCollection.SyncRoot">
            <summary>
              Gets an object that can be used to synchronize access to the Collection.
            </summary>
        </member>
        <member name="T:aspNetIMAP.AuthenticationType">
            <summary>The authentication type, used when logging into the IMAP Server</summary>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
            
            imap.Logger.Path = "C:\\imap.log";
            
            imap.Login("test@example.com", "test", AuthenticationType.ClearText );
            
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
            
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
            
            imap.Disconnect();
            
            Console.WriteLine( "Done" );
            Console.ReadLine();
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
            
            imap.Logger.Path = "C:\imap.log"
            
            imap.Login("test@example.com", "test", AuthenticationType.ClearText)
            
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
            
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
            
            imap.Disconnect()
            
            Console.WriteLine("Done")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="F:aspNetIMAP.AuthenticationType.ClearText">
            <summary>
            Clear text authentication
            </summary>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
            
            imap.Logger.Path = "C:\\imap.log";
            
            imap.Login("test@example.com", "test", AuthenticationType.ClearText );
            
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
            
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
            
            imap.Disconnect();
            
            Console.WriteLine( "Done" );
            Console.ReadLine();
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
            
            imap.Logger.Path = "C:\imap.log"
            
            imap.Login("test@example.com", "test", AuthenticationType.ClearText)
            
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
            
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
            
            imap.Disconnect()
            
            Console.WriteLine("Done")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="F:aspNetIMAP.AuthenticationType.LoginAuthentication">
            <summary>
            Basic authentication, as implemented by the mail server.
            </summary>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
            
            imap.Logger.Path = "C:\\imap.log";
            
            imap.Login("test@example.com", "test", AuthenticationType.LoginAuthentication );
            
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
            
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
            
            imap.Disconnect();
            
            Console.WriteLine( "Done" );
            Console.ReadLine();
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
            
            imap.Logger.Path = "C:\imap.log"
            
            imap.Login("test@example.com", "test", AuthenticationType.LoginAuthentication)
            
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
            
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
            
            imap.Disconnect()
            
            Console.WriteLine("Done")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="T:aspNetIMAP.IndexType">
            <summary>The type of index used when downloading messages.</summary>
            <remarks>
            Message numbers can be indexed either ordinally (i.e. 1, 2, 3, 4) or by Unique
            Id. The Unique Id is an integer that is uniquely assigned to each message by the IMAP
            server. To convert an Ordinal message set to a UniqueId message set, check out
            <see cref="M:aspNetIMAP.MessageClient.ToUniqueId(System.Int32)">MessageClient.ToUniqueId()</see>.
            </remarks>
            <example>
                In this example, the same headers are downloaded for the same message. The message
                is first referenced via Ordinal Index, and then referenced via UniqueId. From the
                client's perspective, there isn't any performance difference between accessing a
                message via Ordinal or UniqueId. However, the implementations may be different
                server side. 
                <code lang="C#" title="Index Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //grab the headers of the 1st message
            string headers = mf.FetchClient.Headers( 1, IndexType.Ordinal );
             
             
            //if we have the UID of the message, we can also grab the headers using the UID.
            //in this example, manually obtain the uid
            int uid = mf.MessageClient.ToUniqueId( 1 );
             
            string headersUid = mf.FetchClient.Headers( uid, IndexType.UniqueId );
             
             
            imap.Disconnect();
             
            //write the the headers obtained by ordinal index
            Console.WriteLine( "headers by ordinal" );
            Console.WriteLine( "---------------------" );
            Console.WriteLine( headers );
             
            //write out the headers obtained by unique id
            Console.WriteLine( "headers by uid" );
            Console.WriteLine( "---------------------" );
            Console.WriteLine( headersUid );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Index Example">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the headers of the 1st message
            Dim headers As String = mf.FetchClient.Headers(1, IndexType.Ordinal)
             
             
            'if we have the UID of the message, we can also grab the headers using the UID.
            'in this example, manually obtain the uid
            Dim uid As Integer = mf.MessageClient.ToUniqueId(1)
             
            Dim headersUid As String = mf.FetchClient.Headers(uid, IndexType.UniqueId)
             
             
            imap.Disconnect()
             
            'write the the headers obtained by ordinal index
            Console.WriteLine("headers by ordinal")
            Console.WriteLine("---------------------")
            Console.WriteLine(headers)
             
            'write out the headers obtained by unique id
            Console.WriteLine("headers by uid")
            Console.WriteLine("---------------------")
            Console.WriteLine(headersUid)
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="F:aspNetIMAP.IndexType.Ordinal">
            <summary>Reference a message via it's ordinal number.</summary>
            <example>
                In this example, the same headers are downloaded for the same message. The message
                is first referenced via Ordinal Index, and then referenced via UniqueId. From the
                client's perspective, there isn't any performance difference between accessing a
                message via Ordinal or UniqueId. However, the implementations may be different
                server side. 
                <code lang="C#" title="Index Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //grab the headers of the 1st message
            string headers = mf.FetchClient.Headers( 1, IndexType.Ordinal );
             
             
            //if we have the UID of the message, we can also grab the headers using the UID.
            //in this example, manually obtain the uid
            int uid = mf.MessageClient.ToUniqueId( 1 );
             
            string headersUid = mf.FetchClient.Headers( uid, IndexType.UniqueId );
             
             
            imap.Disconnect();
             
            //write the the headers obtained by ordinal index
            Console.WriteLine( "headers by ordinal" );
            Console.WriteLine( "---------------------" );
            Console.WriteLine( headers );
             
            //write out the headers obtained by unique id
            Console.WriteLine( "headers by uid" );
            Console.WriteLine( "---------------------" );
            Console.WriteLine( headersUid );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Index Example">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the headers of the 1st message
            Dim headers As String = mf.FetchClient.Headers(1, IndexType.Ordinal)
             
             
            'if we have the UID of the message, we can also grab the headers using the UID.
            'in this example, manually obtain the uid
            Dim uid As Integer = mf.MessageClient.ToUniqueId(1)
             
            Dim headersUid As String = mf.FetchClient.Headers(uid, IndexType.UniqueId)
             
             
            imap.Disconnect()
             
            'write the the headers obtained by ordinal index
            Console.WriteLine("headers by ordinal")
            Console.WriteLine("---------------------")
            Console.WriteLine(headers)
             
            'write out the headers obtained by unique id
            Console.WriteLine("headers by uid")
            Console.WriteLine("---------------------")
            Console.WriteLine(headersUid)
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="F:aspNetIMAP.IndexType.UniqueId">
            <summary>Reference a message via it's unique id number.</summary>
            <example>
                In this example, the same headers are downloaded for the same message. The message
                is first referenced via Ordinal Index, and then referenced via UniqueId. From the
                client's perspective, there isn't any performance difference between accessing a
                message via Ordinal or UniqueId. However, the implementations may be different
                server side. 
                <code lang="C#" title="Index Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //grab the headers of the 1st message
            string headers = mf.FetchClient.Headers( 1, IndexType.Ordinal );
             
             
            //if we have the UID of the message, we can also grab the headers using the UID.
            //in this example, manually obtain the uid
            int uid = mf.MessageClient.ToUniqueId( 1 );
             
            string headersUid = mf.FetchClient.Headers( uid, IndexType.UniqueId );
             
             
            imap.Disconnect();
             
            //write the the headers obtained by ordinal index
            Console.WriteLine( "headers by ordinal" );
            Console.WriteLine( "---------------------" );
            Console.WriteLine( headers );
             
            //write out the headers obtained by unique id
            Console.WriteLine( "headers by uid" );
            Console.WriteLine( "---------------------" );
            Console.WriteLine( headersUid );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Index Example">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the headers of the 1st message
            Dim headers As String = mf.FetchClient.Headers(1, IndexType.Ordinal)
             
             
            'if we have the UID of the message, we can also grab the headers using the UID.
            'in this example, manually obtain the uid
            Dim uid As Integer = mf.MessageClient.ToUniqueId(1)
             
            Dim headersUid As String = mf.FetchClient.Headers(uid, IndexType.UniqueId)
             
             
            imap.Disconnect()
             
            'write the the headers obtained by ordinal index
            Console.WriteLine("headers by ordinal")
            Console.WriteLine("---------------------")
            Console.WriteLine(headers)
             
            'write out the headers obtained by unique id
            Console.WriteLine("headers by uid")
            Console.WriteLine("---------------------")
            Console.WriteLine(headersUid)
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="T:aspNetIMAP.SilentOption">
            <summary>
            .<strong>onRequests</strong> an untagged FETCH response from the IMAP
            server.
            </summary>
            <remarks>
            Normally when a client makes a request to the server, and the message's flags are
            changed, the server responds with the new flags. If SilentOption.On is used, the client
            is expected to know what the flag changes are, and thus the server does not send them
            back to the client, thereby decreasing network traffic.
            </remarks>
            <example>
            	<code lang="C#" title="SilentOption">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            MessageClient mc = mf.MessageClient;
             
            //set various flags
            string flags = Flag.ConvertToString( FlagTypes.Answered, FlagTypes.Seen );
             
            //get the flag collection with SilentOption.Off
            FlagCollection fc = mc.Mark( 1, flags, IndexType.Ordinal,  SilentOption.Off );
             
            foreach( Flag f in fc )
            {
                Console.WriteLine( f.Value );
            }
             
            //now make the same call with SilentOption.On
            fc = mc.Mark( 1, flags, IndexType.Ordinal,  SilentOption.On);
             
            //no flags will be output, because SilentOption.On
            foreach( Flag f in fc )
            {
                Console.WriteLine( f.Value );
            }
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="SilentOption">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim mc As MessageClient = mf.MessageClient
             
            'set various flags
            Dim flags As String = Flag.ConvertToString(FlagTypes.Answered, FlagTypes.Seen)
             
            'get the flag collection with SilentOption.Off
            Dim fc As FlagCollection = mc.Mark(1, flags, IndexType.Ordinal, SilentOption.Off)
             
            Dim f As Flag
            For Each f In  fc
               Console.WriteLine(f.Value)
            Next f
             
            'now make the same call with SilentOption.On
            fc = mc.Mark(1, flags, IndexType.Ordinal, SilentOption.On)
             
            'no flags will be output, because SilentOption.On
            Dim f As Flag
            For Each f In  fc
               Console.WriteLine(f.Value)
            Next f
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="F:aspNetIMAP.SilentOption.Off">
            <summary>The message flags are returned to the client.</summary>
        </member>
        <member name="F:aspNetIMAP.SilentOption.On">
            <summary>
            Any changes to the message flags are NOT returned to the client. The client is
            expected to know the new/changed flags on the message.
            </summary>
        </member>
        <member name="T:aspNetIMAP.FlagTypes">
            <summary>
            Flag types, used on folders and messages.
            </summary>
            <remarks>
            	<para>Flags provide a small set of standard attributes that most clients user. All
                system flags are prefixed with a '\' character. The following is a list of basic
                flags:</para>
            	<para>\answered</para>
            	<para>The \answered flag is set on a message by a client when it sends a reply. A
                client must explicitly set the flag. It is not set by the server, only stored and
                maintained.</para>
            	<para>\deleted</para>
            	<para>The \deleted flag is also set by the client. The client marks the message for
                deletion. Its not until Purge(), commonly known as Expunge, is called that the
                messages are physically removed from the server. See
                <see cref="M:aspNetIMAP.MessageClient.Delete(System.Int32)">Delete()</see>,
                <see cref="M:aspNetIMAP.MessageClient.CancelDelete(System.Int32)">CancelDelete()</see>, and
                <see cref="M:aspNetIMAP.MessageClient.PurgeDeletedMessages">PurgeDeletedMessages()</see>
                for more information.</para>
            	<para>
            		<para>\draft</para>
            		<para>When composing a message, or replying to a message, you may want to
                    suspend editing, or save for a later date. IMAP allows the client to store the
                    message on the server with the \draft flag set. This allows the client to
                    identify the message as a draft for later editing.</para>
            		<para>\flagged</para>
            		<para>A client can mark a message as "important", "flagged", or "marked" by
                    setting the \flagged flag. Users can assign their own meaning to the flag,
                    since unlike the other flags, \flagged has not special semantics.</para>
            		<para>\recent</para>
            		<para>\recent is a slightly more complicated flag than the others. When a new
                    message arrives, the server sets the \recent flag, for the first \client to see
                    it. The \recent flag can be queried by clients to determine if there are any
                    new messages on the server, since the last time messages were checked.</para>
            		<para>\seen</para>
            		<para>The last flag, is the \seen flag. It is also commonly referred to as the
                    "read" flag, and is set when a message is read. Some methods allow you to read
                    messages without setting the \seen flag. These methods can be found on the
                    <see cref="T:aspNetIMAP.FetchClient">FetchClient</see>, and and mark as
                    message as read by setting the "markAsRead" parameter to true.</para>
            	</para>
            </remarks>
            <example>
            	<code lang="C#" title="Flag code Snippet">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //get the information about the first message
            FastItem item = mf.FetchClient.Fast( 1, IndexType.Ordinal );
             
            imap.Disconnect();
             
            //check out the flags
            FlagCollection fc = item.Flags;
            foreach( Flag f in fc )
            {
                Console.WriteLine( f.FlagType );
                Console.WriteLine( f.Value );
                Console.WriteLine( f.ToString() );
            }
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Flag code Snippet">
            Dim imap As New IMAP4("127.0.0.1")
             
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'get the information about the first message
            Dim item As FastItem = mf.FetchClient.Fast(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'check out the flags
            Dim fc As FlagCollection = item.Flags
            Dim f As Flag
            For Each f In  fc
               Console.WriteLine(f.FlagType)
               Console.WriteLine(f.Value)
               Console.WriteLine(f.ToString())
            Next f
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="F:aspNetIMAP.FlagTypes.None">
            <summary>
            No Flag is used
            </summary>
        </member>
        <member name="F:aspNetIMAP.FlagTypes.Answered">
            <summary>
            Message marked as answered.
            </summary>
        </member>
        <member name="F:aspNetIMAP.FlagTypes.Deleted">
            <summary>
            Message marked for deletion.
            </summary>
        </member>
        <member name="F:aspNetIMAP.FlagTypes.Draft">
            <summary>
            Message marked as a draft.
            </summary>
        </member>
        <member name="F:aspNetIMAP.FlagTypes.Flagged">
            <summary>
            Message flagged.
            </summary>
        </member>
        <member name="F:aspNetIMAP.FlagTypes.Recent">
            <summary>
            Recent, unread message
            </summary>
        </member>
        <member name="F:aspNetIMAP.FlagTypes.Seen">
            <summary>
            Message seen or read.
            </summary>
        </member>
        <member name="F:aspNetIMAP.FlagTypes.Unknown">
            <summary>
            An unknown, or custom flag.
            </summary>
        </member>
        <member name="T:aspNetIMAP.SearchFlags">
            <summary>Various flags that can be searched.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFlags.Answered">
            <summary>Checks for the Answered flag</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFlags.Deleted">
            <summary>The for the message to be marked as deleted.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFlags.Draft">
            <summary>Messages are a draft message.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFlags.Flagged">
            <summary>Messages that have been flagged.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFlags.Recent">
            <summary>Messages that are recent.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFlags.Seen">
            <summary>Messages that have been seen.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFlags.Old">
            <summary>Messages without the recent flag set.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFlags.New">
            <summary>Messages recent flag set, but not seen.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFlags.UnAnswered">
            <summary>Unanswered messages.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFlags.UnDeleted">
            <summary>Messages not marked for deletion.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFlags.UnDraft">
            <summary>Messages that are not drafts.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFlags.UnFlagged">
            <summary>Messages that have not been flagged.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFlags.UnSeen">
            <summary>Messages that have not been seen.</summary>
        </member>
        <member name="T:aspNetIMAP.SearchFields">
            <summary>Various email message fields that can be searched.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFields.Bcc">
            <summary>Blind Carbon Copy header</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFields.Body">
            <summary>The email message, excluding the headers.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFields.Cc">
            <summary>The Carbon Copy header.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFields.From">
            <summary>The From address header.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFields.Header">
            <summary>Any message header.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFields.Subject">
            <summary>The Subject header.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFields.Text">
            <summary>The entire message, including the body and headers.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchFields.To">
            <summary>The To email address header.</summary>
        </member>
        <member name="T:aspNetIMAP.SearchDates">
            <summary>Date parameters used for searching by date.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchDates.Before">
            <summary>Messages before a specific DateTime.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchDates.On">
            <summary>Messages on a certain day of a DateTime value.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchDates.Since">
            <summary>Messages since a certain DateTime value.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchDates.SentBefore">
            <summary>Message sent before a specific DateTime value.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchDates.SentOn">
            <summary>Messages sent on a specific day of a DateTime value.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchDates.SentSince">
            <summary>Messages sent since a specific DateTime value.</summary>
        </member>
        <member name="T:aspNetIMAP.SearchOperators">
            <summary>Logical search operators (And, Or, Not)</summary>
        </member>
        <member name="F:aspNetIMAP.SearchOperators.And">
            <summary>AND operator, to 'AND' various words together.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchOperators.Not">
            <summary>Messages not matching a search key.</summary>
        </member>
        <member name="F:aspNetIMAP.SearchOperators.Or">
            <summary>Messages matching either search key.</summary>
        </member>
        <member name="T:aspNetIMAP.IMAPProtocolException">
            <summary>
            An IMAP protocol exception.
            </summary>
        </member>
        <member name="M:aspNetIMAP.IMAPProtocolException.#ctor">
            <summary>
            Creates an instance of a IMAPProtocolException
            </summary>
        </member>
        <member name="M:aspNetIMAP.IMAPProtocolException.#ctor(System.String)">
            <summary>
            Creates an instance of a IMAPProtocolException
            </summary>
            <param name="errorMessage">The error message information set to IMAPProtocolException.ErrorMessage</param>
        </member>
        <member name="M:aspNetIMAP.IMAPProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of a IMAPProtocolException
            </summary>
            <param name="info">Holds the exception data waiting to be serialized/deserialzed.</param>
            <param name="context">Serialized stream of data.</param>
        </member>
        <member name="T:aspNetIMAP.IMAPException">
            <summary>
            Generic IMAPException exception.
            </summary>
        </member>
        <member name="M:aspNetIMAP.IMAPException.#ctor">
            <summary>
            Creates an instance of a IMAPException object.
            </summary>
        </member>
        <member name="M:aspNetIMAP.IMAPException.#ctor(System.String)">
            <summary>
            Creates an instance of a IMAPException object.
            </summary>
            <param name="errorMessage">The error message information set to IMAPException.ErrorMessage</param>
        </member>
        <member name="M:aspNetIMAP.IMAPException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of a IMAPException object.
            </summary>
        </member>
        <member name="M:aspNetIMAP.IMAPException.#ctor(System.String,System.Exception)">
            <param name="errorMessage">Holds the exception data waiting to be serialized/deserialzed.</param>
            <param name="exception">Serialized stream of data</param>
        </member>
        <member name="T:aspNetIMAP.IMAPLoginException">
            <summary>
            Generic IMAP Login exception.
            </summary>
        </member>
        <member name="M:aspNetIMAP.IMAPLoginException.#ctor">
            <summary>Creates an instance of a IMAPLoginException object.</summary>
            <remarks>
            This is exception is thrown when the login credentials fail to the IMAP
            server.
            </remarks>
        </member>
        <member name="M:aspNetIMAP.IMAPLoginException.#ctor(System.String)">
            <summary>
            Creates an instance of a IMAPException object.
            </summary>
            <param name="errorMessage">The error message information set to IMAPLoginException.ErrorMessage</param>
        </member>
        <member name="M:aspNetIMAP.IMAPLoginException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of a IMAPException object.
            </summary>
            <param name="info">Holds the exception data waiting to be serialized/deserialzed.</param>
            <param name="context">Serialized stream of data</param>
        </member>
        <member name="T:aspNetIMAP.IMAPConnectionCancelledException">
            <summary>
            Exception thrown when the IMAP connection is manually cancelled by the
            user/developer.
            </summary>
        </member>
        <member name="M:aspNetIMAP.IMAPConnectionCancelledException.#ctor">
            <summary>Creates an instance of the IMAPConnectionCancelledException</summary>
        </member>
        <member name="M:aspNetIMAP.IMAPConnectionCancelledException.#ctor(System.String)">
            <summary>Creates an instance of the IMAPConnectionCancelledException</summary>
            <param name="errorMessage">The error message information set to IMAPLoginException.ErrorMessage</param>
        </member>
        <member name="M:aspNetIMAP.IMAPConnectionCancelledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates an instance of the IMAPConnectionCancelledException</summary>
            <param name="info">Information to be serialized/deserialized.</param>
            <param name="context">Stream containing the serialized/deserialized data.</param>
        </member>
        <member name="M:aspNetIMAP.IMAPConnectionCancelledException.#ctor(System.String,System.Exception)">
            <summary>Creates an instance of the IMAPConnectionCancelledException</summary>
            <param name="errorMessage">Error message shown with this exception.</param>
            <param name="exception">The base exception that threw the ConnectionCancelled exception.</param>
        </member>
        <member name="T:aspNetIMAP.IMAPConnectionException">
            <summary>
            The exception raised during IMAP Server connection.
            </summary>
        </member>
        <member name="M:aspNetIMAP.IMAPConnectionException.#ctor">
            <summary>
            Creates an instance of a IMAPConnectionException
            </summary>
        </member>
        <member name="M:aspNetIMAP.IMAPConnectionException.#ctor(System.String)">
            <summary>
            Creates an instance of a IMAPConnectionException
            </summary>
        </member>
        <member name="M:aspNetIMAP.IMAPConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of a IMAPConnectionException
            </summary>
        </member>
        <member name="T:aspNetIMAP.IMAPProxyException">
            <summary>
            The exception raised during Proxy communication.
            </summary>
        </member>
        <member name="M:aspNetIMAP.IMAPProxyException.#ctor">
            <summary>
            Creates an instance of the IMAPProxyException
            </summary>
        </member>
        <member name="M:aspNetIMAP.IMAPProxyException.#ctor(System.String)">
            <summary>
            Creates an instance of the IMAPProxyException
            </summary>
            <param name="errorMessage">Error message </param>
        </member>
        <member name="M:aspNetIMAP.IMAPProxyException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the IMAPProxyException
            </summary>
            <param name="errorMessage">Error message </param>
            <param name="innerException">Inner exception that is the base of this exception.</param>
        </member>
        <member name="M:aspNetIMAP.IMAPProxyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the IMAPProxyException
            </summary>
        </member>
        <member name="T:aspNetIMAP.ServerResponseEventHandler">
            <summary>
            The delegate used for handling the ServerResponse Event.
            </summary>
            <example>
            	<code lang="C#" title="ServerResponse Example">
            static void Main(string[] args)
            {
             
                IMAP4 imap = new IMAP4( "127.0.0.1" );
             
                //wire up the server event, so we can watch the commands to the imap server, in real time.
                imap.ServerResponse += new ServerResponseEventHandler( OnServerResponse );
             
                imap.Username = "dave@blah.com";
                imap.Password = "test";
                imap.Login();
             
                //grab the inbox
                MailFolder mf = imap.SelectInbox();
                
                //grab the headers of the 1st message
                string headers = mf.FetchClient.Headers( 1, IndexType.Ordinal );
             
                imap.Disconnect();
             
                //write the the headers 
                Console.WriteLine( headers );
             
             
                Console.WriteLine( "Done" );
                Console.ReadLine();
             
            }
             
            private static void OnServerResponse( object sender, ServerResponseEventArgs e )
            {
                //write out various information
             
                //imap command
                Console.WriteLine( e.Command );
             
                //number of bytes
                Console.WriteLine( e.DataCount );
             
                //message
                Console.WriteLine( Encoding.ASCII.GetString( e.Data, 0, e.DataCount ) );
                
            }
            </code>
            	<code lang="VB.NET" title="ServerResponse Example">
            'Entry point which delegates to C-style main Private Function
            Public Overloads Shared Sub Main()
               Main(System.Environment.GetCommandLineArgs())
            End Sub
             
            Overloads Shared Sub Main(args() As String)
               
               Dim imap As New IMAP4("127.0.0.1")
               
               'wire up the server event, so we can watch the commands to the imap server, in real time.
               AddHandler imap.ServerResponse, AddressOf OnServerResponse
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               'grab the inbox
               Dim mf As MailFolder = imap.SelectInbox()
               
               'grab the headers of the 1st message
               Dim headers As String = mf.FetchClient.Headers(1, IndexType.Ordinal)
               
               imap.Disconnect()
               
               'write the the headers 
               Console.WriteLine(headers)
               
               
               Console.WriteLine("Done")
               Console.ReadLine()
            End Sub 'Main
             
             
            Private Shared Sub OnServerResponse(sender As Object, e As ServerResponseEventArgs)
               'write out various information
               'imap command
               Console.WriteLine(e.Command)
               
               'number of bytes
               Console.WriteLine(e.DataCount)
               
               'message
               Console.WriteLine(Encoding.ASCII.GetString(e.Data, 0, e.DataCount))
            End Sub 'OnServerResponse
                </code>
            </example>
            <param name="sender">The sender object, typically the IMAP4 object.</param>
            <param name="e">The ServerResponseEventArgs arguments.</param>
        </member>
        <member name="T:aspNetIMAP.ServerResponseEventArgs">
            <summary>
            An instance of the ServerResponse Event Args.
            </summary>
            <example>
                The following example demonstrates capturing the session between the IMAP server
                and the client.
                <code lang="C#" title="ServerResponse Example">
            static void Main(string[] args)
            {
             
                IMAP4 imap = new IMAP4( "127.0.0.1" );
             
                //wire up the server event, so we can watch the commands to the imap server, in real time.
                imap.ServerResponse += new ServerResponseEventHandler( OnServerResponse );
             
                imap.Username = "dave@blah.com";
                imap.Password = "test";
                imap.Login();
             
                //grab the inbox
                MailFolder mf = imap.SelectInbox();
                
                //grab the headers of the 1st message
                string headers = mf.FetchClient.Headers( 1, IndexType.Ordinal );
             
                imap.Disconnect();
             
                //write the the headers 
                Console.WriteLine( headers );
             
             
                Console.WriteLine( "Done" );
                Console.ReadLine();
             
            }
             
            private static void OnServerResponse( object sender, ServerResponseEventArgs e )
            {
                //write out various information
             
                //imap command
                Console.WriteLine( e.Command );
             
                //number of bytes
                Console.WriteLine( e.DataCount );
             
                //message
                Console.WriteLine( Encoding.ASCII.GetString( e.Data, 0, e.DataCount ) );
                
            }
            </code>
            	<code lang="VB.NET" title="ServerResponse Example">
            'Entry point which delegates to C-style main Private Function
            Public Overloads Shared Sub Main()
               Main(System.Environment.GetCommandLineArgs())
            End Sub
             
            Overloads Shared Sub Main(args() As String)
               
               Dim imap As New IMAP4("127.0.0.1")
               
               'wire up the server event, so we can watch the commands to the imap server, in real time.
               AddHandler imap.ServerResponse, AddressOf OnServerResponse
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               'grab the inbox
               Dim mf As MailFolder = imap.SelectInbox()
               
               'grab the headers of the 1st message
               Dim headers As String = mf.FetchClient.Headers(1, IndexType.Ordinal)
               
               imap.Disconnect()
               
               'write the the headers 
               Console.WriteLine(headers)
               
               
               Console.WriteLine("Done")
               Console.ReadLine()
            End Sub 'Main
             
             
            Private Shared Sub OnServerResponse(sender As Object, e As ServerResponseEventArgs)
               'write out various information
               'imap command
               Console.WriteLine(e.Command)
               
               'number of bytes
               Console.WriteLine(e.DataCount)
               
               'message
               Console.WriteLine(Encoding.ASCII.GetString(e.Data, 0, e.DataCount))
            End Sub 'OnServerResponse
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.ServerResponseEventArgs.#ctor">
            <summary>
            Creats an instance of the ServerResponse Event Arguments.
            </summary>
            <example>
                The following example demonstrates capturing the session between the IMAP server
                and the client.
                <code lang="C#" title="ServerResponse Example">
            static void Main(string[] args)
            {
             
                IMAP4 imap = new IMAP4( "127.0.0.1" );
             
                //wire up the server event, so we can watch the commands to the imap server, in real time.
                imap.ServerResponse += new ServerResponseEventHandler( OnServerResponse );
             
                imap.Username = "dave@blah.com";
                imap.Password = "test";
                imap.Login();
             
                //grab the inbox
                MailFolder mf = imap.SelectInbox();
                
                //grab the headers of the 1st message
                string headers = mf.FetchClient.Headers( 1, IndexType.Ordinal );
             
                imap.Disconnect();
             
                //write the the headers 
                Console.WriteLine( headers );
             
             
                Console.WriteLine( "Done" );
                Console.ReadLine();
             
            }
             
            private static void OnServerResponse( object sender, ServerResponseEventArgs e )
            {
                //write out various information
             
                //imap command
                Console.WriteLine( e.Command );
             
                //number of bytes
                Console.WriteLine( e.DataCount );
             
                //message
                Console.WriteLine( Encoding.ASCII.GetString( e.Data, 0, e.DataCount ) );
                
            }
            </code>
            	<code lang="VB.NET" title="ServerResponse Example">
            'Entry point which delegates to C-style main Private Function
            Public Overloads Shared Sub Main()
               Main(System.Environment.GetCommandLineArgs())
            End Sub
             
            Overloads Shared Sub Main(args() As String)
               
               Dim imap As New IMAP4("127.0.0.1")
               
               'wire up the server event, so we can watch the commands to the imap server, in real time.
               AddHandler imap.ServerResponse, AddressOf OnServerResponse
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               'grab the inbox
               Dim mf As MailFolder = imap.SelectInbox()
               
               'grab the headers of the 1st message
               Dim headers As String = mf.FetchClient.Headers(1, IndexType.Ordinal)
               
               imap.Disconnect()
               
               'write the the headers 
               Console.WriteLine(headers)
               
               
               Console.WriteLine("Done")
               Console.ReadLine()
            End Sub 'Main
             
             
            Private Shared Sub OnServerResponse(sender As Object, e As ServerResponseEventArgs)
               'write out various information
               'imap command
               Console.WriteLine(e.Command)
               
               'number of bytes
               Console.WriteLine(e.DataCount)
               
               'message
               Console.WriteLine(Encoding.ASCII.GetString(e.Data, 0, e.DataCount))
            End Sub 'OnServerResponse
                </code>
                </example>
        </member>
        <member name="M:aspNetIMAP.ServerResponseEventArgs.#ctor(System.String,System.Byte[],System.Int32)">
            <summary>
            Creats an instance of the ServerResponse Event Arguments.
            </summary>
            <example>
                The following example demonstrates capturing the session between the IMAP server
                and the client.
                <code lang="C#" title="ServerResponse Example">
            static void Main(string[] args)
            {
             
                IMAP4 imap = new IMAP4( "127.0.0.1" );
             
                //wire up the server event, so we can watch the commands to the imap server, in real time.
                imap.ServerResponse += new ServerResponseEventHandler( OnServerResponse );
             
                imap.Username = "dave@blah.com";
                imap.Password = "test";
                imap.Login();
             
                //grab the inbox
                MailFolder mf = imap.SelectInbox();
                
                //grab the headers of the 1st message
                string headers = mf.FetchClient.Headers( 1, IndexType.Ordinal );
             
                imap.Disconnect();
             
                //write the the headers 
                Console.WriteLine( headers );
             
             
                Console.WriteLine( "Done" );
                Console.ReadLine();
             
            }
             
            private static void OnServerResponse( object sender, ServerResponseEventArgs e )
            {
                //write out various information
             
                //imap command
                Console.WriteLine( e.Command );
             
                //number of bytes
                Console.WriteLine( e.DataCount );
             
                //message
                Console.WriteLine( Encoding.ASCII.GetString( e.Data, 0, e.DataCount ) );
                
            }
            </code>
            	<code lang="VB.NET" title="ServerResponse Example">
            'Entry point which delegates to C-style main Private Function
            Public Overloads Shared Sub Main()
               Main(System.Environment.GetCommandLineArgs())
            End Sub
             
            Overloads Shared Sub Main(args() As String)
               
               Dim imap As New IMAP4("127.0.0.1")
               
               'wire up the server event, so we can watch the commands to the imap server, in real time.
               AddHandler imap.ServerResponse, AddressOf OnServerResponse
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               'grab the inbox
               Dim mf As MailFolder = imap.SelectInbox()
               
               'grab the headers of the 1st message
               Dim headers As String = mf.FetchClient.Headers(1, IndexType.Ordinal)
               
               imap.Disconnect()
               
               'write the the headers 
               Console.WriteLine(headers)
               
               
               Console.WriteLine("Done")
               Console.ReadLine()
            End Sub 'Main
             
             
            Private Shared Sub OnServerResponse(sender As Object, e As ServerResponseEventArgs)
               'write out various information
               'imap command
               Console.WriteLine(e.Command)
               
               'number of bytes
               Console.WriteLine(e.DataCount)
               
               'message
               Console.WriteLine(Encoding.ASCII.GetString(e.Data, 0, e.DataCount))
            End Sub 'OnServerResponse
                </code>
                </example>
        </member>
        <member name="P:aspNetIMAP.ServerResponseEventArgs.Command">
            <summary>
            The IMAP Command sent to the server
            </summary>
            <example>
                The following example demonstrates capturing the session between the IMAP server
                and the client.
                <code lang="C#" title="ServerResponse Example">
            static void Main(string[] args)
            {
             
                IMAP4 imap = new IMAP4( "127.0.0.1" );
             
                //wire up the server event, so we can watch the commands to the imap server, in real time.
                imap.ServerResponse += new ServerResponseEventHandler( OnServerResponse );
             
                imap.Username = "dave@blah.com";
                imap.Password = "test";
                imap.Login();
             
                //grab the inbox
                MailFolder mf = imap.SelectInbox();
                
                //grab the headers of the 1st message
                string headers = mf.FetchClient.Headers( 1, IndexType.Ordinal );
             
                imap.Disconnect();
             
                //write the the headers 
                Console.WriteLine( headers );
             
             
                Console.WriteLine( "Done" );
                Console.ReadLine();
             
            }
             
            private static void OnServerResponse( object sender, ServerResponseEventArgs e )
            {
                //write out various information
             
                //imap command
                Console.WriteLine( e.Command );
             
                //number of bytes
                Console.WriteLine( e.DataCount );
             
                //message
                Console.WriteLine( Encoding.ASCII.GetString( e.Data, 0, e.DataCount ) );
                
            }
            </code>
            	<code lang="VB.NET" title="ServerResponse Example">
            'Entry point which delegates to C-style main Private Function
            Public Overloads Shared Sub Main()
               Main(System.Environment.GetCommandLineArgs())
            End Sub
             
            Overloads Shared Sub Main(args() As String)
               
               Dim imap As New IMAP4("127.0.0.1")
               
               'wire up the server event, so we can watch the commands to the imap server, in real time.
               AddHandler imap.ServerResponse, AddressOf OnServerResponse
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               'grab the inbox
               Dim mf As MailFolder = imap.SelectInbox()
               
               'grab the headers of the 1st message
               Dim headers As String = mf.FetchClient.Headers(1, IndexType.Ordinal)
               
               imap.Disconnect()
               
               'write the the headers 
               Console.WriteLine(headers)
               
               
               Console.WriteLine("Done")
               Console.ReadLine()
            End Sub 'Main
             
             
            Private Shared Sub OnServerResponse(sender As Object, e As ServerResponseEventArgs)
               'write out various information
               'imap command
               Console.WriteLine(e.Command)
               
               'number of bytes
               Console.WriteLine(e.DataCount)
               
               'message
               Console.WriteLine(Encoding.ASCII.GetString(e.Data, 0, e.DataCount))
            End Sub 'OnServerResponse
                </code>
                </example>
        </member>
        <member name="P:aspNetIMAP.ServerResponseEventArgs.Data">
            <summary>
            The byte array of Data recieved from the server
            </summary>
            <remarks>
            By default, this array size is set to the IMAPConnection.SocketBufferSize. Use the DataCount property to determine how 
            many bytes were actually read into the Data array.
            </remarks>
            <example>
                The following example demonstrates capturing the session between the IMAP server
                and the client.
                <code lang="C#" title="ServerResponse Example">
            static void Main(string[] args)
            {
             
                IMAP4 imap = new IMAP4( "127.0.0.1" );
             
                //wire up the server event, so we can watch the commands to the imap server, in real time.
                imap.ServerResponse += new ServerResponseEventHandler( OnServerResponse );
             
                imap.Username = "dave@blah.com";
                imap.Password = "test";
                imap.Login();
             
                //grab the inbox
                MailFolder mf = imap.SelectInbox();
                
                //grab the headers of the 1st message
                string headers = mf.FetchClient.Headers( 1, IndexType.Ordinal );
             
                imap.Disconnect();
             
                //write the the headers 
                Console.WriteLine( headers );
             
             
                Console.WriteLine( "Done" );
                Console.ReadLine();
             
            }
             
            private static void OnServerResponse( object sender, ServerResponseEventArgs e )
            {
                //write out various information
             
                //imap command
                Console.WriteLine( e.Command );
             
                //number of bytes
                Console.WriteLine( e.DataCount );
             
                //message
                Console.WriteLine( Encoding.ASCII.GetString( e.Data, 0, e.DataCount ) );
                
            }
            </code>
            	<code lang="VB.NET" title="ServerResponse Example">
            'Entry point which delegates to C-style main Private Function
            Public Overloads Shared Sub Main()
               Main(System.Environment.GetCommandLineArgs())
            End Sub
             
            Overloads Shared Sub Main(args() As String)
               
               Dim imap As New IMAP4("127.0.0.1")
               
               'wire up the server event, so we can watch the commands to the imap server, in real time.
               AddHandler imap.ServerResponse, AddressOf OnServerResponse
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               'grab the inbox
               Dim mf As MailFolder = imap.SelectInbox()
               
               'grab the headers of the 1st message
               Dim headers As String = mf.FetchClient.Headers(1, IndexType.Ordinal)
               
               imap.Disconnect()
               
               'write the the headers 
               Console.WriteLine(headers)
               
               
               Console.WriteLine("Done")
               Console.ReadLine()
            End Sub 'Main
             
             
            Private Shared Sub OnServerResponse(sender As Object, e As ServerResponseEventArgs)
               'write out various information
               'imap command
               Console.WriteLine(e.Command)
               
               'number of bytes
               Console.WriteLine(e.DataCount)
               
               'message
               Console.WriteLine(Encoding.ASCII.GetString(e.Data, 0, e.DataCount))
            End Sub 'OnServerResponse
                </code>
                </example>
        </member>
        <member name="P:aspNetIMAP.ServerResponseEventArgs.DataCount">
            <summary>
            The number of bytes read into the Data byte array.
            </summary>
            <example>
                The following example demonstrates capturing the session between the IMAP server
                and the client.
                <code lang="C#" title="ServerResponse Example">
            static void Main(string[] args)
            {
             
                IMAP4 imap = new IMAP4( "127.0.0.1" );
             
                //wire up the server event, so we can watch the commands to the imap server, in real time.
                imap.ServerResponse += new ServerResponseEventHandler( OnServerResponse );
             
                imap.Username = "dave@blah.com";
                imap.Password = "test";
                imap.Login();
             
                //grab the inbox
                MailFolder mf = imap.SelectInbox();
                
                //grab the headers of the 1st message
                string headers = mf.FetchClient.Headers( 1, IndexType.Ordinal );
             
                imap.Disconnect();
             
                //write the the headers 
                Console.WriteLine( headers );
             
             
                Console.WriteLine( "Done" );
                Console.ReadLine();
             
            }
             
            private static void OnServerResponse( object sender, ServerResponseEventArgs e )
            {
                //write out various information
             
                //imap command
                Console.WriteLine( e.Command );
             
                //number of bytes
                Console.WriteLine( e.DataCount );
             
                //message
                Console.WriteLine( Encoding.ASCII.GetString( e.Data, 0, e.DataCount ) );
                
            }
            </code>
            	<code lang="VB.NET" title="ServerResponse Example">
            'Entry point which delegates to C-style main Private Function
            Public Overloads Shared Sub Main()
               Main(System.Environment.GetCommandLineArgs())
            End Sub
             
            Overloads Shared Sub Main(args() As String)
               
               Dim imap As New IMAP4("127.0.0.1")
               
               'wire up the server event, so we can watch the commands to the imap server, in real time.
               AddHandler imap.ServerResponse, AddressOf OnServerResponse
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               'grab the inbox
               Dim mf As MailFolder = imap.SelectInbox()
               
               'grab the headers of the 1st message
               Dim headers As String = mf.FetchClient.Headers(1, IndexType.Ordinal)
               
               imap.Disconnect()
               
               'write the the headers 
               Console.WriteLine(headers)
               
               
               Console.WriteLine("Done")
               Console.ReadLine()
            End Sub 'Main
             
             
            Private Shared Sub OnServerResponse(sender As Object, e As ServerResponseEventArgs)
               'write out various information
               'imap command
               Console.WriteLine(e.Command)
               
               'number of bytes
               Console.WriteLine(e.DataCount)
               
               'message
               Console.WriteLine(Encoding.ASCII.GetString(e.Data, 0, e.DataCount))
            End Sub 'OnServerResponse
                </code>
                </example>
        </member>
        <member name="T:aspNetIMAP.WriteLogEntryEventHandler">
            <summary>
            The delegate used for event handling.
            </summary>
            <example>
                This code example demonstrates how you could use the WriteLogEntry event to
                record log entries to a Sql server database. 
                <code lang="C#" title="Writing log entries to Sql Server">
            static void Main(string[] args)
            {
             
                IMAP4 imap = new IMAP4( "127.0.0.1" );
             
                //create a log
                imap.Logger = new IMAPLog();
             
                //record the entries 
                imap.Logger.WriteLogEntry += new WriteLogEntryEventHandler( OnWriteEntry );
             
                imap.Username = "dave@blah.com";
                imap.Password = "test";
                imap.Login();
             
                //list all of the folders
                MailFolderCollection mfc = imap.FolderList();
                Console.WriteLine( mfc.ToString() );
             
                imap.Disconnect();
             
                Console.WriteLine( "Done" );
                Console.ReadLine();
             
            }
             
            private static void OnWriteEntry( object sender, WriteLogEntryEventArgs e )
            {
                //a method used for saving log entries to sql server
                RecordToSqlServer( e.LogEntry ); 
            }
             
            private static void RecordToSqlServer( string entry )
            {
                //normally this method would be used for saving entries to an enterprise sql server.
                //for demonstrations purposes, just write out the entry to the console
                Console.Write( entry );
            }
                </code>
            	<code lang="VB.NET" title="Writing log entries to Sql Server">
            Public Overloads Shared Sub Main()
               
               Dim imap As New IMAP4("127.0.0.1")
               
               'create a log
               imap.Logger = New IMAPLog()
               
               'record the entries 
               AddHandler imap.Logger.WriteLogEntry, AddressOf OnWriteEntry
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               'list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
            End Sub 'Main
             
             
            Private Shared Sub OnWriteEntry(sender As Object, e As WriteLogEntryEventArgs)
               'a method used for saving log entries to sql server
               RecordToSqlServer(e.LogEntry)
            End Sub
             
             
            Private Shared Sub RecordToSqlServer(entry As String)
               'normally this method would be used for saving entries to an enterprise sql server.
               'for demonstrations purposes, just write out the entry to the console
               Console.Write(entry)
            End Sub
                </code>
            </example>
            <param name="sender">The sender object, typically the IMAPLog object.</param>
            <param name="e">WriteLogEntryEventArgs event arguments.</param>
        </member>
        <member name="T:aspNetIMAP.WriteLogEntryEventArgs">
            <summary>
            EventArgs for the Log Event.
            </summary>
            <example>
                This code example demonstrates how you could use the WriteLogEntry event to
                record log entries to a Sql server database.
                <code lang="C#" title="Writing log entries to Sql Server">
            static void Main(string[] args)
            {
             
                IMAP4 imap = new IMAP4( "127.0.0.1" );
             
                //create a log
                imap.Logger = new IMAPLog();
             
                //record the entries 
                imap.Logger.WriteLogEntry += new WriteLogEntryEventHandler( OnWriteEntry );
             
                imap.Username = "dave@blah.com";
                imap.Password = "test";
                imap.Login();
             
                //list all of the folders
                MailFolderCollection mfc = imap.FolderList();
                Console.WriteLine( mfc.ToString() );
             
                imap.Disconnect();
             
                Console.WriteLine( "Done" );
                Console.ReadLine();
             
            }
             
            private static void OnWriteEntry( object sender, WriteLogEntryEventArgs e )
            {
                //a method used for saving log entries to sql server
                RecordToSqlServer( e.LogEntry ); 
            }
             
            private static void RecordToSqlServer( string entry )
            {
                //normally this method would be used for saving entries to an enterprise sql server.
                //for demonstrations purposes, just write out the entry to the console
                Console.Write( entry );
            }
                </code>
            	<code lang="VB.NET" title="Writing log entries to Sql Server">
            Public Overloads Shared Sub Main()
               
               Dim imap As New IMAP4("127.0.0.1")
               
               'create a log
               imap.Logger = New IMAPLog()
               
               'record the entries 
               AddHandler imap.Logger.WriteLogEntry, AddressOf OnWriteEntry
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               'list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
            End Sub 'Main
             
             
            Private Shared Sub OnWriteEntry(sender As Object, e As WriteLogEntryEventArgs)
               'a method used for saving log entries to sql server
               RecordToSqlServer(e.LogEntry)
            End Sub
             
             
            Private Shared Sub RecordToSqlServer(entry As String)
               'normally this method would be used for saving entries to an enterprise sql server.
               'for demonstrations purposes, just write out the entry to the console
               Console.Write(entry)
            End Sub
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.WriteLogEntryEventArgs.#ctor">
            <summary>
            Creates an instance of the WriteLogEntry Event Arguments.
            </summary>
            <example>
                This code example demonstrates how you could use the WriteLogEntry event to
                record log entries to a Sql server database.
                <code lang="C#" title="Writing log entries to Sql Server">
            static void Main(string[] args)
            {
             
                IMAP4 imap = new IMAP4( "127.0.0.1" );
             
                //create a log
                imap.Logger = new IMAPLog();
             
                //record the entries 
                imap.Logger.WriteLogEntry += new WriteLogEntryEventHandler( OnWriteEntry );
             
                imap.Username = "dave@blah.com";
                imap.Password = "test";
                imap.Login();
             
                //list all of the folders
                MailFolderCollection mfc = imap.FolderList();
                Console.WriteLine( mfc.ToString() );
             
                imap.Disconnect();
             
                Console.WriteLine( "Done" );
                Console.ReadLine();
             
            }
             
            private static void OnWriteEntry( object sender, WriteLogEntryEventArgs e )
            {
                //a method used for saving log entries to sql server
                RecordToSqlServer( e.LogEntry ); 
            }
             
            private static void RecordToSqlServer( string entry )
            {
                //normally this method would be used for saving entries to an enterprise sql server.
                //for demonstrations purposes, just write out the entry to the console
                Console.Write( entry );
            }
                </code>
            	<code lang="VB.NET" title="Writing log entries to Sql Server">
            Public Overloads Shared Sub Main()
               
               Dim imap As New IMAP4("127.0.0.1")
               
               'create a log
               imap.Logger = New IMAPLog()
               
               'record the entries 
               AddHandler imap.Logger.WriteLogEntry, AddressOf OnWriteEntry
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               'list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
            End Sub 'Main
             
             
            Private Shared Sub OnWriteEntry(sender As Object, e As WriteLogEntryEventArgs)
               'a method used for saving log entries to sql server
               RecordToSqlServer(e.LogEntry)
            End Sub
             
             
            Private Shared Sub RecordToSqlServer(entry As String)
               'normally this method would be used for saving entries to an enterprise sql server.
               'for demonstrations purposes, just write out the entry to the console
               Console.Write(entry)
            End Sub
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.WriteLogEntryEventArgs.#ctor(System.String)">
            <summary>
            Creats an instance of the WriteLogEntry Event Arguments.
            </summary>
            <example>
                This code example demonstrates how you could use the WriteLogEntry event to
                record log entries to a Sql server database.
                <code lang="C#" title="Writing log entries to Sql Server">
            static void Main(string[] args)
            {
             
                IMAP4 imap = new IMAP4( "127.0.0.1" );
             
                //create a log
                imap.Logger = new IMAPLog();
             
                //record the entries 
                imap.Logger.WriteLogEntry += new WriteLogEntryEventHandler( OnWriteEntry );
             
                imap.Username = "dave@blah.com";
                imap.Password = "test";
                imap.Login();
             
                //list all of the folders
                MailFolderCollection mfc = imap.FolderList();
                Console.WriteLine( mfc.ToString() );
             
                imap.Disconnect();
             
                Console.WriteLine( "Done" );
                Console.ReadLine();
             
            }
             
            private static void OnWriteEntry( object sender, WriteLogEntryEventArgs e )
            {
                //a method used for saving log entries to sql server
                RecordToSqlServer( e.LogEntry ); 
            }
             
            private static void RecordToSqlServer( string entry )
            {
                //normally this method would be used for saving entries to an enterprise sql server.
                //for demonstrations purposes, just write out the entry to the console
                Console.Write( entry );
            }
                </code>
            	<code lang="VB.NET" title="Writing log entries to Sql Server">
            Public Overloads Shared Sub Main()
               
               Dim imap As New IMAP4("127.0.0.1")
               
               'create a log
               imap.Logger = New IMAPLog()
               
               'record the entries 
               AddHandler imap.Logger.WriteLogEntry, AddressOf OnWriteEntry
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               'list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
            End Sub 'Main
             
             
            Private Shared Sub OnWriteEntry(sender As Object, e As WriteLogEntryEventArgs)
               'a method used for saving log entries to sql server
               RecordToSqlServer(e.LogEntry)
            End Sub
             
             
            Private Shared Sub RecordToSqlServer(entry As String)
               'normally this method would be used for saving entries to an enterprise sql server.
               'for demonstrations purposes, just write out the entry to the console
               Console.Write(entry)
            End Sub
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.WriteLogEntryEventArgs.LogEntry">
            <summary>
            The log entry, either written to the In-Memory log, or log file.
            </summary>
            <example>
                This code example demonstrates how you could use the WriteLogEntry event to
                record log entries to a Sql server database.
                <code lang="C#" title="Writing log entries to Sql Server">
            static void Main(string[] args)
            {
             
                IMAP4 imap = new IMAP4( "127.0.0.1" );
             
                //create a log
                imap.Logger = new IMAPLog();
             
                //record the entries 
                imap.Logger.WriteLogEntry += new WriteLogEntryEventHandler( OnWriteEntry );
             
                imap.Username = "dave@blah.com";
                imap.Password = "test";
                imap.Login();
             
                //list all of the folders
                MailFolderCollection mfc = imap.FolderList();
                Console.WriteLine( mfc.ToString() );
             
                imap.Disconnect();
             
                Console.WriteLine( "Done" );
                Console.ReadLine();
             
            }
             
            private static void OnWriteEntry( object sender, WriteLogEntryEventArgs e )
            {
                //a method used for saving log entries to sql server
                RecordToSqlServer( e.LogEntry ); 
            }
             
            private static void RecordToSqlServer( string entry )
            {
                //normally this method would be used for saving entries to an enterprise sql server.
                //for demonstrations purposes, just write out the entry to the console
                Console.Write( entry );
            }
                </code>
            	<code lang="VB.NET" title="Writing log entries to Sql Server">
            Public Overloads Shared Sub Main()
               
               Dim imap As New IMAP4("127.0.0.1")
               
               'create a log
               imap.Logger = New IMAPLog()
               
               'record the entries 
               AddHandler imap.Logger.WriteLogEntry, AddressOf OnWriteEntry
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               'list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
            End Sub 'Main
             
             
            Private Shared Sub OnWriteEntry(sender As Object, e As WriteLogEntryEventArgs)
               'a method used for saving log entries to sql server
               RecordToSqlServer(e.LogEntry)
            End Sub
             
             
            Private Shared Sub RecordToSqlServer(entry As String)
               'normally this method would be used for saving entries to an enterprise sql server.
               'for demonstrations purposes, just write out the entry to the console
               Console.Write(entry)
            End Sub
                </code>
            </example>
        </member>
        <member name="T:aspNetIMAP.BodyStructure">
            <summary>An object that represents the BodyStructure data supplied by IMAP4.</summary>
            <remarks>
            	<para>The BodyStructure object is a class that describes the format of a mime
                message, on an IMAP server without actually having to download the entire message.
                The message is parsed on the server, and its hierarchy is sent back to the client.
                Because Mime messages are nested, a BodyStructure can also contain other
                BodyStructures. To find or inspect child BodyStructures, check out
                <see cref="P:aspNetIMAP.BodyStructure.Sections">BodyStructure.Sections</see>.</para>
            	<para>Although there are exceptions, each BodyStructure can be considered to map to
                a Mime message body part. For example, if a message contains a text/plain and a
                text/html part, there are actually three BodyStructures; the BodyStructure of the
                overall message, the BodyStructure of the text/plain part, and the BodyStructure of
                the text/html part.</para>
            	<para>Because the IMAP protocol is complicated, we found numerous parsing errors
                and exceptions when testing against various IMAP servers. Although we have tried to
                compensate for these problems, we are sure many more still exist. Because mail
                server companies focus on transporting mail, and not parsing it, we found their
                server side parsing implementations to be generally week. If you happen to find a
                bodystructure that does not "seem quite right", feel free to email us the IMAP log,
                for further inspection.</para>
            </remarks>
            <example>
            	<code lang="CS" title="Attachments">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            BodyStructureAttachment[] attachments = bs.Attachments();
             
            foreach(BodyStructureAttachment bsa in attachments )
            {
                //write out the name and the id
                Console.WriteLine( "{0}:{1}", bsa.BodyStructureId, bsa.Name  );
            }
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Attachments">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            Dim attachments As BodyStructureAttachment() = bs.Attachments()
             
            Dim bsa As BodyStructureAttachment
            For Each bsa In  attachments
               'write out the name and the id
               Console.WriteLine("{0}:{1}", bsa.BodyStructureId, bsa.Name)
            Next bsa
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.BodyStructure.#ctor">
            <summary>Creates a BodyStructure object.</summary>
            <remarks>
            This ctor is used by aspNetIMAP and should not be needed to be created by the
            developer.
            </remarks>
            <example>
            	<code lang="CS" title="Attachments">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            BodyStructureAttachment[] attachments = bs.Attachments();
             
            foreach(BodyStructureAttachment bsa in attachments )
            {
                //write out the name and the id
                Console.WriteLine( "{0}:{1}", bsa.BodyStructureId, bsa.Name  );
            }
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Attachments">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            Dim attachments As BodyStructureAttachment() = bs.Attachments()
             
            Dim bsa As BodyStructureAttachment
            For Each bsa In  attachments
               'write out the name and the id
               Console.WriteLine("{0}:{1}", bsa.BodyStructureId, bsa.Name)
            Next bsa
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.BodyStructure.#ctor(System.String)">
            <summary>Creates a BodyStructure object.</summary>
            <remarks>
            This ctor is used by aspNetIMAP and should not be needed to be created by the
            developer.
            </remarks>
            <example>
            	<code lang="CS" title="Attachments">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            BodyStructureAttachment[] attachments = bs.Attachments();
             
            foreach(BodyStructureAttachment bsa in attachments )
            {
                //write out the name and the id
                Console.WriteLine( "{0}:{1}", bsa.BodyStructureId, bsa.Name  );
            }
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Attachments">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            Dim attachments As BodyStructureAttachment() = bs.Attachments()
             
            Dim bsa As BodyStructureAttachment
            For Each bsa In  attachments
               'write out the name and the id
               Console.WriteLine("{0}:{1}", bsa.BodyStructureId, bsa.Name)
            Next bsa
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="serverResponse">The raw server response, consisting of one BodyStructure.</param>
        </member>
        <member name="M:aspNetIMAP.BodyStructure.Attachments">
            <summary>An array of BodyStructureAttachments</summary>
            <remarks>
            A BodyStructureAttachment is defined as a BodyStructure that as an attachment
            disposition, or has a Name or Filename.
            </remarks>
            <example>
            	<code lang="CS" title="Attachments">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            BodyStructureAttachment[] attachments = bs.Attachments();
             
            foreach(BodyStructureAttachment bsa in attachments )
            {
                //write out the name and the id
                Console.WriteLine( "{0}:{1}", bsa.BodyStructureId, bsa.Name  );
            }
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Attachments">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            Dim attachments As BodyStructureAttachment() = bs.Attachments()
             
            Dim bsa As BodyStructureAttachment
            For Each bsa In  attachments
               'write out the name and the id
               Console.WriteLine("{0}:{1}", bsa.BodyStructureId, bsa.Name)
            Next bsa
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.BodyStructure.AttachmentCount">
            <summary>The number of attachments, found at or below this BodyStructure.</summary>
            <remarks>
            Typically an attachment is defined having the Content-Disposition:attachment
            header. However, we found many mail servers lacking in their message parsing semantics,
            and did not properly parse the Content-Disposition header. Therefore, aspNetIMAP
            considers any BodyStructure that has an attachment content disposition, or a name, or
            filename header, as an attachment.
            </remarks>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            Console.WriteLine( "This message has {0} attachments", bs.AttachmentCount() );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            Console.WriteLine("This message has {0} attachments", bs.AttachmentCount())
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.BodyStructure.AttachmentName">
            <summary>The attachment name of this BodyStructure.</summary>
            <remarks>
            If this BodyStructure is an attachment, its name can be found by calling
            AttachmentName(). The name is determined by first checking the
            <see cref="P:aspNetIMAP.BodyStructure.Filename">Filename</see> value. If it is null or empty, then the
            <see cref="P:aspNetIMAP.BodyStructure.Name">Name</see> value is checked. If neither of these properties are
            populated, then thereis a chance the mime part is corrupt, and an empty string is
            returned.
            </remarks>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                if( structure.IsAttachment() )
                {
                    Console.WriteLine( "Structure Id:{0}", structure.BodySectionId );
                    Console.WriteLine( "Attachment name:{0}", structure.AttachmentName() );
                    Console.WriteLine();
                }
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               If [structure].IsAttachment() Then
                  Console.WriteLine("Structure Id:{0}", [structure].BodySectionId)
                  Console.WriteLine("Attachment name:{0}", [structure].AttachmentName())
                  Console.WriteLine()
               End If
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.BodyStructure.FindAttachment(System.String)">
            <summary>Locates an attachment in the BodyStructure(s)</summary>
            <remarks>
            The attachment name is determined by first checking for a mime filename
            parameter. If no file name exists, then the BodyStructure is checked for a mime name
            parameter. The entire BodyStructure tree is searched, starting with the current
            BodyStructure, and moving down. Only the first BodyStructure with a matching name is
            returned.
            </remarks>
            <param name="attachmentName">The attachment name.</param>
        </member>
        <member name="M:aspNetIMAP.BodyStructure.FindAttachment(System.Int32)">
            <summary>Locates an attachment in the BodyStructure(s)</summary>
            <remarks>
            The index of the attachment, is the index of all attachments. Not the index of
            the BodyStructure. Thus, if there are 3 attachments in the BodyStructure, and the first
            attachment is the 4th body structure down, the attachment index is still 0, because it
            is the first attachment.
            </remarks>
            <param name="attachmentIndex">The index of the attachment.</param>
        </member>
        <member name="M:aspNetIMAP.BodyStructure.FindByContentType(System.String)">
            <summary>Locates BodyStructre by it's content type.</summary>
            <remarks>
            This method is useful in locating specifically typed mime parts. Once a specify
            content type part is found, it can be used in conjunction with The
            <see cref="M:aspNetIMAP.FetchClient.BodySection(System.Int32)">FetchClient.BodySection</see> methods to download a
            specific section.
            </remarks>
            <example>
            	<code lang="CS">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the first message
            BodyStructure structure = mf.FetchClient.BodyStructure( 1, IndexType.Ordinal );
             
            //grab the plain text bodystructure
            BodyStructure plainTextStructure = structure.FindByContentType( "text/plain" );
            if( plainTextStructure != null )
            {
                //write out the plain text content
                MimeMessage m = mf.FetchClient.BodySectionPart( 1, plainTextStructure.BodySectionId, IndexType.Ordinal, false );
                Console.WriteLine( m.DecodedText() );
            }
            else
            {
                Console.WriteLine( "no plain text part exists for this message." );
            }
             
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the first message
            Dim [structure] As BodyStructure = mf.FetchClient.BodyStructure(1, IndexType.Ordinal)
             
            'grab the plain text bodystructure
            Dim plainTextStructure As BodyStructure = [structure].FindByContentType("text/plain")
            If Not (plainTextStructure Is Nothing) Then
               'write out the plain text content
               Dim m As MimeMessage = mf.FetchClient.BodySectionPart(1, plainTextStructure.BodySectionId, IndexType.Ordinal, False)
               Console.WriteLine(m.DecodedText())
            Else
               Console.WriteLine("no plain text part exists for this message.")
            End If
             
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.BodyStructure.Index(aspNetIMAP.BodyStructure)">
            <summary>Re-Indexes the BodyStructures.</summary>
            <remarks>
            This method is called internally by aspNetIMAP and should not need to be called
            by developers. It is used to properly index and parse any sub BodyStructures.
            </remarks>
            <param name="structure">The BodyStructure to start the index.</param>
        </member>
        <member name="M:aspNetIMAP.BodyStructure.IsAttachment">
            <summary>Returns true, if this BodyStructure is an attachment.</summary>
            <remarks>
            According to the Mime specifications, attachments must have the
            Content-Disposition header set. Unfortunately, because most servers focus on
            transporting email, and not parsing it, we found the mail server techniques used for
            parsing messages to be lacking, and thus sends the wrong data in the response.
            Therefore, if the BodyStructure has a Name or a Filename is is also considered an
            attachment.
            </remarks>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                if( structure.IsAttachment() )
                {
                    Console.WriteLine( "Structure Id:{0}", structure.BodySectionId );
                    Console.WriteLine( "Attachment name:{0}", structure.AttachmentName() );
                    Console.WriteLine();
                }
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               If [structure].IsAttachment() Then
                  Console.WriteLine("Structure Id:{0}", [structure].BodySectionId)
                  Console.WriteLine("Attachment name:{0}", [structure].AttachmentName())
                  Console.WriteLine()
               End If
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.BodyStructure.ToArray">
            <summary>An array of all BodyStructures.</summary>
            <remarks>
            This is a flat array of all BodyStructures, starting with this BodyStructure. The
            array makes for easy and quick parsing of various BodyStructures.
            </remarks>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.BodyStructure.ToString">
            <summary>A nicely formatted string representation of this BodyStructure.</summary>
            <remarks>This string value also includes all children BodyStructures.</remarks>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //write out the BodyStructure string
            Console.WriteLine( bs.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'write out the BodyStructure string
            Console.WriteLine(bs.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.BodyStructure.ToString(System.Boolean)">
            <summary>A nicely formatted string representation of this BodyStructure.</summary>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //write out the parent BodyStructure string only
            Console.WriteLine( bs.ToString(false) );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'write out the parent BodyStructure string only
            Console.WriteLine(bs.ToString(False))
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.BodySectionId">
            <summary>The Id of this BodyStructure</summary>
            <value>
            A string id, such as 1, 1.1 (the first sub-structure of 1), or 1.2 (the 2nd
            sub-structure of 1).
            </value>
            <remarks>
            Depending upon the structure, not all BodyStructures have BodySection Id's. This
            property can be used in conjunction with
            <see cref="M:aspNetIMAP.FetchClient.BodySection(System.Int32)">FetchClient.BodySection</see> to retrieve specific
            sections.
            </remarks>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.Boundary">
            <summary>he mime message boundary.</summary>
            <remarks>
            If this BodyStructure is part of a complex mime message, the boundy can be found
            here.
            </remarks>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.CharSet">
            <summary>The character set of this body part.</summary>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.ContentDescription">
            <summary>The description, as found in this body part.</summary>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.ContentDisposition">
            <summary>
            The content disposition of the body part. Typically 'inline' or
            'attachment'.
            </summary>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.ContentId">
            <summary>The content id of the body part.</summary>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.ContentLanguage">
            <summary>The language of the body part.</summary>
            <remarks>
            The ContentLanguage property describes the content-language header. This value
            may include more than one language, in a comma delimited format.
            </remarks>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.ContentTransferEncoding">
            <summary>The transfer encoding format applied to this body part.</summary>
            <remarks>
            A message may have different content-transfer-encoding schemes applied to
            different body parts. The most common schemes are QuotedPrintable and Base64
            encoded messages. Some of the newer encodings include 8 Bit and binary
            schemes.
            </remarks>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.ContentType">
            <summary>The ContentType of the body part.</summary>
            <remarks>
            The complete content part of the body part. This relies on a valid MimeType and a
            valid MimeSubType.
            </remarks>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.Envelope">
            <summary>
            Any <see cref="P:aspNetIMAP.BodyStructure.Envelope">envelopes</see> of nested rfc822/message content
            types.
            </summary>
            <remarks>
            If the message contains nested messages, in RFC822 format, the nested message
            envelope must be parsed. Its properties can be found here.
            </remarks>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.Filename">
            <summary>The Filename of this body part.</summary>
            <remarks>If this particular body part has a filename, its value is populated here.</remarks>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.Lines">
            <summary>The number of lines of this body part.</summary>
            <remarks>This value only applies if the body part has is a Text mime type.</remarks>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.MD5">
            <summary>The MD5 Hash of the body part.</summary>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.MimeSubType">
            <summary>The mime subtype of this message.</summary>
            <remarks>
            For example, if the message has a mime type of 'text/plain', its
            <see cref="P:aspNetIMAP.BodyStructure.MimeType">BodyStructure.MimeType</see> value will be 'text', while it's
            BodyStructure.MimeSubType will be 'plain'.
            </remarks>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.MimeType">
            <remarks>
            For example, if the message has a mime type of 'text/plain', its
            BodyStructure.MimeType value will be 'text', while it's
            <see cref="P:aspNetIMAP.BodyStructure.MimeSubType">BodyStructure.MimeSubType</see> will be 'plain'.
            </remarks>
            <summary>The major mime type of this body part.</summary>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.Name">
            <summary>If this body part has a name, it's value can be found here.</summary>
            <remarks>Names are normally associated with attachments.</remarks>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.Parameters">
            <summary>All parameters of the headers.</summary>
            <remarks>
            Any parameters of the mime headers, such as Attachment, Boundaries, or CharSet
            values.
            </remarks>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.Parent">
            <summary>The parent of this BodyStructure.</summary>
            <remarks>
            Because BodyStructures are nested, they can have parents. The parent
            BodyStructure of the first BodyStructure will be null or nothing.
            </remarks>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.Sections">
            <summary>A list of children or sub BodyStructures.</summary>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.Size">
            <summary>The size, in bytes, of this BodyStructure.</summary>
            <remarks>
            The size in bytes of this part of the message, as found on the server. This does
            not take into account any decodings.
            </remarks>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructure.MultiPartEntity">
            <summary>The multipart mime value</summary>
            <remarks>
            This value is typically "related", "alternative" or "mixed". it describes the
            type of multipart mime message this BodyStructure belongs too.
            </remarks>
            <example>
            	<code lang="CS" title="Example">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            //get an array of BodyStructures
            BodyStructure[] structures = bs.ToArray();
             
            //write out various properties
            foreach( BodyStructure structure in structures )
            {
                Console.WriteLine( "============== BodyStructure ==============" );
                Console.WriteLine( "Id:{0}", structure.BodySectionId );
                Console.WriteLine( "Boundary:{0}", structure.Boundary );
                Console.WriteLine( "CharSet:{0}", structure.CharSet );
                Console.WriteLine( "ContentDescription:{0}", structure.ContentDescription );
                Console.WriteLine( "ContentDisposition:{0}", structure.ContentDisposition);
                Console.WriteLine( "ContentId:{0}", structure.ContentId );
                Console.WriteLine( "ContentLanguage:{0}", structure.ContentLanguage );
                Console.WriteLine( "ContentTransferEncoding:{0}", structure.ContentTransferEncoding );
                Console.WriteLine( "ContentType:{0}", structure.ContentType );
                Console.WriteLine( "Envelope:{0}", structure.Envelope );
                Console.WriteLine( "Filename:{0}", structure.Filename );
                Console.WriteLine( "Lines:{0}", structure.Lines );
                Console.WriteLine( "MD5:{0}", structure.MD5 );
                Console.WriteLine( "MimeSubType:{0}", structure.MimeSubType );
                Console.WriteLine( "MimeType:{0}", structure.MimeType );
                Console.WriteLine( "MultiPartEntity:{0}", structure.MultiPartEntity );
                Console.WriteLine( "Name:{0}", structure.Name );
                Console.WriteLine( "Size:{0}", structure.Size );
             
                if( ( structure.Parameters != null ) &amp;&amp; ( structure.Parameters.Count &gt; 0 ) )
                {
                    Console.WriteLine( "Parameters:");
                    for( int i=0;i&lt;structure.Parameters.Count;i++)
                    {
                        Console.WriteLine( "\t{0}:{1}", structure.Parameters.Keys[ i ], structure.Parameters[ i ]);
                    }
                }
             
                Console.WriteLine();
             
            }
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Example">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            'get an array of BodyStructures
            Dim structures As BodyStructure() = bs.ToArray()
             
            'write out various properties
            Dim structure As BodyStructure
            For Each structure In  structures
               Console.WriteLine("============== BodyStructure ==============")
               Console.WriteLine("Id:{0}", [structure].BodySectionId)
               Console.WriteLine("Boundary:{0}", [structure].Boundary)
               Console.WriteLine("CharSet:{0}", [structure].CharSet)
               Console.WriteLine("ContentDescription:{0}", [structure].ContentDescription)
               Console.WriteLine("ContentDisposition:{0}", [structure].ContentDisposition)
               Console.WriteLine("ContentId:{0}", [structure].ContentId)
               Console.WriteLine("ContentLanguage:{0}", [structure].ContentLanguage)
               Console.WriteLine("ContentTransferEncoding:{0}", [structure].ContentTransferEncoding)
               Console.WriteLine("ContentType:{0}", [structure].ContentType)
               Console.WriteLine("Envelope:{0}", [structure].Envelope)
               Console.WriteLine("Filename:{0}", [structure].Filename)
               Console.WriteLine("Lines:{0}", [structure].Lines)
               Console.WriteLine("MD5:{0}", [structure].MD5)
               Console.WriteLine("MimeSubType:{0}", [structure].MimeSubType)
               Console.WriteLine("MimeType:{0}", [structure].MimeType)
               Console.WriteLine("MultiPartEntity:{0}", [structure].MultiPartEntity)
               Console.WriteLine("Name:{0}", [structure].Name)
               Console.WriteLine("Size:{0}", [structure].Size)
               
               If Not ([structure].Parameters Is Nothing) And [structure].Parameters.Count &gt; 0 Then
                  Console.WriteLine("Parameters:")
                  Dim i As Integer
                  For i = 0 To [structure].Parameters.Count - 1
                     Console.WriteLine(ControlChars.Tab + "{0}:{1}", [structure].Parameters.Keys(i), [structure].Parameters(i))
                  Next i
               End If
               
               Console.WriteLine()
            Next structure 
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="T:aspNetIMAP.BodyStructureAttachment">
            <example>
            	<code lang="C#" title="Attachments">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            BodyStructureAttachment[] attachments = bs.Attachments();
             
            foreach(BodyStructureAttachment bsa in attachments )
            {
                //write out the name and the id
                Console.WriteLine( "{0}:{1}", bsa.BodyStructureId, bsa.Name  );
            }
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Attachments">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            Dim attachments As BodyStructureAttachment() = bs.Attachments()
             
            Dim bsa As BodyStructureAttachment
            For Each bsa In  attachments
               'write out the name and the id
               Console.WriteLine("{0}:{1}", bsa.BodyStructureId, bsa.Name)
            Next bsa
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>An attachment that is defined by a BodyStructure</summary>
        </member>
        <member name="M:aspNetIMAP.BodyStructureAttachment.#ctor">
            <summary>Creates an instance of a BodyStructureAttachment</summary>
            <example>
            	<code lang="C#" title="Attachments">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            BodyStructureAttachment[] attachments = bs.Attachments();
             
            foreach(BodyStructureAttachment bsa in attachments )
            {
                //write out the name and the id
                Console.WriteLine( "{0}:{1}", bsa.BodyStructureId, bsa.Name  );
            }
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Attachments">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            Dim attachments As BodyStructureAttachment() = bs.Attachments()
             
            Dim bsa As BodyStructureAttachment
            For Each bsa In  attachments
               'write out the name and the id
               Console.WriteLine("{0}:{1}", bsa.BodyStructureId, bsa.Name)
            Next bsa
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>
            This ctor does not need to be called by the developer, and is used internally in
            <see cref="T:aspNetIMAP.BodyStructure">BodyStructure</see>.
            </remarks>
        </member>
        <member name="M:aspNetIMAP.BodyStructureAttachment.#ctor(aspNetIMAP.BodyStructure)">
            <example>
            	<code lang="C#" title="Attachments">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            BodyStructureAttachment[] attachments = bs.Attachments();
             
            foreach(BodyStructureAttachment bsa in attachments )
            {
                //write out the name and the id
                Console.WriteLine( "{0}:{1}", bsa.BodyStructureId, bsa.Name  );
            }
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Attachments">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            Dim attachments As BodyStructureAttachment() = bs.Attachments()
             
            Dim bsa As BodyStructureAttachment
            For Each bsa In  attachments
               'write out the name and the id
               Console.WriteLine("{0}:{1}", bsa.BodyStructureId, bsa.Name)
            Next bsa
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>
            This ctor does not need to be called by the developer, and is used internally in
            <see cref="T:aspNetIMAP.BodyStructure">BodyStructure</see>.
            </remarks>
        </member>
        <member name="M:aspNetIMAP.BodyStructureAttachment.DecodedName">
            <summary>
            Decodes any encoded name to it's unencoded value.
            </summary>
            <returns></returns>
            <example>
            	<code lang="CS" title="Attachments">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            BodyStructureAttachment[] attachments = bs.Attachments();
             
            foreach(BodyStructureAttachment bsa in attachments )
            {
                //write out the name and the id
                Console.WriteLine( "{0}:{1}:{2}", bsa.BodyStructureId, bsa.Name, bsa.DecodedName()  );
            }
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Attachments">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            Dim attachments As BodyStructureAttachment() = bs.Attachments()
             
            Dim bsa As BodyStructureAttachment
            For Each bsa In  attachments
               'write out the name and the id
               Console.WriteLine("{0}:{1}:[2}", bsa.BodyStructureId, bsa.Name, bsa.DecodedName())
            Next bsa
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructureAttachment.BaseStructure">
            <summary>The base BodyStructure, on which this BodyStructureAttachment was created.</summary>
        </member>
        <member name="P:aspNetIMAP.BodyStructureAttachment.BodyStructureId">
            <summary>The BodySectionId of the attachment, as defined by the BodyStructure</summary>
            <example>
            	<code lang="C#" title="Attachments">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            BodyStructureAttachment[] attachments = bs.Attachments();
             
            foreach(BodyStructureAttachment bsa in attachments )
            {
                //write out the name and the id
                Console.WriteLine( "{0}:{1}", bsa.BodyStructureId, bsa.Name  );
            }
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Attachments">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            Dim attachments As BodyStructureAttachment() = bs.Attachments()
             
            Dim bsa As BodyStructureAttachment
            For Each bsa In  attachments
               'write out the name and the id
               Console.WriteLine("{0}:{1}", bsa.BodyStructureId, bsa.Name)
            Next bsa
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.BodyStructureAttachment.Name">
            <summary>
            The name of the attachment, as defined by
            <see cref="M:aspNetIMAP.BodyStructure.AttachmentName">BodyStructure.AttachmentName()</see>.
            </summary>
            <example>
            	<code lang="C#" title="Attachments">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            BodyStructureAttachment[] attachments = bs.Attachments();
             
            foreach(BodyStructureAttachment bsa in attachments )
            {
                //write out the name and the id
                Console.WriteLine( "{0}:{1}", bsa.BodyStructureId, bsa.Name  );
            }
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Attachments">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            Dim attachments As BodyStructureAttachment() = bs.Attachments()
             
            Dim bsa As BodyStructureAttachment
            For Each bsa In  attachments
               'write out the name and the id
               Console.WriteLine("{0}:{1}", bsa.BodyStructureId, bsa.Name)
            Next bsa
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="T:aspNetIMAP.Envelope">
            <summary>Envelope structure, used for brief information about the message.</summary>
            <remarks>
            	<para>Envelope structures simplify querying IMAP servers for information about
                specific messages. An envelope structure is a subset of the message header that
                provides a convenient subset of the message for folder summaries.</para>
            	<para><strong>Background Information From the RFCs</strong></para>
            	<para>IMAP envelope fields are presented in the following format:</para>
            	<para>Date<br/>
                Subject<br/>
                From<br/>
                Sender<br/>
                Reply-To<br/>
                To<br/>
                Cc<br/>
                Bcc<br/>
                In-Reply-To<br/>
                Message-Id</para>
            	<para>If the contents of the ReplyTo field are not found, they are populated with
                the value in the From field. With the exception of the Address fields, the contents
                are presented as a quoted strings.</para>
            	<para><strong>Address Fields</strong></para>
            	<para>The address fields (From, Sender, Reply-To, To, Cc, Bcc ) are presented as a
                parenthetical list that contains the parsed elements of the address. This is
                important to know, because it's these elements that are searched against, using the
                <see cref="T:aspNetIMAP.SearchClient">SearchClient</see>.</para>
            	<para>Each address is divided into the following elements, in this order:</para>
            	<para>Personal Name<br/>
                SMTP Source Route<br/>
                Mailbox Name<br/>
                Domain Name</para>
            	<para>For any of these values, that don't exist, a NIL string is inserted. This is
                important to note, because only these elements can be searched, not the address in
                its entirety, as a string.</para>
            	<para><strong>Some Address Examples<br/></strong>So what does a parsed address
                look like? Lets take for example "Terry Gray &lt;gray@cac.washington.edu&gt;", this
                address is parsed into the following string<br/>
                (("Terry Gray" NIL "gray" "cac.washington.edu"))</para>
            	<para>
            		<para>Thus, if you wanted to search for this address, using the SearchClient,
                    some code might look like:</para>
            		<para>//get the inbox<br/>
                    MailFolder mf = imap.SelectInbox();<br/>
                    //search for an address with "cac.washington.edu" in it.<br/>
                    string results = mf.SearchClient.SearchFrom( "cac.washington.edu" );</para>
            		<para>'results' would contain an IMAP list of messages that have
                    "cac.washington.edu" in the domain.</para>
            	</para>
            </remarks>
            <example>
            	<code lang="C#" title="Envelope Properties">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //Get the envelope structure
            Envelope env = mf.FetchClient.Envelope(1);
             
            imap.Disconnect();
             
            //write out various properties
            Console.WriteLine( env.Date );
            Console.WriteLine( env.Subject );
            Console.WriteLine( env.From );
            Console.WriteLine( env.Sender );
            Console.WriteLine( env.ReplyTo );
            Console.WriteLine( env.To );
            Console.WriteLine( env.Cc );
            Console.WriteLine( env.Bcc );
            Console.WriteLine( env.InReplyTo );
            Console.WriteLine( env.MessageId );
            Console.WriteLine( env.MessageDate );
             
            //write out the string representation
            Console.WriteLine( env.ToString() );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Evenlope Properties">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'Get the envelope structure
            Dim env As Envelope = mf.FetchClient.Envelope(1)
             
            imap.Disconnect()
             
            'write out various properties
            Console.WriteLine(env.Date)
            Console.WriteLine(env.Subject)
            Console.WriteLine(env.From)
            Console.WriteLine(env.Sender)
            Console.WriteLine(env.ReplyTo)
            Console.WriteLine(env.To)
            Console.WriteLine(env.Cc)
            Console.WriteLine(env.Bcc)
            Console.WriteLine(env.InReplyTo)
            Console.WriteLine(env.MessageId)
            Console.WriteLine(env.MessageDate)
             
            'write out the string representation
            Console.WriteLine(env.ToString())
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.Envelope.#ctor">
            <summary>Creates an IMAP envelope structure.</summary>
            <example>
            	<code lang="C#" title="Envelope Properties">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //Get the envelope structure
            Envelope env = mf.FetchClient.Envelope(1);
             
            imap.Disconnect();
             
            //write out various properties
            Console.WriteLine( env.Date );
            Console.WriteLine( env.Subject );
            Console.WriteLine( env.From );
            Console.WriteLine( env.Sender );
            Console.WriteLine( env.ReplyTo );
            Console.WriteLine( env.To );
            Console.WriteLine( env.Cc );
            Console.WriteLine( env.Bcc );
            Console.WriteLine( env.InReplyTo );
            Console.WriteLine( env.MessageId );
            Console.WriteLine( env.MessageDate );
             
            //write out the string representation
            Console.WriteLine( env.ToString() );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Evenlope Properties">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'Get the envelope structure
            Dim env As Envelope = mf.FetchClient.Envelope(1)
             
            imap.Disconnect()
             
            'write out various properties
            Console.WriteLine(env.Date)
            Console.WriteLine(env.Subject)
            Console.WriteLine(env.From)
            Console.WriteLine(env.Sender)
            Console.WriteLine(env.ReplyTo)
            Console.WriteLine(env.To)
            Console.WriteLine(env.Cc)
            Console.WriteLine(env.Bcc)
            Console.WriteLine(env.InReplyTo)
            Console.WriteLine(env.MessageId)
            Console.WriteLine(env.MessageDate)
             
            'write out the string representation
            Console.WriteLine(env.ToString())
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.Envelope.#ctor(System.String)">
            <summary>
            Creates an instance of an envelope class.
            </summary>
            <example>
            	<code lang="C#" title="Envelope Properties">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //Get the envelope structure
            Envelope env = mf.FetchClient.Envelope(1);
             
            imap.Disconnect();
             
            //write out various properties
            Console.WriteLine( env.Date );
            Console.WriteLine( env.Subject );
            Console.WriteLine( env.From );
            Console.WriteLine( env.Sender );
            Console.WriteLine( env.ReplyTo );
            Console.WriteLine( env.To );
            Console.WriteLine( env.Cc );
            Console.WriteLine( env.Bcc );
            Console.WriteLine( env.InReplyTo );
            Console.WriteLine( env.MessageId );
            Console.WriteLine( env.MessageDate );
             
            //write out the string representation
            Console.WriteLine( env.ToString() );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Evenlope Properties">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'Get the envelope structure
            Dim env As Envelope = mf.FetchClient.Envelope(1)
             
            imap.Disconnect()
             
            'write out various properties
            Console.WriteLine(env.Date)
            Console.WriteLine(env.Subject)
            Console.WriteLine(env.From)
            Console.WriteLine(env.Sender)
            Console.WriteLine(env.ReplyTo)
            Console.WriteLine(env.To)
            Console.WriteLine(env.Cc)
            Console.WriteLine(env.Bcc)
            Console.WriteLine(env.InReplyTo)
            Console.WriteLine(env.MessageId)
            Console.WriteLine(env.MessageDate)
             
            'write out the string representation
            Console.WriteLine(env.ToString())
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.Envelope.ToString">
            <summary>Returns a string representation of the Envelope structure.</summary>
            <example>
            	<code lang="C#" title="Envelope Properties">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //Get the envelope structure
            Envelope env = mf.FetchClient.Envelope(1);
             
            imap.Disconnect();
             
            //write out various properties
            Console.WriteLine( env.Date );
            Console.WriteLine( env.Subject );
            Console.WriteLine( env.From );
            Console.WriteLine( env.Sender );
            Console.WriteLine( env.ReplyTo );
            Console.WriteLine( env.To );
            Console.WriteLine( env.Cc );
            Console.WriteLine( env.Bcc );
            Console.WriteLine( env.InReplyTo );
            Console.WriteLine( env.MessageId );
            Console.WriteLine( env.MessageDate );
             
            //write out the string representation
            Console.WriteLine( env.ToString() );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Evenlope Properties">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'Get the envelope structure
            Dim env As Envelope = mf.FetchClient.Envelope(1)
             
            imap.Disconnect()
             
            'write out various properties
            Console.WriteLine(env.Date)
            Console.WriteLine(env.Subject)
            Console.WriteLine(env.From)
            Console.WriteLine(env.Sender)
            Console.WriteLine(env.ReplyTo)
            Console.WriteLine(env.To)
            Console.WriteLine(env.Cc)
            Console.WriteLine(env.Bcc)
            Console.WriteLine(env.InReplyTo)
            Console.WriteLine(env.MessageId)
            Console.WriteLine(env.MessageDate)
             
            'write out the string representation
            Console.WriteLine(env.ToString())
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.Envelope.Parse(System.String)">
            <summary>
            Parses the server respones into Envelope data.
            </summary>
            <param name="serverResponse">The raw server response.</param>
            <returns></returns>
        </member>
        <member name="P:aspNetIMAP.Envelope.Date">
            <summary>The MessageDate as a DateTime structure.</summary>
            <remarks>
            If the MessageDate is not in a correctly formatted string, or cannot be properly
            parsed, Envelope.Date will be set to DateTime.MinValue.
            </remarks>
            <value>The MessageDate as a DateTime structure.</value>
            <example>
            	<code lang="C#" title="Envelope Properties">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //Get the envelope structure
            Envelope env = mf.FetchClient.Envelope(1);
             
            imap.Disconnect();
             
            //write out various properties
            Console.WriteLine( env.Date );
            Console.WriteLine( env.Subject );
            Console.WriteLine( env.From );
            Console.WriteLine( env.Sender );
            Console.WriteLine( env.ReplyTo );
            Console.WriteLine( env.To );
            Console.WriteLine( env.Cc );
            Console.WriteLine( env.Bcc );
            Console.WriteLine( env.InReplyTo );
            Console.WriteLine( env.MessageId );
            Console.WriteLine( env.MessageDate );
             
            //write out the string representation
            Console.WriteLine( env.ToString() );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Evenlope Properties">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'Get the envelope structure
            Dim env As Envelope = mf.FetchClient.Envelope(1)
             
            imap.Disconnect()
             
            'write out various properties
            Console.WriteLine(env.Date)
            Console.WriteLine(env.Subject)
            Console.WriteLine(env.From)
            Console.WriteLine(env.Sender)
            Console.WriteLine(env.ReplyTo)
            Console.WriteLine(env.To)
            Console.WriteLine(env.Cc)
            Console.WriteLine(env.Bcc)
            Console.WriteLine(env.InReplyTo)
            Console.WriteLine(env.MessageId)
            Console.WriteLine(env.MessageDate)
             
            'write out the string representation
            Console.WriteLine(env.ToString())
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.Envelope.Subject">
            <summary>
            The message subject.
            </summary>
            <example>
            	<code lang="C#" title="Envelope Properties">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //Get the envelope structure
            Envelope env = mf.FetchClient.Envelope(1);
             
            imap.Disconnect();
             
            //write out various properties
            Console.WriteLine( env.Date );
            Console.WriteLine( env.Subject );
            Console.WriteLine( env.From );
            Console.WriteLine( env.Sender );
            Console.WriteLine( env.ReplyTo );
            Console.WriteLine( env.To );
            Console.WriteLine( env.Cc );
            Console.WriteLine( env.Bcc );
            Console.WriteLine( env.InReplyTo );
            Console.WriteLine( env.MessageId );
            Console.WriteLine( env.MessageDate );
             
            //write out the string representation
            Console.WriteLine( env.ToString() );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Evenlope Properties">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'Get the envelope structure
            Dim env As Envelope = mf.FetchClient.Envelope(1)
             
            imap.Disconnect()
             
            'write out various properties
            Console.WriteLine(env.Date)
            Console.WriteLine(env.Subject)
            Console.WriteLine(env.From)
            Console.WriteLine(env.Sender)
            Console.WriteLine(env.ReplyTo)
            Console.WriteLine(env.To)
            Console.WriteLine(env.Cc)
            Console.WriteLine(env.Bcc)
            Console.WriteLine(env.InReplyTo)
            Console.WriteLine(env.MessageId)
            Console.WriteLine(env.MessageDate)
             
            'write out the string representation
            Console.WriteLine(env.ToString())
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.Envelope.From">
            <summary>
            The message FROM header value.
            </summary>
            <example>
            	<code lang="C#" title="Envelope Properties">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //Get the envelope structure
            Envelope env = mf.FetchClient.Envelope(1);
             
            imap.Disconnect();
             
            //write out various properties
            Console.WriteLine( env.Date );
            Console.WriteLine( env.Subject );
            Console.WriteLine( env.From );
            Console.WriteLine( env.Sender );
            Console.WriteLine( env.ReplyTo );
            Console.WriteLine( env.To );
            Console.WriteLine( env.Cc );
            Console.WriteLine( env.Bcc );
            Console.WriteLine( env.InReplyTo );
            Console.WriteLine( env.MessageId );
            Console.WriteLine( env.MessageDate );
             
            //write out the string representation
            Console.WriteLine( env.ToString() );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Evenlope Properties">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'Get the envelope structure
            Dim env As Envelope = mf.FetchClient.Envelope(1)
             
            imap.Disconnect()
             
            'write out various properties
            Console.WriteLine(env.Date)
            Console.WriteLine(env.Subject)
            Console.WriteLine(env.From)
            Console.WriteLine(env.Sender)
            Console.WriteLine(env.ReplyTo)
            Console.WriteLine(env.To)
            Console.WriteLine(env.Cc)
            Console.WriteLine(env.Bcc)
            Console.WriteLine(env.InReplyTo)
            Console.WriteLine(env.MessageId)
            Console.WriteLine(env.MessageDate)
             
            'write out the string representation
            Console.WriteLine(env.ToString())
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.Envelope.Sender">
            <summary>
            The message sender.
            </summary>
            <example>
            	<code lang="C#" title="Envelope Properties">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //Get the envelope structure
            Envelope env = mf.FetchClient.Envelope(1);
             
            imap.Disconnect();
             
            //write out various properties
            Console.WriteLine( env.Date );
            Console.WriteLine( env.Subject );
            Console.WriteLine( env.From );
            Console.WriteLine( env.Sender );
            Console.WriteLine( env.ReplyTo );
            Console.WriteLine( env.To );
            Console.WriteLine( env.Cc );
            Console.WriteLine( env.Bcc );
            Console.WriteLine( env.InReplyTo );
            Console.WriteLine( env.MessageId );
            Console.WriteLine( env.MessageDate );
             
            //write out the string representation
            Console.WriteLine( env.ToString() );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Evenlope Properties">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'Get the envelope structure
            Dim env As Envelope = mf.FetchClient.Envelope(1)
             
            imap.Disconnect()
             
            'write out various properties
            Console.WriteLine(env.Date)
            Console.WriteLine(env.Subject)
            Console.WriteLine(env.From)
            Console.WriteLine(env.Sender)
            Console.WriteLine(env.ReplyTo)
            Console.WriteLine(env.To)
            Console.WriteLine(env.Cc)
            Console.WriteLine(env.Bcc)
            Console.WriteLine(env.InReplyTo)
            Console.WriteLine(env.MessageId)
            Console.WriteLine(env.MessageDate)
             
            'write out the string representation
            Console.WriteLine(env.ToString())
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.Envelope.ReplyTo">
            <summary>
            The Reply-To  header value.
            </summary>
            <example>
            	<code lang="C#" title="Envelope Properties">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //Get the envelope structure
            Envelope env = mf.FetchClient.Envelope(1);
             
            imap.Disconnect();
             
            //write out various properties
            Console.WriteLine( env.Date );
            Console.WriteLine( env.Subject );
            Console.WriteLine( env.From );
            Console.WriteLine( env.Sender );
            Console.WriteLine( env.ReplyTo );
            Console.WriteLine( env.To );
            Console.WriteLine( env.Cc );
            Console.WriteLine( env.Bcc );
            Console.WriteLine( env.InReplyTo );
            Console.WriteLine( env.MessageId );
            Console.WriteLine( env.MessageDate );
             
            //write out the string representation
            Console.WriteLine( env.ToString() );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Evenlope Properties">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'Get the envelope structure
            Dim env As Envelope = mf.FetchClient.Envelope(1)
             
            imap.Disconnect()
             
            'write out various properties
            Console.WriteLine(env.Date)
            Console.WriteLine(env.Subject)
            Console.WriteLine(env.From)
            Console.WriteLine(env.Sender)
            Console.WriteLine(env.ReplyTo)
            Console.WriteLine(env.To)
            Console.WriteLine(env.Cc)
            Console.WriteLine(env.Bcc)
            Console.WriteLine(env.InReplyTo)
            Console.WriteLine(env.MessageId)
            Console.WriteLine(env.MessageDate)
             
            'write out the string representation
            Console.WriteLine(env.ToString())
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.Envelope.Cc">
            <summary>
            The CC addresses.
            </summary>
            <example>
            	<code lang="C#" title="Envelope Properties">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //Get the envelope structure
            Envelope env = mf.FetchClient.Envelope(1);
             
            imap.Disconnect();
             
            //write out various properties
            Console.WriteLine( env.Date );
            Console.WriteLine( env.Subject );
            Console.WriteLine( env.From );
            Console.WriteLine( env.Sender );
            Console.WriteLine( env.ReplyTo );
            Console.WriteLine( env.To );
            Console.WriteLine( env.Cc );
            Console.WriteLine( env.Bcc );
            Console.WriteLine( env.InReplyTo );
            Console.WriteLine( env.MessageId );
            Console.WriteLine( env.MessageDate );
             
            //write out the string representation
            Console.WriteLine( env.ToString() );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Evenlope Properties">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'Get the envelope structure
            Dim env As Envelope = mf.FetchClient.Envelope(1)
             
            imap.Disconnect()
             
            'write out various properties
            Console.WriteLine(env.Date)
            Console.WriteLine(env.Subject)
            Console.WriteLine(env.From)
            Console.WriteLine(env.Sender)
            Console.WriteLine(env.ReplyTo)
            Console.WriteLine(env.To)
            Console.WriteLine(env.Cc)
            Console.WriteLine(env.Bcc)
            Console.WriteLine(env.InReplyTo)
            Console.WriteLine(env.MessageId)
            Console.WriteLine(env.MessageDate)
             
            'write out the string representation
            Console.WriteLine(env.ToString())
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.Envelope.To">
            <summary>
            The TO addresses.
            </summary>
            <example>
            	<code lang="C#" title="Envelope Properties">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //Get the envelope structure
            Envelope env = mf.FetchClient.Envelope(1);
             
            imap.Disconnect();
             
            //write out various properties
            Console.WriteLine( env.Date );
            Console.WriteLine( env.Subject );
            Console.WriteLine( env.From );
            Console.WriteLine( env.Sender );
            Console.WriteLine( env.ReplyTo );
            Console.WriteLine( env.To );
            Console.WriteLine( env.Cc );
            Console.WriteLine( env.Bcc );
            Console.WriteLine( env.InReplyTo );
            Console.WriteLine( env.MessageId );
            Console.WriteLine( env.MessageDate );
             
            //write out the string representation
            Console.WriteLine( env.ToString() );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Evenlope Properties">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'Get the envelope structure
            Dim env As Envelope = mf.FetchClient.Envelope(1)
             
            imap.Disconnect()
             
            'write out various properties
            Console.WriteLine(env.Date)
            Console.WriteLine(env.Subject)
            Console.WriteLine(env.From)
            Console.WriteLine(env.Sender)
            Console.WriteLine(env.ReplyTo)
            Console.WriteLine(env.To)
            Console.WriteLine(env.Cc)
            Console.WriteLine(env.Bcc)
            Console.WriteLine(env.InReplyTo)
            Console.WriteLine(env.MessageId)
            Console.WriteLine(env.MessageDate)
             
            'write out the string representation
            Console.WriteLine(env.ToString())
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.Envelope.Bcc">
            <summary>
            The BCC'd addresses
            </summary>
            <example>
            	<code lang="C#" title="Envelope Properties">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //Get the envelope structure
            Envelope env = mf.FetchClient.Envelope(1);
             
            imap.Disconnect();
             
            //write out various properties
            Console.WriteLine( env.Date );
            Console.WriteLine( env.Subject );
            Console.WriteLine( env.From );
            Console.WriteLine( env.Sender );
            Console.WriteLine( env.ReplyTo );
            Console.WriteLine( env.To );
            Console.WriteLine( env.Cc );
            Console.WriteLine( env.Bcc );
            Console.WriteLine( env.InReplyTo );
            Console.WriteLine( env.MessageId );
            Console.WriteLine( env.MessageDate );
             
            //write out the string representation
            Console.WriteLine( env.ToString() );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Evenlope Properties">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'Get the envelope structure
            Dim env As Envelope = mf.FetchClient.Envelope(1)
             
            imap.Disconnect()
             
            'write out various properties
            Console.WriteLine(env.Date)
            Console.WriteLine(env.Subject)
            Console.WriteLine(env.From)
            Console.WriteLine(env.Sender)
            Console.WriteLine(env.ReplyTo)
            Console.WriteLine(env.To)
            Console.WriteLine(env.Cc)
            Console.WriteLine(env.Bcc)
            Console.WriteLine(env.InReplyTo)
            Console.WriteLine(env.MessageId)
            Console.WriteLine(env.MessageDate)
             
            'write out the string representation
            Console.WriteLine(env.ToString())
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>
            Although BCC addresses are not viewable, if the message was sent to you, because
            your address was on the BCC line, it may show up here.
            </remarks>
        </member>
        <member name="P:aspNetIMAP.Envelope.InReplyTo">
            <summary>
            In reply-to field.
            </summary>
            <example>
            	<code lang="C#" title="Envelope Properties">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //Get the envelope structure
            Envelope env = mf.FetchClient.Envelope(1);
             
            imap.Disconnect();
             
            //write out various properties
            Console.WriteLine( env.Date );
            Console.WriteLine( env.Subject );
            Console.WriteLine( env.From );
            Console.WriteLine( env.Sender );
            Console.WriteLine( env.ReplyTo );
            Console.WriteLine( env.To );
            Console.WriteLine( env.Cc );
            Console.WriteLine( env.Bcc );
            Console.WriteLine( env.InReplyTo );
            Console.WriteLine( env.MessageId );
            Console.WriteLine( env.MessageDate );
             
            //write out the string representation
            Console.WriteLine( env.ToString() );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Evenlope Properties">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'Get the envelope structure
            Dim env As Envelope = mf.FetchClient.Envelope(1)
             
            imap.Disconnect()
             
            'write out various properties
            Console.WriteLine(env.Date)
            Console.WriteLine(env.Subject)
            Console.WriteLine(env.From)
            Console.WriteLine(env.Sender)
            Console.WriteLine(env.ReplyTo)
            Console.WriteLine(env.To)
            Console.WriteLine(env.Cc)
            Console.WriteLine(env.Bcc)
            Console.WriteLine(env.InReplyTo)
            Console.WriteLine(env.MessageId)
            Console.WriteLine(env.MessageDate)
             
            'write out the string representation
            Console.WriteLine(env.ToString())
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.Envelope.MessageId">
            <summary>
            Message Id of the message.
            </summary>
            <example>
            	<code lang="C#" title="Envelope Properties">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //Get the envelope structure
            Envelope env = mf.FetchClient.Envelope(1);
             
            imap.Disconnect();
             
            //write out various properties
            Console.WriteLine( env.Date );
            Console.WriteLine( env.Subject );
            Console.WriteLine( env.From );
            Console.WriteLine( env.Sender );
            Console.WriteLine( env.ReplyTo );
            Console.WriteLine( env.To );
            Console.WriteLine( env.Cc );
            Console.WriteLine( env.Bcc );
            Console.WriteLine( env.InReplyTo );
            Console.WriteLine( env.MessageId );
            Console.WriteLine( env.MessageDate );
             
            //write out the string representation
            Console.WriteLine( env.ToString() );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Evenlope Properties">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'Get the envelope structure
            Dim env As Envelope = mf.FetchClient.Envelope(1)
             
            imap.Disconnect()
             
            'write out various properties
            Console.WriteLine(env.Date)
            Console.WriteLine(env.Subject)
            Console.WriteLine(env.From)
            Console.WriteLine(env.Sender)
            Console.WriteLine(env.ReplyTo)
            Console.WriteLine(env.To)
            Console.WriteLine(env.Cc)
            Console.WriteLine(env.Bcc)
            Console.WriteLine(env.InReplyTo)
            Console.WriteLine(env.MessageId)
            Console.WriteLine(env.MessageDate)
             
            'write out the string representation
            Console.WriteLine(env.ToString())
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>
            This is the message id, as found in the Message-Id header, and is not the ID
            assigned to messages by the IMAP server.
            </remarks>
        </member>
        <member name="P:aspNetIMAP.Envelope.MessageDate">
            <summary>The message date as a string.</summary>
            <remarks>
            This is the message date as found inside the headers. To get a .NET formatted
            DateTime structure of this property, reference
            <see cref="P:aspNetIMAP.Envelope.Date">Envelope.Date</see>.
            </remarks>
            <remarks>
            This is the message id, as found in the Message-Id header, and is not the ID
            assigned to messages by the IMAP server.
            </remarks>
            <example>
            	<code lang="C#" title="Envelope Properties">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //Get the envelope structure
            Envelope env = mf.FetchClient.Envelope(1);
             
            imap.Disconnect();
             
            //write out various properties
            Console.WriteLine( env.Date );
            Console.WriteLine( env.Subject );
            Console.WriteLine( env.From );
            Console.WriteLine( env.Sender );
            Console.WriteLine( env.ReplyTo );
            Console.WriteLine( env.To );
            Console.WriteLine( env.Cc );
            Console.WriteLine( env.Bcc );
            Console.WriteLine( env.InReplyTo );
            Console.WriteLine( env.MessageId );
            Console.WriteLine( env.MessageDate );
             
            //write out the string representation
            Console.WriteLine( env.ToString() );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Evenlope Properties">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'Get the envelope structure
            Dim env As Envelope = mf.FetchClient.Envelope(1)
             
            imap.Disconnect()
             
            'write out various properties
            Console.WriteLine(env.Date)
            Console.WriteLine(env.Subject)
            Console.WriteLine(env.From)
            Console.WriteLine(env.Sender)
            Console.WriteLine(env.ReplyTo)
            Console.WriteLine(env.To)
            Console.WriteLine(env.Cc)
            Console.WriteLine(env.Bcc)
            Console.WriteLine(env.InReplyTo)
            Console.WriteLine(env.MessageId)
            Console.WriteLine(env.MessageDate)
             
            'write out the string representation
            Console.WriteLine(env.ToString())
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="T:aspNetIMAP.FastItem">
            <summary>Returns the internal date, flags, and size of the message.</summary>
            <remarks>
            The FastItem is a quick an efficient way of obtaining some basic information
            about a message. In a single IMAP command, all of this information can be determined
            for a single message. It is the equivalent of querying the message for three different
            pieces of information, in a single command.
            </remarks>
            <example>
            	<code lang="C#" title="FastItem Demo">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //get the information about the first message
            FastItem item = mf.FetchClient.Fast( 1, IndexType.Ordinal );
             
            imap.Disconnect();
             
            //write out some informtion about the message
             
            //size
            Console.WriteLine( "Message size: {0}", item.MessageSize );
             
            //message date as a string
            Console.WriteLine( "String date: {0}", item.InternalDate);
             
            //message date as a .NET DateTime
            Console.WriteLine( "DateTime: {0}", item.Date.ToLongDateString() );
             
            //message flags
            Console.WriteLine( "Flags: {0}", item.Flags.ToString() );
             
            //the complete layout of the FastItem
            Console.WriteLine( item.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="FastItem Demo">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'get the information about the first message
            Dim item As FastItem = mf.FetchClient.Fast(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out some informtion about the message
            'size
            Console.WriteLine("Message size: {0}", item.MessageSize)
             
            'message date as a string
            Console.WriteLine("String date: {0}", item.InternalDate)
             
            'message date as a .NET DateTime
            Console.WriteLine("DateTime: {0}", item.Date.ToLongDateString())
             
            'message flags
            Console.WriteLine("Flags: {0}", item.Flags.ToString())
             
            'the complete layout of the FastItem
            Console.WriteLine(item.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FastItem.#ctor">
            <summary>Create a FastItem object</summary>
            <remarks>
            	<para>The FastItem object is created by the FetchClient, when a FAST command is
                executed against the IMAP server. The FAST command returns the internal date,
                message size, and the flags assigned to the message in a single command. Because
                these three properties are usually queried together, this command combines 3
                separate network calls into a single call.</para>
            </remarks>
            <example>
            	<code lang="C#" title="FastItem Demo">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //get the information about the first message
            FastItem item = mf.FetchClient.Fast( 1, IndexType.Ordinal );
             
            imap.Disconnect();
             
            //write out some informtion about the message
             
            //size
            Console.WriteLine( "Message size: {0}", item.MessageSize );
             
            //message date as a string
            Console.WriteLine( "String date: {0}", item.InternalDate);
             
            //message date as a .NET DateTime
            Console.WriteLine( "DateTime: {0}", item.Date.ToLongDateString() );
             
            //message flags
            Console.WriteLine( "Flags: {0}", item.Flags.ToString() );
             
            //the complete layout of the FastItem
            Console.WriteLine( item.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="FastItem Demo">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'get the information about the first message
            Dim item As FastItem = mf.FetchClient.Fast(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out some informtion about the message
            'size
            Console.WriteLine("Message size: {0}", item.MessageSize)
             
            'message date as a string
            Console.WriteLine("String date: {0}", item.InternalDate)
             
            'message date as a .NET DateTime
            Console.WriteLine("DateTime: {0}", item.Date.ToLongDateString())
             
            'message flags
            Console.WriteLine("Flags: {0}", item.Flags.ToString())
             
            'the complete layout of the FastItem
            Console.WriteLine(item.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FastItem.ToString">
            <summary>A string layout of the FastItem</summary>
            <returns>A string layout of all of the FastItem layout</returns>
            <remarks>
            	<para>This is a cleanly formatted string structure of the FastItem. The FastItem is
                listed as</para>
            	<para><font size="1">Message Size:</font></para>
            	<para>Internal Date:</para>
            	<para>Date:</para>
            	<para>Flags:</para>
            	<para>with each property being on its own line.</para>
            </remarks>
            <example>
            	<code lang="C#" title="FastItem Demo">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //get the information about the first message
            FastItem item = mf.FetchClient.Fast( 1, IndexType.Ordinal );
             
            imap.Disconnect();
             
            //write out some informtion about the message
             
            //size
            Console.WriteLine( "Message size: {0}", item.MessageSize );
             
            //message date as a string
            Console.WriteLine( "String date: {0}", item.InternalDate);
             
            //message date as a .NET DateTime
            Console.WriteLine( "DateTime: {0}", item.Date.ToLongDateString() );
             
            //message flags
            Console.WriteLine( "Flags: {0}", item.Flags.ToString() );
             
            //the complete layout of the FastItem
            Console.WriteLine( item.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="FastItem Demo">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'get the information about the first message
            Dim item As FastItem = mf.FetchClient.Fast(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out some informtion about the message
            'size
            Console.WriteLine("Message size: {0}", item.MessageSize)
             
            'message date as a string
            Console.WriteLine("String date: {0}", item.InternalDate)
             
            'message date as a .NET DateTime
            Console.WriteLine("DateTime: {0}", item.Date.ToLongDateString())
             
            'message flags
            Console.WriteLine("Flags: {0}", item.Flags.ToString())
             
            'the complete layout of the FastItem
            Console.WriteLine(item.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.FastItem.MessageSize">
            <summary>Message size in bytes.</summary>
            <value>Number of bytes in the message</value>
            <remarks>
            This is the message size in bytes, as found in the server. This is the size of
            the message including any encoding. This is not the decoded size, and therefore may
            be larger than the message after it has been downloaded to the client.
            </remarks>
            <example>
            	<code lang="C#" title="FastItem Demo">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //get the information about the first message
            FastItem item = mf.FetchClient.Fast( 1, IndexType.Ordinal );
             
            imap.Disconnect();
             
            //write out some informtion about the message
             
            //size
            Console.WriteLine( "Message size: {0}", item.MessageSize );
             
            //message date as a string
            Console.WriteLine( "String date: {0}", item.InternalDate);
             
            //message date as a .NET DateTime
            Console.WriteLine( "DateTime: {0}", item.Date.ToLongDateString() );
             
            //message flags
            Console.WriteLine( "Flags: {0}", item.Flags.ToString() );
             
            //the complete layout of the FastItem
            Console.WriteLine( item.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="FastItem Demo">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'get the information about the first message
            Dim item As FastItem = mf.FetchClient.Fast(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out some informtion about the message
            'size
            Console.WriteLine("Message size: {0}", item.MessageSize)
             
            'message date as a string
            Console.WriteLine("String date: {0}", item.InternalDate)
             
            'message date as a .NET DateTime
            Console.WriteLine("DateTime: {0}", item.Date.ToLongDateString())
             
            'message flags
            Console.WriteLine("Flags: {0}", item.Flags.ToString())
             
            'the complete layout of the FastItem
            Console.WriteLine(item.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.FastItem.Date">
            <summary>The internal message date as a DateTime structure.</summary>
            <value>The internal message date as a DateTime structure.</value>
            <remarks>
            	<para>The internal date, is the date time, as specified by the server, that the
                message was added to the folder. This may not necessarily be the date time that is
                found in the message Date header.</para>
            	<para>If an exception occurs, while converting the internal date string to the
                DateTime structure, then FastItem.Date will be set to DateTime.MinValue. An
                exception will not be thrown.</para>
            </remarks>
            <example>
            	<code lang="C#" title="FastItem Demo">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //get the information about the first message
            FastItem item = mf.FetchClient.Fast( 1, IndexType.Ordinal );
             
            imap.Disconnect();
             
            //write out some informtion about the message
             
            //size
            Console.WriteLine( "Message size: {0}", item.MessageSize );
             
            //message date as a string
            Console.WriteLine( "String date: {0}", item.InternalDate);
             
            //message date as a .NET DateTime
            Console.WriteLine( "DateTime: {0}", item.Date.ToLongDateString() );
             
            //message flags
            Console.WriteLine( "Flags: {0}", item.Flags.ToString() );
             
            //the complete layout of the FastItem
            Console.WriteLine( item.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="FastItem Demo">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'get the information about the first message
            Dim item As FastItem = mf.FetchClient.Fast(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out some informtion about the message
            'size
            Console.WriteLine("Message size: {0}", item.MessageSize)
             
            'message date as a string
            Console.WriteLine("String date: {0}", item.InternalDate)
             
            'message date as a .NET DateTime
            Console.WriteLine("DateTime: {0}", item.Date.ToLongDateString())
             
            'message flags
            Console.WriteLine("Flags: {0}", item.Flags.ToString())
             
            'the complete layout of the FastItem
            Console.WriteLine(item.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.FastItem.InternalDate">
            <remarks>
            	<para>The internal date, is the date time, as specified by the server, that the
                message was added to the folder. This may not necessarily be the date time that is
                found in the message Date header.</para>
            	<para>This string date format is the same format as found in
                <a href="http://www.rfc-editor.org/rfc/rfc2822.txt">http://www.rfc-editor.org/rfc/rfc2822.txt</a>
                Section 3.3.</para>
            </remarks>
            <summary>The date the message was added to the folder, as a string.</summary>
            <value>The date time as a string.</value>
            <example>
            	<code lang="C#" title="FastItem Demo">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //get the information about the first message
            FastItem item = mf.FetchClient.Fast( 1, IndexType.Ordinal );
             
            imap.Disconnect();
             
            //write out some informtion about the message
             
            //size
            Console.WriteLine( "Message size: {0}", item.MessageSize );
             
            //message date as a string
            Console.WriteLine( "String date: {0}", item.InternalDate);
             
            //message date as a .NET DateTime
            Console.WriteLine( "DateTime: {0}", item.Date.ToLongDateString() );
             
            //message flags
            Console.WriteLine( "Flags: {0}", item.Flags.ToString() );
             
            //the complete layout of the FastItem
            Console.WriteLine( item.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="FastItem Demo">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'get the information about the first message
            Dim item As FastItem = mf.FetchClient.Fast(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out some informtion about the message
            'size
            Console.WriteLine("Message size: {0}", item.MessageSize)
             
            'message date as a string
            Console.WriteLine("String date: {0}", item.InternalDate)
             
            'message date as a .NET DateTime
            Console.WriteLine("DateTime: {0}", item.Date.ToLongDateString())
             
            'message flags
            Console.WriteLine("Flags: {0}", item.Flags.ToString())
             
            'the complete layout of the FastItem
            Console.WriteLine(item.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.FastItem.Flags">
            <summary>
            	<para>FlagCollection of the Flags assigned to the message.</para></summary>
            <value>FlagCollection of the flags assigned to the message.</value>
            <example>
            	<code lang="C#" title="FastItem Demo">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //get the information about the first message
            FastItem item = mf.FetchClient.Fast( 1, IndexType.Ordinal );
             
            imap.Disconnect();
             
            //write out some informtion about the message
             
            //size
            Console.WriteLine( "Message size: {0}", item.MessageSize );
             
            //message date as a string
            Console.WriteLine( "String date: {0}", item.InternalDate);
             
            //message date as a .NET DateTime
            Console.WriteLine( "DateTime: {0}", item.Date.ToLongDateString() );
             
            //message flags
            Console.WriteLine( "Flags: {0}", item.Flags.ToString() );
             
            //the complete layout of the FastItem
            Console.WriteLine( item.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="FastItem Demo">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'get the information about the first message
            Dim item As FastItem = mf.FetchClient.Fast(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out some informtion about the message
            'size
            Console.WriteLine("Message size: {0}", item.MessageSize)
             
            'message date as a string
            Console.WriteLine("String date: {0}", item.InternalDate)
             
            'message date as a .NET DateTime
            Console.WriteLine("DateTime: {0}", item.Date.ToLongDateString())
             
            'message flags
            Console.WriteLine("Flags: {0}", item.Flags.ToString())
             
            'the complete layout of the FastItem
            Console.WriteLine(item.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="T:aspNetIMAP.FetchClient">
            <summary>Fetches messages and data from the IMAP server.</summary>
            <remarks>
            The FetchClient maps closely to the Fetch command implemented by the RFCs. For
            more information on the technicalities of the Fetch command, check out
            <a href="http://www.ietf.org/rfc/rfc3501.txt?number=3501">http://www.ietf.org/rfc/rfc3501.txt?number=3501</a>
            </remarks>
        </member>
        <member name="F:aspNetIMAP.FetchClient.BodySectionHeader">
            <summary>A string constant for retrieving only a BodySection of Headers.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string contents = mf.FetchClient.BodySection(1, FetchClient.BodySectionHeader, IndexType.Ordinal, false );
             
            Console.WriteLine( contents );
             
            //if we knew the BodySectionId (say for example, from a BodyStructure), we could request the headers for a specific Id, by prepending them to the section.
            string bodySectionId = "1.1";
             
            //if the contents don't exist, an empty string is returned.
            contents = mf.FetchClient.BodySection( 1, bodySectionId + "." + FetchClient.BodySectionHeader, IndexType.Ordinal, false );
             
            Console.WriteLine( contents );
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim contents As String = mf.FetchClient.BodySection(1, FetchClient.BodySectionHeader, IndexType.Ordinal, False)
             
            Console.WriteLine(contents)
             
            'if we knew the BodySectionId (say for example, from a BodyStructure), we could request the headers for a specific Id, by prepending them to the section.
            Dim bodySectionId As String = "1.1"
             
            'if the contents don't exist, an empty string is returned.
            contents = mf.FetchClient.BodySection(1, bodySectionId + "." + FetchClient.BodySectionHeader, IndexType.Ordinal, False)
             
            Console.WriteLine(contents)
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="F:aspNetIMAP.FetchClient.BodySectionHeaderFields">
            <summary>Returns a list of specific header fields.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //if we want only specific headers, they are placed with in a parenthesised, space delimited 
            string headerFields= "(subject to cc)";    //only bring back the subject, to, and cc headers
             
            string contents = mf.FetchClient.BodySection(1, FetchClient.BodySectionHeaderFields +  headerFields, IndexType.Ordinal, false );
             
            Console.WriteLine( contents );
             
            //if we knew the BodySectionId (say for example, from a BodyStructure), we could request the headers for a specific Id, by prepending them to the section.
            string bodySectionId = "1";
             
             
            //if the contents don't exist, an empty string is returned.
            contents = mf.FetchClient.BodySection( 1, bodySectionId + "." + FetchClient.BodySectionHeaderFields + headerFields, IndexType.Ordinal, false );
             
            Console.WriteLine( contents );
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'if we want only specific headers, they are placed with in a parenthesised, space delimited 
            Dim headerFields As String = "(subject to cc)" 'only bring back the subject, to, and cc headers
            Dim contents As String = mf.FetchClient.BodySection(1, FetchClient.BodySectionHeaderFields + headerFields, IndexType.Ordinal, False)
             
            Console.WriteLine(contents)
             
            'if we knew the BodySectionId (say for example, from a BodyStructure), we could request the headers for a specific Id, by prepending them to the section.
            Dim bodySectionId As String = "1"
             
             
            'if the contents don't exist, an empty string is returned.
            contents = mf.FetchClient.BodySection(1, bodySectionId + "." + FetchClient.BodySectionHeaderFields + headerFields, IndexType.Ordinal, False)
             
            Console.WriteLine(contents)
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="F:aspNetIMAP.FetchClient.BodySectionHeaderFieldsNot">
            <summary>Returns a list of headers header not listed in the fields.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //if we want only specific headers, they are placed with in a parenthesised, space delimited 
            string headerFields= "(subject to cc)";    //bring back everything EXCEPT subject, to, cc
             
            string contents = mf.FetchClient.BodySection(1, FetchClient.BodySectionHeaderFieldsNot +  headerFields, IndexType.Ordinal, false );
             
            Console.WriteLine( contents );
             
            //if we knew the BodySectionId (say for example, from a BodyStructure), we could request the headers for a specific Id, by prepending them to the section.
            string bodySectionId = "1";
             
             
            //if the contents don't exist, an empty string is returned.
            contents = mf.FetchClient.BodySection( 1, bodySectionId + "." + FetchClient.BodySectionHeaderFieldsNot + headerFields, IndexType.Ordinal, false );
             
            Console.WriteLine( contents );
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'if we want only specific headers, they are placed with in a parenthesised, space delimited 
            Dim headerFields As String = "(subject to cc)" 'bring back everything EXCEPT subject, to, cc
            Dim contents As String = mf.FetchClient.BodySection(1, FetchClient.BodySectionHeaderFieldsNot + headerFields, IndexType.Ordinal, False)
             
            Console.WriteLine(contents)
             
            'if we knew the BodySectionId (say for example, from a BodyStructure), we could request the headers for a specific Id, by prepending them to the section.
            Dim bodySectionId As String = "1"
             
             
            'if the contents don't exist, an empty string is returned.
            contents = mf.FetchClient.BodySection(1, bodySectionId + "." + FetchClient.BodySectionHeaderFieldsNot + headerFields, IndexType.Ordinal, False)
             
            Console.WriteLine(contents)
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="F:aspNetIMAP.FetchClient.BodySectionMimeHeaders">
            <summary>A constant useful for downloading the Mime headers of a BodySection</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the Mime headers of the first bodysection,of the first message
            string section = "1." + FetchClient.BodySectionMimeHeaders;
            string mimeSection = mf.FetchClient.BodySection( 1, section, IndexType.Ordinal, false );
             
            Console.WriteLine( mimeSection );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the Mime headers of the first bodysection,of the first message
            Dim section As String = "1." + FetchClient.BodySectionMimeHeaders
            Dim mimeSection As String = mf.FetchClient.BodySection(1, section, IndexType.Ordinal, False)
             
            Console.WriteLine(mimeSection)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="F:aspNetIMAP.FetchClient.BodySectionText">
            <summary>Retrieves the body text of the message, without the headers.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string contents = mf.FetchClient.BodySection(1, FetchClient.BodySectionText, IndexType.Ordinal, false );
             
            Console.WriteLine( contents );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim contents As String = mf.FetchClient.BodySection(1, FetchClient.BodySectionText, IndexType.Ordinal, False)
             
            Console.WriteLine(contents)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="F:aspNetIMAP.FetchClient.BodySectionCompleteMessage">
            <summary>Retrieves the complete text of the message (both headers and body).</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string contents = mf.FetchClient.BodySection(1, FetchClient.BodySectionCompleteMessage , IndexType.Ordinal, false );
             
            Console.WriteLine( contents );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim contents As String = mf.FetchClient.BodySection(1, FetchClient.BodySectionCompleteMessage , IndexType.Ordinal, False)
             
            Console.WriteLine(contents)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FetchClient.#ctor">
            <summary>
            	<para>Creates an instance of the FetchClient</para></summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            //fetch the first message of the inbox
            MailFolder mf = imap.SelectInbox();
            string text = mf.FetchClient.MessageAsText( 1 );
             
            Console.WriteLine( text );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            'fetch the first message of the inbox
            Dim mf As MailFolder = imap.SelectInbox()
            Dim [text] As String = mf.FetchClient.MessageAsText(1)
             
            Console.WriteLine([text])
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FetchClient.#ctor(aspNetIMAP.MailFolder)">
            <summary>
            	<para>Creates an instance of the FetchClient</para></summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            //fetch the first message of the inbox
            MailFolder mf = imap.SelectInbox();
            string text = mf.FetchClient.MessageAsText( 1 );
             
            Console.WriteLine( text );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            'fetch the first message of the inbox
            Dim mf As MailFolder = imap.SelectInbox()
            Dim [text] As String = mf.FetchClient.MessageAsText(1)
             
            Console.WriteLine([text])
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>This ctor is called internally by aspNetIMAP</remarks>
            <param name="folder">MailFolder in which Fetches are executed against.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.DownloadAttachment(System.Int32,System.String,aspNetIMAP.IndexType,System.Boolean)">
            <summary>
            Downloads an attachment, from a message, without downloading the entire
            message.
            </summary>
            <remarks>
            This method works by parsing the BodyStructure of email message, until the first
            attachment, with attachmentName, is found. Although an attachment, is an individual
            MimePart, it is exposed as a MimeMessage for additional functionality.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //downloads an attachment named 'sales.doc' in the first message
            MimeMessage attachment = mf.FetchClient.DownloadAttachment( 1,  "sales.doc", IndexType.Ordinal, false );
            if( attachment != null )
            {
                attachment.Save( "c:\\temp" );
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'downloads an attachment named 'sales.doc' in the first message
            Dim attachment As MimeMessage = mf.FetchClient.DownloadAttachment(1, "sales.doc", IndexType.Ordinal, False)
            If Not (attachment Is Nothing) Then
               attachment.Save("c:\temp")
            End If
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal or UniqueId message number.</param>
            <param name="attachmentName">The attachment name.</param>
            <param name="indexType">Ordinal or UniqueId Index</param>
            <param name="markAsRead">If True, marks the message as read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.DownloadAttachment(System.Int32,System.Int32,aspNetIMAP.IndexType,System.Boolean)">
            <summary>
            Downloads an attachment, from a message, without downloading the entire
            message.
            </summary>
            <remarks>
            This method works by parsing the BodyStructure of email message, and finding the
            attachment at index <em>attachmentIndex</em>.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //downloads the first attachment
            MimeMessage attachment = mf.FetchClient.DownloadAttachment( 1,  0, IndexType.Ordinal, false );
            if( attachment != null )
            {
                attachment.Save( "c:\\temp" );
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'downloads the first attachment
            Dim attachment As MimeMessage = mf.FetchClient.DownloadAttachment(1, 0, IndexType.Ordinal, False)
            If Not (attachment Is Nothing) Then
               attachment.Save("c:\temp")
            End If
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal or UniqueId index.</param>
            <param name="attachmentIndex">The ordinal index in the number of attachments.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
            <param name="markAsRead">If True, marks the message as being read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Attachments(System.Int32,aspNetIMAP.IndexType)">
            <summary>
            Returns the BodyStructureAttachments for a given message.
            </summary>
            <param name="messageNumber">The message number.</param>
            <param name="indexType">The index type of the message</param>
            <returns></returns>
            <example>
            <code lang="C#">
            //load the imap properties from the .config file.
            IMAP4 imap = new IMAP4( true, true );
            
            MailFolder mf = imap.SelectInbox();
            
            //find the number of messages in the inbox
            int count = mf.MessageCount;
            
            for( int i=1;i&lt;=count;i++)
            {
            	Console.WriteLine( "Message Number: " + i.ToString() );
            	Console.WriteLine( "=============" );
            
            	BodyStructureAttachment[] attachments = mf.FetchClient.Attachments(i, IndexType.Ordinal );
            
            	//write out the number of attachments and their names
            	Console.WriteLine( "count: " + attachments.Length );
            	foreach( BodyStructureAttachment att in attachments )
            	{
            		Console.WriteLine( att.DecodedName() );
            	}
            	Console.WriteLine();
            }
            
            imap.Disconnect();
            
            Console.WriteLine( "Done" );
            Console.ReadLine();
            </code>
            <code lang="VB.NET">
             'load the imap properties from the .config file.
            Dim imap As New IMAP4(True, True)
            
            Dim mf As MailFolder = imap.SelectInbox()
            
            'find the number of messages in the inbox
            Dim count As Integer = mf.MessageCount
            
            Dim i As Integer
            For i = 1 To count
               Console.WriteLine("Message Number: " + i.ToString())
               Console.WriteLine("=============")
               
               Dim attachments As BodyStructureAttachment() = mf.FetchClient.Attachments(i, IndexType.Ordinal)
               
               'write out the number of attachments and their names
               Console.WriteLine("count: " + attachments.Length)
               Dim att As BodyStructureAttachment
               For Each att In  attachments
                  Console.WriteLine(att.DecodedName())
               Next att
               Console.WriteLine()
            Next i
            
            imap.Disconnect()
            
            Console.WriteLine("Done")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FetchClient.AttachmentData(System.Int32,System.String,aspNetIMAP.IndexType,System.Boolean)">
            <summary>
            Downloads the binary data of an attachment
            </summary>
            <param name="messageNumber">Message number</param>
            <param name="attachmentName">Name of the attachment.</param>
            <param name="indexType">Message number index type.</param>
            <param name="markAsRead">Mark the message as read</param>
            <returns>Binary data of the attachment</returns>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            
            imap.Logger.Path = "C:\\imap.log";
            
            imap.Login("test@example.com", "test" );
            
            //inbox
            MailFolder inbox = imap.SelectInbox();
            
            //get the data of the attachment named 'test.gif' of the 4th message
            byte[] data = inbox.FetchClient.AttachmentData( 4, "test.gif", IndexType.Ordinal, false );
            
            //save to the filessytem
            FileStream fs = File.Open( "c:\\temp\\test.gif", FileMode.OpenOrCreate );
            fs.Write( data, 0, data.Length );
            fs.Flush();
            fs.Close();
            
            imap.Disconnect();
            
            
            </code>
            <code lang="VB">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            
            imap.Logger.Path = "C:\imap.log"
            
            imap.Login("test@example.com", "test")
            
            'inbox
            Dim inbox As MailFolder = imap.SelectInbox()
            
            'get the data of the attachment named 'test.gif' of the 4th message
            Dim data As Byte() = inbox.FetchClient.AttachmentData(4, "test.gif", IndexType.Ordinal, False)
            
            'save to the filessytem
            Dim fs As FileStream = File.Open("c:\temp\test.gif", FileMode.OpenOrCreate)
            fs.Write(data, 0, data.Length)
            fs.Flush()
            fs.Close()
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FetchClient.AttachmentData(System.Int32,System.Int32,aspNetIMAP.IndexType,System.Boolean)">
            <summary>
            Downloads the binary data of an attachment
            </summary>
            <param name="messageNumber">Message number</param>
            <param name="attachmentIndex">Index of the attachment.</param>
            <param name="indexType">Message number index type.</param>
            <param name="markAsRead">Mark the message as read</param>
            <returns>Binary data of the attachment</returns>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            
            imap.Logger.Path = "C:\\imap.log";
            
            imap.Login("test@example.com", "test" );
            
            //inbox
            MailFolder inbox = imap.SelectInbox();
            
            //get the data of the first attachment, 4th message
            byte[] data = inbox.FetchClient.AttachmentData( 4, 1, IndexType.Ordinal, false );
            
            //save to the filessytem
            FileStream fs = File.Open( "c:\\temp\\test.gif", FileMode.OpenOrCreate );
            fs.Write( data, 0, data.Length );
            fs.Flush();
            fs.Close();
            
            imap.Disconnect();
            
            
            </code>
            <code lang="VB">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            
            imap.Logger.Path = "C:\imap.log"
            
            imap.Login("test@example.com", "test")
            
            'inbox
            Dim inbox As MailFolder = imap.SelectInbox()
            
            'get the data of the first attachment, 4th message
            Dim data As Byte() = inbox.FetchClient.AttachmentData(4, 1, IndexType.Ordinal, False)
            
            'save to the filessytem
            Dim fs As FileStream = File.Open("c:\temp\test.gif", FileMode.OpenOrCreate)
            fs.Write(data, 0, data.Length)
            fs.Flush()
            fs.Close()
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FetchClient.BodyStructure(System.Int32)">
            <summary>Retrieves the BodyStructure for a message number.</summary>
            <param name="messageNumber">Ordinal message number.</param>
            <example>
            	<code lang="C#" title="Attachments">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count );
             
            BodyStructureAttachment[] attachments = bs.Attachments();
             
            foreach(BodyStructureAttachment bsa in attachments )
            {
                //write out the name and the id
                Console.WriteLine( "{0}:{1}", bsa.BodyStructureId, bsa.Name  );
            }
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Attachments">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count)
             
            Dim attachments As BodyStructureAttachment() = bs.Attachments()
             
            Dim bsa As BodyStructureAttachment
            For Each bsa In  attachments
               'write out the name and the id
               Console.WriteLine("{0}:{1}", bsa.BodyStructureId, bsa.Name)
            Next bsa
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FetchClient.BodyStructure(System.Int32,aspNetIMAP.IndexType)">
            <summary>Retrieves the BodyStructure for a message number.</summary>
            <example>
            	<code lang="C#" title="Attachments">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Logger  = new IMAPLog( "c:\\imap.log" ); 
            imap.Login();
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the BodyStructure of the newest message
            int count = mf.MessageCount;
             
            BodyStructure bs = mf.FetchClient.BodyStructure( count, IndexType.Ordinal );
             
            BodyStructureAttachment[] attachments = bs.Attachments();
             
            foreach(BodyStructureAttachment bsa in attachments )
            {
                //write out the name and the id
                Console.WriteLine( "{0}:{1}", bsa.BodyStructureId, bsa.Name  );
            }
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Attachments">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the BodyStructure of the newest message
            Dim count As Integer = mf.MessageCount
             
            Dim bs As BodyStructure = mf.FetchClient.BodyStructure(count, IndexType.Ordinal)
             
            Dim attachments As BodyStructureAttachment() = bs.Attachments()
             
            Dim bsa As BodyStructureAttachment
            For Each bsa In  attachments
               'write out the name and the id
               Console.WriteLine("{0}:{1}", bsa.BodyStructureId, bsa.Name)
            Next bsa
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal or Unique Id message number.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.BodyStructures">
            <summary>Returns the BodyStructures for all of the messages.</summary>
            <returns>Array of BodyStructures</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            BodyStructure[] structures = mf.FetchClient.BodyStructures();
             
            foreach( BodyStructure bs in structures )
            {
                Console.WriteLine( bs.ToString() );
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim structures As BodyStructure() = mf.FetchClient.BodyStructures()
             
            Dim bs As BodyStructure
            For Each bs In  structures
               Console.WriteLine(bs.ToString())
            Next bs
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FetchClient.BodyStructures(System.String)">
            <summary>Returns the BodyStructures for a given message set.</summary>
            <returns>Array of BodyStructures</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            BodyStructure[] structures = mf.FetchClient.BodyStructures( "1:3");
             
            foreach( BodyStructure bs in structures )
            {
                Console.WriteLine( bs.ToString() );
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim structures As BodyStructure() = mf.FetchClient.BodyStructures("1:3")
             
            Dim bs As BodyStructure
            For Each bs In  structures
               Console.WriteLine(bs.ToString())
            Next bs
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP formatted string set of messages.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.BodyStructures(System.String,aspNetIMAP.IndexType)">
            <summary>Returns the BodyStructures for a given message set.</summary>
            <returns>Array of BodyStructures</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            BodyStructure[] structures = mf.FetchClient.BodyStructures( "1:3", IndexType.Ordinal );
             
            foreach( BodyStructure bs in structures )
            {
                Console.WriteLine( bs.ToString() );
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim structures As BodyStructure() = mf.FetchClient.BodyStructures("1:3", IndexType.Ordinal )
             
            Dim bs As BodyStructure
            For Each bs In  structures
               Console.WriteLine(bs.ToString())
            Next bs
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP formatted string set of messages.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.BodySection(System.Int32)">
            <summary>Returns the text of a given body section.</summary>
            <remarks>
            Because this BodySection() method does not allow a specific body part to be
            specified, the entire message is returned.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string section = mf.FetchClient.BodySection(1);
             
            Console.WriteLine( section );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
            </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim section As String = mf.FetchClient.BodySection(1)
             
            Console.WriteLine(section)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal index message number to retrieve.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.BodySection(System.Int32,System.String)">
            <summary>Returns the text of a given body section.</summary>
            <remarks>
            BodySections can either be specified by one of the FectClient.BodySection
            strings, or else by the BodyStructure.BodySectionId property. This is helpful in
            retrieving specific parts of the message, without having to download the entire
            message.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the body structure
            BodyStructure[] structures = mf.FetchClient.BodyStructure(1).ToArray();
             
            //loop through the body structure, and, as an example, find the first text/plain part, and display it
            //this could easily be done with a html part, attachments, embedded parts, or forward messages.
            //the biggest limitation is the capability of the remote IMAP server.
            bool foundText = false;
             
            foreach( BodyStructure bs in structures )
            {
                if( (bs.ContentType != null ) &amp;&amp; ( bs.ContentType.ToLower() == "text/plain" ) )
                {
                    string section = bs.BodySectionId;
                    string text = mf.FetchClient.BodySection(1, section );
                    Console.WriteLine( text );
                    foundText = true;
                    break;
                }
            }
             
            if( !foundText )
            {
                Console.WriteLine( "this message did not have a plain/text part, as specified by the IMAP server." );
            }
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the body structure
            Dim structures As BodyStructure() = mf.FetchClient.BodyStructure(1).ToArray()
             
            'loop through the body structure, and, as an example, find the first text/plain part, and display it
            'this could easily be done with a html part, attachments, embedded parts, or forward messages.
            'the biggest limitation is the capability of the remote IMAP server.
            Dim foundText As Boolean = False
             
            Dim bs As BodyStructure
            For Each bs In  structures
               If Not (bs.ContentType Is Nothing) Then 
                IF bs.ContentType.ToLower() = "text/plain" Then
                  Dim section As String = bs.BodySectionId
                  Dim [text] As String = mf.FetchClient.BodySection(1, section)
                  Console.WriteLine([text])
                  foundText = True
                  Exit For 
                End If   
               End If
            Next bs
             
            If Not foundText Then
               Console.WriteLine("this message did not have a plain/text part, as specified by the IMAP server.")
            End If
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal Index message number to retrieve.</param>
            <param name="section">The body section to retrieve.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.BodySection(System.Int32,System.String,aspNetIMAP.IndexType,System.Boolean)">
            <summary>Returns the text of a given body section.</summary>
            <remarks>
            BodySections can either be specified by one of the FectClient.BodySection
            strings, or else by the BodyStructure.BodySectionId property. This is helpful in
            retrieving specific parts of the message, without having to download the entire
            message.
            <para>
            If the bodysection is null, the entire message is returned.
            </para>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the body structure
            BodyStructure[] structures = mf.FetchClient.BodyStructure(1).ToArray();
             
            //loop through the body structure, and, as an example, find the first text/plain part, and display it
            //this could easily be done with a html part, attachments, embedded parts, or forward messages.
            //the biggest limitation is the capability of the remote IMAP server.
            bool foundText = false;
             
            foreach( BodyStructure bs in structures )
            {
             
                if( (bs.ContentType != null ) &amp;&amp; ( bs.ContentType.ToLower() == "text/plain" ) )
                {
                    string section = bs.BodySectionId;
                    string text = mf.FetchClient.BodySection(1, section, IndexType.Ordinal, true );
                    Console.WriteLine( text );
                    foundText = true;
                    break;
                }
            }
             
            if( !foundText )
            {
                Console.WriteLine( "this message did not have a plain/text part, as specified by the IMAP server." );
            }
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the body structure
            Dim structures As BodyStructure() = mf.FetchClient.BodyStructure(1).ToArray()
             
            'loop through the body structure, and, as an example, find the first text/plain part, and display it
            'this could easily be done with a html part, attachments, embedded parts, or forward messages.
            'the biggest limitation is the capability of the remote IMAP server.
            Dim foundText As Boolean = False
             
            Dim bs As BodyStructure
            For Each bs In  structures
               If Not (bs.ContentType Is Nothing) Then 
                IF bs.ContentType.ToLower() = "text/plain" Then
                  Dim section As String = bs.BodySectionId
                  Dim [text] As String = mf.FetchClient.BodySection(1, section, IndexType.Ordinal, true)
                  Console.WriteLine([text])
                  foundText = True
                  Exit For 
                End If   
               End If
            Next bs
             
            If Not foundText Then
               Console.WriteLine("this message did not have a plain/text part, as specified by the IMAP server.")
            End If
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal or UniqueId message number.</param>
            <param name="section">BodySection string or BodyStructure.BodySectionId value.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
            <param name="markAsRead">
            	<para>Marks the message as read.</para></param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.BodySectionPart(System.Int32,System.String,aspNetIMAP.IndexType,System.Boolean)">
            <summary>Downloads a BodySection as a MimeMessage</summary>
            <remarks>
            Although a section is only an individual mime part, by internally exposing it as
            a MimeMessage, more functionality is available to the end developer.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the first message
            BodyStructure structure = mf.FetchClient.BodyStructure( 1, IndexType.Ordinal );
             
            //grab the plain text bodystructure
            BodyStructure plainTextStructure = structure.FindByContentType( "text/plain" );
            if( plainTextStructure != null )
            {
                //write out the plain text content
                MimeMessage m = mf.FetchClient.BodySectionPart( 1, plainTextStructure.BodySectionId, IndexType.Ordinal, false );
                Console.WriteLine( m.DecodedText() );
            }
            else
            {
                Console.WriteLine( "no plain text part exists for this message." );
            }
             
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the first message
            Dim [structure] As BodyStructure = mf.FetchClient.BodyStructure(1, IndexType.Ordinal)
             
            'grab the plain text bodystructure
            Dim plainTextStructure As BodyStructure = [structure].FindByContentType("text/plain")
            If Not (plainTextStructure Is Nothing) Then
               'write out the plain text content
               Dim m As MimeMessage = mf.FetchClient.BodySectionPart(1, plainTextStructure.BodySectionId, IndexType.Ordinal, False)
               Console.WriteLine(m.DecodedText())
            Else
               Console.WriteLine("no plain text part exists for this message.")
            End If
             
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal or UniqueId message number.</param>
            <param name="section">
            Section to download. See the <see cref="M:aspNetIMAP.FetchClient.BodyStructure(System.Int32)">BodyStructure</see> for
            section ids.
            </param>
            <param name="indexType">Ordinal or UniqueId Index</param>
            <param name="markAsRead">If true, marks the message as being read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.BodySections">
            <summary>Retrieves all of the text for all of the messages.</summary>
            <summary>Returns the text of a given body section.</summary>
            <remarks>
            Because this BodySection() method does not allow a specific body part to be
            specified, the entire message is returned.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
             
            string[] messages = mf.FetchClient.BodySections();
             
            foreach( string s in messages )
            {
                Console.WriteLine( s );
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
             
            Dim messages As String() = mf.FetchClient.BodySections()
             
            Dim s As String
            For Each s In  messages
               Console.WriteLine(s)
            Next s
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FetchClient.BodySections(System.String)">
            <summary>Retrieves all of the text for a given set of messages.</summary>
            <summary>Returns the text of a given body section.</summary>
            <remarks>
            Because this BodySection() method does not allow a specific body part to be
            specified, the entire message is returned.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
             
            string[] messages = mf.FetchClient.BodySections( "1:3");
             
            foreach( string s in messages )
            {
                Console.WriteLine( s );
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
             
            Dim messages As String() = mf.FetchClient.BodySections("1:3")
             
            Dim s As String
            For Each s In  messages
               Console.WriteLine(s)
            Next s
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP formatted string set of messages.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.BodySections(System.String,aspNetIMAP.IndexType,System.Boolean)">
            <summary>Retrieves all of the text for a given set of messages.</summary>
            <summary>Returns the text of a given body section.</summary>
            <remarks>
            Because this BodySection() method does not allow a specific body part to be
            specified, the entire message is returned.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
             
            string[] messages = mf.FetchClient.BodySections( "1:3", IndexType.Ordinal, true );
             
            foreach( string s in messages )
            {
                Console.WriteLine( s );
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
             
            Dim messages As String() = mf.FetchClient.BodySections("1:3", IndexType.Ordinal, true )
             
            Dim s As String
            For Each s In  messages
               Console.WriteLine(s)
            Next s
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP formatted string set of messages.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
            <param name="markAsRead">
            	<br/>
            Marks the message as being read.
            </param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.BodySections(System.String,System.String,aspNetIMAP.IndexType)">
            <summary>Returns the text of a given body section.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //grab all of the body structures for a complete mailbox
            BodyStructure[] allMessageStructures = mf.FetchClient.BodyStructures( "1:*", IndexType.Ordinal );
             
            for( int i=0;i&lt;allMessageStructures.Length;i++)
            {
                //message number is one greater than the index
                int messageNumber = i +1;    
             
                //grab the body structure
                BodyStructure messageStructure = allMessageStructures[ i ];
             
                BodyStructure[] structures = messageStructure.ToArray();
             
                //loop through the body structure, and, as an example, find the first text/plain part, and display it
                //this could easily be done with a html part, attachments, embedded parts, or forward messages.
                //the biggest limitation is the capability of the remote IMAP server.
                bool foundText = false;
             
                foreach( BodyStructure bs in structures )
                {
                    if( (bs.ContentType != null ) &amp;&amp; ( bs.ContentType.ToLower() == "text/plain" ) )
                    {
                        string section = bs.BodySectionId;
                        string text = mf.FetchClient.BodySection( messageNumber, section, IndexType.Ordinal );
                        Console.WriteLine( text );
                        foundText = true;
                        break;
                    }
                }
             
                if( !foundText )
                {
                    Console.WriteLine( "this message ({0}) did not have a plain/text part, as specified by the IMAP server.", i  );
                }
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab all of the body structures for a complete mailbox
            Dim allMessageStructures As BodyStructure() = mf.FetchClient.BodyStructures("1:*", IndexType.Ordinal)
             
            Dim i As Integer
            For i = 0 To allMessageStructures.Length - 1
                'message number is one greater than the index
                Dim messageNumber As Integer = i + 1
             
                'grab the body structure
                Dim messageStructure As BodyStructure = allMessageStructures(i)
             
                Dim structures As BodyStructure() = messageStructure.ToArray()
             
                'loop through the body structure, and, as an example, find the first text/plain part, and display it
                'this could easily be done with a html part, attachments, embedded parts, or forward messages.
                'the biggest limitation is the capability of the remote IMAP server.
                Dim foundText As Boolean = False
             
                Dim bs As BodyStructure
                For Each bs In structures
                    If Not (bs.ContentType Is Nothing) Then
                        If bs.ContentType.ToLower() = "text/plain" Then
                            Dim section As String = bs.BodySectionId
                            Dim [text] As String = mf.FetchClient.BodySection(messageNumber, section, IndexType.Ordinal )
                            Console.WriteLine([text])
                            foundText = True
                            Exit For
                        End If
                    End If
                Next bs
             
                If Not foundText Then
                    Console.WriteLine("this message ({0}) did not have a plain/text part, as specified by the IMAP server.", i)
                End If
            Next i
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>
            BodySections can either be specified by one of the FectClient.BodySection
            strings, or else by the BodyStructure.BodySectionId property. This is helpful in
            retrieving specific parts of the message, without having to download the entire
            message.
            <para>
            If the bodysection is null, the entire message is returned.
            </para>
            </remarks>
            <param name="messageSet">An IMAP formatted string set of messages.</param>
            <param name="section">BodySection string or BodyStructure.BodySectionId value.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.BodySections(System.String,System.String,aspNetIMAP.IndexType,System.Boolean)">
            <summary>Returns the text of a given body section.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //grab all of the body structures for a complete mailbox
            BodyStructure[] allMessageStructures = mf.FetchClient.BodyStructures( "1:*", IndexType.Ordinal );
             
            for( int i=0;i&lt;allMessageStructures.Length;i++)
            {
                //message number is one greater than the index
                int messageNumber = i +1;    
             
                //grab the body structure
                BodyStructure messageStructure = allMessageStructures[ i ];
             
                BodyStructure[] structures = messageStructure.ToArray();
             
                //loop through the body structure, and, as an example, find the first text/plain part, and display it
                //this could easily be done with a html part, attachments, embedded parts, or forward messages.
                //the biggest limitation is the capability of the remote IMAP server.
                bool foundText = false;
             
                foreach( BodyStructure bs in structures )
                {
                    if( (bs.ContentType != null ) &amp;&amp; ( bs.ContentType.ToLower() == "text/plain" ) )
                    {
                        string section = bs.BodySectionId;
                        string text = mf.FetchClient.BodySection( messageNumber, section, IndexType.Ordinal, true );
                        Console.WriteLine( text );
                        foundText = true;
                        break;
                    }
                }
             
                if( !foundText )
                {
                    Console.WriteLine( "this message ({0}) did not have a plain/text part, as specified by the IMAP server.", i  );
                }
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab all of the body structures for a complete mailbox
            Dim allMessageStructures As BodyStructure() = mf.FetchClient.BodyStructures("1:*", IndexType.Ordinal)
             
            Dim i As Integer
            For i = 0 To allMessageStructures.Length - 1
                'message number is one greater than the index
                Dim messageNumber As Integer = i + 1
             
                'grab the body structure
                Dim messageStructure As BodyStructure = allMessageStructures(i)
             
                Dim structures As BodyStructure() = messageStructure.ToArray()
             
                'loop through the body structure, and, as an example, find the first text/plain part, and display it
                'this could easily be done with a html part, attachments, embedded parts, or forward messages.
                'the biggest limitation is the capability of the remote IMAP server.
                Dim foundText As Boolean = False
             
                Dim bs As BodyStructure
                For Each bs In structures
                    If Not (bs.ContentType Is Nothing) Then
                        If bs.ContentType.ToLower() = "text/plain" Then
                            Dim section As String = bs.BodySectionId
                            Dim [text] As String = mf.FetchClient.BodySection(messageNumber, section, IndexType.Ordinal, True)
                            Console.WriteLine([text])
                            foundText = True
                            Exit For
                        End If
                    End If
                Next bs
             
                If Not foundText Then
                    Console.WriteLine("this message ({0}) did not have a plain/text part, as specified by the IMAP server.", i)
                End If
            Next i
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>
            BodySections can either be specified by one of the FectClient.BodySection
            strings, or else by the BodyStructure.BodySectionId property. This is helpful in
            retrieving specific parts of the message, without having to download the entire
            message.
            <para>
            If the bodysection is null, the entire message is returned.
            </para>
            </remarks>
            <param name="messageSet">An IMAP formatted string set of messages.</param>
            <param name="section">BodySection string or BodyStructure.BodySectionId value.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
            <param name="markAsRead">Marks the message as being read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.PartialBodySection(System.Int32,System.String,System.Int32,System.Int32,aspNetIMAP.IndexType,System.Boolean)">
            <summary>Retrieves partial text for a given message.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the partial headers
            string partialText = mf.FetchClient.PartialBodySection( 1, FetchClient.BodySectionHeader, 0,100, IndexType.Ordinal, true );
             
            Console.WriteLine( partialText );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the partial headers
            Dim partialText As String = mf.FetchClient.PartialBodySection(1, FetchClient.BodySectionHeader, 0, 100, IndexType.Ordinal, True)
             
            Console.WriteLine(partialText)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal or Unique Id message number.</param>
            <param name="section">BodySection string or BodyStructure.BodySectionId value.</param>
            <param name="startIndex">Start index to begin reading the message.</param>
            <param name="length">Length of the characters to retrieve.</param>
            <param name="indexType">
            Ordinal or UniqueId index.
            </param>
            <param name="markAsRead">If True, marks the message as being read.</param>
            <remarks>
            If the bodysection is null, the entire message is returned.
            <para>
            If the startIndex and length are both less than zero, full body will also be returned.
            </para>
            </remarks>
        </member>
        <member name="M:aspNetIMAP.FetchClient.PartialBodySections(System.String,System.String,System.Int32,System.Int32,aspNetIMAP.IndexType,System.Boolean)">
            <summary>Retrieves partial text for a given message.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the partial headers for all of the messages
            string[] partialTexts= mf.FetchClient.PartialBodySections( "1:*", FetchClient.BodySectionHeader, 0,100, IndexType.Ordinal, true );
             
            for( int i=0;i&lt;partialTexts.Length;i++)
            {
                Console.WriteLine( "Message number {0}", i );
                Console.WriteLine( partialTexts[ i ] );
                Console.WriteLine();
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the partial headers for all of the messages
            Dim partialTexts As String() = mf.FetchClient.PartialBodySections("1:*", FetchClient.BodySectionHeader, 0, 100, IndexType.Ordinal, True)
             
            Dim i As Integer
            For i = 0 To partialTexts.Length - 1
               Console.WriteLine("Message number {0}", i)
               Console.WriteLine(partialTexts(i))
               Console.WriteLine()
            Next i
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP formatted string set of messages.</param>
            <param name="section">BodySection string or BodyStructure.BodySectionId value.</param>
            <param name="startIndex">Start index to begin reading the message.</param>
            <param name="length">Length of the characters to retrieve.</param>
            <param name="indexType">
            Ordinal or UniqueId index.
            </param>
            <param name="markAsRead">If True, marks the message as being read.</param>
            <remarks>
            If the bodysection is null, the entire message is returned.
            </remarks>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Envelope(System.Int32)">
            <summary>
            Retrieves envelope data about the message.
            </summary>
            <returns>An evelope of the message.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
            Envelope env = mf.FetchClient.Envelope(1);
             
            Console.WriteLine( env.ToString() );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
            Dim env As Envelope = mf.FetchClient.Envelope(1)
             
            Console.WriteLine(env.ToString())
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The message number</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Envelope(System.Int32,aspNetIMAP.IndexType)">
            <summary>Retrieves envelope data about the message.</summary>
            <returns>An evelope of the message.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
            Envelope env = mf.FetchClient.Envelope(1, IndexType.Ordinal);
             
            Console.WriteLine( env.ToString() );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
            Dim env As Envelope = mf.FetchClient.Envelope(1, IndexType.Ordinal)
             
            Console.WriteLine(env.ToString())
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The message number to retrieve.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Envelope">
            <summary>Retrieves an array of envelope data of all of the messages..</summary>
            <returns>An array of envelopes.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
            Envelope[] envelopes = mf.FetchClient.Envelope();
             
            foreach( Envelope env in envelopes )
            {
                Console.WriteLine( env.ToString() );
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
            </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
            Dim envelopes As Envelope() = mf.FetchClient.Envelope()
             
            Dim env As Envelope
            For Each env In  envelopes
               Console.WriteLine(env.ToString())
            Next env
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Envelope(System.String)">
            <summary>Retrieves an array of envelopes for the given message set.</summary>
            <returns>An array of envelopes.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
            Envelope env = mf.FetchClient.Envelope("1:3");
             
            Console.WriteLine( env.ToString() );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
            Dim env As Envelope = mf.FetchClient.Envelope("1:3")
             
            Console.WriteLine(env.ToString())
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP formatted string set of messages.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Envelope(System.String,aspNetIMAP.IndexType)">
            <summary>Retrieves an array of envelopes for the given message set.</summary>
            <returns>An array of envelopes.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
            Envelope env = mf.FetchClient.Envelope("1:3", IndexType.Ordinal);
             
            Console.WriteLine( env.ToString() );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
            Dim env As Envelope = mf.FetchClient.Envelope("1:3", IndexType.Ordinal)
             
            Console.WriteLine(env.ToString())
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP formatted string set of messages.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Fast(System.Int32,aspNetIMAP.IndexType)">
            <summary>Returns the internal date, flags, and size of the message.</summary>
            <remarks>
            The FastItem is a quick an efficient way of obtaining some basic information
            about a message. In a single IMAP command, all of this information can be determined
            for a single message. It is the equivalent of querying the message for three different
            pieces of information, in a single command.
            </remarks>
            <example>
            	<code lang="C#" title="FastItem Demo">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //get the information about the first message
            FastItem item = mf.FetchClient.Fast( 1, IndexType.Ordinal );
             
            imap.Disconnect();
             
            //write out some informtion about the message
             
            //size
            Console.WriteLine( "Message size: {0}", item.MessageSize );
             
            //message date as a string
            Console.WriteLine( "String date: {0}", item.InternalDate);
             
            //message date as a .NET DateTime
            Console.WriteLine( "DateTime: {0}", item.Date.ToLongDateString() );
             
            //message flags
            Console.WriteLine( "Flags: {0}", item.Flags.ToString() );
             
            //the complete layout of the FastItem
            Console.WriteLine( item.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="FastItem Demo">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'get the information about the first message
            Dim item As FastItem = mf.FetchClient.Fast(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out some informtion about the message
            'size
            Console.WriteLine("Message size: {0}", item.MessageSize)
             
            'message date as a string
            Console.WriteLine("String date: {0}", item.InternalDate)
             
            'message date as a .NET DateTime
            Console.WriteLine("DateTime: {0}", item.Date.ToLongDateString())
             
            'message flags
            Console.WriteLine("Flags: {0}", item.Flags.ToString())
             
            'the complete layout of the FastItem
            Console.WriteLine(item.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The message number to retrieve.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Fast(System.String,aspNetIMAP.IndexType)">
            <summary>Returns an ArrayList of FastItems.</summary>
            <remarks>
            The FastItem is a quick an efficient way of obtaining some basic information
            about a message. In a single IMAP command, all of this information can be determined
            for a single message. It is the equivalent of querying the message for three different
            pieces of information, in a single command.
            </remarks>
            <example>
            	<code lang="C#" title="FastItem Demo">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //get the information about the first message
            ArrayList items = mf.FetchClient.Fast( "1:3", IndexType.Ordinal );
             
            imap.Disconnect();
             
            //write out some informtion about the message
             
            for( int i=0;i&lt;items.Count;i++)
            {
                FastItem item = (FastItem)items[ i ];
                //size
                Console.WriteLine( "Message size: {0}", item.MessageSize );
             
                //message date as a string
                Console.WriteLine( "String date: {0}", item.InternalDate);
             
                //message date as a .NET DateTime
                Console.WriteLine( "DateTime: {0}", item.Date.ToLongDateString() );
             
                //message flags
                Console.WriteLine( "Flags: {0}", item.Flags.ToString() );
             
                //the complete layout of the FastItem
                Console.WriteLine( item.ToString() );
            }
            Console.WriteLine( "Done" );
            Console.ReadLine();
            </code>
            	<code lang="VB.NET" title="FastItem Demo">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'get the information about the first message
            Dim items As ArrayList = mf.FetchClient.Fast("1:3", IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out some informtion about the message
            Dim i As Integer
            For i = 0 To items.Count - 1
               Dim item As FastItem = CType(items(i), FastItem)
               'size
               Console.WriteLine("Message size: {0}", item.MessageSize)
               
               'message date as a string
               Console.WriteLine("String date: {0}", item.InternalDate)
               
               'message date as a .NET DateTime
               Console.WriteLine("DateTime: {0}", item.Date.ToLongDateString())
               
               'message flags
               Console.WriteLine("Flags: {0}", item.Flags.ToString())
               
               'the complete layout of the FastItem
               Console.WriteLine(item.ToString())
            Next i
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP formatted string set of messages.</param>
            <param name="indexType">The message number to retrieve.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Headers(System.Int32)">
            <summary>Returns the headers, as a string, for a message.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            string headers = mf.FetchClient.Headers( 1 );
             
            Console.WriteLine( headers );
             
            imap.Disconnect();
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim headers As String = mf.FetchClient.Headers(1)
             
            Console.WriteLine(headers)
             
            imap.Disconnect()
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal index message number.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Headers(System.Int32,aspNetIMAP.IndexType)">
            <summary>Returns the headers, as a string, for a message.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            string headers = mf.FetchClient.Headers( 1, IndexType.Ordinal );
             
            Console.WriteLine( headers );
             
            imap.Disconnect();
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim headers As String = mf.FetchClient.Headers(1,IndexType.Ordinal)
             
            Console.WriteLine(headers)
             
            imap.Disconnect()
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Message number to retrieve.</param>
            <param name="indexType">Ordinal index or Unique Id.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Headers(System.Int32,aspNetIMAP.IndexType,System.Boolean)">
            <summary>
            Returns the headers for a given message.
            </summary>
            <summary>Returns the headers, as a string, for a message.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            string headers = mf.FetchClient.Headers( 1, IndexType.Ordinal, true );
             
            Console.WriteLine( headers );
             
            imap.Disconnect();
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim headers As String = mf.FetchClient.Headers(1,IndexType.Ordinal, True)
             
            Console.WriteLine(headers)
             
            imap.Disconnect()
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Message number to retrieve.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
            <param name="markAsRead">Marks the message as being read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Headers">
            <summary>Returns a string array of all the headers.</summary>
            <returns>A string array of headers.</returns>
            <remarks>
            <para>
            Each individual string is a complete list of headers for an individual
            message.
            </para>
            <para>
            
            </para>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            string[] headerArray = mf.FetchClient.Headers();
            foreach( string headers in headerArray )
            {
                Console.WriteLine( headers );
             
            }
             
            imap.Disconnect();
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim headerArray As String() = mf.FetchClient.Headers()
            Dim headers As String
            For Each headers In  headerArray
               Console.WriteLine(headers)
            Next headers 
             
            imap.Disconnect()
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Headers(System.String,aspNetIMAP.IndexType)">
            <summary>Returns a string array of all the headers.</summary>
            <returns>A string array of headers.</returns>
            <remarks>
            Each individual string is a complete list of headers for an individual
            message.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            string[] headerArray = mf.FetchClient.Headers("1:3", IndexType.Ordinal);
            foreach( string headers in headerArray )
            {
                Console.WriteLine( headers );
             
            }
             
            imap.Disconnect();
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim headerArray As String() = mf.FetchClient.Headers("1:3", IndexType.Ordinal)
            Dim headers As String
            For Each headers In  headerArray
               Console.WriteLine(headers)
            Next headers 
             
            imap.Disconnect()
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP formatted string set of messages.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Headers(System.String,aspNetIMAP.IndexType,System.Boolean)">
            <summary>Returns a string array of all the headers.</summary>
            <returns>A string array of headers</returns>
            <remarks>
            Each individual string is a complete list of headers for an individual
            message.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            string[] headerArray = mf.FetchClient.Headers("1:3", IndexType.Ordinal, true);
            foreach( string headers in headerArray )
            {
                Console.WriteLine( headers );
             
            }
             
            imap.Disconnect();
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim headerArray As String() = mf.FetchClient.Headers("1:3", IndexType.Ordinal, true)
            Dim headers As String
            For Each headers In  headerArray
               Console.WriteLine(headers)
            Next headers 
             
            imap.Disconnect()
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP formatted string set of messages.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
            <param name="markAsRead">Marks the message as being read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.HeaderTable(System.String,aspNetIMAP.IndexType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Downloads the headers of a message to a DataTable</summary>
            <remarks>
            	<para>If checkForSpam is set to true, additional network calls will be made to see
                if this message came from a BlackListed DNS server. The FetchClient will use the
                IMAP.BlackListChecker object for checking against BlackListed DNS entries.</para>
            	<para>If includeFlags is set to true, additional network calls are made to the IMAP
                server to determine the Flag values on each message. This will result in an
                additional delay, depending upon the speed of your network and servers.</para>
            	<para>The DataTable returned from this method has the following columns:</para>
            	<para>1. Int32 RowId -- This is the row number in the DataTable.<br/>
                2. String Headers -- The raw headers of the message.<br/>
                3. String FromName -- The friendly From Name of the FromAddress.<br/>
                4. String FromAddress -- The email address the message was sent from.<br/>
                5. String To -- The 'To' address header.<br/>
                6. String CC -- The 'CC' address header.<br/>
                7. String Subject -- The 'Subject' address header.<br/>
                8. String RawDate -- The 'Date' address header.<br/>
                9. String ContentType -- The 'type/subtype' of the Content-Type header.<br/>
                10. Boolean BlackListed -- If checking for spam, the results are found in this
                column.<br/>
                11. String FlagString -- If including the flags, a space separated list of flags
                can be found here.</para>
            </remarks>
            <example>
            	<code lang="C#">
            private void Page_Load(object sender, System.EventArgs e)
            {
                IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test", true );
             
                MailFolder mf = imap.SelectInbox();
             
                //grab the first 10 messages
                DataTable headerTable = mf.FetchClient.HeaderTable( "1:10", IndexType.Ordinal, false, true, true, true, true);
             
                DataGrid dg = new DataGrid();
                dg.DataSource = headerTable;
                dg.DataBind();
                Page.Controls.Add( dg );
             
                imap.Disconnect();
            }
                </code>
            	<code lang="VB.NET">
            Private Sub Page_Load(sender As Object, e As System.EventArgs)
               Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test", True)
               
               Dim mf As MailFolder = imap.SelectInbox()
               
               'grab the first 10 messages
               Dim headerTable As DataTable = mf.FetchClient.HeaderTable("1:10", IndexType.Ordinal, False, True, True, True, True)
               
               Dim dg As New DataGrid()
               dg.DataSource = headerTable
               dg.DataBind()
               Page.Controls.Add(dg)
               
               imap.Disconnect()
            End Sub 'Page_Load
                </code>
            </example>
            <param name="messageSet">IMAP message set</param>
            <param name="indexType">Ordinal or UniqueId Index</param>
            <param name="markAsRead">If true, marks the message as read.</param>
            <param name="htmlEncode">HTML Encodes the DataTable contents, for web safe viewing.</param>
            <param name="throwException">Throw any exception, while parsing the individual headers.</param>
            <param name="checkForSpam">
            Checks each of the headers to see if they came from a Black Listed DNS
            server.
            </param>
            <param name="includeFlags">Include any message flags, with the headers.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.HeaderTable(System.String,aspNetIMAP.IndexType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Downloads the headers of a message to a DataTable</summary>
            <remarks>
            	<para>If checkForSpam is set to true, additional network calls will be made to see
                if this message came from a BlackListed DNS server. The FetchClient will use the
                IMAP.BlackListChecker object for checking against BlackListed DNS entries.</para>
            	<para>If includeFlags is set to true, additional network calls are made to the IMAP
                server to determine the Flag values on each message. This will result in an
                additional delay, depending upon the speed of your network and servers.</para>
            	<para>The DataTable returned from this method has the following columns:</para>
            	<para>1. Int32 RowId -- This is the row number in the DataTable.<br/>
                2. String Headers -- The raw headers of the message.<br/>
                3. String FromName -- The friendly From Name of the FromAddress.<br/>
                4. String FromAddress -- The email address the message was sent from.<br/>
                5. String To -- The 'To' address header.<br/>
                6. String CC -- The 'CC' address header.<br/>
                7. String Subject -- The 'Subject' address header.<br/>
                8. String RawDate -- The 'Date' address header.<br/>
                9. String ContentType -- The 'type/subtype' of the Content-Type header.<br/>
                10. Boolean BlackListed -- If checking for spam, the results are found in this
                column.<br/>
                11. String FlagString -- If including the flags, a space separated list of flags<br/>
                12. Int32 UniqueId -- The IMAP4 UniqueId for each row. This column is only added if includeUniqueId is true.
                </para>
            </remarks>
            <param name="messageSet">IMAP message set</param>
            <param name="indexType">Ordinal or UniqueId Index</param>
            <param name="markAsRead">If true, marks the message as read.</param>
            <param name="htmlEncode">HTML Encodes the DataTable contents, for web safe viewing.</param>
            <param name="throwException">Throw any exception, while parsing the individual headers.</param>
            <param name="checkForSpam">
            Checks each of the headers to see if they came from a Black Listed DNS
            server.
            </param>
            <param name="includeFlags">Include any message flags, with the headers.</param>
            <param name="includeUniqueId">Include the IMAP Server assigned UniqueId as a column.</param>
            <example>
            	<code lang="C#">
            private void Page_Load(object sender, System.EventArgs e)
            {
                IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test", true );
             
                MailFolder mf = imap.SelectInbox();
             
                //grab the first 10 messages
                DataTable headerTable = mf.FetchClient.HeaderTable( "1:10", IndexType.Ordinal, false, true, true, true, true, true);
             
                DataGrid dg = new DataGrid();
                dg.DataSource = headerTable;
                dg.DataBind();
                Page.Controls.Add( dg );
             
                imap.Disconnect();
            }
                </code>
            	<code lang="VB.NET">
            Private Sub Page_Load(sender As Object, e As System.EventArgs)
               Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test", True)
               
               Dim mf As MailFolder = imap.SelectInbox()
               
               'grab the first 10 messages
               Dim headerTable As DataTable = mf.FetchClient.HeaderTable("1:10", IndexType.Ordinal, False, True, True, True, True, True)
               
               Dim dg As New DataGrid()
               dg.DataSource = headerTable
               dg.DataBind()
               Page.Controls.Add(dg)
               
               imap.Disconnect()
            End Sub 'Page_Load
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Headers(aspNetIMAP.SearchFlags,System.Boolean)">
            <summary>Downloads the headers based upon a SearchFlag</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the headers of the newest messages
            string[] results = mf.FetchClient.Headers( SearchFlags.New, false );
            foreach( string headers in results )
            {
                Console.WriteLine( headers );
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
            </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the headers of the newest messages
            Dim results As String() = mf.FetchClient.Headers(SearchFlags.New, False)
            Dim headers As String
            For Each headers In  results
               Console.WriteLine(headers)
            Next headers
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="flag">A SearchFlag</param>
            <param name="markAsRead">If True, marks the message as being read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.HeadersFiltered(System.String,aspNetIMAP.IndexType,System.String,System.Boolean,System.Boolean)">
            <summary>Filters the headers by a given list of header names.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //filter the headers by their to,cc, subject, and date headers
            string[] headerArray = mf.FetchClient.HeadersFiltered("1:3", IndexType.Ordinal, "to cc subject date", false,  true);
            foreach( string headers in headerArray )
            {
                Console.WriteLine( headers );
             
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'filter the headers by their to,cc, subject, and date headers
            Dim headerArray As String() = mf.FetchClient.HeadersFiltered("1:3", IndexType.Ordinal, "to cc subject date", False, True)
            Dim headers As String
            For Each headers In  headerArray
               Console.WriteLine(headers)
            Next headers 
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP formatted string set of messages.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
            <param name="filterHeadersBy">A space separated list of headers (example: subject to cc date)</param>
            <param name="reverseFilters">
            if true, NOTs the <em>filterHeadersBy</em> string, by returning all the headers
            EXCEPT those listed in <em>filterHeadersBy</em>.
            </param>
            <param name="markAsRead">If true, marks the message as read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.PartialHeaders(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a partial listing of headers, starting a an index, and for a specified
            length.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string subHeaders = mf.FetchClient.PartialHeaders( 1, 0,100);
             
            Console.WriteLine( subHeaders );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim subHeaders As String = mf.FetchClient.PartialHeaders(1, 0, 100)
             
            Console.WriteLine(subHeaders)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal message number.</param>
            <param name="startIndex">Start index to begin reading the headers.</param>
            <param name="length">Length of the headers to retrieve.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.PartialHeaders(System.Int32,System.Int32,System.Int32,aspNetIMAP.IndexType)">
            <summary>
            Returns a partial listing of headers, starting a an index, and for a specified
            length.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string subHeaders = mf.FetchClient.PartialHeaders( 1, 0,100, IndexType.Ordinal);
             
            Console.WriteLine( subHeaders );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim subHeaders As String = mf.FetchClient.PartialHeaders(1, 0, 100, IndexType.Ordinal)
             
            Console.WriteLine(subHeaders)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal or Unique Id message number.</param>
            <param name="startIndex">Start index to begin reading the headers.</param>
            <param name="length">Length of the headers to retrieve.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.PartialHeaders(System.Int32,System.Int32,System.Int32,aspNetIMAP.IndexType,System.Boolean)">
            <summary>
            Returns a partial listing of headers, starting a an index, and for a specified
            length.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string subHeaders = mf.FetchClient.PartialHeaders( 1, 0,100, IndexType.Ordinal, false);
             
            Console.WriteLine( subHeaders );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim subHeaders As String = mf.FetchClient.PartialHeaders(1, 0, 100, IndexType.Ordinal, false)
             
            Console.WriteLine(subHeaders)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal or Unique Id message number.</param>
            <param name="startIndex">Start index to begin reading the headers.</param>
            <param name="length">Length of the headers to retrieve.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
            <param name="markAsRead">If True, marks the message as read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.PartialHeaders(System.Int32,System.Int32)">
            <summary>
            Returns a partial listing of all headers, starting a an index, and for a
            specified length.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string[] partialHeaders= mf.FetchClient.PartialHeaders( 1, 100);
             
            foreach( string s in partialHeaders )
            {
                Console.WriteLine( "----- header ----- " );
                Console.WriteLine( s );
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim partialHeaders As String() = mf.FetchClient.PartialHeaders(1, 100)
             
            Dim s As String
            For Each s In  partialHeaders
               Console.WriteLine("----- header ----- ")
               Console.WriteLine(s)
            Next s
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="startIndex">Start index to begin reading the headers.</param>
            <param name="length">Length of the headers to retrieve.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.PartialHeaders(System.String,System.Int32,System.Int32)">
            <summary>
            Returns a partial listing of headers, starting a an index, and for a specified
            length.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string subHeaders = mf.FetchClient.PartialHeaders( "1:3", 0,100 );
             
            Console.WriteLine( subHeaders );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim subHeaders As String = mf.FetchClient.PartialHeaders( "1:3", 0,100 )
             
            Console.WriteLine(subHeaders)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP formatted ordinal set of messages.</param>
            <param name="startIndex">Index to start reading the headers.</param>
            <param name="length">Length of the headers to retrieve.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.PartialHeaders(System.String,System.Int32,System.Int32,aspNetIMAP.IndexType,System.Boolean)">
            <summary>
            Returns a partial listing of headers, starting a an index, and for a specified
            length.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string subHeaders = mf.FetchClient.PartialHeaders( "1:3", 0,100, IndexType.Ordinal, true );
             
            Console.WriteLine( subHeaders );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim subHeaders As String = mf.FetchClient.PartialHeaders( "1:3", 0,100,, IndexType.Ordinal, true )
             
            Console.WriteLine(subHeaders)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP formatted string set of messages.</param>
            <param name="startIndex">Index to start downloading headers.</param>
            <param name="length">Number of characters to download.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
            <param name="markAsRead">Marks the message as being read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.MessagePlainBody(System.Int32,aspNetIMAP.IndexType,System.Boolean)">
            <summary>
            Returns the first plain text body of the email.
            </summary>
            <param name="messageNumber">Message number (Ordinal or UniqueId)</param>
            <param name="indexType">Ordinal or UniqueId index</param>
            <param name="markAsRead">Mark the message as read.</param>
            <returns>The text of the bodypart.</returns>
            <example>
            <code lang="C#">
            
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            
            imap.Logger.Path = "C:\\imap.log";
            imap.Login("test@example.com", "test"  );
            
            //get the Inbox 
            MailFolder inbox = imap.SelectInbox();
            
            //get the plain text body of the first message
            string plainText = inbox.FetchClient.MessagePlainBody( 1, IndexType.Ordinal, false );
            if( plainText != null )
            {
            	//do something with the plain body
            	Console.WriteLine( plainText);
            }
            
            string htmlText = inbox.FetchClient.MessageHtmlBody( 1, IndexType.Ordinal, false );
            if( htmlText != null )
            {
            	//do something with the html body
            	Console.WriteLine( htmlText);
            }
            
            //first check for a Html body part, if that doesn't exist, return the plain text part
            string body = inbox.FetchClient.MessageBody( 1, IndexType.Ordinal, false, "text/html,text/plain" );
            if( body != null )
            {
            	//do something with the body 
            	Console.WriteLine( body );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            
            imap.Logger.Path = "C:\imap.log"
            imap.Login("test@example.com", "test")
            
            'get the Inbox 
            Dim inbox As MailFolder = imap.SelectInbox()
            
            'get the plain text body of the first message
            Dim plainText As String = inbox.FetchClient.MessagePlainBody(1, IndexType.Ordinal, False)
            If Not (plainText Is Nothing) Then
               'do something with the plain body
               Console.WriteLine(plainText)
            End If
            
            Dim htmlText As String = inbox.FetchClient.MessageHtmlBody(1, IndexType.Ordinal, False)
            If Not (htmlText Is Nothing) Then
               'do something with the html body
               Console.WriteLine(htmlText)
            End If
            
            'first check for a Html body part, if that doesn't exist, return the plain text part
            Dim body As String = inbox.FetchClient.MessageBody(1, IndexType.Ordinal, False, "text/html,text/plain")
            If Not (body Is Nothing) Then
               'do something with the body 
               Console.WriteLine(body)
            End If
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FetchClient.MessageHtmlBody(System.Int32,aspNetIMAP.IndexType,System.Boolean)">
            <summary>
            Returns the first Html text body of the email.
            </summary>
            <param name="messageNumber">Message number (Ordinal or UniqueId)</param>
            <param name="indexType">Ordinal or UniqueId index</param>
            <param name="markAsRead">Mark the message as read.</param>
            <returns>The text of the bodypart.</returns>
            <example>
            <code lang="C#">
            
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            
            imap.Logger.Path = "C:\\imap.log";
            imap.Login("test@example.com", "test"  );
            
            //get the Inbox 
            MailFolder inbox = imap.SelectInbox();
            
            //get the plain text body of the first message
            string plainText = inbox.FetchClient.MessagePlainBody( 1, IndexType.Ordinal, false );
            if( plainText != null )
            {
            	//do something with the plain body
            	Console.WriteLine( plainText);
            }
            
            string htmlText = inbox.FetchClient.MessageHtmlBody( 1, IndexType.Ordinal, false );
            if( htmlText != null )
            {
            	//do something with the html body
            	Console.WriteLine( htmlText);
            }
            
            //first check for a Html body part, if that doesn't exist, return the plain text part
            string body = inbox.FetchClient.MessageBody( 1, IndexType.Ordinal, false, "text/html,text/plain" );
            if( body != null )
            {
            	//do something with the body 
            	Console.WriteLine( body );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            
            imap.Logger.Path = "C:\imap.log"
            imap.Login("test@example.com", "test")
            
            'get the Inbox 
            Dim inbox As MailFolder = imap.SelectInbox()
            
            'get the plain text body of the first message
            Dim plainText As String = inbox.FetchClient.MessagePlainBody(1, IndexType.Ordinal, False)
            If Not (plainText Is Nothing) Then
               'do something with the plain body
               Console.WriteLine(plainText)
            End If
            
            Dim htmlText As String = inbox.FetchClient.MessageHtmlBody(1, IndexType.Ordinal, False)
            If Not (htmlText Is Nothing) Then
               'do something with the html body
               Console.WriteLine(htmlText)
            End If
            
            'first check for a Html body part, if that doesn't exist, return the plain text part
            Dim body As String = inbox.FetchClient.MessageBody(1, IndexType.Ordinal, False, "text/html,text/plain")
            If Not (body Is Nothing) Then
               'do something with the body 
               Console.WriteLine(body)
            End If
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FetchClient.MessageBody(System.Int32,aspNetIMAP.IndexType,System.Boolean,System.String)">
            <summary>
            Returns the first body part of the email as specified by contentTypes.
            </summary>
            <param name="messageNumber">Message number (Ordinal or UniqueId)</param>
            <param name="indexType">Ordinal or UniqueId index</param>
            <param name="markAsRead">Mark the message as read.</param>
            <returns>The text of the bodypart.</returns>
            <param name="contentTypes">This can be a single content-type value, or values seperated by comma.</param>
            <remarks>This method will search the various bodies for the first conent-type found. For example, if contentTypes = "html/text", the first html body part will be returned. However, if 
            contentTypes = "html/text,plain/text" is used, the message will be searched for the first Html part. If no Html part is found, the message will be searched for a plain/text part, and if it is found it will
            be returned. 
            <para>If no body part matching the contentTypes is found, null (Nothing in VB) is returned.</para>
            </remarks>
            <example>
            <code lang="C#">
            
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            
            imap.Logger.Path = "C:\\imap.log";
            imap.Login("test@example.com", "test"  );
            
            //get the Inbox 
            MailFolder inbox = imap.SelectInbox();
            
            //get the plain text body of the first message
            string plainText = inbox.FetchClient.MessagePlainBody( 1, IndexType.Ordinal, false );
            if( plainText != null )
            {
            	//do something with the plain body
            	Console.WriteLine( plainText);
            }
            
            string htmlText = inbox.FetchClient.MessageHtmlBody( 1, IndexType.Ordinal, false );
            if( htmlText != null )
            {
            	//do something with the html body
            	Console.WriteLine( htmlText);
            }
            
            //first check for a Html body part, if that doesn't exist, return the plain text part
            string body = inbox.FetchClient.MessageBody( 1, IndexType.Ordinal, false, "text/html,text/plain" );
            if( body != null )
            {
            	//do something with the body 
            	Console.WriteLine( body );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            
            imap.Logger.Path = "C:\imap.log"
            imap.Login("test@example.com", "test")
            
            'get the Inbox 
            Dim inbox As MailFolder = imap.SelectInbox()
            
            'get the plain text body of the first message
            Dim plainText As String = inbox.FetchClient.MessagePlainBody(1, IndexType.Ordinal, False)
            If Not (plainText Is Nothing) Then
               'do something with the plain body
               Console.WriteLine(plainText)
            End If
            
            Dim htmlText As String = inbox.FetchClient.MessageHtmlBody(1, IndexType.Ordinal, False)
            If Not (htmlText Is Nothing) Then
               'do something with the html body
               Console.WriteLine(htmlText)
            End If
            
            'first check for a Html body part, if that doesn't exist, return the plain text part
            Dim body As String = inbox.FetchClient.MessageBody(1, IndexType.Ordinal, False, "text/html,text/plain")
            If Not (body Is Nothing) Then
               'do something with the body 
               Console.WriteLine(body)
            End If
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FetchClient.MessageAsText(System.Int32)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            //fetch the first message of the inbox
            MailFolder mf = imap.SelectInbox();
            string text = mf.FetchClient.MessageAsText( 1 );
             
            Console.WriteLine( text );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            'fetch the first message of the inbox
            Dim mf As MailFolder = imap.SelectInbox()
            Dim [text] As String = mf.FetchClient.MessageAsText(1)
             
            Console.WriteLine([text])
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Retrieves the complete text of the message.</summary>
            <param name="messageNumber">Ordinal index message number.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.MessageAsText(System.Int32,aspNetIMAP.IndexType)">
            <summary>Retrieves the complete text of the message as a string.</summary>
            <returns>The message as a string.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            //fetch the first message of the inbox
            MailFolder mf = imap.SelectInbox();
            string text = mf.FetchClient.MessageAsText( 1, IndexType.Ordinal );
             
            Console.WriteLine( text );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            'fetch the first message of the inbox
            Dim mf As MailFolder = imap.SelectInbox()
            Dim [text] As String = mf.FetchClient.MessageAsText(1, IndexType.Ordinal)
             
            Console.WriteLine([text])
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Retrieves the complete text of the message.</summary>
            <param name="messageNumber">The message number to retrieve.</param>
            <param name="indexType">The type of index applied against messageNumber.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.MessageAsText(System.Int32,aspNetIMAP.IndexType,System.Boolean)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            //fetch the first message of the inbox
            MailFolder mf = imap.SelectInbox();
            string text = mf.FetchClient.MessageAsText( 1, IndexType.Ordinal, true );
             
            Console.WriteLine( text );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            'fetch the first message of the inbox
            Dim mf As MailFolder = imap.SelectInbox()
            Dim [text] As String = mf.FetchClient.MessageAsText(1, IndexType.Ordinal, True)
             
            Console.WriteLine([text])
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Retrieves the complete text of the message.</summary>
            <param name="messageNumber">The message number to retrieve.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
            <param name="markAsRead">Marks the message as being read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Message(System.Int32,aspNetIMAP.IndexType,System.Boolean)">
            <summary>Download a message as a MimeMessage object.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the first message, and display the main part
            MimeMessage mime = mf.FetchClient.Message( 1, IndexType.Ordinal, false );
            Console.WriteLine( mime.MainBody );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the first message, and display the main part
            Dim mime As MimeMessage = mf.FetchClient.Message(1, IndexType.Ordinal, False)
            Console.WriteLine(mime.MainBody)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal or UniqueId index number.</param>
            <param name="indexType">Ordinal or UniqueId</param>
            <param name="markAsRead">If True, marks a message as being read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.MessagesAsText">
            <summary>Retrieves all of the messages as an Array.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            //fetch the first message of the inbox
            MailFolder mf = imap.SelectInbox();
            string[] messages = mf.FetchClient.MessagesAsText();
             
            foreach( string s in messages )
            {
                Console.WriteLine( s );
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            'fetch the first message of the inbox
            Dim mf As MailFolder = imap.SelectInbox()
            Dim messages As String() = mf.FetchClient.MessagesAsText()
             
            Dim s As String
            For Each s In  messages
               Console.WriteLine(s)
            Next s
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FetchClient.MessagesAsText(System.String)">
            <summary>Retrieves a set of messages, as an Array.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            //fetch the first message of the inbox
            MailFolder mf = imap.SelectInbox();
            string[] messages = mf.FetchClient.MessagesAsText("1:3");
             
            foreach( string s in messages )
            {
                Console.WriteLine( s );
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            'fetch the first message of the inbox
            Dim mf As MailFolder = imap.SelectInbox()
            Dim messages As String() = mf.FetchClient.MessagesAsText("1:3")
             
            Dim s As String
            For Each s In  messages
               Console.WriteLine(s)
            Next s
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">A set of ordinal index message numbers.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.MessagesAsText(System.String,aspNetIMAP.IndexType)">
            <summary>
            A string array of messages.
            </summary>
            <returns>String array of messages.</returns>
            <summary>Retrieves a set of messages, as an Array.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            //fetch the first message of the inbox
            MailFolder mf = imap.SelectInbox();
            string[] messages = mf.FetchClient.MessagesAsText("1:3", IndexType.Ordinal);
             
            foreach( string s in messages )
            {
                Console.WriteLine( s );
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            'fetch the first message of the inbox
            Dim mf As MailFolder = imap.SelectInbox()
            Dim messages As String() = mf.FetchClient.MessagesAsText("1:3", IndexType.Ordinal)
             
            Dim s As String
            For Each s In  messages
               Console.WriteLine(s)
            Next s
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP set of messages.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.MessagesAsText(System.String,aspNetIMAP.IndexType,System.Boolean)">
            <summary>A string array of messages.</summary>
            <returns>String array of messages.</returns>
            <summary>Retrieves a set of messages, as an Array.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            //fetch the first message of the inbox
            MailFolder mf = imap.SelectInbox();
            string[] messages = mf.FetchClient.MessagesAsText("1:3", IndexType.Ordinal, true);
             
            foreach( string s in messages )
            {
                Console.WriteLine( s );
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            'fetch the first message of the inbox
            Dim mf As MailFolder = imap.SelectInbox()
            Dim messages As String() = mf.FetchClient.MessagesAsText("1:3", IndexType.Ordinal, True)
             
            Dim s As String
            For Each s In  messages
               Console.WriteLine(s)
            Next s
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP formatted string set of messages.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
            <param name="markAsRead">If True, marks a message as Read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.MessagesAsText(aspNetIMAP.SearchFlags,System.Boolean)">
            <summary>Downloads a set of messages, based upon the SearchFlags.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //grab only the newest messages
            string[] results = mf.FetchClient.MessagesAsText( SearchFlags.New, false );
            foreach( string messageText in results )
            {
                Console.WriteLine( messageText );
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab only the newest messages
            Dim results As String() = mf.FetchClient.MessagesAsText(SearchFlags.New, False)
            Dim messageText As String
            For Each messageText In  results
               Console.WriteLine(messageText)
            Next messageText
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="flag">A SearchFlags parameter.</param>
            <param name="markAsRead">If True, marks the message as read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Messages(System.String,aspNetIMAP.IndexType,System.Boolean)">
            <summary>Downloads a set of messages as a MimePartCollection.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //grab the first 10 messages
            MimePartCollection mpc = mf.FetchClient.Messages( "1:10", IndexType.Ordinal, false );
             
            for( int i=0;i&lt;mpc.Count;i++)
            {
                MimeMessage m = (MimeMessage)mpc[ i ];
                Console.WriteLine( m.MainBody );
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'grab the first 10 messages
            Dim mpc As MimePartCollection = mf.FetchClient.Messages("1:10", IndexType.Ordinal, False)
             
            Dim i As Integer
            For i = 0 To mpc.Count - 1
               Dim m As MimeMessage = CType(mpc(i), MimeMessage)
               Console.WriteLine(m.MainBody)
            Next i
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP formatted message set.</param>
            <param name="indexType">Ordinal or UniqueId index type.</param>
            <param name="markAsRead">If True, marks the message as read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.MessageTable(System.String,aspNetIMAP.IndexType,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Downloads the messages to a DataTable</summary>
            <remarks>
            	<para>If checkForSpam is set to true, additional network calls will be made to see
                if this message came from a BlackListed DNS server. The FetchClient will use the
                IMAP.BlackListChecker object for checking against BlackListed DNS entries.</para>
            	<para>If includeFlags is set to true, additional network calls are made to the IMAP
                server to determine the Flag values on each message. This will result in an
                additional delay, depending upon the speed of your network and servers.</para>
            	<para>The DataTable returned from this method has the following columns:</para>
            	<para>1. Int32 RowId -- The row number in the DataTable.<br/>
                2. String Headers -- All of the headers<br/>
                3. String Message-- All of the message<br/>
                4. String FromName -- The 'Name' part of the FROM header<br/>
                5. String FromAddress -- the 'Address' part of the FROM header<br/>
                6. String To -- The 'To' address header<br/>
                7. String CC -- The 'CC' address header<br/>
                8. String Subject -- The 'Subject' address header<br/>
                9. String Date -- The 'Date' address header<br/>
                10. String ContentType -- The 'type/subtype' of the Content-Type header<br/>
                11. String MainBody-- If the message is a MultiPart email, the richest formatted
                part is returned.<br/>
                12. String CompleteBody -- The complete body of the email, included all body parts,
                attachments, and additional mime-parts.<br/>
                13. Boolean BlackListed -- If checking for spam, the results are found in this
                column.<br/>
                14. String FlagString -- If including the flags, a space separated list of flags
                can be found here.</para>
            </remarks>
            <example>
            	<code lang="C#">
            private void Page_Load(object sender, System.EventArgs e)
            {
                IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test", true );
             
                MailFolder mf = imap.SelectInbox();
             
                //grab the first 10 messages
                DataTable headerTable = mf.FetchClient.MessageTable( "1:10", IndexType.Ordinal, false, true, true, true );
             
                DataGrid dg = new DataGrid();
                dg.DataSource = headerTable;
                dg.DataBind();
                Page.Controls.Add( dg );
             
                imap.Disconnect();
            }
                </code>
            	<code lang="VB.NET">
            Private Sub Page_Load(sender As Object, e As System.EventArgs)
               Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test", True)
               
               Dim mf As MailFolder = imap.SelectInbox()
               
               'grab the first 10 messages
               Dim headerTable As DataTable = mf.FetchClient.MessageTable("1:10", IndexType.Ordinal, False, True, True, True)
               
               Dim dg As New DataGrid()
               dg.DataSource = headerTable
               dg.DataBind()
               Page.Controls.Add(dg)
               
               imap.Disconnect()
            End Sub 'Page_Load
                </code>
            </example>
            <param name="messageSet">An IMAP formatted message set.</param>
            <param name="indexType">Ordinal or UniqueId Index</param>
            <param name="markAsRead">If True, Marks a message as read.</param>
            <param name="throwException">If True, throws an internal parsing exceptions.</param>
            <param name="checkForSpam">
            If True, additional network calls are made to perform DNS BlackListing check
            lookups.
            </param>
            <param name="includeFlags">
            If True, additional network calls are made to retrieve the flags of each
            message.
            </param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.MessageTable(System.String,aspNetIMAP.IndexType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Downloads the messages to a DataTable</summary>
            <remarks>
            	<para>If checkForSpam is set to true, additional network calls will be made to see
                if this message came from a BlackListed DNS server. The FetchClient will use the
                IMAP.BlackListChecker object for checking against BlackListed DNS entries.</para>
            	<para>If includeFlags is set to true, additional network calls are made to the IMAP
                server to determine the Flag values on each message. This will result in an
                additional delay, depending upon the speed of your network and servers.</para>
            	<para>The DataTable returned from this method has the following columns:</para>
            	<para>1. Int32 RowId -- The row number in the DataTable.<br/>
                2. String Headers -- All of the headers<br/>
                3. String Message-- All of the message<br/>
                4. String FromName -- The 'Name' part of the FROM header<br/>
                5. String FromAddress -- the 'Address' part of the FROM header<br/>
                6. String To -- The 'To' address header<br/>
                7. String CC -- The 'CC' address header<br/>
                8. String Subject -- The 'Subject' address header<br/>
                9. String Date -- The 'Date' address header<br/>
                10. String ContentType -- The 'type/subtype' of the Content-Type header<br/>
                11. String MainBody-- If the message is a MultiPart email, the richest formatted
                part is returned.<br/>
                12. String CompleteBody -- The complete body of the email, included all body parts,
                attachments, and additional mime-parts.<br/>
                13. Boolean BlackListed -- If checking for spam, the results are found in this
                column.<br/>
                14. String FlagString -- If including the flags, a space separated list of flags
                15. Int32 UnqiueId -- If including UnqiueId, this column contains the IMAP Server assigned Unique Id value. Note: This column is only included if includeUniqueId is true;
                </para>
            </remarks>
            <param name="messageSet">An IMAP formatted message set.</param>
            <param name="indexType">Ordinal or UniqueId Index</param>
            <param name="markAsRead">If True, Marks a message as read.</param>
            <param name="throwException">If True, throws an internal parsing exceptions.</param>
            <param name="checkForSpam">
            If True, additional network calls are made to perform DNS BlackListing check
            lookups.
            </param>
            <param name="includeFlags">
            If True, additional network calls are made to retrieve the flags of each
            message.
            </param>
            <param name="includeUniqueId">Include the IMAP Server assigned UniqueId for the message.</param>
            <example>
            	<code lang="C#">
            private void Page_Load(object sender, System.EventArgs e)
            {
                IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test", true );
             
                MailFolder mf = imap.SelectInbox();
             
                //grab the first 10 messages
                DataTable headerTable = mf.FetchClient.MessageTable( "1:10", IndexType.Ordinal, false, true, true, true, true );
             
                DataGrid dg = new DataGrid();
                dg.DataSource = headerTable;
                dg.DataBind();
                Page.Controls.Add( dg );
             
                imap.Disconnect();
            }
                </code>
            	<code lang="VB.NET">
            Private Sub Page_Load(sender As Object, e As System.EventArgs)
               Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test", True)
               
               Dim mf As MailFolder = imap.SelectInbox()
               
               'grab the first 10 messages
               Dim headerTable As DataTable = mf.FetchClient.MessageTable("1:10", IndexType.Ordinal, False, True, True, True, True)
               
               Dim dg As New DataGrid()
               dg.DataSource = headerTable
               dg.DataBind()
               Page.Controls.Add(dg)
               
               imap.Disconnect()
            End Sub 'Page_Load
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FetchClient.PartialMessageAsText(System.String,System.Int32,System.Int32,aspNetIMAP.IndexType,System.Boolean)">
            <summary>Retrieves a given length of a message set of messages.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            //fetch the first message of the inbox
            MailFolder mf = imap.SelectInbox();
            string[] partials = mf.FetchClient.PartialMessageAsText("1:3", 0, 100, IndexType.Ordinal, true);
             
            foreach( string s in partials )
            {
                Console.WriteLine( s );
            }
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            'fetch the first message of the inbox
            Dim mf As MailFolder = imap.SelectInbox()
            Dim partials As String() = mf.FetchClient.PartialMessageAsText("1:3", 0, 100, IndexType.Ordinal, True)
             
            Dim s As String
            For Each s In  partials
               Console.WriteLine(s)
            Next s
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP formatted string set of messages.</param>
            <param name="startIndex">
            The zero based index, within the message, to start reading the message
            data.
            </param>
            <param name="length">Number of characters to read.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
            <param name="markAsRead">If True, marks a message as Read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Text(System.Int32)">
            <summary>Retrieves the body text of a message.</summary>
            <remarks>
            Since this text includes everything after the headers, may include boundaries,
            and other mime-part sub headers.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
            string bodyText = mf.FetchClient.Text(1);
             
            Console.WriteLine( bodyText  );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
            </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
            Dim bodyText As String = mf.FetchClient.Text(1)
             
            Console.WriteLine(bodyText)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The message number to retrieve.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Text(System.Int32,aspNetIMAP.IndexType)">
            <summary>Retrieves the body text of a message.</summary>
            <remarks>
            Since this text includes everything after the headers, may include boundaries,
            and other mime-part sub headers.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
            string bodyText = mf.FetchClient.Text(1,IndexType.Ordinal);
             
            Console.WriteLine( bodyText  );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
            </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
            Dim bodyText As String = mf.FetchClient.Text(1,IndexType.Ordinal)
             
            Console.WriteLine(bodyText)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The message number to retrieve.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Text(System.Int32,aspNetIMAP.IndexType,System.Boolean)">
            <summary>Retrieves the body text of a message.</summary>
            <remarks>
            Since this text includes everything after the headers, may include boundaries,
            and other mime-part sub headers.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
            string bodyText = mf.FetchClient.Text(1,IndexType.Ordinal, true);
             
            Console.WriteLine( bodyText  );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
            Dim bodyText As String = mf.FetchClient.Text(1,IndexType.Ordinal, true)
             
            Console.WriteLine(bodyText)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <returns>If True, marks a message as Read.</returns>
            <param name="messageNumber">The message number to retrieve.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
            <param name="markAsRead">If True, marks the message as read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Text">
            <summary>Retrieves all bodies of the email messages, as a string array.</summary>
            <remarks>
            Since this text includes everything after the headers, may include boundaries,
            and other mime-part sub headers.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
            string[] bodies = mf.FetchClient.Text();
             
            foreach( string body in bodies )
            {
                Console.WriteLine( body );
            }
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
            Dim bodies As String() = mf.FetchClient.Text()
             
            Dim body As String
            For Each body In  bodies
               Console.WriteLine(body)
            Next body
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FetchClient.Text(System.String,aspNetIMAP.IndexType,System.Boolean)">
            <summary>Retrieves all bodies of the email messages, as a string array.</summary>
            <remarks>
            Since this text includes everything after the headers, may include boundaries,
            and other mime-part sub headers.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
            string[] bodies = mf.FetchClient.Text("1:3", IndexType.Ordinal, true);
             
            foreach( string body in bodies )
            {
                Console.WriteLine( body );
            }
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
            Dim bodies As String() = mf.FetchClient.Text("1:3", IndexType.Ordinal, True)
             
            Dim body As String
            For Each body In  bodies
               Console.WriteLine(body)
            Next body
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP formatted string set of messages.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
            <param name="markAsRead">If True, marks a message as Read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.PartialText(System.String,System.Int32,System.Int32,aspNetIMAP.IndexType,System.Boolean)">
            <summary>Retrieves a partial amount of body text, starting at a given index.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
            string[] bodies = mf.FetchClient.PartialText( "1:3", 0 , 100, IndexType.Ordinal, true );
             
            foreach( string body in bodies )
            {
                Console.WriteLine( body );
            }
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
            </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
            Dim bodies As String() = mf.FetchClient.PartialText("1:3", 0, 100, IndexType.Ordinal, True)
             
            Dim body As String
            For Each body In  bodies
               Console.WriteLine(body)
            Next body
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP formatted string set of messages.</param>
            <param name="startIndex">The index to start retrieving the character information in the body.</param>
            <param name="length">The number of characters to retrieve.</param>
            <param name="indexType">Ordinal or UniqueId index.</param>
            <param name="markAsRead">If True, marks the message as read.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.ToByteArray(System.String)">
            <summary>Converts any returned IMAP text to a byte array.</summary>
            <remarks>
            The byte array conversion takes place using the same Encoding scheme used during
            the IMAP session transfer.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
            string contents = mf.FetchClient.MessageAsText(1);
             
            byte[] data = mf.FetchClient.ToByteArray( contents );
            Console.WriteLine( data.Length );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
            Dim contents As String = mf.FetchClient.MessageAsText(1)
             
            Dim data As Byte() = mf.FetchClient.ToByteArray(contents)
            Console.WriteLine(data.Length)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="mailContents">Textual contents returned from the IMAP server.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.ToStream(System.String)">
            <summary>Converts any of the IMAP text to a stream</summary>
            <summary>Converts any returned IMAP text to a byte array.</summary>
            <remarks>
            The byte array conversion takes place using the same Encoding scheme used during
            the IMAP session transfer.
            </remarks>
            <param name="mailContents">Textual contents returned from the IMAP server.</param>
        </member>
        <member name="M:aspNetIMAP.FetchClient.WriteToStream(System.String,System.IO.Stream)">
            <summary>Writes IMAP data to a stream.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
            string contents = mf.FetchClient.MessageAsText(1);
             
            //stream the data to disk
            FileStream fs = File.Open( "c:\\temp\\mailcontents.txt", FileMode.CreateNew );
            mf.FetchClient.WriteToStream( contents, fs );
            fs.Flush();
            fs.Close();
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
            Dim contents As String = mf.FetchClient.MessageAsText(1)
             
            'stream the data to disk
            Dim fs As FileStream = File.Open("c:\temp\mailcontents.txt", FileMode.CreateNew)
            mf.FetchClient.WriteToStream(contents, fs)
            fs.Flush()
            fs.Close()
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="mailContents">Textual IMAP data received from the server.</param>
            <param name="stream">Stream to write to.</param>
        </member>
        <member name="P:aspNetIMAP.FetchClient.Folder">
            <summary>
            The parent MailFolder object, used internally, for executing IMAP fetch commands.
            </summary>
        </member>
        <member name="T:aspNetIMAP.Flag">
            <summary>
            Flag object, used for managing message flags.
            </summary>
            <remarks>
            	<para>Flags provide a small set of standard attributes that most clients use. All
                system flags are prefixed with a '\' character. The following is a list of basic
                flags:</para>
            	<para>\answered</para>
            	<para>The \answered flag is set on a message by a client when it sends a reply. A
                client must explicitly set the flag. It is not set by the server, only stored and
                maintained.</para>
            	<para>\deleted</para>
            	<para>The \deleted flag is also set by the client. The client marks the message for
                deletion. Its not until Purge(), commonly known as Expunge, is called that the
                messages are physically removed from the server. See
                <see cref="M:aspNetIMAP.MessageClient.Delete(System.Int32)">Delete()</see>,
                <see cref="M:aspNetIMAP.MessageClient.CancelDelete(System.Int32)">CancelDelete()</see>, and
                <see cref="M:aspNetIMAP.MessageClient.PurgeDeletedMessages">PurgeDeletedMessages()</see>
                for more information.</para>
            	<para>
            		<para>\draft</para>
            		<para>When composing a message, or replying to a message, you may want to
                    suspend editing, or save for a later date. IMAP allows the client to store the
                    message on the server with the \draft flag set. This allows the client to
                    identify the message as a draft for later editing.</para>
            		<para>\flagged</para>
            		<para>A client can mark a message as "important", "flagged", or "marked" by
                    setting the \flagged flag. Users can assign their own meaning to the flag,
                    since unlike the other flags, \flagged has not special semantics.</para>
            		<para>\recent</para>
            		<para>\recent is a slightly more complicated flag than the others. When a new
                    message arrives, the server sets the \recent flag, for the first \client to see
                    it. The \recent flag can be queried  by clients to determine if there are any
                    new messages on the server, since the last time messages were checked.</para>
            		<para>\seen</para>
            		<para>The last flag, is the \seen flag. It is also commonly referred to as the
                    "read" flag, and is set when a message is read. Some methods allow you to read
                    messages without setting the \seen flag. These methods can be found on the
                    <see cref="T:aspNetIMAP.FetchClient">FetchClient</see>, and and mark as
                    message as read by setting the "markAsRead" parameter to true.</para>
            	</para>
            </remarks>
            <example>
            	<code lang="C#" title="Flag code Snippet">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //get the information about the first message
            FastItem item = mf.FetchClient.Fast( 1, IndexType.Ordinal );
             
            imap.Disconnect();
             
            //check out the flags
            FlagCollection fc = item.Flags;
            foreach( Flag f in fc )
            {
                Console.WriteLine( f.FlagType );
                Console.WriteLine( f.Value );
                Console.WriteLine( f.ToString() );
            }
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Flag code Snippet">
            Dim imap As New IMAP4("127.0.0.1")
             
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'get the information about the first message
            Dim item As FastItem = mf.FetchClient.Fast(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'check out the flags
            Dim fc As FlagCollection = item.Flags
            Dim f As Flag
            For Each f In  fc
               Console.WriteLine(f.FlagType)
               Console.WriteLine(f.Value)
               Console.WriteLine(f.ToString())
            Next f
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.Flag.#ctor(System.String)">
            <summary>
            Creates an instance of a Flag object.
            </summary>
            <remarks>
            	<para>Flags provide a small set of standard attributes that most clients user. All
                system flags are prefixed with a '\' character. The following is a list of basic
                flags:</para>
            	<para>\answered</para>
            	<para>The \answered flag is set on a message by a client when it sends a reply. A
                client must explicitly set the flag. It is not set by the server, only stored and
                maintained.</para>
            	<para>\deleted</para>
            	<para>The \deleted flag is also set by the client. The client marks the message for
                deletion. Its not until Purge(), commonly known as Expunge, is called that the
                messages are physically removed from the server. See
                <see cref="M:aspNetIMAP.MessageClient.Delete(System.Int32)">Delete()</see>,
                <see cref="M:aspNetIMAP.MessageClient.CancelDelete(System.Int32)">CancelDelete()</see>, and
                <see cref="M:aspNetIMAP.MessageClient.PurgeDeletedMessages">PurgeDeletedMessages()</see>
                for more information.</para>
            	<para>
            		<para>\draft</para>
            		<para>When composing a message, or replying to a message, you may want to
                    suspend editing, or save for a later date. IMAP allows the client to store the
                    message on the server with the \draft flag set. This allows the client to
                    identify the message as a draft for later editing.</para>
            		<para>\flagged</para>
            		<para>A client can mark a message as "important", "flagged", or "marked" by
                    setting the \flagged flag. Users can assign their own meaning to the flag,
                    since unlike the other flags, \flagged has not special semantics.</para>
            		<para>\recent</para>
            		<para>\recent is a slightly more complicated flag than the others. When a new
                    message arrives, the server sets the \recent flag, for the first \client to see
                    it. The \recent flag can be querried by clients to determine if there are any
                    new messages on the server, since the last time messages were checked.</para>
            		<para>\seen</para>
            		<para>The last flag, is the \seen flag. It is also commonly referred to as the
                    "read" flag, and is set when a message is read. Some methods allow you to read
                    messages without setting the \seen flag. These methods can be found on the
                    <see cref="T:aspNetIMAP.FetchClient">FetchClient</see>, and and mark as
                    message as read by setting the "markAsRead" parameter to true.</para>
            	</para>
            </remarks>
            <example>
            	<code lang="C#" title="Flag code Snippet">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //get the information about the first message
            FastItem item = mf.FetchClient.Fast( 1, IndexType.Ordinal );
             
            imap.Disconnect();
             
            //check out the flags
            FlagCollection fc = item.Flags;
            foreach( Flag f in fc )
            {
                Console.WriteLine( f.FlagType );
                Console.WriteLine( f.Value );
                Console.WriteLine( f.ToString() );
            }
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Flag code Snippet">
            Dim imap As New IMAP4("127.0.0.1")
             
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'get the information about the first message
            Dim item As FastItem = mf.FetchClient.Fast(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'check out the flags
            Dim fc As FlagCollection = item.Flags
            Dim f As Flag
            For Each f In  fc
               Console.WriteLine(f.FlagType)
               Console.WriteLine(f.Value)
               Console.WriteLine(f.ToString())
            Next f
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="flag">A properly formatted IMAP flag</param>
        </member>
        <member name="M:aspNetIMAP.Flag.#ctor(aspNetIMAP.FlagTypes)">
            <summary>
            Builds a Flag object, based upon a FlagType
            </summary>
            <param name="flag">The type of FlagTypes</param>
        </member>
        <member name="M:aspNetIMAP.Flag.ToString">
            <summary>
            Converts the flag type, to a property formatted IMAP flag.
            </summary>
            <returns>Flag as a string</returns>
            <example>
            	<code lang="C#" title="Flag code Snippet">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //get the information about the first message
            FastItem item = mf.FetchClient.Fast( 1, IndexType.Ordinal );
             
            imap.Disconnect();
             
            //check out the flags
            FlagCollection fc = item.Flags;
            foreach( Flag f in fc )
            {
                Console.WriteLine( f.FlagType );
                Console.WriteLine( f.Value );
                Console.WriteLine( f.ToString() );
            }
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Flag code Snippet">
            Dim imap As New IMAP4("127.0.0.1")
             
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'get the information about the first message
            Dim item As FastItem = mf.FetchClient.Fast(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'check out the flags
            Dim fc As FlagCollection = item.Flags
            Dim f As Flag
            For Each f In  fc
               Console.WriteLine(f.FlagType)
               Console.WriteLine(f.Value)
               Console.WriteLine(f.ToString())
            Next f
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.Flag.ConvertToString(aspNetIMAP.FlagTypes[])">
            <example>
            	<code lang="C#" title="SilentOption">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            MessageClient mc = mf.MessageClient;
             
            //set various flags
            string flags = Flag.ConvertToString( FlagTypes.Answered, FlagTypes.Seen );
             
            //get the flag collection with SilentOption.Off
            FlagCollection fc = mc.Mark( 1, flags, IndexType.Ordinal,  SilentOption.Off );
             
            foreach( Flag f in fc )
            {
                Console.WriteLine( f.Value );
            }
             
            //now make the same call with SilentOption.On
            fc = mc.Mark( 1, flags, IndexType.Ordinal,  SilentOption.On);
             
            //no flags will be output, because SilentOption.On
            foreach( Flag f in fc )
            {
                Console.WriteLine( f.Value );
            }
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="SilentOption">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim mc As MessageClient = mf.MessageClient
             
            'set various flags
            Dim flags As String = Flag.ConvertToString(FlagTypes.Answered, FlagTypes.Seen)
             
            'get the flag collection with SilentOption.Off
            Dim fc As FlagCollection = mc.Mark(1, flags, IndexType.Ordinal, SilentOption.Off)
             
            Dim f As Flag
            For Each f In  fc
               Console.WriteLine(f.Value)
            Next f
             
            'now make the same call with SilentOption.On
            fc = mc.Mark(1, flags, IndexType.Ordinal, SilentOption.On)
             
            'no flags will be output, because SilentOption.On
            Dim f As Flag
            For Each f In  fc
               Console.WriteLine(f.Value)
            Next f
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Converts an array of Flags to a flag string.</summary>
            <returns>The list of FlagTypes as an IMAP formatted, server safe string.</returns>
            <param name="flags">A comma delimited list of FlagTypes</param>
        </member>
        <member name="P:aspNetIMAP.Flag.FlagType">
            <summary>
            Type of flag
            </summary>
            <remarks>
            See the <see cref="T:aspNetIMAP.FlagTypes">FlagType</see> enumeration for more
            information.
            </remarks>
            <value>A FlagTypes type.</value>
            <example>
            	<code lang="C#" title="Flag code Snippet">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //get the information about the first message
            FastItem item = mf.FetchClient.Fast( 1, IndexType.Ordinal );
             
            imap.Disconnect();
             
            //check out the flags
            FlagCollection fc = item.Flags;
            foreach( Flag f in fc )
            {
                Console.WriteLine( f.FlagType );
                Console.WriteLine( f.Value );
                Console.WriteLine( f.ToString() );
            }
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Flag code Snippet">
            Dim imap As New IMAP4("127.0.0.1")
             
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'get the information about the first message
            Dim item As FastItem = mf.FetchClient.Fast(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'check out the flags
            Dim fc As FlagCollection = item.Flags
            Dim f As Flag
            For Each f In  fc
               Console.WriteLine(f.FlagType)
               Console.WriteLine(f.Value)
               Console.WriteLine(f.ToString())
            Next f
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.Flag.Value">
            <summary>
            Value of the flag
            </summary>
            <value>String value of the flag.</value>
            <example>
            	<code lang="C#" title="Flag code Snippet">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            //get the information about the first message
            FastItem item = mf.FetchClient.Fast( 1, IndexType.Ordinal );
             
            imap.Disconnect();
             
            //check out the flags
            FlagCollection fc = item.Flags;
            foreach( Flag f in fc )
            {
                Console.WriteLine( f.FlagType );
                Console.WriteLine( f.Value );
                Console.WriteLine( f.ToString() );
            }
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="Flag code Snippet">
            Dim imap As New IMAP4("127.0.0.1")
             
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            'get the information about the first message
            Dim item As FastItem = mf.FetchClient.Fast(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'check out the flags
            Dim fc As FlagCollection = item.Flags
            Dim f As Flag
            For Each f In  fc
               Console.WriteLine(f.FlagType)
               Console.WriteLine(f.Value)
               Console.WriteLine(f.ToString())
            Next f
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="T:aspNetIMAP.FolderInformation">
            <summary>
            A folder's information class.
            </summary>
            <remarks>
            This class provides various folder information in a single network call. This
            object is usually populated by calling
            <see cref="M:aspNetIMAP.MailFolder.Information">MailFolder.Information()</see>
            </remarks>
            <example>
            	<code lang="C#" title="FolderInformation">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            FolderInformation fi = mf.Information();
             
            imap.Disconnect();
             
            //write out the folder information
            Console.WriteLine( "First unseen message:{0}", fi.FirstUnseen );
            Console.WriteLine( "Number of messages in folder:{0}", fi.Messages );
            Console.WriteLine( "Folder name:{0}", fi.Name );
            Console.WriteLine( "Folder path:{0}", fi.Path );
            Console.WriteLine( "Number of recent messages (have the 'recent' flag set):{0}", fi.Recent );
            Console.WriteLine( "The UID that will be assigned to the next message:{0}", fi.UidNext );
            Console.WriteLine( "The unique validity for the mailbox:{0}", fi.UidVAlidity );
             
            //All FolderInformation, nicely formatted
            Console.WriteLine( fi.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="FolderInformation">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim fi As FolderInformation = mf.Information()
             
            imap.Disconnect()
             
            'write out the folder information
            Console.WriteLine("First unseen message:{0}", fi.FirstUnseen)
            Console.WriteLine("Number of messages in folder:{0}", fi.Messages)
            Console.WriteLine("Folder name:{0}", fi.Name)
            Console.WriteLine("Folder path:{0}", fi.Path)
            Console.WriteLine("Number of recent messages (have the 'recent' flag set):{0}", fi.Recent)
            Console.WriteLine("The UID that will be assigned to the next message:{0}", fi.UidNext)
            Console.WriteLine("The unique validity for the mailbox:{0}", fi.UidVAlidity)
             
            'All FolderInformation, nicely formatted
            Console.WriteLine(fi.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.FolderInformation.ToString">
            <summary>
            Returns a nicely formatted string representation of the FolderInformation
            class.
            </summary>
            <example>
            	<code lang="C#" title="FolderInformation">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            FolderInformation fi = mf.Information();
             
            imap.Disconnect();
             
            //write out the folder information
            Console.WriteLine( "First unseen message:{0}", fi.FirstUnseen );
            Console.WriteLine( "Number of messages in folder:{0}", fi.Messages );
            Console.WriteLine( "Folder name:{0}", fi.Name );
            Console.WriteLine( "Folder path:{0}", fi.Path );
            Console.WriteLine( "Number of recent messages (have the 'recent' flag set):{0}", fi.Recent );
            Console.WriteLine( "The UID that will be assigned to the next message:{0}", fi.UidNext );
            Console.WriteLine( "The unique validity for the mailbox:{0}", fi.UidVAlidity );
             
            //All FolderInformation, nicely formatted
            Console.WriteLine( fi.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="FolderInformation">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim fi As FolderInformation = mf.Information()
             
            imap.Disconnect()
             
            'write out the folder information
            Console.WriteLine("First unseen message:{0}", fi.FirstUnseen)
            Console.WriteLine("Number of messages in folder:{0}", fi.Messages)
            Console.WriteLine("Folder name:{0}", fi.Name)
            Console.WriteLine("Folder path:{0}", fi.Path)
            Console.WriteLine("Number of recent messages (have the 'recent' flag set):{0}", fi.Recent)
            Console.WriteLine("The UID that will be assigned to the next message:{0}", fi.UidNext)
            Console.WriteLine("The unique validity for the mailbox:{0}", fi.UidVAlidity)
             
            'All FolderInformation, nicely formatted
            Console.WriteLine(fi.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.FolderInformation.FirstUnseen">
            <summary>
            The number of the first unseen message.
            </summary>
            <example>
            	<code lang="C#" title="FolderInformation">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            FolderInformation fi = mf.Information();
             
            imap.Disconnect();
             
            //write out the folder information
            Console.WriteLine( "First unseen message:{0}", fi.FirstUnseen );
            Console.WriteLine( "Number of messages in folder:{0}", fi.Messages );
            Console.WriteLine( "Folder name:{0}", fi.Name );
            Console.WriteLine( "Folder path:{0}", fi.Path );
            Console.WriteLine( "Number of recent messages (have the 'recent' flag set):{0}", fi.Recent );
            Console.WriteLine( "The UID that will be assigned to the next message:{0}", fi.UidNext );
            Console.WriteLine( "The unique validity for the mailbox:{0}", fi.UidVAlidity );
             
            //All FolderInformation, nicely formatted
            Console.WriteLine( fi.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="FolderInformation">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim fi As FolderInformation = mf.Information()
             
            imap.Disconnect()
             
            'write out the folder information
            Console.WriteLine("First unseen message:{0}", fi.FirstUnseen)
            Console.WriteLine("Number of messages in folder:{0}", fi.Messages)
            Console.WriteLine("Folder name:{0}", fi.Name)
            Console.WriteLine("Folder path:{0}", fi.Path)
            Console.WriteLine("Number of recent messages (have the 'recent' flag set):{0}", fi.Recent)
            Console.WriteLine("The UID that will be assigned to the next message:{0}", fi.UidNext)
            Console.WriteLine("The unique validity for the mailbox:{0}", fi.UidVAlidity)
             
            'All FolderInformation, nicely formatted
            Console.WriteLine(fi.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.FolderInformation.Messages">
            <summary>
            The number of messages in a folder.
            </summary>
            <example>
            	<code lang="C#" title="FolderInformation">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            FolderInformation fi = mf.Information();
             
            imap.Disconnect();
             
            //write out the folder information
            Console.WriteLine( "First unseen message:{0}", fi.FirstUnseen );
            Console.WriteLine( "Number of messages in folder:{0}", fi.Messages );
            Console.WriteLine( "Folder name:{0}", fi.Name );
            Console.WriteLine( "Folder path:{0}", fi.Path );
            Console.WriteLine( "Number of recent messages (have the 'recent' flag set):{0}", fi.Recent );
            Console.WriteLine( "The UID that will be assigned to the next message:{0}", fi.UidNext );
            Console.WriteLine( "The unique validity for the mailbox:{0}", fi.UidVAlidity );
             
            //All FolderInformation, nicely formatted
            Console.WriteLine( fi.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="FolderInformation">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim fi As FolderInformation = mf.Information()
             
            imap.Disconnect()
             
            'write out the folder information
            Console.WriteLine("First unseen message:{0}", fi.FirstUnseen)
            Console.WriteLine("Number of messages in folder:{0}", fi.Messages)
            Console.WriteLine("Folder name:{0}", fi.Name)
            Console.WriteLine("Folder path:{0}", fi.Path)
            Console.WriteLine("Number of recent messages (have the 'recent' flag set):{0}", fi.Recent)
            Console.WriteLine("The UID that will be assigned to the next message:{0}", fi.UidNext)
            Console.WriteLine("The unique validity for the mailbox:{0}", fi.UidVAlidity)
             
            'All FolderInformation, nicely formatted
            Console.WriteLine(fi.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.FolderInformation.Name">
            <summary>
            The name of the folder
            </summary>
            <example>
            	<code lang="C#" title="FolderInformation">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            FolderInformation fi = mf.Information();
             
            imap.Disconnect();
             
            //write out the folder information
            Console.WriteLine( "First unseen message:{0}", fi.FirstUnseen );
            Console.WriteLine( "Number of messages in folder:{0}", fi.Messages );
            Console.WriteLine( "Folder name:{0}", fi.Name );
            Console.WriteLine( "Folder path:{0}", fi.Path );
            Console.WriteLine( "Number of recent messages (have the 'recent' flag set):{0}", fi.Recent );
            Console.WriteLine( "The UID that will be assigned to the next message:{0}", fi.UidNext );
            Console.WriteLine( "The unique validity for the mailbox:{0}", fi.UidVAlidity );
             
            //All FolderInformation, nicely formatted
            Console.WriteLine( fi.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="FolderInformation">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim fi As FolderInformation = mf.Information()
             
            imap.Disconnect()
             
            'write out the folder information
            Console.WriteLine("First unseen message:{0}", fi.FirstUnseen)
            Console.WriteLine("Number of messages in folder:{0}", fi.Messages)
            Console.WriteLine("Folder name:{0}", fi.Name)
            Console.WriteLine("Folder path:{0}", fi.Path)
            Console.WriteLine("Number of recent messages (have the 'recent' flag set):{0}", fi.Recent)
            Console.WriteLine("The UID that will be assigned to the next message:{0}", fi.UidNext)
            Console.WriteLine("The unique validity for the mailbox:{0}", fi.UidVAlidity)
             
            'All FolderInformation, nicely formatted
            Console.WriteLine(fi.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.FolderInformation.Path">
            <summary>
            The complete system path of the folder.
            </summary>
            <example>
            	<code lang="C#" title="FolderInformation">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            FolderInformation fi = mf.Information();
             
            imap.Disconnect();
             
            //write out the folder information
            Console.WriteLine( "First unseen message:{0}", fi.FirstUnseen );
            Console.WriteLine( "Number of messages in folder:{0}", fi.Messages );
            Console.WriteLine( "Folder name:{0}", fi.Name );
            Console.WriteLine( "Folder path:{0}", fi.Path );
            Console.WriteLine( "Number of recent messages (have the 'recent' flag set):{0}", fi.Recent );
            Console.WriteLine( "The UID that will be assigned to the next message:{0}", fi.UidNext );
            Console.WriteLine( "The unique validity for the mailbox:{0}", fi.UidVAlidity );
             
            //All FolderInformation, nicely formatted
            Console.WriteLine( fi.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="FolderInformation">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim fi As FolderInformation = mf.Information()
             
            imap.Disconnect()
             
            'write out the folder information
            Console.WriteLine("First unseen message:{0}", fi.FirstUnseen)
            Console.WriteLine("Number of messages in folder:{0}", fi.Messages)
            Console.WriteLine("Folder name:{0}", fi.Name)
            Console.WriteLine("Folder path:{0}", fi.Path)
            Console.WriteLine("Number of recent messages (have the 'recent' flag set):{0}", fi.Recent)
            Console.WriteLine("The UID that will be assigned to the next message:{0}", fi.UidNext)
            Console.WriteLine("The unique validity for the mailbox:{0}", fi.UidVAlidity)
             
            'All FolderInformation, nicely formatted
            Console.WriteLine(fi.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.FolderInformation.Recent">
            <summary>
            The number of recent messages that have not been viewed.
            </summary>
            <example>
            	<code lang="C#" title="FolderInformation">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            FolderInformation fi = mf.Information();
             
            imap.Disconnect();
             
            //write out the folder information
            Console.WriteLine( "First unseen message:{0}", fi.FirstUnseen );
            Console.WriteLine( "Number of messages in folder:{0}", fi.Messages );
            Console.WriteLine( "Folder name:{0}", fi.Name );
            Console.WriteLine( "Folder path:{0}", fi.Path );
            Console.WriteLine( "Number of recent messages (have the 'recent' flag set):{0}", fi.Recent );
            Console.WriteLine( "The UID that will be assigned to the next message:{0}", fi.UidNext );
            Console.WriteLine( "The unique validity for the mailbox:{0}", fi.UidVAlidity );
             
            //All FolderInformation, nicely formatted
            Console.WriteLine( fi.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="FolderInformation">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim fi As FolderInformation = mf.Information()
             
            imap.Disconnect()
             
            'write out the folder information
            Console.WriteLine("First unseen message:{0}", fi.FirstUnseen)
            Console.WriteLine("Number of messages in folder:{0}", fi.Messages)
            Console.WriteLine("Folder name:{0}", fi.Name)
            Console.WriteLine("Folder path:{0}", fi.Path)
            Console.WriteLine("Number of recent messages (have the 'recent' flag set):{0}", fi.Recent)
            Console.WriteLine("The UID that will be assigned to the next message:{0}", fi.UidNext)
            Console.WriteLine("The unique validity for the mailbox:{0}", fi.UidVAlidity)
             
            'All FolderInformation, nicely formatted
            Console.WriteLine(fi.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>
            This is the number of messages, that have the \recent flag set, as determined by
            the server.
            </remarks>
        </member>
        <member name="P:aspNetIMAP.FolderInformation.UidNext">
            <summary>
            The server's prediction for the unique id value of the next message.
            </summary>
            <example>
            	<code lang="C#" title="FolderInformation">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            FolderInformation fi = mf.Information();
             
            imap.Disconnect();
             
            //write out the folder information
            Console.WriteLine( "First unseen message:{0}", fi.FirstUnseen );
            Console.WriteLine( "Number of messages in folder:{0}", fi.Messages );
            Console.WriteLine( "Folder name:{0}", fi.Name );
            Console.WriteLine( "Folder path:{0}", fi.Path );
            Console.WriteLine( "Number of recent messages (have the 'recent' flag set):{0}", fi.Recent );
            Console.WriteLine( "The UID that will be assigned to the next message:{0}", fi.UidNext );
            Console.WriteLine( "The unique validity for the mailbox:{0}", fi.UidVAlidity );
             
            //All FolderInformation, nicely formatted
            Console.WriteLine( fi.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="FolderInformation">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim fi As FolderInformation = mf.Information()
             
            imap.Disconnect()
             
            'write out the folder information
            Console.WriteLine("First unseen message:{0}", fi.FirstUnseen)
            Console.WriteLine("Number of messages in folder:{0}", fi.Messages)
            Console.WriteLine("Folder name:{0}", fi.Name)
            Console.WriteLine("Folder path:{0}", fi.Path)
            Console.WriteLine("Number of recent messages (have the 'recent' flag set):{0}", fi.Recent)
            Console.WriteLine("The UID that will be assigned to the next message:{0}", fi.UidNext)
            Console.WriteLine("The unique validity for the mailbox:{0}", fi.UidVAlidity)
             
            'All FolderInformation, nicely formatted
            Console.WriteLine(fi.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.FolderInformation.UidVAlidity">
            <summary>
            The unique identity validity value for the mail folder.
            </summary>
            <example>
            	<code lang="C#" title="FolderInformation">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //grab the inbox
            MailFolder mf = imap.SelectInbox();
             
            FolderInformation fi = mf.Information();
             
            imap.Disconnect();
             
            //write out the folder information
            Console.WriteLine( "First unseen message:{0}", fi.FirstUnseen );
            Console.WriteLine( "Number of messages in folder:{0}", fi.Messages );
            Console.WriteLine( "Folder name:{0}", fi.Name );
            Console.WriteLine( "Folder path:{0}", fi.Path );
            Console.WriteLine( "Number of recent messages (have the 'recent' flag set):{0}", fi.Recent );
            Console.WriteLine( "The UID that will be assigned to the next message:{0}", fi.UidNext );
            Console.WriteLine( "The unique validity for the mailbox:{0}", fi.UidVAlidity );
             
            //All FolderInformation, nicely formatted
            Console.WriteLine( fi.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="FolderInformation">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'grab the inbox
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim fi As FolderInformation = mf.Information()
             
            imap.Disconnect()
             
            'write out the folder information
            Console.WriteLine("First unseen message:{0}", fi.FirstUnseen)
            Console.WriteLine("Number of messages in folder:{0}", fi.Messages)
            Console.WriteLine("Folder name:{0}", fi.Name)
            Console.WriteLine("Folder path:{0}", fi.Path)
            Console.WriteLine("Number of recent messages (have the 'recent' flag set):{0}", fi.Recent)
            Console.WriteLine("The UID that will be assigned to the next message:{0}", fi.UidNext)
            Console.WriteLine("The unique validity for the mailbox:{0}", fi.UidVAlidity)
             
            'All FolderInformation, nicely formatted
            Console.WriteLine(fi.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="T:aspNetIMAP.IMAP4">
            <summary>
            The IMAP connection or client class.
            </summary>
            <remarks>
            This is the main class used for managing the IMAP server, connection to the
            server, and for getting at sub classes or objects.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.OnServerResponse(aspNetIMAP.ServerResponseEventArgs)">
            <summary>
            Raises the ServerResponse event.
            </summary>
            <example>
                The following example demonstrates capturing the session between the IMAP server
                and the client. 
                <code lang="C#" title="ServerResponse Example">
            static void Main(string[] args)
            {
             
                IMAP4 imap = new IMAP4( "127.0.0.1" );
             
                //wire up the server event, so we can watch the commands to the imap server, in real time.
                imap.ServerResponse += new ServerResponseEventHandler( OnServerResponse );
             
                imap.Username = "dave@blah.com";
                imap.Password = "test";
                imap.Login();
             
                //grab the inbox
                MailFolder mf = imap.SelectInbox();
                
                //grab the headers of the 1st message
                string headers = mf.FetchClient.Headers( 1, IndexType.Ordinal );
             
                imap.Disconnect();
             
                //write the the headers 
                Console.WriteLine( headers );
             
             
                Console.WriteLine( "Done" );
                Console.ReadLine();
             
            }
             
            private static void OnServerResponse( object sender, ServerResponseEventArgs e )
            {
                //write out various information
             
                //imap command
                Console.WriteLine( e.Command );
             
                //number of bytes
                Console.WriteLine( e.DataCount );
             
                //message
                Console.WriteLine( Encoding.ASCII.GetString( e.Data, 0, e.DataCount ) );
                
            }
                </code>
            	<code lang="VB.NET" title="ServerResponse Example">
            'Entry point which delegates to C-style main Private Function
            Public Overloads Shared Sub Main()
               Main(System.Environment.GetCommandLineArgs())
            End Sub
             
            Overloads Shared Sub Main(args() As String)
               
               Dim imap As New IMAP4("127.0.0.1")
               
               'wire up the server event, so we can watch the commands to the imap server, in real time.
               AddHandler imap.ServerResponse, AddressOf OnServerResponse
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               'grab the inbox
               Dim mf As MailFolder = imap.SelectInbox()
               
               'grab the headers of the 1st message
               Dim headers As String = mf.FetchClient.Headers(1, IndexType.Ordinal)
               
               imap.Disconnect()
               
               'write the the headers 
               Console.WriteLine(headers)
               
               
               Console.WriteLine("Done")
               Console.ReadLine()
            End Sub 'Main
             
             
            Private Shared Sub OnServerResponse(sender As Object, e As ServerResponseEventArgs)
               'write out various information
               'imap command
               Console.WriteLine(e.Command)
               
               'number of bytes
               Console.WriteLine(e.DataCount)
               
               'message
               Console.WriteLine(Encoding.ASCII.GetString(e.Data, 0, e.DataCount))
            End Sub 'OnServerResponse
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.#ctor">
            <summary>
            Creates an instance of the IMAP client.
            </summary>
            <remarks>By default, the IMAP port is set to 143</remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( );
             
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
             
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Server = "127.0.0.1";
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4()
             
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
             
            imap.Logger.Path = "C:\imap.log"
             
            imap.Server = "127.0.0.1"
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.#ctor(System.Boolean,System.Boolean)">
            <summary>Loads settings from the configuration file (.config).</summary>
            <remarks>
            	<para>Automatically loading from the configuration file makes it easy to change
                settings, and not have to recompile your application. For more information, be sure
                to check out <paramref name="LoadFromConfig">LoadFromConfig()</paramref>.</para>
            </remarks>
            <example>
            	<para>This example uses the following settings, found in the configuration file
                (web.config or app.config), to set various properties, and connect to the IMAP
                server:</para>
            	<code lang="C#" description="The following example uses values from the web.config to set various properties.">
                &lt;appSettings&gt;
                &lt;add key="IMAP4.Server" value="127.0.0.1"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Username" value="dave@blah.com"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Password" value="test"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Enabled" value="true"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Path" value="c:\imap.log"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Overwrite" value="true"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.InMemory" value="true"&gt;&lt;/add&gt;
                &lt;add key="sample1_IMAP4.Logger.Path" value="c:\sampleimap.log"&gt;&lt;/add&gt;
                &lt;/appSettings&gt;
            	
            	
            IMAP4 imap = new IMAP4( true, true );
             
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" description="The following example uses values from the web.config to set various properties.">
                &lt;appSettings&gt;
                &lt;add key="IMAP4.Server" value="127.0.0.1"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Username" value="dave@blah.com"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Password" value="test"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Enabled" value="true"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Path" value="c:\imap.log"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Overwrite" value="true"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.InMemory" value="true"&gt;&lt;/add&gt;
                &lt;add key="sample1_IMAP4.Logger.Path" value="c:\sampleimap.log"&gt;&lt;/add&gt;
                &lt;/appSettings&gt;
            	
            	
            Dim imap As New IMAP4(True, True)
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.#ctor(System.Boolean,System.Boolean,System.String)">
            <summary>Loads settings from the configuration file (.config).</summary>
            <remarks>
            	<para>Automatically loading from the configuration file makes it easy to change
                settings, and not have to recompile your application. aspNetIMAP will first load
                any applicable settings. Once those settings have been loaded, any settings with
                the specified keyPrefix will be loaded. The keyPrefix settings will override any of
                the orignal, parent, settings. In this example, the key with the prefix "sample_"
                will over ride the original log location.</para>
            	<para>For more information, be sure to check out
                <paramref name="LoadFromConfig">LoadFromConfig()</paramref>.</para>
            </remarks>
            <example>
                This example uses the following settings, found in the configuration file
                (web.config or app.config), to set various properties, and connect to the IMAP
                server: 
                <code lang="C#" description="The following example uses values from the web.config to set various properties.">
                &lt;appSettings&gt;
                &lt;add key="IMAP4.Server" value="127.0.0.1"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Username" value="dave@blah.com"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Password" value="test"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Enabled" value="true"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Path" value="c:\imap.log"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Overwrite" value="true"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.InMemory" value="true"&gt;&lt;/add&gt;
                &lt;add key="sample1_IMAP4.Logger.Path" value="c:\sampleimap.log"&gt;&lt;/add&gt;
                &lt;/appSettings&gt;
            	
            	
            IMAP4 imap = new IMAP4( true, true, "sample1_" );
             
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" description="The following example uses values from the web.config to set various properties.">
                &lt;appSettings&gt;
                &lt;add key="IMAP4.Server" value="127.0.0.1"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Username" value="dave@blah.com"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Password" value="test"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Enabled" value="true"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Path" value="c:\imap.log"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Overwrite" value="true"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.InMemory" value="true"&gt;&lt;/add&gt;
                &lt;add key="sample1_IMAP4.Logger.Path" value="c:\sampleimap.log"&gt;&lt;/add&gt;
                &lt;/appSettings&gt;
            	
            	
            Dim imap As New IMAP4(True, True, "sample1_" )
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.#ctor(System.String)">
            <summary>
            Creates an instance of the IMAP client.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Logger.Path = "C:\\imap.log"
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Logger.Path = "C:\imap.log"
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of the IMAP client.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Logger.Path = "C:\\imap.log"
               
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Logger.Path = "C:\imap.log"
               
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates an instance of the IMAP client and connects to the server.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test", false );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Logger.Path = "C:\\imap.log"
               
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test", False)
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Logger.Path = "C:\imap.log"
               
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.Finalize">
            <summary>
            Finalizer, called by the framework
            </summary>
        </member>
        <member name="M:aspNetIMAP.IMAP4.Dispose">
            <summary>
            Disposes of any network resources.
            </summary>
        </member>
        <member name="M:aspNetIMAP.IMAP4.Cancel">
            <summary>Cancels any pending IMAP command.</summary>
            <remarks>If Cancel is called, the IMAPConnectionCancelledException is thrown.</remarks>
        </member>
        <member name="M:aspNetIMAP.IMAP4.CheckCapabilities">
            <summary>
            Checks the server's capabilities.
            </summary>
            <returns>The server's capabilities and also populates the Capabilities property.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
             
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            Console.WriteLine( imap.CheckCapabilities() );
             
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
             
            imap.Logger.Path = "C:\imap.log"
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            Console.WriteLine(imap.CheckCapabilities())
             
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.Connect">
            <summary>
            Connects to the server.
            </summary>
            <returns>True if the connection was successful.</returns>
            <remarks>
            Connects to the IMAP server, but does not log in. This allows unauthenticated commands
            to be sent. To automatically authenticate, use the <see cref="M:aspNetIMAP.IMAP4.Login">Login()</see>
            method.
            </remarks>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
            
            imap.Logger.Path = "C:\\imap.log";
            
            imap.Connect();
            imap.Login("test@example.com", "test", AuthenticationType.ClearText );
            
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
            
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
            
            imap.Disconnect();
            
            Console.WriteLine( "Done" );
            Console.ReadLine();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4( "mail.example.com" )
            
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
            
            imap.Logger.Path = "C:\imap.log"
            
            imap.Connect()
            imap.Login("test@example.com", "test", AuthenticationType.ClearText)
            
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
            
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
            
            imap.Disconnect()
            
            Console.WriteLine("Done")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.Connect(System.String)">
            <summary>
            Connects to the server.
            </summary>
            <returns>True if the connection was successful.</returns>
            <remarks>
            Connects to the IMAP server does not log in. This allows unauthenticated commands
            to be sent. To automatically authenticate, use the <see cref="M:aspNetIMAP.IMAP4.Login">Login()</see>
            method.
            </remarks>
            <param name="server">Server name or IP address.</param>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( );
            
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
            
            imap.Logger.Path = "C:\\imap.log";
            
            imap.Connect( "mail.example.com" );
            imap.Login("test@example.com", "test", AuthenticationType.ClearText );
            
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
            
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
            
            imap.Disconnect();
            
            Console.WriteLine( "Done" );
            Console.ReadLine();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4()
            
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
            
            imap.Logger.Path = "C:\imap.log"
            
            imap.Connect("mail.example.com" )
            imap.Login("test@example.com", "test", AuthenticationType.ClearText)
            
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
            
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
            
            imap.Disconnect()
            
            Console.WriteLine("Done")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.Connect(System.String,System.Int32)">
            <summary>
            Connects to the server.
            </summary>
            <returns>Success of the connection</returns>
            <remarks>
            Connects to the IMAP server does not log in. This allows unauthenticated commands
            to be sent. To automatically authenticate, use the <see cref="M:aspNetIMAP.IMAP4.Login">Login()</see>
            method.
            </remarks>
            <param name="server">Server name or IP address.</param>
            <param name="port">Server Port</param>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( );
            
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
            
            imap.Logger.Path = "C:\\imap.log";
            
            imap.Connect( "mail.example.com" , 143);
            imap.Login("test@example.com", "test", AuthenticationType.ClearText );
            
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
            
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
            
            imap.Disconnect();
            
            Console.WriteLine( "Done" );
            Console.ReadLine();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4()
            
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
            
            imap.Logger.Path = "C:\imap.log"
            
            imap.Connect("mail.example.com", 143)
            imap.Login("test@example.com", "test", AuthenticationType.ClearText)
            
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
            
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
            
            imap.Disconnect()
            
            Console.WriteLine("Done")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.CreateFolder(System.String)">
            <summary>
            Creates a mailfolder.
            </summary>
            <returns>An instance of the MailFolder</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
             
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //create a new folder
            imap.CreateFolder( "NewFolder" );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
             
            imap.Logger.Path = "C:\imap.log"
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'create a new folder
            imap.CreateFolder("NewFolder")
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.CreateFolder(System.String,System.Boolean)">
            <summary>
            Creates a mailfolder.
            </summary>
            <returns>The mailfolder.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
             
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //create a new folder
            imap.CreateFolder( "NewFolder", true );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
             
            imap.Logger.Path = "C:\imap.log"
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'create a new folder
            imap.CreateFolder("NewFolder", True)
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.DeleteFolder(System.String)">
            <summary>
            Delete a mailfolder.
            </summary>
            <returns>Success of the deletion.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
             
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //delete a newly created folder
            imap.DeleteFolder( "NewFolder" );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
             
            imap.Logger.Path = "C:\imap.log"
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'delete a newly created folder
            imap.DeleteFolder("NewFolder")
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.Disconnect">
            <summary>
            Properly disconnect from the IMAP server.
            </summary>
            <returns>True if the server disconnected.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Logger.Path = "C:\\imap.log"
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Logger.Path = "C:\imap.log"
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.ExamineFolder(System.String)">
            <summary>return <strong>mfcOpens</strong> a MailFolder as read-only.</summary>
            <returns>A read-only MailFolder.</returns>
            <remarks>Returns a folder for Read-Only operations. No</remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.RequestEncoding = Encoding.Default;
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
             
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            MailFolder mf = imap.ExamineFolder( "inbox" );
             
            string s = mf.SubFolders().ToString();
            Console.WriteLine( s );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.RequestEncoding = Encoding.Default
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
             
            imap.Logger.Path = "C:\imap.log"
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            Dim mf As MailFolder = imap.ExamineFolder("inbox")
             
            Dim s As String = mf.SubFolders().ToString()
            Console.WriteLine(s)
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.Expunge">
            <summary>
            Purges the mailbox of any messages marked for deletion.
            </summary>
            <remarks>
            This method is equivalent to calling
            <see cref="M:aspNetIMAP.MessageClient.PurgeDeletedMessages">MessageClient.PurgeDeletedMessages()</see>,
            but has been added for easy accessibility.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.RequestEncoding = Encoding.Default;
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
             
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //mark all messages in the folder as deleted
            MailFolder mf = imap.SelectFolder( "NewFolder" );
            mf.DeleteAllMessages();
             
            //purge all messages marked for deletion
            imap.Expunge();
             
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.RequestEncoding = Encoding.Default
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
             
            imap.Logger.Path = "C:\imap.log"
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'mark all messages in the folder as deleted
            Dim mf As MailFolder = imap.SelectFolder("NewFolder")
            mf.DeleteAllMessages()
             
            'purge all messages marked for deletion
            imap.Expunge()
             
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.ExecuteCommand(System.String,System.String)">
            <summary>
            Executes custom commands against the IMAP server
            </summary>
            <param name="tag">The unique tag identifing this command.</param>
            <param name="command">The command (including the tag) to be executed against the IMAP server (be sure to include the trailing CrLf).</param>
            <returns>The server response</returns>
            <example>
            <code lang="C#">
            //load the imap object from the .config file
            IMAP4 imap = new IMAP4( true, false );
            imap.Login();
            
            //a unique string that identifies this command instance (do not reuse this value again).
            string tag = "0AB"; 
            
            //List out the folder with the following command: LIST "" "*"
            string command = tag + " LIST \"\" \"*\"\r\n"; 
            
            //the raw server response
            string response = imap.ExecuteCommand( tag, command );
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
             'load the imap object from the .config file
            Dim imap As New IMAP4(True, False)
            imap.Login()
            
            'a unique string that identifies this command instance (do not reuse this value again).
            Dim tag As String = "0AB"
            
            'List out the folder with the following command: LIST "" "*"
            Dim command As String = tag + " LIST """" ""*"ControlChars.Cr + ControlChars.Lf
            
            'the raw server response
            Dim response As String = imap.ExecuteCommand(tag, command)
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.FolderDelimiter">
            <summary>Determines the folder delimter used on the server.</summary>
            <remarks>
            This method makes a call to the IMAP server to request the string delimiter used
            to separate folder names.
            </remarks>
        </member>
        <member name="M:aspNetIMAP.IMAP4.FolderExists(System.String)">
            <summary>
            Checks for the existance of a folder.
            </summary>
            <param name="path">Path to the MailFolder</param>
            <returns>True or False</returns>
        </member>
        <member name="M:aspNetIMAP.IMAP4.FolderStatistics(System.String)">
            <summary>
            Retrieves information about the folder.
            </summary>
            <returns>Folder information.</returns>
            <example>
            	<code lang="C#" title="FolderInformation">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
             
            FolderInformation fi = imap.FolderStatistics( "inbox");
             
            imap.Disconnect();
             
            //write out the folder information
            Console.WriteLine( "First unseen message:{0}", fi.FirstUnseen );
            Console.WriteLine( "Number of messages in folder:{0}", fi.Messages );
            Console.WriteLine( "Folder name:{0}", fi.Name );
            Console.WriteLine( "Folder path:{0}", fi.Path );
            Console.WriteLine( "Number of recent messages (have the 'recent' flag set):{0}", fi.Recent );
            Console.WriteLine( "The UID that will be assigned to the next message:{0}", fi.UidNext );
            Console.WriteLine( "The unique validity for the mailbox:{0}", fi.UidVAlidity );
             
            //All FolderInformation, nicely formatted
            Console.WriteLine( fi.ToString() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
            </code>
            	<code lang="VB.NET" title="FolderInformation">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
             
            Dim fi As FolderInformation = imap.FolderStatistics("inbox")
             
            imap.Disconnect()
             
            'write out the folder information
            Console.WriteLine("First unseen message:{0}", fi.FirstUnseen)
            Console.WriteLine("Number of messages in folder:{0}", fi.Messages)
            Console.WriteLine("Folder name:{0}", fi.Name)
            Console.WriteLine("Folder path:{0}", fi.Path)
            Console.WriteLine("Number of recent messages (have the 'recent' flag set):{0}", fi.Recent)
            Console.WriteLine("The UID that will be assigned to the next message:{0}", fi.UidNext)
            Console.WriteLine("The unique validity for the mailbox:{0}", fi.UidVAlidity)
             
            'All FolderInformation, nicely formatted
            Console.WriteLine(fi.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="path">Path to the folder</param>
        </member>
        <member name="M:aspNetIMAP.IMAP4.FolderList">
            <summary>
            A collection of the mailfolders.
            </summary>
            <returns>MailFolder collection.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.FolderList(System.String)">
            <summary>
            A collection of the mail folders, filtered by name.
            </summary>
            <returns>MailFolder collection.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" ); 
            imap.Logger = new IMAPLog(); 
            imap.Logger.InMemory = true; 
             
            imap.Username = "dave@blah.com"; 
            imap.Password = "test"; 
            imap.Login(); 
             
            //list all of the folders under the inbox
            MailFolderCollection mfc = imap.FolderList( "inbox"); 
            Console.WriteLine( mfc.ToString() ); 
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            imap.Disconnect(); 
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders under the inbox
            Dim mfc As MailFolderCollection = imap.FolderList("inbox")
            Console.WriteLine(mfc.ToString())
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="folderName">Mailfolder name to filter by.</param>
        </member>
        <member name="M:aspNetIMAP.IMAP4.FolderList(System.String,System.String)">
            <summary>
            A collection of the mail folders, filtered by name.
            </summary>
            <returns>MailFolder collection</returns>
            <remarks>
            	<para>The '*' wildcard character matches zero or more characters and crosses
                hierarchy delimiters, which can cause an entire tree of mailboxes to match.</para>
            	<para>The '%' wildcard character is identical to the '*' character, except that it
                doesn't cross hierarchy delimiters.</para>
            	<para>The empty string, "", is a special case. It is a request for the hierarchy
                character and the root name of the item specified in the folderName.</para>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" ); 
            imap.Logger = new IMAPLog(); 
            imap.Logger.InMemory = true; 
             
            imap.Username = "dave@blah.com"; 
            imap.Password = "test"; 
            imap.Login(); 
             
            //list all of the folders under the inbox
            MailFolderCollection mfc = imap.FolderList( "inbox", "%"); 
            Console.WriteLine( mfc.ToString() ); 
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            imap.Disconnect(); 
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders under the inbox
            Dim mfc As MailFolderCollection = imap.FolderList("inbox", "%")
            Console.WriteLine(mfc.ToString())
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="folderName">Mailfolder name to filter.</param>
            <param name="wildcard">IMAP wildcard, either '*' or '%', or an empty string ("").</param>
        </member>
        <member name="M:aspNetIMAP.IMAP4.GetQuota">
            <summary>
            Gets the quota for the account.
            </summary>
            <remarks>This is an extended feature of IMAP4. Not all servers support this extended command.</remarks>
            <example>
            <code lang="C#">
            //load the imap object from the .config file
            IMAP4 imap = new IMAP4( true, false );
            imap.Login();
            
            //get the quota for the account
            Quota q = imap.GetQuota();
            Console.WriteLine( q.ToString() );
            
            //get the quota for the inbox
            q = imap.GetQuotaRoot( "INBOX" );
            Console.WriteLine( q.ToString() );
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
             'load the imap object from the .config file
            Dim imap As New IMAP4(True, False)
            imap.Login()
            
            'get the quota for the account
            Dim q As Quota = imap.GetQuota()
            Console.WriteLine(q.ToString())
            
            'get the quota for the inbox
            q = imap.GetQuotaRoot("INBOX")
            Console.WriteLine(q.ToString())
            
            imap.Disconnect()
            
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:aspNetIMAP.IMAP4.GetQuotaRoot(System.String)">
            <summary>
            Gets the quota for the mailfolder.
            </summary>
            <remarks>This is an extended feature of IMAP4. Not all servers support this extended command.</remarks>
            <example>
            <code lang="C#">
            //load the imap object from the .config file
            IMAP4 imap = new IMAP4( true, false );
            imap.Login();
            
            //get the quota for the account
            Quota q = imap.GetQuota();
            Console.WriteLine( q.ToString() );
            
            //get the quota for the inbox
            q = imap.GetQuotaRoot( "INBOX" );
            Console.WriteLine( q.ToString() );
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
             'load the imap object from the .config file
            Dim imap As New IMAP4(True, False)
            imap.Login()
            
            'get the quota for the account
            Dim q As Quota = imap.GetQuota()
            Console.WriteLine(q.ToString())
            
            'get the quota for the inbox
            q = imap.GetQuotaRoot("INBOX")
            Console.WriteLine(q.ToString())
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.LoadFromConfig">
            <summary>Loads various properties from the configuration file.</summary>
            <remarks>
            	<para>Loads various settings from the app.config or the web.config, and converts
                the values to their respective properties. These settings must be specially named.
                They are, as follows:</para>
            	<para>
            		<list type="table">
            			<item>
            				<term>AppSetting</term>
            				<description>Sets the following Properties</description>
            			</item>
            			<item>
            				<term>IMAP4.AuthenticationType</term>
            				<description>Sets IMAP4.AuthenticationType</description>
            			</item>
            			<item>
            				<term>IMAP4.logger.Enabled</term>
            				<description>Sets Logger.Enabled</description>
            			</item>
            			<item>
            				<term>IMAP4.logger.InMemory</term>
            				<description>Sets Logger.InMemory</description>
            			</item>
            			<item>
            				<term>IMAP4.logger.Overwrite</term>
            				<description>Sets Logger.Overwrite</description>
            			</item>
            			<item>
            				<term>IMAP4.logger.Path</term>
            				<description>Sets Logger.Path</description>
            			</item>
            			<item>
            				<term>IMAP4.logger.SendToASPNETTrace</term>
            				<description>Sets Logger.SendToASPNETTrace</description>
            			</item>
            			<item>
            				<term>IMAP4.Password</term>
            				<description>Sets IMAP4.Password</description>
            			</item>
            			<item>
            				<term>IMAP4.Port</term>
            				<description>Sets IMAP4.Port</description>
            			</item>
            			<item>
            				<term>IMAP4.Server</term>
            				<description>Sets IMAP4.Server</description>
            			</item>
            			<item>
            				<term>IMAP4.SocketBufferSize</term>
            				<description>Sets IMAP4.SocketBufferSize</description>
            			</item>
            			<item>
            				<term>IMAP4.Timeout</term>
            				<description>Sets IMAP4.TimeOut</description>
            			</item>
            			<item>
            				<term>IMAP4.Username</term>
            				<description>Sets IMAP4.Username</description>
            			</item>
            			<item>
            				<term>IMAP4.IMAP4rev1</term>
            				<description>Sets IMAP4.IMAP4rev1</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                This example uses the following settings, found in the configuration file
                (web.config or app.config), to set various properties, and connect to the IMAP
                server: 
                <code lang="C#" description="The following example uses values from the web.config to set various properties.">
            &lt;appSettings&gt;
                &lt;add key="IMAP4.Server" value="127.0.0.1"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Username" value="dave@blah.com"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Password" value="test"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Enabled" value="true"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Path" value="c:\imap.log"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Overwrite" value="true"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.InMemory" value="true"&gt;&lt;/add&gt;
                &lt;add key="sample1_IMAP4.Logger.Path" value="c:\sampleimap.log"&gt;&lt;/add&gt;
             &lt;/appSettings&gt;
                
                
            IMAP4 imap = new IMAP4();
             
            imap.LoadFromConfig();
             
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" description="The following example uses values from the web.config to set various properties.">
            &lt;appSettings&gt;
                &lt;add key="IMAP4.Server" value="127.0.0.1"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Username" value="dave@blah.com"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Password" value="test"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Enabled" value="true"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Path" value="c:\imap.log"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Overwrite" value="true"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.InMemory" value="true"&gt;&lt;/add&gt;
                &lt;add key="sample1_IMAP4.Logger.Path" value="c:\sampleimap.log"&gt;&lt;/add&gt;
             &lt;/appSettings&gt;
                
                
            Dim imap As New IMAP4()
             
            imap.LoadFromConfig()
             
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.LoadFromConfig(System.String)">
            <summary>Loads settings from the configuration file, with a specific prefix.</summary>
            <remarks>
            	<para>Loads various settings from the app.config or the web.config, and converts
                the values to their respective properties. These settings must be specially named.
                They are, as follows:</para>
            	<para>
            		<list type="table">
            			<item>
            				<term>AppSetting</term>
            				<description>Sets the following Properties</description>
            			</item>
            			<item>
            				<term>IMAP4.AuthenticationType</term>
            				<description>Sets IMAP4.AuthenticationType</description>
            			</item>
            			<item>
            				<term>IMAP4.logger.Enabled</term>
            				<description>Sets Logger.Enabled</description>
            			</item>
            			<item>
            				<term>IMAP4.logger.InMemory</term>
            				<description>Sets Logger.InMemory</description>
            			</item>
            			<item>
            				<term>IMAP4.logger.Overwrite</term>
            				<description>Sets Logger.Overwrite</description>
            			</item>
            			<item>
            				<term>IMAP4.logger.Path</term>
            				<description>Sets Logger.Path</description>
            			</item>
            			<item>
            				<term>IMAP4.logger.SendToASPNETTrace</term>
            				<description>Sets Logger.SendToASPNETTrace</description>
            			</item>
            			<item>
            				<term>IMAP4.Password</term>
            				<description>Sets IMAP4.Password</description>
            			</item>
            			<item>
            				<term>IMAP4.Port</term>
            				<description>Sets IMAP4.Port</description>
            			</item>
            			<item>
            				<term>IMAP4.Server</term>
            				<description>Sets IMAP4.Server</description>
            			</item>
            			<item>
            				<term>IMAP4.SocketBufferSize</term>
            				<description>Sets IMAP4.SocketBufferSize</description>
            			</item>
            			<item>
            				<term>IMAP4.Timeout</term>
            				<description>Sets IMAP4.TimeOut</description>
            			</item>
            			<item>
            				<term>IMAP4.Username</term>
            				<description>Sets IMAP4.Username</description>
            			</item>
            			<item>
            				<term>IMAP4.IMAP4rev1</term>
            				<description>Sets IMAP4.IMAP4rev1</description>
            			</item>
            		</list>
            	</para>
            	<para>By specifying a prefix, the original settings are loaded, and set. And then
                any settings found with the keyPrefix are loaded, which will override the original
                value.</para>
            </remarks>
            <example>
                This example uses the following settings, found in the configuration file
                (web.config or app.config), to set various properties, and connect to the IMAP
                server: 
                <code lang="C#" description="The following example uses values from the web.config to set various properties.">
            In this example, all of the settings are loaded, but the value of sample1_IMAP4.Logger.Path, will
            override the value of IMAP4.Logger.Path. The the log will be created at
            c:\sampleimap.log.
             
            &lt;appSettings&gt;
                &lt;add key="IMAP4.Server" value="127.0.0.1"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Username" value="dave@blah.com"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Password" value="test"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Enabled" value="true"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Path" value="c:\imap.log"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Overwrite" value="true"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.InMemory" value="true"&gt;&lt;/add&gt;
                &lt;add key="sample1_IMAP4.Logger.Path" value="c:\sampleimap.log"&gt;&lt;/add&gt;
            &lt;/appSettings&gt;
                
                
            IMAP4 imap = new IMAP4();
             
            imap.LoadFromConfig("sample1_");
             
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" description="The following example uses values from the web.config to set various properties.">
            In this example, all of the settings are loaded, but the value of sample1_IMAP4.Logger.Path, will
            override the value of IMAP4.Logger.Path. The the log will be created at
            c:\sampleimap.log.
             
            &lt;appSettings&gt;
                &lt;add key="IMAP4.Server" value="127.0.0.1"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Username" value="dave@blah.com"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Password" value="test"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Enabled" value="true"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Path" value="c:\imap.log"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.Overwrite" value="true"&gt;&lt;/add&gt;
                &lt;add key="IMAP4.Logger.InMemory" value="true"&gt;&lt;/add&gt;
                &lt;add key="sample1_IMAP4.Logger.Path" value="c:\sampleimap.log"&gt;&lt;/add&gt;
            &lt;/appSettings&gt;
                
                
            Dim imap As New IMAP4()
             
            imap.LoadFromConfig()
             
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="keyPrefix">Any custom string to differentiate the specialized settings.</param>
        </member>
        <member name="M:aspNetIMAP.IMAP4.LoadSslSocket(System.Object)">
            <summary>
            Loads the Ssl socket for secure communication to the IMAP4 server.
            </summary>
            <param name="sslSocket">The AdvancedIntellect.Ssl.SslSocket object</param>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "192.168.2.5", "test@example.com", "test" );
            
            //create and load the ssl socket
            AdvancedIntellect.Ssl.SslSocket ssl = new AdvancedIntellect.Ssl.SslSocket();
            imap.LoadSslSocket( ssl );
            
            //logging on the ssl socket
            ssl.Logging = true;
            ssl.LogPath = "c:\\imapssl.log";
            
            //rest of the IMAP4 properties
            imap.Logger = new IMAPLog( "c:\\imap.log" );
            imap.Logger.Enabled = true;
            
            imap.Port = 993;  //IMAP Ssl port
            imap.Login();
            MailFolder inbox  = imap.SelectInbox();
            
            //number of messages in the inbox
            int count = inbox.MessageCount;
            Console.WriteLine( count );
            imap.Disconnect();
            
            
            
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("192.168.2.5", "test@example.com", "test")
            
            'create and load the ssl socket
            Dim ssl As New AdvancedIntellect.Ssl.SslSocket()
            imap.LoadSslSocket(ssl)
            
            'logging on the ssl socket
            ssl.Logging = True
            ssl.LogPath = "c:\imapssl.log"
            
            'rest of the IMAP4 properties
            imap.Logger = New IMAPLog("c:\imap.log")
            imap.Logger.Enabled = True
            
            imap.Port = 993 'IMAP Ssl port
            imap.Login()
            Dim inbox As MailFolder = imap.SelectInbox()
            
            'number of messages in the inbox
            Dim count As Integer = inbox.MessageCount
            Console.WriteLine(count)
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.Login">
            <summary>
            Login to the IMAP server.
            </summary>
            <returns>True, if the login was successful.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( );
             
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
             
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Server = "127.0.0.1";
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4()
             
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
             
            imap.Logger.Path = "C:\imap.log"
             
            imap.Server = "127.0.0.1"
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.Login(aspNetIMAP.AuthenticationType)">
            <summary>
            Login with a specific authentication type.
            </summary>
            <param name="authenticationType">Type of authentication to log in with.</param>
            <returns>True if the Login was successful.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
             
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Login( AuthenticationType.LoginAuthentication);
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
             
            imap.Logger.Path = "C:\imap.log"
             
            imap.Login( AuthenticationType.LoginAuthentication )
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.Login(System.String,System.String)">
            <summary>
            Login to the IMAP server.
            </summary>
            <returns>Login success.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
             
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Login("dave@blah.com", "test" );
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
             
            imap.Logger.Path = "C:\imap.log"
             
            imap.Login("dave@blah.com", "test")
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="username">Username used for authentication.</param>
            <param name="password">Password used for authentication.</param>
        </member>
        <member name="M:aspNetIMAP.IMAP4.Login(System.String,System.String,aspNetIMAP.AuthenticationType)">
            <summary>
            Login to the IMAP server.
            </summary>
            <param name="username">Username used for authentication.</param>
            <param name="password">Password used for authentication.</param>
            <param name="authenticationType">Authentication type used for logging in.</param>
            <returns>Success of the login.</returns>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
            
            imap.Logger.Path = "C:\\imap.log";
            
            imap.Login("test@example.com", "test", AuthenticationType.ClearText );
            
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
            
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
            
            imap.Disconnect();
            
            Console.WriteLine( "Done" );
            Console.ReadLine();
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
            
            imap.Logger.Path = "C:\imap.log"
            
            imap.Login("test@example.com", "test", AuthenticationType.ClearText)
            
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
            
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
            
            imap.Disconnect()
            
            Console.WriteLine("Done")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.Login(System.String,System.String,aspNetIMAP.AuthenticationType,System.Boolean)">
            <summary>
            Login to the IMAP server.
            </summary>
            <param name="username">Username used for authentication.</param>
            <param name="password">Password used for authentication.</param>
            <param name="authenticationType">Authentication type used for logging in.</param>
            <param name="throwLoginException">Throw any exceptions.</param>
            <returns>Success of the login.</returns>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
            
            imap.Logger.Path = "C:\\imap.log";
            
            imap.Login("test@example.com", "test", AuthenticationType.ClearText, true );
            
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
            
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
            
            imap.Disconnect();
            
            Console.WriteLine( "Done" );
            Console.ReadLine();
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
            
            imap.Logger.Path = "C:\imap.log"
            
            imap.Login("test@example.com", "test", AuthenticationType.ClearText, True)
            
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
            
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
            
            imap.Disconnect()
            
            Console.WriteLine("Done")
            Console.ReadLine()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.Noop">
            <summary>
            Sends a null or no operation command to the server, to keep the connection alive.
            </summary>
            <returns>True if the command was successful.</returns>
        </member>
        <member name="M:aspNetIMAP.IMAP4.OpenFolder(System.String)">
            <summary>
            Retrieves in instance of a folder.
            </summary>
            <returns>The mail folder</returns>
            <remarks>This method is functionally equivalent to Selecting a folder.</remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Login("dave@blah.com", "test" );
             
            //open the inbox, and write out basic information
            MailFolder mf = imap.OpenFolder( "inbox" );            
            Console.WriteLine( mf.Information().ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
            imap.Logger.Path = "C:\imap.log"
             
            imap.Login("dave@blah.com", "test")
             
            'open the inbox, and write out basic information
            Dim mf As MailFolder = imap.OpenFolder("inbox")
            Console.WriteLine(mf.Information().ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="path">Path to the mail folder.</param>
        </member>
        <member name="M:aspNetIMAP.IMAP4.OpenFolder(System.String,System.Boolean)">
            <summary>Retrieves in instance of a folder.</summary>
            <returns>The mail folder</returns>
            <remarks>This method is functionally equivalent to Selecting a folder.</remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Login("dave@blah.com", "test" );
             
            //open the inbox, and write out basic information
            MailFolder mf = imap.OpenFolder( "inbox", true );            
            Console.WriteLine( mf.Information().ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
            imap.Logger.Path = "C:\imap.log"
             
            imap.Login("dave@blah.com", "test")
             
            'open the inbox, and write out basic information
            Dim mf As MailFolder = imap.OpenFolder("inbox", True)
            Console.WriteLine(mf.Information().ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="path">Path to the MailFolder</param>
            <param name="readOnly">If True, opens the folder in read-only mode.</param>
        </member>
        <member name="M:aspNetIMAP.IMAP4.Reconnect">
            <summary>
            Reconnect a dropped connection.
            </summary>
            <returns>True if the connection was successful.</returns>
        </member>
        <member name="M:aspNetIMAP.IMAP4.RenameFolder(System.String,System.String)">
            <summary>
            Rename an existing folder.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Login("dave@blah.com", "test" );
             
            //create a new folder
            imap.CreateFolder("NewFolder" );
             
            //now rename it
            imap.RenameFolder( "NewFolder", "NewFolder2" );
             
            //now select all of the folders to verify
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
            </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
            imap.Logger.Path = "C:\imap.log"
             
            imap.Login("dave@blah.com", "test")
             
            'create a new folder
            imap.CreateFolder("NewFolder")
             
            'now rename it
            imap.RenameFolder("NewFolder", "NewFolder2")
             
            'now select all of the folders to verify
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc)
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="oldFolderName">Original folder name.</param>
            <param name="newFolderName">New folder name.</param>
        </member>
        <member name="M:aspNetIMAP.IMAP4.SelectInbox">
            <summary>Select's the Inbox folder for manipulation.</summary>
            <returns>The inbox as a MailFolder</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Login("dave@blah.com", "test" );
             
            //select the inbox
            MailFolder inbox = imap.SelectInbox();
            Console.WriteLine( inbox.Information().ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
            </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
            imap.Logger.Path = "C:\imap.log"
             
            imap.Login("dave@blah.com", "test")
             
            'select the inbox
            Dim inbox As MailFolder = imap.SelectInbox()
            Console.WriteLine(inbox.Information().ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.SelectFolder(System.String)">
            <summary>
            Opens a MailFolder for manipulation.
            </summary>
            <returns>An instance of the MailFolder</returns>
            <remarks>
            Same as OpenFolder( path ). Selecting a folder, opens the folder for Read-Write
            access, permitting access to the messages within.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Login("dave@blah.com", "test" );
             
            //select the inbox
            MailFolder inbox = imap.SelectFolder("inbox");
            Console.WriteLine( inbox.Information().ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
            imap.Logger.Path = "C:\imap.log"
             
            imap.Login("dave@blah.com", "test")
             
            'select the inbox
            Dim inbox As MailFolder = imap.SelectFolder("inbox")
            Console.WriteLine(inbox.Information().ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="path">Path to the mail folder.</param>
        </member>
        <member name="M:aspNetIMAP.IMAP4.Subscribe(System.String)">
            <summary>
            Subscribes to an IMAP folder.
            </summary>
            <returns>True if the subscribe was successful.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Login("dave@blah.com", "test" );
             
            //subscribe to the inbox
            imap.Subscribe( "inbox" );
             
            //list out all subscribed folders
            MailFolderCollection mfc = imap.SubscribedFolders( string.Empty, "*" );
            Console.WriteLine( mfc.ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
            imap.Logger.Path = "C:\imap.log"
             
            imap.Login("dave@blah.com", "test")
             
            'subscribe to the inbox
            imap.Subscribe("inbox")
             
            'list out all subscribed folders
            Dim mfc As MailFolderCollection = imap.SubscribedFolders(String.Empty, "*")
            Console.WriteLine(mfc.ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>
            Subscribe allows the user to selectively list, and subscribe, to folders that
            interest them.
            </remarks>
            <param name="folderName">Folder path and name.</param>
        </member>
        <member name="M:aspNetIMAP.IMAP4.SubscribedFolders(System.String,System.String)">
            <summary>
            A MailFolder collection of subscribed folders.
            </summary>
            <returns>MailFolder collection</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Login("dave@blah.com", "test" );
             
            //subscribe to the inbox
            imap.Subscribe( "inbox" );
             
            //list out all subscribed folders
            MailFolderCollection mfc = imap.SubscribedFolders( string.Empty, "*" );
            Console.WriteLine( mfc.ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
            imap.Logger.Path = "C:\imap.log"
             
            imap.Login("dave@blah.com", "test")
             
            'subscribe to the inbox
            imap.Subscribe("inbox")
             
            'list out all subscribed folders
            Dim mfc As MailFolderCollection = imap.SubscribedFolders(String.Empty, "*")
            Console.WriteLine(mfc.ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>
            Subscribe allows the user to selectively list, and subscribe, to folders that
            interest them.
            </remarks>
            <param name="folderName">
            Folder name used for filtering. If an empty string is used, all folders are
            returned.
            </param>
            <param name="wildcard">IMAP wildcard, either '*' or '%'</param>
        </member>
        <member name="M:aspNetIMAP.IMAP4.Unsubscribe(System.String)">
            <summary>
            Removes a folder from the Subscribe folder list.
            </summary>
            <param name="folderName">Folder path and name.</param>
            <returns>True if the unsubscribe was successful.</returns>
        </member>
        <member name="M:aspNetIMAP.IMAP4.VersionNumber">
            <summary>
            Version number of aspNetIMAP
            </summary>
            <returns>The version number of aspNetIMAP, as a string.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            Console.WriteLine( imap.VersionNumber() );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            Console.WriteLine(imap.VersionNumber())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAP4.LoadLicenseFile(System.String)">
            <summary>Loads a license file, based upon a fileystem path.</summary>
            <param name="path">Filesystem path to the license file.</param>
        </member>
        <member name="M:aspNetIMAP.IMAP4.LoadLicenseString(System.String)">
            <summary>Loads a license file, from a properly formatted Xml license string.</summary>
            <remarks>
            This method can be useful, if you want to strore you license in a central
            location, for example, a Sql Server, or of you are bundling this component with your
            end product, and want to embed the license contents in your application, to prevent
            malicious use.
            </remarks>
            <param name="xmlString">A string containing the Xml license contents.</param>
        </member>
        <member name="M:aspNetIMAP.IMAP4.LoadLicenseResource">
            <summary>
            Loads a license that was embedded as a resource.
            </summary>
            <remarks>
            This method scans the aseemblies for an embedded resource named "aspNetIMAP.xml.lic"
            <br />Once it finds the resource it attempts load it, and verify itself.
            If you want to embed the aspNetIMAP.xml.lic in your project or product, and are using VS.NET follow these steps
            <list type="bullet">
            <item>
            	<description>In Solution Explorer, right-click your project and select "Add Existing Item". Browse to your aspNetIMAP.xml.lic file.</description>
            </item>
            <item>
            	<description>When the license file has been added to your project, right-click it and select "Properties".</description>
            </item>
            <item>
            	<description>In the Properties Window, change the Build Action property to Embedded Resource.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:aspNetIMAP.IMAP4.LoadLicenseResource(System.String)">
            <summary>
            Loads the license contents from a specific resource name.
            </summary>
            <param name="resourceName">The name of the embedded resource</param>
            <remarks>This method will scan the loaded assemblies for the existing resource name. Once it is found, it attemps to load the resource as a license.</remarks>
        </member>
        <member name="M:aspNetIMAP.IMAP4.LoadLicenseStream(System.IO.Stream)">
            <summary>
            Loads the license from a System.IO.Stream
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:aspNetIMAP.IMAP4.AuthenticationType">
            <summary>
            Authentication type used for logging into the servers.
            </summary>
            <remarks>Not all authentication types supported by IMAP servers.</remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               imap.AuthenticationType = AuthenticationType.LoginAuthentication;
               
               	imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.AuthenticationType = AuthenticationType.LoginAuthentication
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAP4.BlackListChecker">
            <summary>
            Used for checking a message for spam.
            </summary>
        </member>
        <member name="P:aspNetIMAP.IMAP4.Capabilities">
            <summary>Server capabilities.</summary>
            <remarks>
            Displays the various capabilities of the IMAP server. The response form teh
            server includes revision information as well as supported authentication mechanisms,
            and extensions. The server response is a space delimited list of capabilities. Server
            supporting IMAP4rev1 include an 'imap4rev1' item in the list of capabilities. Those
            supporting the older IMAPP4 include the 'impa4'. Both of these strings are case
            insensitive.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Connect();
             
            string capes = imap.Capabilities;
             
            Console.WriteLine( capes );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Connect()
             
            Dim capes As String = imap.Capabilities
             
            Console.WriteLine(capes)
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAP4.FolderNameEncoding">
            <summary>The encoding used to encode words of non us-ascii text.</summary>
            <remarks>By default the Encoding.UTF8 encoding is used.</remarks>
        </member>
        <member name="P:aspNetIMAP.IMAP4.IMAP4rev1">
            <summary>True if the server supports IMAP4rev1 commands.</summary>
            <remarks>
            The two popular IMAP4 implementations are IMAP4 and IMAP4rev1. IMAP4 has been
            replaced, and is outdated. If the server supports IMAP4rev1, those updated commands
            will be issued. aspNetIMAP recognizes older IMAP4 servers, and will execute older
            commands against older servers.
            </remarks>
        </member>
        <member name="P:aspNetIMAP.IMAP4.IsAuthenticated">
            <summary>
            Is currently authenticated, or logged into the IMAP server.
            </summary>
            <remarks>True if the client has been authenticated to the IMAP server.</remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
             
            imap.Logger.Path = "C:\\imap.log";
             
            Console.WriteLine( imap.IsAuthenticated );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            Console.WriteLine( imap.IsAuthenticated );
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
             
            imap.Logger.Path = "C:\imap.log"
             
            Console.WriteLine(imap.IsAuthenticated)
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            Console.WriteLine(imap.IsAuthenticated)
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAP4.IsConnected">
            <summary>
            Is connected to the IMAP server.
            </summary>
            <remarks>
            This value is used for explicitly connecting and disconnecting from the IMAP
            server. This value is set to true once a successful IMAP server connection has been
            made. It is set to false, once the connection has been manually terminated. It is
            possible, that the connection may drop, and IsConnected may still remain true. To
            actively check for a connection, call <see cref="M:aspNetIMAP.IMAP4.Noop">Noop()</see>.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
             
            imap.Logger.Path = "C:\\imap.log";
             
            Console.WriteLine( imap.IsAuthenticated );
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            Console.WriteLine( imap.IsAuthenticated );
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
             
            imap.Logger.Path = "C:\imap.log"
             
            Console.WriteLine(imap.IsAuthenticated)
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            Console.WriteLine(imap.IsAuthenticated)
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAP4.LastResponse">
            <summary>The last response recieved from the IMAP server.</summary>
            <remarks>Useful in trouble shooting.</remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Connect();
             
            //write out the last response from the imap server
            Console.WriteLine( imap.LastResponse );
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Connect()
             
            'write out the last response from the imap server
            Console.WriteLine(imap.LastResponse)
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAP4.Logger">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Logger.Path = "C:\\imap.log"
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Logger.Path = "C:\imap.log"
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
            <summary>The IMAPLog object, used for logging the client-server session.</summary>
        </member>
        <member name="P:aspNetIMAP.IMAP4.LogUsernamePassword">
            <summary>Masks the username and password in the log.</summary>
            <remarks>By default, the username and password are masked with asterisks ("*").</remarks>
        </member>
        <member name="P:aspNetIMAP.IMAP4.Password">
            <summary>
            Password used for authentication.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAP4.Port">
            <summary>
            IMAP server port.
            </summary>
            <remarks>By default, the IMAP port is at 143.</remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            //non standard imap port
            imap.Port = 1085; 
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
             
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
             
            'non standard imap port
            imap.Port = 1085
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
             
            imap.Logger.Path = "C:\imap.log"
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAP4.Proxy">
            <summary>
            Uses a proxy server to communicate through, to reach the IMAP4 server.
            </summary>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            //create the proxy object
            IMAPProxy proxy = new IMAPProxy(  );
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe";
            proxy.Password = "secret";
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword;
            proxy.Type= IMAPProxyType.Socks5;
            
            //set it on the IMAP object
            imap.Proxy = proxy;
            
            
            imap.Login("test@example.com", "test" );
            
            //list the folders
            MailFolderCollection folders = imap.FolderList();
            
            foreach( MailFolder folder in folders )
            {
            	Console.WriteLine( folder.Name );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            'create the proxy object
            Dim proxy As New IMAPProxy()
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe"
            proxy.Password = "secret"
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword
            proxy.Type = IMAPProxyType.Socks5
            
            'set it on the IMAP object
            imap.Proxy = proxy
            
            
            imap.Login("test@example.com", "test")
            
            'list the folders
            Dim folders As MailFolderCollection = imap.FolderList()
            
            Dim folder As MailFolder
            For Each folder In  folders
               Console.WriteLine(folder.Name)
            Next folder
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAP4.ResponseEncoding">
            <summary>
            The Encoding used to encode IMAP commands issued against the servers, to a byte array of data.
            </summary>
            <remarks>By default, the ResponseEncoding is set to UTF8.</remarks>
            <example>
            	<code lang="C#" description="The following example changes the encoding to the ISO-8859-1 character set.">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            //chagne to ISO-8859-1 format
            imap.RequestEncoding = Encoding.GetEncoding( "ISO-8859-1" );
            imap.ResponseEncoding = Encoding.GetEncoding( "ISO-8859-1" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
             
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" description="The following example changes the encoding to the ISO-8859-1 character set.">
            Dim imap As New IMAP4("127.0.0.1")
             
            'chagne to ISO-8859-1 format
            imap.RequestEncoding = Encoding.GetEncoding("ISO-8859-1")
            imap.ResponseEncoding = Encoding.GetEncoding("ISO-8859-1")
             
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
             
            imap.Logger.Path = "C:\imap.log"
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAP4.RequestEncoding">
            <summary>
            The Encoding used to decode IMAP responses from bytes to text.
            </summary>
            <remarks>By default the RequestEncoding is set to UTF8</remarks>
            <example>
            	<code lang="C#" description="The following example changes the encoding to the ISO-8859-1 character set.">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
             
            //chagne to ISO-8859-1 format
            imap.RequestEncoding = Encoding.GetEncoding( "ISO-8859-1" );
            imap.ResponseEncoding = Encoding.GetEncoding( "ISO-8859-1" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.InMemory = true;
             
            imap.Logger.Path = "C:\\imap.log";
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            //list all of the folders
            MailFolderCollection mfc = imap.FolderList();
            Console.WriteLine( mfc.ToString() );
             
            //write out the log, the username and password will be masked
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" description="The following example changes the encoding to the ISO-8859-1 character set.">
            Dim imap As New IMAP4("127.0.0.1")
             
            'chagne to ISO-8859-1 format
            imap.RequestEncoding = Encoding.GetEncoding("ISO-8859-1")
            imap.ResponseEncoding = Encoding.GetEncoding("ISO-8859-1")
             
            imap.Logger = New IMAPLog()
            imap.Logger.InMemory = True
             
            imap.Logger.Path = "C:\imap.log"
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            'list all of the folders
            Dim mfc As MailFolderCollection = imap.FolderList()
            Console.WriteLine(mfc.ToString())
             
            'write out the log, the username and password will be masked
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAP4.Server">
            <summary>
            IMAP server name or address.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Logger.Path = "C:\\imap.log"
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Logger.Path = "C:\imap.log"
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAP4.SocketBufferSize">
            <summary>
            The number of bytes to read from the socket at a time.
            </summary>
            <remarks>
            By default, it is set to 8K or 8192 bytes. If large messages are being read,
            increasing the buffer size, will increase performance.
            </remarks>
        </member>
        <member name="P:aspNetIMAP.IMAP4.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal the event handler calls issued as a result of events.
            </summary>
        </member>
        <member name="P:aspNetIMAP.IMAP4.TimeOut">
            <summary>
            Timeout of the network socket, in milliseconds,  used during the IMAP connection.
            </summary>
            <remarks>By default, this value is 60000 (60 seconds).</remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               //if your network is slow, you may want to increase the timeout
               imap.TimeOut = 120000;
               
               	imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               'if your network is slow, you may want to increase the timeout
               imap.TimeOut = 120000
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAP4.Username">
            <summary>
            Username of the IMAP server, used for authentication.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
            <remarks>
            By default, the username and password are masked in the log, to prevent
            unscrupulous people from obtaining that information.
            </remarks>
        </member>
        <member name="E:aspNetIMAP.IMAP4.ServerResponse">
            <summary>
             A ServerResponse event has occurred.
            </summary>
            <example>
                The following example demonstrates capturing the session between the IMAP server
                and the client. 
                <code lang="C#" title="ServerResponse Example">
            static void Main(string[] args)
            {
             
                IMAP4 imap = new IMAP4( "127.0.0.1" );
             
                //wire up the server event, so we can watch the commands to the imap server, in real time.
                imap.ServerResponse += new ServerResponseEventHandler( OnServerResponse );
             
                imap.Username = "dave@blah.com";
                imap.Password = "test";
                imap.Login();
             
                //grab the inbox
                MailFolder mf = imap.SelectInbox();
                
                //grab the headers of the 1st message
                string headers = mf.FetchClient.Headers( 1, IndexType.Ordinal );
             
                imap.Disconnect();
             
                //write the the headers 
                Console.WriteLine( headers );
             
             
                Console.WriteLine( "Done" );
                Console.ReadLine();
             
            }
             
            private static void OnServerResponse( object sender, ServerResponseEventArgs e )
            {
                //write out various information
             
                //imap command
                Console.WriteLine( e.Command );
             
                //number of bytes
                Console.WriteLine( e.DataCount );
             
                //message
                Console.WriteLine( Encoding.ASCII.GetString( e.Data, 0, e.DataCount ) );
                
            }
                </code>
            	<code lang="VB.NET" title="ServerResponse Example">
            'Entry point which delegates to C-style main Private Function
            Public Overloads Shared Sub Main()
               Main(System.Environment.GetCommandLineArgs())
            End Sub
             
            Overloads Shared Sub Main(args() As String)
               
               Dim imap As New IMAP4("127.0.0.1")
               
               'wire up the server event, so we can watch the commands to the imap server, in real time.
               AddHandler imap.ServerResponse, AddressOf OnServerResponse
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               'grab the inbox
               Dim mf As MailFolder = imap.SelectInbox()
               
               'grab the headers of the 1st message
               Dim headers As String = mf.FetchClient.Headers(1, IndexType.Ordinal)
               
               imap.Disconnect()
               
               'write the the headers 
               Console.WriteLine(headers)
               
               
               Console.WriteLine("Done")
               Console.ReadLine()
            End Sub 'Main
             
             
            Private Shared Sub OnServerResponse(sender As Object, e As ServerResponseEventArgs)
               'write out various information
               'imap command
               Console.WriteLine(e.Command)
               
               'number of bytes
               Console.WriteLine(e.DataCount)
               
               'message
               Console.WriteLine(Encoding.ASCII.GetString(e.Data, 0, e.DataCount))
            End Sub 'OnServerResponse
                </code>
            </example>
        </member>
        <member name="T:aspNetIMAP.IMAPLog">
            <summary>This class is used for logging the IMAP session.</summary>
            <remarks>
            When encountering problems with aspNetIMAP, enable logging and inspect the log.
            Many times errors and exceptions are written the log that can greatly decrease the
            amount of trouble shooting.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Logger.Path = "C:\\imap.log"
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Logger.Path = "C:\imap.log"
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAPLog.OnWriteLogEntry(aspNetIMAP.WriteLogEntryEventArgs)">
            <summary>
            Raises the WriteLogEntry event.
            </summary>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            imap.Logger.WriteLogEntry += new WriteLogEntryEventHandler( IMAP_OnLogEntry );
            
            imap.Login("test@example.com", "test" );
            
            //inbox
            MailFolder inbox = imap.SelectInbox();
            
            //get the data of the first attachment, 4th message
            byte[] data = inbox.FetchClient.AttachmentData( 4, 1, IndexType.Ordinal, false );
            
            //save to the filessytem
            FileStream fs = File.Open( "c:\\temp\\test.gif", FileMode.OpenOrCreate );
            fs.Write( data, 0, data.Length );
            fs.Flush();
            fs.Close();
            
            imap.Disconnect();
            
            Console.WriteLine( "Done" );
            Console.ReadLine();
            
            void IMAP_OnLogEntry( object sender, WriteLogEntryEventArgs e )
            {
            	//here you could save the log entry to a common location.
            
            	//write out for demo purposes
            	Console.WriteLine( e.LogEntry );
            }
            </code>
            
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            AddHandler imap.Logger.WriteLogEntry, AddressOf IMAP_OnLogEntry
            
            imap.Login("test@example.com", "test")
            
            'inbox
            Dim inbox As MailFolder = imap.SelectInbox()
            
            'get the data of the first attachment, 4th message
            Dim data As Byte() = inbox.FetchClient.AttachmentData(4, 1, IndexType.Ordinal, False)
            
            'save to the filessytem
            Dim fs As FileStream = File.Open("c:\temp\test.gif", FileMode.OpenOrCreate)
            fs.Write(data, 0, data.Length)
            fs.Flush()
            fs.Close()
            
            imap.Disconnect()
            
            Console.WriteLine("Done")
            Console.ReadLine()
            
            Sub IMAP_OnLogEntry(sender As Object, e As WriteLogEntryEventArgs)
               'here you could save the log entry to a common location.
               'write out for demo purposes
               Console.WriteLine(e.LogEntry)
            End Sub 'IMAP_OnLogEntry
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAPLog.#ctor">
            <summary>Creates an instance of the IMAPLog object.</summary>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            imap.Login("test@example.com", "test" );
            
            //inbox
            MailFolder inbox = imap.SelectInbox();
            
            //get the data of the first attachment, 4th message
            byte[] data = inbox.FetchClient.AttachmentData( 4, 1, IndexType.Ordinal, false );
            
            //save to the filessytem
            FileStream fs = File.Open( "c:\\temp\\test.gif", FileMode.OpenOrCreate );
            fs.Write( data, 0, data.Length );
            fs.Flush();
            fs.Close();
            
            imap.Disconnect();
            
            Console.WriteLine( "Done" );
            Console.ReadLine();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            imap.Login("test@example.com", "test")
            
            'inbox
            Dim inbox As MailFolder = imap.SelectInbox()
            
            'get the data of the first attachment, 4th message
            Dim data As Byte() = inbox.FetchClient.AttachmentData(4, 1, IndexType.Ordinal, False)
            
            'save to the filessytem
            Dim fs As FileStream = File.Open("c:\temp\test.gif", FileMode.OpenOrCreate)
            fs.Write(data, 0, data.Length)
            fs.Flush()
            fs.Close()
            
            imap.Disconnect()
            
            Console.WriteLine("Done")
            Console.ReadLine()
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAPLog.#ctor(System.String)">
            <summary>Creates an instance of the IMAPLog object.</summary>
            <remarks>
            The value of path will automatically set the value of the
            <paramref name="Path">Path</paramref> property. The log file will not be opened until
            the first entry is written to the log file.
            </remarks>
            <param name="path">The path to the log file.</param>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog("C:\\imap.log");
            imap.Logger.Overwrite = true;
            
            imap.Login("test@example.com", "test" );
            
            //inbox
            MailFolder inbox = imap.SelectInbox();
            
            //get the data of the first attachment, 4th message
            byte[] data = inbox.FetchClient.AttachmentData( 4, 1, IndexType.Ordinal, false );
            
            //save to the filessytem
            FileStream fs = File.Open( "c:\\temp\\test.gif", FileMode.OpenOrCreate );
            fs.Write( data, 0, data.Length );
            fs.Flush();
            fs.Close();
            
            imap.Disconnect();
            
            Console.WriteLine( "Done" );
            Console.ReadLine();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog( "C:\imap.log" )
            imap.Logger.Overwrite = True
            
            imap.Login("test@example.com", "test")
            
            'inbox
            Dim inbox As MailFolder = imap.SelectInbox()
            
            'get the data of the first attachment, 4th message
            Dim data As Byte() = inbox.FetchClient.AttachmentData(4, 1, IndexType.Ordinal, False)
            
            'save to the filessytem
            Dim fs As FileStream = File.Open("c:\temp\test.gif", FileMode.OpenOrCreate)
            fs.Write(data, 0, data.Length)
            fs.Flush()
            fs.Close()
            
            imap.Disconnect()
            
            Console.WriteLine("Done")
            Console.ReadLine()
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAPLog.#ctor(System.String,System.Boolean)">
            <summary>Creates an instance of the IMAPLog object.</summary>
            <remarks>
            This ctor allows you to set the Log file path.
            
            </remarks>
            <param name="path">
            Path to the log file. This will also set the <see cref="P:aspNetIMAP.IMAPLog.Path">Path</see>
            property.
            </param>
            <param name="open">
            This parameter has been depreciated.
            </param>
            
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog("C:\\imap.log", false);
            imap.Logger.Overwrite = true;
            
            imap.Login("test@example.com", "test" );
            
            //inbox
            MailFolder inbox = imap.SelectInbox();
            
            //get the data of the first attachment, 4th message
            byte[] data = inbox.FetchClient.AttachmentData( 4, 1, IndexType.Ordinal, false );
            
            //save to the filessytem
            FileStream fs = File.Open( "c:\\temp\\test.gif", FileMode.OpenOrCreate );
            fs.Write( data, 0, data.Length );
            fs.Flush();
            fs.Close();
            
            imap.Disconnect();
            
            Console.WriteLine( "Done" );
            Console.ReadLine();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog( "C:\imap.log" )
            imap.Logger.Overwrite = True
            
            imap.Login("test@example.com", "test")
            
            'inbox
            Dim inbox As MailFolder = imap.SelectInbox()
            
            'get the data of the first attachment, 4th message
            Dim data As Byte() = inbox.FetchClient.AttachmentData(4, 1, IndexType.Ordinal, False)
            
            'save to the filessytem
            Dim fs As FileStream = File.Open("c:\temp\test.gif", FileMode.OpenOrCreate)
            fs.Write(data, 0, data.Length)
            fs.Flush()
            fs.Close()
            
            imap.Disconnect()
            
            Console.WriteLine("Done")
            Console.ReadLine()
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAPLog.Finalize">
            <summary>
            Finalizer for the IMAPLog object.
            </summary>
        </member>
        <member name="M:aspNetIMAP.IMAPLog.Dispose">
            <summary>Disposes of the Write object, and closes the StreamWriter.</summary>
            <remarks>
            Cleans up the logging method and closes any open StreamWriter specified by
                 <see cref="P:aspNetIMAP.IMAPLog.Writer">Writer</see>.
            </remarks>
        </member>
        <member name="M:aspNetIMAP.IMAPLog.CloseLogStream">
            <summary>Closes the StreamWriter specified by <see cref="P:aspNetIMAP.IMAPLog.Writer">Writer</see></summary>
            <remarks>
            Closes the StreamWriter specified by <see cref="P:aspNetIMAP.IMAPLog.Writer">Writer</see> and sets
            <see cref="P:aspNetIMAP.IMAPLog.Enabled">Enabled</see> = false, to prevent any additional entries from being
            written to the log. To re-enable the IMAPLog object,
            <see cref="M:aspNetIMAP.IMAPLog.OpenLog(System.String)">OpenLog</see>() will need to be called.
            </remarks>
        </member>
        <member name="M:aspNetIMAP.IMAPLog.OpenLog(System.String)">
            <summary>
            This method has been depreciated.
            <paramref name="Path">Path</paramref>.
            </summary>
            <param name="path">
            This method has been depreciated.
            </param>
        </member>
        <member name="M:aspNetIMAP.IMAPLog.WriteLineToLog(System.String)">
            <summary>
            Writes a line to the log file.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
               imap.Logger.WriteLineToLog( "finished FolderList()" );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               imap.Logger.WriteLineToLog( "finished FolderList()" )
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAPLog.WriteToLog(System.String)">
            <summary>
            Writes text to the log file.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
               imap.Logger.WriteToLog( "finished FolderList()" );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               imap.Logger.WriteToLog( "finished FolderList()" )
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAPLog.ToString">
            <summary>Returns the value of the in memory log.</summary>
            <remarks>
            Returns the value of the internal StringBuilder that is used to maintain the in
            memory log.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAPLog.ToString(System.Boolean)">
            <summary>Returns the value of the in memory log.</summary>
            <remarks>
            If InMemory is set to true, an in memory log in maintained. ToString() is called
            to get the string representation. The in memory log is maintained via an internal
            StringBuilder. If reset is true, the internal StringBuilder will be initialized to a
            new StringBuilder.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString( true ) );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString( True ))
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="E:aspNetIMAP.IMAPLog.WriteLogEntry">
            <summary>
             A WriteLogEntry event has occurred.
            </summary>
            <remarks>
            	<para>This event is raised every time a new entry is written to the log. This event
                is helpful in enterprise situations where you may want to log individual entries to
                a Sql Server database, but do not want to maintain an in memory log, or write out
                entries to a log file.</para>
            </remarks>
            <example>
                This code example demonstrates how you could use the WriteLogEntry event to
                record log entries to a Sql server database.
                <code lang="C#" title="Writing log entries to Sql Server">
            static void Main(string[] args)
            {
             
                IMAP4 imap = new IMAP4( "127.0.0.1" );
             
                //create a log
                imap.Logger = new IMAPLog();
             
                //record the entries 
                imap.Logger.WriteLogEntry += new WriteLogEntryEventHandler( OnWriteEntry );
             
                imap.Username = "dave@blah.com";
                imap.Password = "test";
                imap.Login();
             
                //list all of the folders
                MailFolderCollection mfc = imap.FolderList();
                Console.WriteLine( mfc.ToString() );
             
                imap.Disconnect();
             
                Console.WriteLine( "Done" );
                Console.ReadLine();
             
            }
             
            private static void OnWriteEntry( object sender, WriteLogEntryEventArgs e )
            {
                //a method used for saving log entries to sql server
                RecordToSqlServer( e.LogEntry ); 
            }
             
            private static void RecordToSqlServer( string entry )
            {
                //normally this method would be used for saving entries to an enterprise sql server.
                //for demonstrations purposes, just write out the entry to the console
                Console.Write( entry );
            }
                </code>
            	<code lang="VB.NET" title="Writing log entries to Sql Server">
            Public Overloads Shared Sub Main()
               
               Dim imap As New IMAP4("127.0.0.1")
               
               'create a log
               imap.Logger = New IMAPLog()
               
               'record the entries 
               AddHandler imap.Logger.WriteLogEntry, AddressOf OnWriteEntry
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               'list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
            End Sub 'Main
             
             
            Private Shared Sub OnWriteEntry(sender As Object, e As WriteLogEntryEventArgs)
               'a method used for saving log entries to sql server
               RecordToSqlServer(e.LogEntry)
            End Sub
             
             
            Private Shared Sub RecordToSqlServer(entry As String)
               'normally this method would be used for saving entries to an enterprise sql server.
               'for demonstrations purposes, just write out the entry to the console
               Console.Write(entry)
            End Sub
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAPLog.Enabled">
            <summary>Enables or disables logging for aspNetIMAP</summary>
            <value>True or False, if it is enabled.</value>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               //if we want to turn off logging, set it to false
               imap.Logger.Enabled = false;
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               REM -- if we want to turn off logging, set it to false
               imap.Logger.Enabled = False;
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAPLog.Encoding">
            <summary>The encoding used to write statements to the log.</summary>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog("C:\\imap.log");
            imap.Logger.Overwrite = true;
            imap.Logger.Encoding = Encoding.UTF8;
            
            imap.Login("test@example.com", "test" );
            
            //inbox
            MailFolder inbox = imap.SelectInbox();
            
            //get the data of the first attachment, 4th message
            byte[] data = inbox.FetchClient.AttachmentData( 4, 1, IndexType.Ordinal, false );
            
            //save to the filessytem
            FileStream fs = File.Open( "c:\\temp\\test.gif", FileMode.OpenOrCreate );
            fs.Write( data, 0, data.Length );
            fs.Flush();
            fs.Close();
            
            imap.Disconnect();
            
            Console.WriteLine( "Done" );
            Console.ReadLine();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog( "C:\imap.log" )
            imap.Logger.Overwrite = True
            imap.Logger.Encoding = Encoding.UTF8
            
            imap.Login("test@example.com", "test")
            
            'inbox
            Dim inbox As MailFolder = imap.SelectInbox()
            
            'get the data of the first attachment, 4th message
            Dim data As Byte() = inbox.FetchClient.AttachmentData(4, 1, IndexType.Ordinal, False)
            
            'save to the filessytem
            Dim fs As FileStream = File.Open("c:\temp\test.gif", FileMode.OpenOrCreate)
            fs.Write(data, 0, data.Length)
            fs.Flush()
            fs.Close()
            
            imap.Disconnect()
            
            Console.WriteLine("Done")
            Console.ReadLine()
            </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAPLog.InMemory">
            <summary>Used to keep the current session log in memory.</summary>
            <value>True or False, to keep an in memory log.</value>
            <remarks>
            This property is useful if you are working in an environment like ASP.NET where
            you may not have write access to the file system, and cannot write to a text file. To
            get to the in memory log, call IMAPLog.ToString().
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAPLog.Overwrite">
            <summary>Overwrite an existing filesystem log.</summary>
            <value>True if the file can/should be overwritten.</value>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               imap.Logger.Overwrite = true;
               
               //if we want to turn off logging, set it to false
               imap.Logger.Enabled = false;
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               imap.Logger.Overwrite = True
               
               REM -- if we want to turn off logging, set it to false
               imap.Logger.Enabled = False;
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAPLog.Path">
            <summary>
            Path to the log file.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.InMemory = true;
               
               imap.Logger.Path = "C:\\imap.log"
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Console.WriteLine( mfc.ToString() );
               
                //write out the log
               Console.WriteLine( imap.Logger.ToString() );
               
               imap.Disconnect();
               
               Console.WriteLine( "Done" );
               Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.InMemory = True
               
               imap.Logger.Path = "C:\imap.log"
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Console.WriteLine(mfc.ToString())
               
               REM -- write out the log
               Console.WriteLine(imap.Logger.ToString())
               
               imap.Disconnect()
               
               Console.WriteLine("Done")
               Console.ReadLine()
                </code>
            </example>
            <value>Path of the log file</value>
            <remarks>
            This path is used to create and write to a log file. If you do not have write
            access to the filesystem, then set InMemory = true, and retrieve the in memory log
            using <see cref="M:aspNetIMAP.IMAPLog.ToString">IMAPLog.ToString</see>().
            </remarks>
        </member>
        <member name="P:aspNetIMAP.IMAPLog.LastEntry">
            <summary>The last entry written to the log.</summary>
            <value>String of the last entry written to the log.</value>
            <remarks>
            This value is helpful when trouble shooting exceptions. If an exception occurs,
            this value can be quickly checked for any helpful information. If it does not provide
            any helpful information, the complete log may need to be examined.
            </remarks>
        </member>
        <member name="P:aspNetIMAP.IMAPLog.SendToASPNETTrace">
            <summary>Sends log statements to the ASP.NET TraceContext</summary>
            <value>True if IMAPLog is logging to the TraceContext</value>
            <remarks>
            	<para>This method is helpful during exceptions and trouble shooting when first
                using aspNetIMAP. It logs statements directly to the ASP.NET TraceContext. Thus, no
                in-memory log, or log file is required. It is recommended to only enable this
                property during development, and to disable once development is complete, and the
                project has gone to production.</para>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
               imap.Logger = new IMAPLog();
               imap.Logger.SendToASPNETTrace = true;
               
               imap.Username = "dave@blah.com";
               imap.Password = "test";
               imap.Login();
               
                //list all of the folders
               MailFolderCollection mfc = imap.FolderList();
               Response.Write( "&lt;pre&gt;" + mfc.ToString() + "&lt;/pre&gt;");
               
               
               imap.Disconnect();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
               imap.Logger = New IMAPLog()
               imap.Logger.SendToASPNETTrace = True
               
               imap.Username = "dave@blah.com"
               imap.Password = "test"
               imap.Login()
               
               
               REM -- list all of the folders
               Dim mfc As MailFolderCollection = imap.FolderList()
               Response.Write( "&lt;pre&gt;" + mfc.ToString() + "&lt;/pre&gt;")
               
               imap.Disconnect()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAPLog.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal the event handler calls issued as a result of events.
            </summary>
        </member>
        <member name="P:aspNetIMAP.IMAPLog.MaskUsernamePassword">
            <summary>Masks the username and password in the log.</summary>
            <remarks>
            	<para>For security reasons, the username and password are masked with "*****" in
                the log. This prevents your credentials from accidently being exposed to someone
                who might gain access to the logs.</para>
            	<para>If you are having trouble logging into to the IMAP server, you may want to
                set this value to false, and then examine the logs. By setting MaskUsernamePassword
                = False, you will be able to exactly see the transaction between aspNetIMAP and the
                IMAP server. When MaskUsernamePassword is True, various log entries will be masked
                with ****, so you will not be able to see the true IMAP session.</para>
            </remarks>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog("C:\\imap.log");
            imap.Logger.Overwrite = true;
            imap.Logger.Encoding = Encoding.UTF8;
            imap.Logger.MaskUsernamePassword = false;
            
            imap.Login("test@example.com", "test" );
            
            //inbox
            MailFolder inbox = imap.SelectInbox();
            
            //get the data of the first attachment, 4th message
            byte[] data = inbox.FetchClient.AttachmentData( 4, 1, IndexType.Ordinal, false );
            
            //save to the filessytem
            FileStream fs = File.Open( "c:\\temp\\test.gif", FileMode.OpenOrCreate );
            fs.Write( data, 0, data.Length );
            fs.Flush();
            fs.Close();
            
            imap.Disconnect();
            
            Console.WriteLine( "Done" );
            Console.ReadLine();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog( "C:\imap.log" )
            imap.Logger.Overwrite = True
            imap.Logger.Encoding = Encoding.UTF8
            imap.Logger.MaskUsernamePassword = False
            
            imap.Login("test@example.com", "test")
            
            'inbox
            Dim inbox As MailFolder = imap.SelectInbox()
            
            'get the data of the first attachment, 4th message
            Dim data As Byte() = inbox.FetchClient.AttachmentData(4, 1, IndexType.Ordinal, False)
            
            'save to the filessytem
            Dim fs As FileStream = File.Open("c:\temp\test.gif", FileMode.OpenOrCreate)
            fs.Write(data, 0, data.Length)
            fs.Flush()
            fs.Close()
            
            imap.Disconnect()
            
            Console.WriteLine("Done")
            Console.ReadLine()
            </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAPLog.Writer">
            <summary>The StreamWriter used to write entries to the log.</summary>
            <value>The StreamWriter for logging entries.</value>
            <remarks>
            This is the StreamWriter that writes to the log specified by
            <see cref="P:aspNetIMAP.IMAPLog.Path">Path</see>. If no <see cref="P:aspNetIMAP.IMAPLog.Path">Path</see> is specified, the
            StreamWriter will be null. To write to any other stream, initialize your own
            StreamWriter and set it equal to this property. IMAPLog will then use this StreamWriter
            to log entries.
            </remarks>
            <remarks>
            This is the StreamWriter that writes to the log specified by Path. If no Path is
            specified, the StreamWriter will be null. To write to any other stream, initialize your
            own StreamWriter and set it equal to this property. IMAPLog will then use this
            StreamWriter to log entries.
            </remarks>
        </member>
        <member name="T:aspNetIMAP.IMAPProxy">
            <summary>
            Used for communicating through a Socks4 or Socks5 proxy server to the IMAP server.
            </summary>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            //create the proxy object
            IMAPProxy proxy = new IMAPProxy( "proxy1.example.com", 8080 );
            proxy.Username = "jdoe";
            proxy.Password = "secret";
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword;
            proxy.Type= IMAPProxyType.Socks5;
            
            //set it on the IMAP object
            imap.Proxy = proxy;
            
            
            imap.Login("test@example.com", "test" );
            
            //list the folders
            MailFolderCollection folders = imap.FolderList();
            
            foreach( MailFolder folder in folders )
            {
            	Console.WriteLine( folder.Name );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            'create the proxy object
            Dim proxy As New IMAPProxy("proxy1.example.com", 8080)
            proxy.Username = "jdoe"
            proxy.Password = "secret"
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword
            proxy.Type = IMAPProxyType.Socks5
            
            'set it on the IMAP object
            imap.Proxy = proxy
            
            
            imap.Login("test@example.com", "test")
            
            'list the folders
            Dim folders As MailFolderCollection = imap.FolderList()
            
            Dim folder As MailFolder
            For Each folder In  folders
               Console.WriteLine(folder.Name)
            Next folder
            
            imap.Disconnect()
            
            
            
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAPProxy.#ctor">
            <summary>Creates an instance of the IMAPProxy object.</summary>
            <summary>The proxy server name or IP address</summary>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            //create the proxy object
            IMAPProxy proxy = new IMAPProxy(  );
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe";
            proxy.Password = "secret";
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword;
            proxy.Type= IMAPProxyType.Socks5;
            
            //set it on the IMAP object
            imap.Proxy = proxy;
            
            
            imap.Login("test@example.com", "test" );
            
            //list the folders
            MailFolderCollection folders = imap.FolderList();
            
            foreach( MailFolder folder in folders )
            {
            	Console.WriteLine( folder.Name );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            'create the proxy object
            Dim proxy As New IMAPProxy()
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe"
            proxy.Password = "secret"
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword
            proxy.Type = IMAPProxyType.Socks5
            
            'set it on the IMAP object
            imap.Proxy = proxy
            
            
            imap.Login("test@example.com", "test")
            
            'list the folders
            Dim folders As MailFolderCollection = imap.FolderList()
            
            Dim folder As MailFolder
            For Each folder In  folders
               Console.WriteLine(folder.Name)
            Next folder
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAPProxy.#ctor(System.String)">
            <summary>Creates an instance of the IMAPProxy object</summary>
            <param name="server">Server name or IP of the proxy server.</param>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            //create the proxy object
            IMAPProxy proxy = new IMAPProxy( "proxy1.example.com" );
            proxy.Port = 8080;
            proxy.Username = "jdoe";
            proxy.Password = "secret";
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword;
            proxy.Type= IMAPProxyType.Socks5;
            
            //set it on the IMAP object
            imap.Proxy = proxy;
            
            
            imap.Login("test@example.com", "test" );
            
            //list the folders
            MailFolderCollection folders = imap.FolderList();
            
            foreach( MailFolder folder in folders )
            {
            	Console.WriteLine( folder.Name );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            'create the proxy object
            Dim proxy As New IMAPProxy("proxy1.example.com" )
            proxy.Port = 8080
            proxy.Username = "jdoe"
            proxy.Password = "secret"
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword
            proxy.Type = IMAPProxyType.Socks5
            
            'set it on the IMAP object
            imap.Proxy = proxy
            
            
            imap.Login("test@example.com", "test")
            
            'list the folders
            Dim folders As MailFolderCollection = imap.FolderList()
            
            Dim folder As MailFolder
            For Each folder In  folders
               Console.WriteLine(folder.Name)
            Next folder
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAPProxy.#ctor(System.String,System.Int32)">
            <summary>Creates an instance of the IMAPProxy object</summary>
            <summary>Creates an instance of the IMAPProxy object</summary>
            <param name="server">Proxy server name or IP address.</param>
            <param name="port">Proxy server port number.</param>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            //create the proxy object
            IMAPProxy proxy = new IMAPProxy(  );
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe";
            proxy.Password = "secret";
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword;
            proxy.Type= IMAPProxyType.Socks5;
            
            //set it on the IMAP object
            imap.Proxy = proxy;
            
            
            imap.Login("test@example.com", "test" );
            
            //list the folders
            MailFolderCollection folders = imap.FolderList();
            
            foreach( MailFolder folder in folders )
            {
            	Console.WriteLine( folder.Name );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            'create the proxy object
            Dim proxy As New IMAPProxy("proxy1.example.com", 8080 )
            proxy.Username = "jdoe"
            proxy.Password = "secret"
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword
            proxy.Type = IMAPProxyType.Socks5
            
            'set it on the IMAP object
            imap.Proxy = proxy
            
            
            imap.Login("test@example.com", "test")
            
            'list the folders
            Dim folders As MailFolderCollection = imap.FolderList()
            
            Dim folder As MailFolder
            For Each folder In  folders
               Console.WriteLine(folder.Name)
            Next folder
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAPProxy.Authentication">
            <summary>Used to control Authentication to the Proxy server.</summary>
            <remarks>
            If the Username or Password properties are set, this value will automatically be
            set to IMAPProxyAuthentication.UsernamePassword. It can be set back to
            IMAPProxyAuthentication.None, after those properties have been set.
            </remarks>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            //create the proxy object
            IMAPProxy proxy = new IMAPProxy( "proxy1.example.com", 8080 );
            proxy.Username = "jdoe";
            proxy.Password = "secret";
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword;
            proxy.Type= IMAPProxyType.Socks5;
            
            //set it on the IMAP object
            imap.Proxy = proxy;
            
            
            imap.Login("test@example.com", "test" );
            
            //list the folders
            MailFolderCollection folders = imap.FolderList();
            
            foreach( MailFolder folder in folders )
            {
            	Console.WriteLine( folder.Name );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            'create the proxy object
            Dim proxy As New IMAPProxy("proxy1.example.com", 8080)
            proxy.Username = "jdoe"
            proxy.Password = "secret"
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword
            proxy.Type = IMAPProxyType.Socks5
            
            'set it on the IMAP object
            imap.Proxy = proxy
            
            
            imap.Login("test@example.com", "test")
            
            'list the folders
            Dim folders As MailFolderCollection = imap.FolderList()
            
            Dim folder As MailFolder
            For Each folder In  folders
               Console.WriteLine(folder.Name)
            Next folder
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAPProxy.Enabled">
            <summary>Enable using a proxy server.</summary>
            <remarks>
            If the IMAPProxy.Type is set to something other than IMAPProxyType.None, this
            Enabled property will automatically be set to true.
            </remarks>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            //create the proxy object
            IMAPProxy proxy = new IMAPProxy( "proxy1.example.com", 8080 );
            proxy.Username = "jdoe";
            proxy.Password = "secret";
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword;
            proxy.Type= IMAPProxyType.Socks5;
            proxy.Enabled = true;
            
            //set it on the IMAP object
            imap.Proxy = proxy;
            
            
            imap.Login("test@example.com", "test" );
            
            //list the folders
            MailFolderCollection folders = imap.FolderList();
            
            foreach( MailFolder folder in folders )
            {
            	Console.WriteLine( folder.Name );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            'create the proxy object
            Dim proxy As New IMAPProxy("proxy1.example.com", 8080)
            proxy.Username = "jdoe"
            proxy.Password = "secret"
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword
            proxy.Type = IMAPProxyType.Socks5
            prox.Endabled = True 
            
            'set it on the IMAP object
            imap.Proxy = proxy
            
            
            imap.Login("test@example.com", "test")
            
            'list the folders
            Dim folders As MailFolderCollection = imap.FolderList()
            
            Dim folder As MailFolder
            For Each folder In  folders
               Console.WriteLine(folder.Name)
            Next folder
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAPProxy.Password">
            <summary>The proxy server password.</summary>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            //create the proxy object
            IMAPProxy proxy = new IMAPProxy( "proxy1.example.com", 8080 );
            proxy.Username = "jdoe";
            proxy.Password = "secret";
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword;
            proxy.Type= IMAPProxyType.Socks5;
            
            //set it on the IMAP object
            imap.Proxy = proxy;
            
            
            imap.Login("test@example.com", "test" );
            
            //list the folders
            MailFolderCollection folders = imap.FolderList();
            
            foreach( MailFolder folder in folders )
            {
            	Console.WriteLine( folder.Name );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            'create the proxy object
            Dim proxy As New IMAPProxy("proxy1.example.com", 8080)
            proxy.Username = "jdoe"
            proxy.Password = "secret"
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword
            proxy.Type = IMAPProxyType.Socks5
            
            'set it on the IMAP object
            imap.Proxy = proxy
            
            
            imap.Login("test@example.com", "test")
            
            'list the folders
            Dim folders As MailFolderCollection = imap.FolderList()
            
            Dim folder As MailFolder
            For Each folder In  folders
               Console.WriteLine(folder.Name)
            Next folder
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAPProxy.Port">
            <summary>The port number of the proxy server.</summary>
            <remarks>By default, the Port is set to 1080</remarks>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            //create the proxy object
            IMAPProxy proxy = new IMAPProxy( "proxy1.example.com"  );
            proxy.Port = 8080;
            proxy.Username = "jdoe";
            proxy.Password = "secret";
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword;
            proxy.Type= IMAPProxyType.Socks5;
            
            //set it on the IMAP object
            imap.Proxy = proxy;
            
            
            imap.Login("test@example.com", "test" );
            
            //list the folders
            MailFolderCollection folders = imap.FolderList();
            
            foreach( MailFolder folder in folders )
            {
            	Console.WriteLine( folder.Name );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            'create the proxy object
            Dim proxy As New IMAPProxy("proxy1.example.com" )
            proxy.Port = 8080
            proxy.Username = "jdoe"
            proxy.Password = "secret"
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword
            proxy.Type = IMAPProxyType.Socks5
            
            'set it on the IMAP object
            imap.Proxy = proxy
            
            
            imap.Login("test@example.com", "test")
            
            'list the folders
            Dim folders As MailFolderCollection = imap.FolderList()
            
            Dim folder As MailFolder
            For Each folder In  folders
               Console.WriteLine(folder.Name)
            Next folder
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAPProxy.Server">
            <summary>The proxy server name or IP address</summary>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            //create the proxy object
            IMAPProxy proxy = new IMAPProxy(  );
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe";
            proxy.Password = "secret";
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword;
            proxy.Type= IMAPProxyType.Socks5;
            
            //set it on the IMAP object
            imap.Proxy = proxy;
            
            
            imap.Login("test@example.com", "test" );
            
            //list the folders
            MailFolderCollection folders = imap.FolderList();
            
            foreach( MailFolder folder in folders )
            {
            	Console.WriteLine( folder.Name );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            'create the proxy object
            Dim proxy As New IMAPProxy()
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe"
            proxy.Password = "secret"
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword
            proxy.Type = IMAPProxyType.Socks5
            
            'set it on the IMAP object
            imap.Proxy = proxy
            
            
            imap.Login("test@example.com", "test")
            
            'list the folders
            Dim folders As MailFolderCollection = imap.FolderList()
            
            Dim folder As MailFolder
            For Each folder In  folders
               Console.WriteLine(folder.Name)
            Next folder
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAPProxy.Type">
            <summary>The type (Socks4 or Socks5) of proxy server.</summary>
            <remarks>
            When this value is set to some other value than IMAPProxyType.None, the IMAPProxy
            will be enabled.
            </remarks>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            //create the proxy object
            IMAPProxy proxy = new IMAPProxy(  );
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe";
            proxy.Password = "secret";
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword;
            proxy.Type= IMAPProxyType.Socks5;
            
            //set it on the IMAP object
            imap.Proxy = proxy;
            
            
            imap.Login("test@example.com", "test" );
            
            //list the folders
            MailFolderCollection folders = imap.FolderList();
            
            foreach( MailFolder folder in folders )
            {
            	Console.WriteLine( folder.Name );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            'create the proxy object
            Dim proxy As New IMAPProxy()
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe"
            proxy.Password = "secret"
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword
            proxy.Type = IMAPProxyType.Socks5
            
            'set it on the IMAP object
            imap.Proxy = proxy
            
            
            imap.Login("test@example.com", "test")
            
            'list the folders
            Dim folders As MailFolderCollection = imap.FolderList()
            
            Dim folder As MailFolder
            For Each folder In  folders
               Console.WriteLine(folder.Name)
            Next folder
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAPProxy.Username">
            <summary>The username required to communicate through the proxy server.</summary>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            //create the proxy object
            IMAPProxy proxy = new IMAPProxy(  );
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe";
            proxy.Password = "secret";
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword;
            proxy.Type= IMAPProxyType.Socks5;
            
            //set it on the IMAP object
            imap.Proxy = proxy;
            
            
            imap.Login("test@example.com", "test" );
            
            //list the folders
            MailFolderCollection folders = imap.FolderList();
            
            foreach( MailFolder folder in folders )
            {
            	Console.WriteLine( folder.Name );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            'create the proxy object
            Dim proxy As New IMAPProxy()
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe"
            proxy.Password = "secret"
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword
            proxy.Type = IMAPProxyType.Socks5
            
            'set it on the IMAP object
            imap.Proxy = proxy
            
            
            imap.Login("test@example.com", "test")
            
            'list the folders
            Dim folders As MailFolderCollection = imap.FolderList()
            
            Dim folder As MailFolder
            For Each folder In  folders
               Console.WriteLine(folder.Name)
            Next folder
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.IMAPProxy.UseRemoteDns">
            <summary>Let the proxy server resolve the IMAP server's name.</summary>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            //create the proxy object
            IMAPProxy proxy = new IMAPProxy(  );
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe";
            proxy.Password = "secret";
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword;
            proxy.Type= IMAPProxyType.Socks5;
            proxy.RemoteDns = true;
            
            //set it on the IMAP object
            imap.Proxy = proxy;
            
            
            imap.Login("test@example.com", "test" );
            
            //list the folders
            MailFolderCollection folders = imap.FolderList();
            
            foreach( MailFolder folder in folders )
            {
            	Console.WriteLine( folder.Name );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            'create the proxy object
            Dim proxy As New IMAPProxy()
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe"
            proxy.Password = "secret"
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword
            proxy.Type = IMAPProxyType.Socks5
            proxy. RemoteDns = True
            
            'set it on the IMAP object
            imap.Proxy = proxy
            
            
            imap.Login("test@example.com", "test")
            
            'list the folders
            Dim folders As MailFolderCollection = imap.FolderList()
            
            Dim folder As MailFolder
            For Each folder In  folders
               Console.WriteLine(folder.Name)
            Next folder
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="T:aspNetIMAP.IMAPProxyAuthentication">
            <summary>Authentication to use when comminicating through the Proxy server.</summary>
            <summary>Creates an instance of the IMAPProxy object</summary>
        </member>
        <member name="F:aspNetIMAP.IMAPProxyAuthentication.None">
            <summary>
            Do not use any authentication. If the username and password properties are set,
            this value is only valid if set after setting the username and password values.
            </summary>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            //create the proxy object
            IMAPProxy proxy = new IMAPProxy(  );
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Authentication = IMAPProxyAuthentication.None;
            proxy.Type= IMAPProxyType.Socks5;
            
            //set it on the IMAP object
            imap.Proxy = proxy;
            
            
            imap.Login("test@example.com", "test" );
            
            //list the folders
            MailFolderCollection folders = imap.FolderList();
            
            foreach( MailFolder folder in folders )
            {
            	Console.WriteLine( folder.Name );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            'create the proxy object
            Dim proxy As New IMAPProxy()
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Authentication = IMAPProxyAuthentication.Note
            proxy.Type = IMAPProxyType.Socks5
            
            'set it on the IMAP object
            imap.Proxy = proxy
            
            
            imap.Login("test@example.com", "test")
            
            'list the folders
            Dim folders As MailFolderCollection = imap.FolderList()
            
            Dim folder As MailFolder
            For Each folder In  folders
               Console.WriteLine(folder.Name)
            Next folder
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="F:aspNetIMAP.IMAPProxyAuthentication.UsernamePassword">
            <summary>Use username/password authentication.</summary>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            //create the proxy object
            IMAPProxy proxy = new IMAPProxy(  );
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe";
            proxy.Password = "secret";
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword;
            proxy.Type= IMAPProxyType.Socks5;
            
            //set it on the IMAP object
            imap.Proxy = proxy;
            
            
            imap.Login("test@example.com", "test" );
            
            //list the folders
            MailFolderCollection folders = imap.FolderList();
            
            foreach( MailFolder folder in folders )
            {
            	Console.WriteLine( folder.Name );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            'create the proxy object
            Dim proxy As New IMAPProxy()
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe"
            proxy.Password = "secret"
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword
            proxy.Type = IMAPProxyType.Socks5
            
            'set it on the IMAP object
            imap.Proxy = proxy
            
            
            imap.Login("test@example.com", "test")
            
            'list the folders
            Dim folders As MailFolderCollection = imap.FolderList()
            
            Dim folder As MailFolder
            For Each folder In  folders
               Console.WriteLine(folder.Name)
            Next folder
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="T:aspNetIMAP.IMAPProxyType">
            <summary>The type of proxy server.</summary>
            <summary>Creates an instance of the POP3Proxy object</summary>
        </member>
        <member name="F:aspNetIMAP.IMAPProxyType.None">
            <summary>Do not use the proxy server.</summary>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            //create the proxy object
            IMAPProxy proxy = new IMAPProxy(  );
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe";
            proxy.Password = "secret";
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword;
            proxy.Type= IMAPProxyType.None; //disable the proxy server use
            
            //set it on the IMAP object
            imap.Proxy = proxy;
            
            
            imap.Login("test@example.com", "test" );
            
            //list the folders
            MailFolderCollection folders = imap.FolderList();
            
            foreach( MailFolder folder in folders )
            {
            	Console.WriteLine( folder.Name );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            'create the proxy object
            Dim proxy As New IMAPProxy()
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe"
            proxy.Password = "secret"
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword
            proxy.Type = IMAPProxyType.None 'disable the proxy server use
            
            'set it on the IMAP object
            imap.Proxy = proxy
            
            
            imap.Login("test@example.com", "test")
            
            'list the folders
            Dim folders As MailFolderCollection = imap.FolderList()
            
            Dim folder As MailFolder
            For Each folder In  folders
               Console.WriteLine(folder.Name)
            Next folder
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="F:aspNetIMAP.IMAPProxyType.Socks4">
            <summary>Socks4 compliant proxy</summary>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            //create the proxy object
            IMAPProxy proxy = new IMAPProxy(  );
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Type= IMAPProxyType.Socks4;
            
            //set it on the IMAP object
            imap.Proxy = proxy;
            
            
            imap.Login("test@example.com", "test" );
            
            //list the folders
            MailFolderCollection folders = imap.FolderList();
            
            foreach( MailFolder folder in folders )
            {
            	Console.WriteLine( folder.Name );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            'create the proxy object
            Dim proxy As New IMAPProxy()
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Type = IMAPProxyType.Socks4
            
            'set it on the IMAP object
            imap.Proxy = proxy
            
            
            imap.Login("test@example.com", "test")
            
            'list the folders
            Dim folders As MailFolderCollection = imap.FolderList()
            
            Dim folder As MailFolder
            For Each folder In  folders
               Console.WriteLine(folder.Name)
            Next folder
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="F:aspNetIMAP.IMAPProxyType.Socks5">
            <summary>Socks5 compliant proxy</summary>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            //create the proxy object
            IMAPProxy proxy = new IMAPProxy(  );
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe";
            proxy.Password = "secret";
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword;
            proxy.Type= IMAPProxyType.Socks5;
            
            //set it on the IMAP object
            imap.Proxy = proxy;
            
            
            imap.Login("test@example.com", "test" );
            
            //list the folders
            MailFolderCollection folders = imap.FolderList();
            
            foreach( MailFolder folder in folders )
            {
            	Console.WriteLine( folder.Name );
            }
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            'create the proxy object
            Dim proxy As New IMAPProxy()
            proxy.Server = "proxy1.example.com";
            proxy.Port = 8080;
            proxy.Username = "jdoe"
            proxy.Password = "secret"
            proxy.Authentication = IMAPProxyAuthentication.UsernamePassword
            proxy.Type = IMAPProxyType.Socks5
            
            'set it on the IMAP object
            imap.Proxy = proxy
            
            
            imap.Login("test@example.com", "test")
            
            'list the folders
            Dim folders As MailFolderCollection = imap.FolderList()
            
            Dim folder As MailFolder
            For Each folder In  folders
               Console.WriteLine(folder.Name)
            Next folder
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="T:aspNetIMAP.IMAPUtility">
            <summary>Various utility methods for interacting with the IMAP server.</summary>
        </member>
        <member name="M:aspNetIMAP.IMAPUtility.#ctor">
            <summary>Creates an instance of the IMAPUtility object.</summary>
        </member>
        <member name="M:aspNetIMAP.IMAPUtility.ToIMAPDate">
            <summary>Converts today's DateTime to an IMAP formatted date and time.</summary>
            <example>
            	<code lang="C#" title="ToIMAPDate">
            string nowAt = IMAPUtility.ToIMAPDate();
            Console.WriteLine( nowAt );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="ToIMAPDate">
            Dim nowAt As String = IMAPUtility.ToIMAPDate()
            Console.WriteLine(nowAt)
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.IMAPUtility.ToIMAPDate(System.DateTime)">
            <summary>Converts a .NET DateTime structure to an IMAP formatted date and time.</summary>
            <example>
            	<code lang="C#" title="ToIMAPDate">
            //grab this time, yesterday
            DateTime yday = DateTime.Now.AddDays( -1 );
             
            string imapdate = IMAPUtility.ToIMAPDate( yday );
            Console.WriteLine( imapdate  );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="ToIMAPDate">
            'grab this time, yesterday
            Dim yday As DateTime = DateTime.Now.AddDays(- 1)
             
            Dim imapdate As String = IMAPUtility.ToIMAPDate(yday)
            Console.WriteLine(imapdate)
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="dateTime">A .NET DateTime structure.</param>
        </member>
        <member name="M:aspNetIMAP.IMAPUtility.ToIMAPDate(System.DateTime,System.Boolean)">
            <summary>Converts a .NET DateTime structure to an IMAP formatted date and time.</summary>
            <example>
            	<code lang="C#" title="ToIMAPDate">
            //grab this time, yesterday
            DateTime yday = DateTime.Now.AddDays( -1 );
             
            string imapdate = IMAPUtility.ToIMAPDate( yday );
            Console.WriteLine( imapdate  );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="ToIMAPDate">
            'grab this time, yesterday
            Dim yday As DateTime = DateTime.Now.AddDays(- 1)
             
            Dim imapdate As String = IMAPUtility.ToIMAPDate(yday)
            Console.WriteLine(imapdate)
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="dateTime">The .NET DateTime structure.</param>
            <param name="dayOnly">If True, only outputs the Day only, and not the time part of DateTime.</param>
        </member>
        <member name="M:aspNetIMAP.IMAPUtility.TimeZoneOffset(System.DateTime)">
            <summary>Returns the offset, in IMAP format, from GMT.</summary>
            <example>
            	<code lang="C#" title="TimeZoneOffset">
            //grab the time
            DateTime nowAt = DateTime.Now;
             
            string tzOffset = IMAPUtility.TimeZoneOffset( nowAt );
            Console.WriteLine( tzOffset );
             
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="TimeZoneOffset">
            'grab the time
            Dim nowAt As DateTime = DateTime.Now
             
            Dim tzOffset As String = IMAPUtility.TimeZoneOffset(nowAt)
            Console.WriteLine(tzOffset)
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="date">The DateTime used for calculating the offset.</param>
        </member>
        <member name="M:aspNetIMAP.IMAPUtility.FromInternalIMAPDate(System.String)">
            <summary>
            Converts a properly formatted IMAP date time string to a .NET DateTime
            structure
            </summary>
            <param name="imapDate">IMAP date and time string.</param>
        </member>
        <member name="M:aspNetIMAP.IMAPUtility.FromRFC822Date(System.String)">
            <summary>
            Converts a RFC822 date, to a .NET framework DateTime value type..
            </summary>
            <param name="emailDate">The RFC 822 date string.</param>
            <remarks>If the emailDate is in an unreadable format, or not able to be parsed, a DateTime.MinValue DateTime is returned.</remarks>
            <returns>DateTime value type. </returns>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "C:\\imap.log";
            
            imap.Login("test@example.com", "test" );
            
            //inbox
            MailFolder inbox = imap.SelectInbox();
            
            Envelope env = inbox.FetchClient.Envelope(1);
            
            //get the date as a DateTime object
            DateTime dt = IMAPUtility.FromRFC822Date( env.MessageDate );
            
            //compare the two date formats
            Console.WriteLine( env.MessageDate );
            Console.WriteLine( dt.ToString() );
            
            imap.Disconnect();
            
            Console.WriteLine( "Done" );
            Console.ReadLine();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "C:\imap.log"
            
            imap.Login("test@example.com", "test")
            
            'inbox
            Dim inbox As MailFolder = imap.SelectInbox()
            
            Dim env As Envelope = inbox.FetchClient.Envelope(1)
            
            'get the date as a DateTime object
            Dim dt As DateTime = IMAPUtility.FromRFC822Date(env.MessageDate)
            
            'compare the two date formats
            Console.WriteLine(env.MessageDate)
            Console.WriteLine(dt.ToString())
            
            imap.Disconnect()
            
            Console.WriteLine("Done")
            Console.ReadLine()
            
            </code>
            </example>
            
        </member>
        <member name="M:aspNetIMAP.IMAPUtility.FromIMAPMonth(System.String)">
            <summary>
            Converts a 3 character month abbreviation to its 2 character numeric
            abbreviation.
            </summary>
            <returns>The 2 character numeric month value.</returns>
            <example>
            	<code lang="C#" title="FromIMAPMonth">
            //grab the time
            string mo = "Feb";
             
            string monthAs2DigitNumber = IMAPUtility.FromIMAPMonth( mo );
             
            //shoiuld be "02"
            Console.WriteLine( monthAs2DigitNumber  );
            </code>
            	<code lang="VB.NET" title="FromIMAPMonth">
            'grab the time
            Dim mo As String = "Feb"
             
            Dim monthAs2DigitNumber  As String = IMAPUtility.FromIMAPMonth(mo)
             
            'shoiuld be "02"
            Console.WriteLine(monthAs2DigitNumber)
                </code>
            </example>
            <param name="month">The 3 character month.</param>
        </member>
        <member name="T:aspNetIMAP.MailFolder">
            <summary>
            Class representing a mail folder.
            </summary>
            <remarks>A MailFolder is also commonly referred to as a 'mailbox' in the IMAP RFCs.</remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder( "inbox" );
            Console.WriteLine( mf.Information().ToString() );
             
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("inbox")
            Console.WriteLine(mf.Information().ToString())
             
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolder.#ctor">
            <summary>
            Creates an instance of a Mail Folder.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder( "inbox" );
            Console.WriteLine( mf.Information().ToString() );
             
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("inbox")
            Console.WriteLine(mf.Information().ToString())
             
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolder.#ctor(aspNetIMAP.IMAP4,System.String)">
            <summary>
            Creates a new MailFolder, with a given path, and a reference to an IMAP4 object.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = new MailFolder( imap, "inbox");
             
            Console.WriteLine( mf.Information().ToString()  );
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As New MailFolder(imap, "inbox")
             
            Console.WriteLine(mf.Information().ToString())
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="connection">IMAP4 connection object to the IMAP server.</param>
            <param name="path">Full path of the MailFolder</param>
        </member>
        <member name="M:aspNetIMAP.MailFolder.CreateFolder(System.String)">
            <summary>
            Creates a subfolder of this mailfolder.
            </summary>
            <returns>The created MailFolder</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //create a new folder
            MailFolder newFolder = mf.CreateFolder( "NewFolder"  );
            Console.WriteLine( newFolder.Information().ToString() );
             
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'create a new folder
            Dim newFolder As MailFolder = mf.CreateFolder("NewFolder")
            Console.WriteLine(newFolder.Information().ToString())
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="folderName">Sub folder name.</param>
        </member>
        <member name="M:aspNetIMAP.MailFolder.CreateFolder(System.String,System.Boolean)">
            <summary>
            Creates a subfolder
            </summary>
            <returns>The created folder.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //create a new folder
            MailFolder newFolder = mf.CreateFolder( "NewFolder", true );
            Console.WriteLine( newFolder.Information().ToString() );
             
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'create a new folder
            Dim newFolder As MailFolder = mf.CreateFolder("NewFolder", True)
            Console.WriteLine(newFolder.Information().ToString())
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="folderName">The subfolder name.</param>
            <param name="selectFolder">Select this folder.</param>
        </member>
        <member name="M:aspNetIMAP.MailFolder.CreateFolder(System.String,System.Boolean,System.String)">
            <summary>
            Creates a subfolder.
            </summary>
            <returns>The created folder.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
             
            string delim = mf.RefreshDelimiter();
             
            //create a new folder
            MailFolder newFolder = mf.CreateFolder( "NewFolder", true, delim );
            Console.WriteLine( newFolder.Information().ToString() );
             
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
             
            Dim delim As String = mf.RefreshDelimiter()
             
            'create a new folder
            Dim newFolder As MailFolder = mf.CreateFolder("NewFolder", True, delim)
            Console.WriteLine(newFolder.Information().ToString())
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="folderName">The subfolder name.</param>
            <param name="selectFolder">Select the folder.</param>
            <param name="delimiter">The folder delimiter.</param>
        </member>
        <member name="M:aspNetIMAP.MailFolder.Checkpoint">
            <summary>
            Checkpoints the folder.
            </summary>
            <returns>The success of the checkpoint.</returns>
            <remarks>
            The CHECK command requests a checkpoint of the currently selected<br/>
             mailbox. A checkpoint refers to any implementation-dependent<br/>
             housekeeping associated with the mailbox (e.g., resolving the<br/>
             server's in-memory state of the mailbox with the state on its<br/>
            	<br/>
             disk) that is not normally executed as part of each command. A<br/>
             checkpoint MAY take a non-instantaneous amount of real time to<br/>
             complete. If a server implementation has no such housekeeping<br/>
             considerations, CHECK is equivalent to NOOP.
            </remarks>
        </member>
        <member name="M:aspNetIMAP.MailFolder.Close">
            <summary>
            Close the mailfolder.
            </summary>
        </member>
        <member name="M:aspNetIMAP.MailFolder.CurrentMessageCount">
            <summary>Retreives the current message count.</summary>
            <remarks>
            If the MailFolder is in use, after a while the property
            <see cref="P:aspNetIMAP.MailFolder.MessageCount">MessageCount</see>, may be come outdated with the MailFolder.
            For the current number of messages, use
            <see cref="M:aspNetIMAP.MailFolder.CurrentMessageCount">CurrentMessageCount</see>. The property
            <see cref="P:aspNetIMAP.MailFolder.MessageCount">MessageCount</see> is only populated when the MailFolder
            object is first instantiated.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            Console.WriteLine( mf.CurrentMessageCount() );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Console.WriteLine(mf.CurrentMessageCount())
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolder.DeleteMe">
            <summary>Delete's this MailFolder on the IMAP Server</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder( "NewFolder" );
             
            mf.DeleteMe();
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("NewFolder")
             
            mf.DeleteMe()
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolder.DeleteFolder(System.String)">
            <summary>Delete a sub folder.</summary>
            <returns>The delete success.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            //create a new folder
            MailFolder newFolder  = imap.CreateFolder( "NewFolder", true );
             
            //create a sub 
            MailFolder subFolder = newFolder.CreateFolder("SubFolder", true );
             
            //now delete the subfolder
            newFolder.DeleteFolder( "SubFolder" );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            'create a new folder
            Dim newFolder As MailFolder = imap.CreateFolder("NewFolder", True)
             
            'create a sub 
            Dim subFolder As MailFolder = newFolder.CreateFolder("SubFolder", True)
             
            'now delete the subfolder
            newFolder.DeleteFolder("SubFolder")
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="folderName">Sub folder name.</param>
        </member>
        <member name="M:aspNetIMAP.MailFolder.DeleteFolder(System.String,System.String)">
            <summary>Delete a sub folder.</summary>
            <returns>The delete success.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            //create a new folder
            MailFolder newFolder  = imap.CreateFolder( "NewFolder", true );
             
            //create a sub 
            MailFolder subFolder = newFolder.CreateFolder("SubFolder", true );
             
            //now delete the subfolder
            newFolder.DeleteFolder( "SubFolder", "/" );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            'create a new folder
            Dim newFolder As MailFolder = imap.CreateFolder("NewFolder", True)
             
            'create a sub 
            Dim subFolder As MailFolder = newFolder.CreateFolder("SubFolder", True)
             
            'now delete the subfolder
            newFolder.DeleteFolder("SubFolder", "/")
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="folderName">Sub folder to delete.</param>
            <param name="delimiter">Folder delimiter</param>
        </member>
        <member name="M:aspNetIMAP.MailFolder.DeleteAllMessages">
            <summary>Marks all messages in the MailFolder for deletion.</summary>
            <remarks>
            The messages are not actually deleted and removed from the server.<br/>
            Instead, they are only marked for deletion. It's not until
            <see cref="M:aspNetIMAP.MailFolder.PurgeDeletedMessages">PurgeDeletedMessages()</see> is called, that the
            messages will actually be removed from the server.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder("NewFolder");
            mf.DeleteAllMessages();
             
            //remove them
            mf.PurgeDeletedMessages();
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("NewFolder")
            mf.DeleteAllMessages()
             
            'remove them
            mf.PurgeDeletedMessages()
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolder.DeleteAllMessages(System.Boolean)">
            <summary>Marks all messages in the MailFolder for deletion.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder("NewFolder");
            mf.DeleteAllMessages(true);
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("NewFolder")
            mf.DeleteAllMessages(True)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="purge">If purge is set to True, the messages will be Expunged from the server.</param>
        </member>
        <member name="M:aspNetIMAP.MailFolder.Open">
            <summary>
            Selects or Opens this folder.
            </summary>
            <returns>True for a successful open</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
             
            MailFolder mf = new MailFolder( imap, "Inbox" );
            mf.Open();
             
            Console.WriteLine( mf.Information() );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
             
            Dim mf As New MailFolder(imap, "Inbox")
            mf.Open()
             
            Console.WriteLine(mf.Information())
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolder.Open(System.Boolean)">
            <summary>Opens a MailFolder</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
             
            MailFolder mf = new MailFolder( imap, "Inbox" );
            mf.Open(true);
             
            Console.WriteLine( mf.Information() );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
             
            Dim mf As New MailFolder(imap, "Inbox")
            mf.Open(True)
             
            Console.WriteLine(mf.Information())
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="readOnly">If True, opens the MailFolder in read-only mode.</param>
        </member>
        <member name="M:aspNetIMAP.MailFolder.PurgeDeletedMessages">
            <summary>Expunges any messages marked for deletion.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder("NewFolder");
            mf.DeleteAllMessages();
             
            //remove them
            mf.PurgeDeletedMessages();
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("NewFolder")
            mf.DeleteAllMessages()
             
            'remove them
            mf.PurgeDeletedMessages()
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolder.Rename(System.String)">
            <summary>Renames this folder name.</summary>
            <returns>True for a successful subscribe.</returns>
            <summary>
            Renames this folder.
            </summary>
            <returns>True if the rename was successful.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder("NewFolder");
            mf.Rename( "DifferentName");
             
            Console.WriteLine( mf.Information().ToString() );
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("NewFolder")
            mf.Rename("DifferentName")
             
            Console.WriteLine(mf.Information().ToString())
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="newFolderName">The new name.</param>
        </member>
        <member name="M:aspNetIMAP.MailFolder.Rename(System.String,System.String)">
            <summary>Renames a sub folder</summary>
            <returns>True if the rename was successful.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder("NewFolder");
            mf.Rename( "SubFolder", "SubFolderNew" );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("NewFolder")
            mf.Rename("SubFolder", "SubFolderNew")
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="oldFolderName">Sub folder name</param>
            <param name="newFolderName">New name.</param>
        </member>
        <member name="M:aspNetIMAP.MailFolder.Refresh">
            <summary>
            Refreshes this folder's properties.
            </summary>
            <example>
            	<code lang="CS">
            IMAP4 imap = new IMAP4( "mail.example.com" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
             
            imap.Logger.Path = "C:\\imap.log";
            imap.Login("test@example.com", "test"  );
             
            //get the 'Drafts' folder
            MailFolder drafts = imap.SelectFolder( "Drafts" );
             
            //number of items in the folder
            int count = drafts.MessageCount;
             
            //save the RFC2822 formatted file to the "drafts" folder
            FileStream fs = File.OpenRead( "c:\\temp\\draft.eml" );
            drafts.MessageClient.Append( fs, Flag.ConvertToString( FlagTypes.Draft ) );
             
            //verify it is saved by checking the count, and downloading the latest message
            drafts.Refresh();
            count = drafts.MessageCount;
            Console.WriteLine( count );
             
            //download the message
            string text = drafts.FetchClient.MessageAsText( count, IndexType.Ordinal, false );
            Console.WriteLine( text );
             
            imap.Disconnect();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
             
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
             
            imap.Logger.Path = "C:\imap.log"
            imap.Login("test@example.com", "test")
             
            'get the 'Drafts' folder
            Dim drafts As MailFolder = imap.SelectFolder("Drafts")
             
            'number of items in the folder
            Dim count As Integer = drafts.MessageCount
             
            'save the RFC2822 formatted file to the "drafts" folder
            Dim fs As FileStream = File.OpenRead("c:\temp\draft.eml")
            drafts.MessageClient.Append(fs, Flag.ConvertToString(FlagTypes.Draft))
             
            'verify it is saved by checking the count, and downloading the latest message
            drafts.Refresh()
            count = drafts.MessageCount
            Console.WriteLine(count)
             
            'download the message
            Dim [text] As String = drafts.FetchClient.MessageAsText(count, IndexType.Ordinal, False)
            Console.WriteLine([text])
             
            imap.Disconnect()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolder.RefreshDelimiter">
            <summary>Checks with the server, to determine the MailFolder delimiter.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder("inbox" );
            mf.RefreshDelimiter();
            Console.WriteLine( mf.RefreshDelimiter() );
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("inbox")
            mf.RefreshDelimiter()
            Console.WriteLine(mf.RefreshDelimiter())
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolder.SubFolders">
            <summary>A MailFolderCollection of Sub Folders</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder("NewFolder");
             
            MailFolderCollection mfc = mf.SubFolders();
             
            Console.WriteLine( mfc.ToString() );
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("NewFolder")
             
            Dim mfc As MailFolderCollection = mf.SubFolders()
             
            Console.WriteLine(mfc.ToString())
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolder.Subscribe">
            <summary>Subscribes to the current folder.</summary>
            <remarks>
            	<para>Subscribe allows the user to selectively list, and subscribe, to folders that
                interest them.</para>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder("NewFolder");
            mf.Subscribe();
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("NewFolder")
            mf.Subscribe()
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MailFolder.Information">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder( "inbox" );
            Console.WriteLine( mf.Information().ToString() );
             
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("inbox")
            Console.WriteLine(mf.Information().ToString())
             
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>
            Populates a FolderInformation object with the latest available information from
            the server.
            </summary>
        </member>
        <member name="M:aspNetIMAP.MailFolder.Unsubscribe">
            <summary>
            Unsubscribes to this folder.
            </summary>
            <returns>True if the unsubscribe was successful.</returns>
        </member>
        <member name="M:aspNetIMAP.MailFolder.EncodeFolderName(System.String,System.Text.Encoding)">
            <summary>Encodes a folder name using IMAP RFC specifications.</summary>
            <remarks>
            This technique conforms to the IMAP RFCs for encoding non-ascii folder
            names.
            </remarks>
            <param name="folderName">The non-ascii string to encode.</param>
            <param name="encoding">The string encoding.</param>
        </member>
        <member name="M:aspNetIMAP.MailFolder.DecodeFolderName(System.String,System.Text.Encoding)">
            <summary>Decodes a folder name using IMAP RFC specifications.</summary>
            <remarks>
            This technique conforms to the IMAP RFCs for decoding non-ascii folder
            names.
            </remarks>
            <param name="folderName">Encoded folder name.</param>
            <param name="encoding">Encoding to convert the folder name too.</param>
        </member>
        <member name="P:aspNetIMAP.MailFolder.IMAP4">
            <summary>
            IMAP4 connection.
            </summary>
            <remarks>
            The IMAP4 connection class used for managing and talking to the IMAP
            server.
            </remarks>
        </member>
        <member name="P:aspNetIMAP.MailFolder.Attributes">
            <summary>
            Folder attributes.
            </summary>
            <remarks>
            Folder attributes are populated during <see cref="P:aspNetIMAP.MailFolder.IMAP4">Listing</see>
            calls
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolderCollection mfc = imap.FolderList();
            foreach( MailFolder mf in mfc )
            {
                Console.WriteLine( mf.Attributes );
            }
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
            </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mfc As MailFolderCollection = imap.FolderList()
            Dim mf As MailFolder
            For Each mf In  mfc
               Console.WriteLine(mf.Attributes)
            Next mf
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.MailFolder.Delimiter">
            <summary>
            Folder delimiter between other folder names. By default, this value is '/'.
            </summary>
            <remarks>
            If the delimiter is unknown,
            <see cref="M:aspNetIMAP.MailFolder.RefreshDelimiter">RefreshDelimiter()</see> can be called, to retrieve it
            from the IMAP server.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder("inbox" );
            mf.RefreshDelimiter();
            Console.WriteLine( mf.RefreshDelimiter() );
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("inbox")
            mf.RefreshDelimiter()
            Console.WriteLine(mf.RefreshDelimiter())
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.MailFolder.EncodedName">
            <summary>
            The Encoded name of the folder.
            </summary>
        </member>
        <member name="P:aspNetIMAP.MailFolder.FirstUnread">
            <summary>
            The number of the first unread message.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder("inbox" );
             
            int firstUnread = mf.FirstUnread;
             
            string contents = mf.FetchClient.MessageAsText( firstUnread );
             
            Console.WriteLine( contents );
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("inbox")
             
            Dim firstUnread As Integer = mf.FirstUnread
             
            Dim contents As String = mf.FetchClient.MessageAsText(firstUnread)
             
            Console.WriteLine(contents)
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.MailFolder.Flags">
            <summary>
            Collection of flags found on this folder.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder("inbox" );
             
            Console.WriteLine( mf.Flags.ToString() );
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("inbox")
             
            Console.WriteLine(mf.Flags.ToString())
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.MailFolder.MessageCount">
            <summary>
            Get the message count, after the mail folder has been selected.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder("inbox" );
             
            Console.WriteLine( mf.MessageCount );
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("inbox")
             
            Console.WriteLine(mf.MessageCount)
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>
            If the MailFolder is in use, after a while the property
            <see cref="P:aspNetIMAP.MailFolder.MessageCount">MessageCount</see>, may be come outdated with the MailFolder.
            For the current number of messages, use
            <see cref="M:aspNetIMAP.MailFolder.CurrentMessageCount">CurrentMessageCount</see>. The property
            <see cref="P:aspNetIMAP.MailFolder.MessageCount">MessageCount</see> is only populated when the MailFolder
            object is first instantiated.
            </remarks>
        </member>
        <member name="P:aspNetIMAP.MailFolder.MessageClient">
            <summary>The engine used to manipulate messages in this MailFolder.</summary>
            <remarks>
            	<para>The message client is used for manipulating the properties of the messages.
                Some other common methods are also found in this object, such as
                <see cref="P:aspNetIMAP.MailFolder.MessageClient">Copying</see> and <see cref="P:aspNetIMAP.MailFolder.MessageClient">Moving</see> messages. For more
                specific message retrieval methods, check out the
                <see cref="P:aspNetIMAP.MailFolder.SearchClient">SearchClient</see> and the
                <see cref="P:aspNetIMAP.MailFolder.FetchClient">FetchClient</see>.</para>
            	<para><strong>Message Numbers</strong><br/>
                A word about message numbers, and the IMAP message numbering scheme.</para>
            	<para>There are two numbering systems to reference messages in the mail folder.
                Messages can be referenced by their ordinal position, or by a unique identifier
                (UID). Multiple message numbers can be separated by commas or can be designated
                with a '*', which refers to the highest message number in the mail folder. A pair
                of numbers, separated by a ':', indicates a contiguous set of messages ranging from
                the first message number to the second. These ranges of message numbers are called
                'message sets'. Message numbers, referenced by their ordinal index, are always
                ascending and always contiguous.</para>
            	<para>As an example, here are some message sets, and the respective messages they
                represent. All of the numbers used in this example, reference the messages by their
                ordinal index. This example also assumes there are 7 messages in the mail
                folder.</para>
            	<para>
            		<list type="table">
            			<item>
            				<term>MessageSet</term>
            				<description>Actual Message Numbers</description>
            			</item>
            			<item>
            				<term>1</term>
            				<description>1</description>
            			</item>
            			<item>
            				<term>2, 5</term>
            				<description>2 5</description>
            			</item>
            			<item>
            				<term>1:*</term>
            				<description>1 2 3 4 5 6 7</description>
            			</item>
            			<item>
            				<term>5:*</term>
            				<description>5 6 7</description>
            			</item>
            			<item>
            				<term>1,2,5,7</term>
            				<description>1 2 5 7</description>
            			</item>
            			<item>
            				<term>2:5</term>
            				<description>2 3 4 5</description>
            			</item>
            			<item>
            				<term>1,3:5,7</term>
            				<description>1 3 4 5 7</description>
            			</item>
            			<item>
            				<term>1:3, 5:7</term>
            				<description>1 2 3 5 6 7</description>
            			</item>
            			<item>
            				<term>1,3:5,6:*</term>
            				<description>1 3 4 5 6 7</description>
            			</item>
            		</list>
            	</para>
            	<para>
            		<para><br/>
                    These properly formatted message sets can be used when various aspNetIMAP
                    methods accept the messageSet parameter. Although this example uses</para>
            		<para>Ordinal Indexes, the same technique (using commas ',' and asterisks '*' )
                    can be used with UID's (Unique Identifiers).</para>
            		<para><br/>
            			<strong>Ordinal Indexes</strong><br/>
                    IMAP uses a 1 based indexing system. Thus a message with index 1 will actually
                    reference the first message in the mail folder. This may be different that what
                    some developers are used too. For example, C# or C++ uses a zero based index,
                    thus the first message in the mail folder will have an index of zero.</para>
            		<para>The primary difficulty with the ordinal index number scheme is that the
                    message sequence numbers can change as messages are
                    <see cref="M:aspNetIMAP.MailFolder.PurgeDeletedMessages">Expunged</see>
                    (<see cref="M:aspNetIMAP.MailFolder.PurgeDeletedMessages">Purged</see>). For example, message 5 becomes
                    message 4 after message 2 has been
                    <see cref="M:aspNetIMAP.MailFolder.PurgeDeletedMessages">Expunged</see>. Thus all message numbers
                    greater than a deleted messages, are re-numbered, and decremented by the number
                    of messages deleted. Also, as messages are added to the mail folder, they are
                    added to the higher end of the ordinal indexes. For example, if a mail folder
                    has 7 messages in it, and a new message is received, or added, the new message
                    becomes message number 8.</para>
            		<para>Another problem with ordinal indexes, is that they are valid, only for
                    the session the client is connected to the server. For example, lets say a
                    client is interested in message number 7. If that client disconnects, and
                    another client connects, and <see cref="P:aspNetIMAP.MailFolder.MessageClient">Deletes</see> and
                    <see cref="M:aspNetIMAP.MailFolder.PurgeDeletedMessages">Expunges</see> message number 3, message
                    number 7 now becomes message number 6. Thus when the first client reconnects,
                    it has no way of knowing that the messages was renumbered.</para>
            		<para>
            			<para>This led to a second numbering scheme called Unique
                        Identifiers.</para>
            			<para><strong>Unique Identifiers (UIDs) Index</strong><br/>
                        IMAP assigns a unique identifier to every message found in a mail folder.
                        This is a 32 bit integer, and has to be unique, and constant for a given
                        message, whether or not a new message has been added 
                        (<see cref="P:aspNetIMAP.MailFolder.MessageClient">Appended</see>), received, or
                        <see cref="M:aspNetIMAP.MailFolder.PurgeDeletedMessages">Expunged</see>. Unique Identifiers are
                        assigned in ascending order, but there is no requirement for them to be
                        contiguous.</para>
            			<para>Because Unique Identifiers must be ascending numbers in the mail
                        folder, a physical reordering of the mail folder would cause them to be out
                        of sequence. When messages are renumbered with a new set of UIDs, the
                        unique identifiers must be recalculated, invaliding those referenced by the
                        client's cache. To handle this reordering, each mail folder is also
                        assigned a 32 bit integer called a unique identifier validity
                        (UID-validity). If a mail folder's messages are reordered, a new validity
                        value is assigned to the mail folder. This new validity value, MUST be
                        greater than the previous validity value. The validity is also changed, if
                        a mail folder is deleted and recreated.</para>
            			<para>The combination of Unique Identifiers and mail folder validity
                        provides a mechanism for clients to cache messages, and a way to determine
                        if that cache is valid.</para>
            			<para><strong>Message Flags<br/></strong>The MessageClient class also
                        deals with <see cref="P:aspNetIMAP.MailFolder.MessageClient">Marking</see>,
                        <see cref="P:aspNetIMAP.MailFolder.MessageClient">UnMarking</see>, and <see cref="P:aspNetIMAP.MailFolder.MessageClient">Setting</see>
                        messages with various flags. These flags are discussed below.</para>
            			<para>Messages often have status information associated with them, such as
                        including whether a message is new, has been answered, seen, or even marked
                        for deletion. It is interesting to note, that when a message is deleted, it
                        is only marked for deletion. It is not until
                        <see cref="M:aspNetIMAP.MailFolder.PurgeDeletedMessages">Expunge</see> or
                        <see cref="M:aspNetIMAP.MailFolder.PurgeDeletedMessages">Purge</see> is called (functionally
                        identical), that the messages are removed from the mail folder. Thus a
                        message can be deleted, or undeleted, simply by removing the \deleted
                        flag.</para>
            			<para>There are two types of flags: system flags and keywords. The
                        MessageClient deals specifically with System flags, System flags are always
                        prefixed with the '\' character, to distinguish them from keywords. At the
                        time of this writing, there are 6 system flags. They are:</para>
            			<para>
            				<list type="table">
            					<item>
            						<term>Flag</term>
            						<description>Description</description>
            					</item>
            					<item>
            						<term>\answered</term>
            						<description>A message has been replied to.</description>
            					</item>
            					<item>
            						<term>\deleted</term>
            						<description>A message is marked for deletion, and will be
                                    physically removed when Expunge or Purge is
                                    called.</description>
            					</item>
            					<item>
            						<term>\draft</term>
            						<description>A message is incomplete, and has not been fully
                                    composed by the user.</description>
            					</item>
            					<item>
            						<term>\flagged</term>
            						<description>A message is flagged or marked as
                                    important</description>
            					</item>
            					<item>
            						<term>\recent</term>
            						<description>A recent message to arrive in the mail
                                    folder.</description>
            					</item>
            					<item>
            						<term>\seen</term>
            						<description>A message has been read.</description>
            					</item>
            				</list>
            			</para>
            		</para>
            	</para>
            </remarks>
            <seealso cref="P:aspNetIMAP.MailFolder.FetchClient">FetchClient Class For Downloading Message Data</seealso>
            <seealso cref="P:aspNetIMAP.MailFolder.MessageClient">MessageClient Class</seealso>
        </member>
        <member name="P:aspNetIMAP.MailFolder.Name">
            <summary>
            The name of this folder.
            </summary>
            <remarks>
            If this folder is in the root of the IMAP server, the Name and the
            <see cref="P:aspNetIMAP.MailFolder.Path">Path</see> will be the same. The <see cref="P:aspNetIMAP.MailFolder.Path">Path</see> will be
            the fully qualified name of the server.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder("inbox" );
             
            Console.WriteLine( mf.Name );
            Console.WriteLine( mf.Path );
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("inbox")
             
            Console.WriteLine(mf.Name)
            Console.WriteLine(mf.Path)
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.MailFolder.RecentCount">
            <summary>Number of recent messages since the last time the folder was selected.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder("inbox" );
             
            Console.WriteLine( mf.RecentCount );
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("inbox")
             
            Console.WriteLine(mf.RecentCount)
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.MailFolder.ReadOnly">
            <summary>
            Returns the ReadOnly state of the MailFolder.
            </summary>
        </member>
        <member name="P:aspNetIMAP.MailFolder.Path">
            <summary>
            Full path to this folder.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder("inbox" );
             
            Console.WriteLine( mf.Name );
            Console.WriteLine( mf.Path );
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("inbox")
             
            Console.WriteLine(mf.Name)
            Console.WriteLine(mf.Path)
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.MailFolder.PermanentFlags">
            <summary>
            Permanent flags.
            </summary>
            <remarks>
            The permanent flags may not always be populated, as it is optional information,
            and not required by the IMAP server.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder("inbox" );
             
            Console.WriteLine( mf.PermanentFlags );
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("inbox")
             
            Console.WriteLine(mf.PermanentFlags)
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.MailFolder.Permission">
            <summary>
            Permission of the folder.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder("inbox" );
             
            Console.WriteLine( mf.Permission );
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("inbox")
             
            Console.WriteLine(mf.Permission)
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.MailFolder.UniqueId">
            <summary>
            Unique Id of this folder.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectFolder("inbox" );
             
            Console.WriteLine( mf.UniqueId );
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectFolder("inbox")
             
            Console.WriteLine(mf.UniqueId)
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.MailFolder.FetchClient">
            <summary>
            The FetchClient closely maps to the Fetch mechanism found in the IMAP RFCs. It can be used for downloading whole messages, or parts of messages.
            </summary>
        </member>
        <member name="P:aspNetIMAP.MailFolder.SearchClient">
            <summary>
            The SearchClient is used for server-side searching. All searching mechanism must be implemented by the server. 
            aspNetIMAP simply sends the commands to execute.
            </summary>
        </member>
        <member name="T:aspNetIMAP.MessageClient">
            <summary>.The class used to manipulate individual messages.</summary>
            <remarks>
            	<para>The message client is used for manipulating the properties of the messages.
                Some other common methods are also found in this object, such as
                <see cref="M:aspNetIMAP.MessageClient.Copy(System.Int32,System.String)">Copying</see> and <see cref="M:aspNetIMAP.MessageClient.Move(System.Int32,System.String)">Moving</see> messages. For more
                specific message retrieval methods, check out the
                <see cref="T:aspNetIMAP.SearchClient">SearchClient</see> and the
                <see cref="T:aspNetIMAP.FetchClient">FetchClient</see>.</para>
            	<para><strong>Message Numbers</strong><br/>
                A word about message numbers, and the IMAP message numbering scheme.</para>
            	<para>There are two numbering systems to reference messages in the mail folder.
                Messages can be referenced by their ordinal position, or by a unique identifier
                (UID). Multiple message numbers can be separated by commas or can be designated
                with a '*', which refers to the highest message number in the mail folder. A pair
                of numbers, separated by a ':', indicates a contiguous set of messages ranging from
                the first message number to the second. These ranges of message numbers are called
                'message sets'. Message numbers, referenced by their ordinal index, are always
                ascending and always contiguous.</para>
            	<para>As an example, here are some message sets, and the respective messages they
                represent. All of the numbers used in this example, reference the messages by their
                ordinal index. This example also assumes there are 7 messages in the mail
                folder.</para>
            	<para>
            		<list type="table">
            			<item>
            				<term>MessageSet</term>
            				<description>Actual Message Numbers</description>
            			</item>
            			<item>
            				<term>1</term>
            				<description>1</description>
            			</item>
            			<item>
            				<term>2, 5</term>
            				<description>2 5</description>
            			</item>
            			<item>
            				<term>1:*</term>
            				<description>1 2 3 4 5 6 7</description>
            			</item>
            			<item>
            				<term>5:*</term>
            				<description>5 6 7</description>
            			</item>
            			<item>
            				<term>1,2,5,7</term>
            				<description>1 2 5 7</description>
            			</item>
            			<item>
            				<term>2:5</term>
            				<description>2 3 4 5</description>
            			</item>
            			<item>
            				<term>1,3:5,7</term>
            				<description>1 3 4 5 7</description>
            			</item>
            			<item>
            				<term>1:3, 5:7</term>
            				<description>1 2 3 5 6 7</description>
            			</item>
            			<item>
            				<term>1,3:5,6:*</term>
            				<description>1 3 4 5 6 7</description>
            			</item>
            		</list>
            	</para>
            	<para>
            		<para><br/>
                    These properly formatted message sets can be used when various aspNetIMAP
                    methods accept the messageSet parameter. Although this example uses</para>
            		<para>Ordinal Indexes, the same technique (using commas ',' and asterisks '*' )
                    can be used with UID's (Unique Identifiers).</para>
            		<para><br/>
            			<strong>Ordinal Indexes</strong><br/>
                    IMAP uses a 1 based indexing system. Thus a message with index 1 will actually
                    reference the first message in the mail folder. This may be different that what
                    some developers are used too. For example, C# or C++ uses a zero based index,
                    thus the first message in the mail folder will have an index of zero.</para>
            		<para>The primary difficulty with the ordinal index number scheme is that the
                    message sequence numbers can change as messages are
                    <see cref="M:aspNetIMAP.MessageClient.PurgeDeletedMessages">Expunged</see>
                    (<see cref="M:aspNetIMAP.MessageClient.PurgeDeletedMessages">Purged</see>). For example, message 5 becomes
                    message 4 after message 2 has been
                    <see cref="M:aspNetIMAP.MessageClient.PurgeDeletedMessages">Expunged</see>. Thus all message numbers
                    greater than a deleted messages, are re-numbered, and decremented by the number
                    of messages deleted. Also, as messages are added to the mail folder, they are
                    added to the higher end of the ordinal indexes. For example, if a mail folder
                    has 7 messages in it, and a new message is received, or added, the new message
                    becomes message number 8.</para>
            		<para>Another problem with ordinal indexes, is that they are valid, only for
                    the session the client is connected to the server. For example, lets say a
                    client is interested in message number 7. If that client disconnects, and
                    another client connects, and <see cref="M:aspNetIMAP.MessageClient.Delete(System.Int32)">Deletes</see> and
                    <see cref="M:aspNetIMAP.MessageClient.PurgeDeletedMessages">Expunges</see> message number 3, message
                    number 7 now becomes message number 6. Thus when the first client reconnects,
                    it has no way of knowing that the messages was renumbered.</para>
            		<para>
            			<para>This led to a second numbering scheme called Unique
                        Identifiers.</para>
            			<para><strong>Unique Identifiers (UIDs) Index</strong><br/>
                        IMAP assigns a unique identifier to every message found in a mail folder.
                        This is a 32 bit integer, and has to be unique, and constant for a given
                        message, whether or not a new message has been added
                        (<see cref="M:aspNetIMAP.MessageClient.Append(System.String)">Appended</see>), received, or
                        <see cref="M:aspNetIMAP.MessageClient.PurgeDeletedMessages">Expunged</see>. Unique Identifiers are
                        assigned in ascending order, but there is no requirement for them to be
                        contiguous.</para>
            			<para>Because Unique Identifiers must be ascending numbers in the mail
                        folder, a physical reordering of the mail folder would cause them to be out
                        of sequence. When messages are renumbered with a new set of UIDs, the
                        unique identifiers must be recalculated, invaliding those referenced by the
                        client's cache. To handle this reordering, each mail folder is also
                        assigned a 32 bit integer called a unique identifier validity
                        (UID-validity). If a mail folder's messages are reordered, a new validity
                        value is assigned to the mail folder. This new validity value, MUST be
                        greater than the previous validity value. The validity is also changed, if
                        a mail folder is deleted and recreated.</para>
            			<para>The combination of Unique Identifiers and mail folder validity
                        provides a mechanism for clients to cache messages, and a way to determine
                        if that cache is valid.</para>
            			<para><strong>Message Flags<br/></strong>The MessageClient class also
                        deals with <see cref="M:aspNetIMAP.MessageClient.Mark(System.Int32,aspNetIMAP.FlagCollection,aspNetIMAP.IndexType)">Marking</see>,
                        <see cref="M:aspNetIMAP.MessageClient.UnMark(System.Int32,System.String)">UnMarking</see>, and <see cref="M:aspNetIMAP.MessageClient.SetFlags(System.Int32,System.String)">Setting</see>
                        messages with various flags. These flags are discussed below.</para>
            			<para>Messages often have status information associated with them, such as
                        including whether a message is new, has been answered, seen, or even marked
                        for deletion. It is interesting to note, that when a message is deleted, it
                        is only marked for deletion. It is not until
                        <see cref="M:aspNetIMAP.MessageClient.PurgeDeletedMessages">Expunge</see> or
                        <see cref="M:aspNetIMAP.MessageClient.PurgeDeletedMessages">Purge</see> is called (functionally
                        identical), that the messages are removed from the mail folder. Thus a
                        message can be deleted, or undeleted, simply by removing the \deleted
                        flag.</para>
            			<para>There are two types of flags: system flags and keywords. The
                        MessageClient deals specifically with System flags, System flags are always
                        prefixed with the '\' character, to distinguish them from keywords. At the
                        time of this writing, there are 6 system flags. They are:</para>
            			<para>
            				<list type="table">
            					<item>
            						<term>Flag</term>
            						<description>Description</description>
            					</item>
            					<item>
            						<term>\answered</term>
            						<description>A message has been replied to.</description>
            					</item>
            					<item>
            						<term>\deleted</term>
            						<description>A message is marked for deletion, and will be
                                    physically removed when Expunge or Purge is
                                    called.</description>
            					</item>
            					<item>
            						<term>\draft</term>
            						<description>A message is incomplete, and has not been fully
                                    composed by the user.</description>
            					</item>
            					<item>
            						<term>\flagged</term>
            						<description>A message is flagged or marked as
                                    important</description>
            					</item>
            					<item>
            						<term>\recent</term>
            						<description>A recent message to arrive in the mail
                                    folder.</description>
            					</item>
            					<item>
            						<term>\seen</term>
            						<description>A message has been read.</description>
            					</item>
            				</list>
            			</para>
            		</para>
            	</para>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
             
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
            FetchClient fc = inbox.FetchClient;
             
            //download the first message
            string contents = fc.MessageAsText(1);
             
            //do something with the message 
            Console.WriteLine( contents );
             
            //decide we want to delete it
            mc.Delete(1);
             
            //remove the deleted message(s)
            mc.PurgeDeletedMessages();
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
            Dim fc As FetchClient = inbox.FetchClient
             
            'download the first message
            Dim contents As String = fc.MessageAsText(1)
             
            'do something with the message 
            Console.WriteLine(contents)
             
            'decide we want to delete it
            mc.Delete(1)
             
            'remove the deleted message(s)
            mc.PurgeDeletedMessages()
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MessageClient.#ctor">
            <summary>Creates an instance of a MessageClient class.</summary>
            <remarks>
            This ctor is usually called internally, by the MailFolder object. See
            <see cref="P:aspNetIMAP.MailFolder.MessageClient">MailFolder.MessageClient</see> for more
            information.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
             
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
            FetchClient fc = inbox.FetchClient;
             
            //download the first message
            string contents = fc.MessageAsText(1);
             
            //do something with the message 
            Console.WriteLine( contents );
             
            //decide we want to delete it
            mc.Delete(1);
             
            //remove the deleted message(s)
            mc.PurgeDeletedMessages();
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
            Dim fc As FetchClient = inbox.FetchClient
             
            'download the first message
            Dim contents As String = fc.MessageAsText(1)
             
            'do something with the message 
            Console.WriteLine(contents)
             
            'decide we want to delete it
            mc.Delete(1)
             
            'remove the deleted message(s)
            mc.PurgeDeletedMessages()
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MessageClient.#ctor(aspNetIMAP.MailFolder)">
            <summary>Creates an instance of a MessageClient class.</summary>
            <remarks>
            	<para>This ctor is usually called internally, by the MailFolder object. See
                <see cref="P:aspNetIMAP.MailFolder.MessageClient">MailFolder.MessageClient</see> for more
                information.</para>
            </remarks>
            <param name="folder">The parent folder.</param>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
             
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
            FetchClient fc = inbox.FetchClient;
             
            //download the first message
            string contents = fc.MessageAsText(1);
             
            //do something with the message 
            Console.WriteLine( contents );
             
            //decide we want to delete it
            mc.Delete(1);
             
            //remove the deleted message(s)
            mc.PurgeDeletedMessages();
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
            Dim fc As FetchClient = inbox.FetchClient
             
            'download the first message
            Dim contents As String = fc.MessageAsText(1)
             
            'do something with the message 
            Console.WriteLine(contents)
             
            'decide we want to delete it
            mc.Delete(1)
             
            'remove the deleted message(s)
            mc.PurgeDeletedMessages()
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Append(System.String)">
            <summary>
            Saves a message string to the server.
            </summary>
            <returns>True for success</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
                    
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Login();
             
            MessageClient mc = imap.SelectFolder("Drafts").MessageClient;
             
            //as an example, read a message from the filesystem, and save the text as a message
            StreamReader sr = new StreamReader("sample.eml" );
            string draftText = sr.ReadToEnd();
            sr.Close();
             
            mc.Append( draftText );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Login()
             
            Dim mc As MessageClient = imap.SelectFolder("Drafts").MessageClient
             
            'as an example, read a message from the filesystem, and save the text as a message
            Dim sr As New StreamReader("sample.eml")
            Dim draftText As String = sr.ReadToEnd()
            sr.Close()
             
            mc.Append(draftText)
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageAsString">Message text.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Append(System.String,System.String)">
            <summary>
            Saves a message string to the server.
            </summary>
            <returns>True for success</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
                    
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Login();
             
            MessageClient mc = imap.SelectFolder("Drafts").MessageClient;
             
            //as an example, read a message from the filesystem, and save the text as a message
            StreamReader sr = new StreamReader("sample.eml" );
            string draftText = sr.ReadToEnd();
            sr.Close();
             
            mc.Append( draftText, Flag.ConvertToString( FlagTypes.Draft ) );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Login()
             
            Dim mc As MessageClient = imap.SelectFolder("Drafts").MessageClient
             
            'as an example, read a message from the filesystem, and save the text as a message
            Dim sr As New StreamReader("sample.eml")
            Dim draftText As String = sr.ReadToEnd()
            sr.Close()
             
            mc.Append(draftText, Flag.ConvertToString(FlagTypes.Draft))
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageAsString">Message text.</param>
            <param name="flags">Flags used to mark the message.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Append(System.String,System.DateTime)">
            <summary>
            Saves a message string to the server.
            </summary>
            <returns>True for success</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
                    
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Login();
             
            MessageClient mc = imap.SelectFolder("Drafts").MessageClient;
             
            //as an example, read a message from the filesystem, and save the text as a message
            StreamReader sr = new StreamReader("sample.eml" );
            string draftText = sr.ReadToEnd();
            sr.Close();
             
            mc.Append( draftText, DateTime.Now );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Login()
             
            Dim mc As MessageClient = imap.SelectFolder("Drafts").MessageClient
             
            'as an example, read a message from the filesystem, and save the text as a message
            Dim sr As New StreamReader("sample.eml")
            Dim draftText As String = sr.ReadToEnd()
            sr.Close()
             
            mc.Append(draftText, DateTime.Now)
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageAsString">Message text</param>
            <param name="dateTime">DateTime to mark the message as saved.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Append(System.String,System.String,System.DateTime)">
            <summary>
            Saves a message string to the server.
            </summary>
            <returns>True for success</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
                    
            imap.Username = "dave@blah.com";
            imap.Password = "test";
             
            imap.Login();
             
            MessageClient mc = imap.SelectFolder("Drafts").MessageClient;
             
            //as an example, read a message from the filesystem, and save the text as a message
            StreamReader sr = new StreamReader("sample.eml" );
            string draftText = sr.ReadToEnd();
            sr.Close();
             
             
            mc.Append( draftText, Flag.ConvertToString( FlagTypes.Draft ), DateTime.Now );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
             
            imap.Login()
             
            Dim mc As MessageClient = imap.SelectFolder("Drafts").MessageClient
             
            'as an example, read a message from the filesystem, and save the text as a message
            Dim sr As New StreamReader("sample.eml")
            Dim draftText As String = sr.ReadToEnd()
            sr.Close()
             
             
            mc.Append(draftText, Flag.ConvertToString(FlagTypes.Draft), DateTime.Now)
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageAsString">Message text.</param>
            <param name="flags">Flags used to mark the message</param>
            <param name="dateTime">DateTime to mark the message as saved.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Append(System.String,System.String,System.DateTime,System.Int32)">
            <summary>
            Saves a message string to the server.
            </summary>
            <param name="messageAsString">Message text.</param>
            <param name="flags">Flags used to mark the message</param>
            <param name="dateTime">DateTime to mark the message as saved.</param>
            <param name="length">The length of the text to save to the server.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Append(System.IO.Stream)">
            <summary>
            Saves a stream of data to the server.
            </summary>
            <returns>True for success</returns>
            <example>
            	<code lang="CS">
            IMAP4 imap = new IMAP4( "mail.example.com" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
             
            imap.Logger.Path = "C:\\imap.log";
            imap.Login("test@example.com", "test"  );
             
            //get the 'Sent Items' folder
            MailFolder sentItems = imap.SelectFolder( "\"Sent Items\"" );
             
            //number of items in the folder
            int count = sentItems.MessageCount;
             
            //save the RFC2822 formatted file to the "Sent Items" folder
            FileStream fs = File.OpenRead( "c:\\temp\\append.eml" );
            sentItems.MessageClient.Append( fs );
             
            //verify it is saved by checking the count, and downloading the latest message
            sentItems.Refresh();
            count = sentItems.MessageCount;
            Console.WriteLine( count );
             
            //download the message
            string text = sentItems.FetchClient.MessageAsText( count, IndexType.Ordinal, false );
            Console.WriteLine( text );
             
            imap.Disconnect();
            </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
             
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
             
            imap.Logger.Path = "C:\imap.log"
            imap.Login("test@example.com", "test")
             
            'get the 'Sent Items' folder
            Dim sentItems As MailFolder = imap.SelectFolder("""Sent Items""")
             
            'number of items in the folder
            Dim count As Integer = sentItems.MessageCount
             
            'save the RFC2822 formatted file to the "Sent Items" folder
            Dim fs As FileStream = File.OpenRead("c:\temp\append.eml")
            sentItems.MessageClient.Append(fs)
             
            'verify it is saved by checking the count, and downloading the latest message
            sentItems.Refresh()
            count = sentItems.MessageCount
            Console.WriteLine(count)
             
            'download the message
            Dim [text] As String = sentItems.FetchClient.MessageAsText(count, IndexType.Ordinal, False)
            Console.WriteLine([text])
             
            imap.Disconnect()
                </code>
            </example>
            <param name="stream">Stream of data.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Append(System.IO.Stream,System.String)">
            <summary>
            Saves a stream of data to the server.
            </summary>
            <returns>True for success</returns>
            <example>
            	<code lang="CS">
            IMAP4 imap = new IMAP4( "mail.example.com" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
             
            imap.Logger.Path = "C:\\imap.log";
            imap.Login("test@example.com", "test"  );
             
            //get the 'Drafts' folder
            MailFolder drafts = imap.SelectFolder( "Drafts" );
             
            //number of items in the folder
            int count = drafts.MessageCount;
             
            //save the RFC2822 formatted file to the "drafts" folder
            FileStream fs = File.OpenRead( "c:\\temp\\draft.eml" );
            drafts.MessageClient.Append( fs, Flag.ConvertToString( FlagTypes.Draft ) );
             
            //verify it is saved by checking the count, and downloading the latest message
            drafts.Refresh();
            count = drafts.MessageCount;
            Console.WriteLine( count );
             
            //download the message
            string text = drafts.FetchClient.MessageAsText( count, IndexType.Ordinal, false );
            Console.WriteLine( text );
             
            imap.Disconnect();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
             
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
             
            imap.Logger.Path = "C:\imap.log"
            imap.Login("test@example.com", "test")
             
            'get the 'Drafts' folder
            Dim drafts As MailFolder = imap.SelectFolder("Drafts")
             
            'number of items in the folder
            Dim count As Integer = drafts.MessageCount
             
            'save the RFC2822 formatted file to the "drafts" folder
            Dim fs As FileStream = File.OpenRead("c:\temp\draft.eml")
            drafts.MessageClient.Append(fs, Flag.ConvertToString(FlagTypes.Draft))
             
            'verify it is saved by checking the count, and downloading the latest message
            drafts.Refresh()
            count = drafts.MessageCount
            Console.WriteLine(count)
             
            'download the message
            Dim [text] As String = drafts.FetchClient.MessageAsText(count, IndexType.Ordinal, False)
            Console.WriteLine([text])
             
            imap.Disconnect()
                </code>
            </example>
            <param name="stream">Stream of data.</param>
            <param name="flags">Flags used to mark the message</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Append(System.IO.Stream,System.String,System.DateTime)">
            <summary>Saves a stream of message data to the server.</summary>
            <example>
            	<code lang="CS">
            IMAP4 imap = new IMAP4( "mail.example.com" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
             
            imap.Logger.Path = "C:\\imap.log";
            imap.Login("test@example.com", "test"  );
             
            //get the 'Drafts' folder
            MailFolder drafts = imap.SelectFolder( "Drafts" );
             
            //number of items in the folder
            int count = drafts.MessageCount;
             
            //save the RFC2822 formatted file to the "drafts" folder
            FileStream fs = File.OpenRead( "c:\\temp\\draft.eml" );
            drafts.MessageClient.Append( fs, Flag.ConvertToString( FlagTypes.Draft ), DateTime.Now );
             
            //verify it is saved by checking the count, and downloading the latest message
            drafts.Refresh();
            count = drafts.MessageCount;
            Console.WriteLine( count );
             
            //download the message
            string text = drafts.FetchClient.MessageAsText( count, IndexType.Ordinal, false );
            Console.WriteLine( text );
             
            imap.Disconnect();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
             
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
             
            imap.Logger.Path = "C:\imap.log"
            imap.Login("test@example.com", "test")
             
            'get the 'Drafts' folder
            Dim drafts As MailFolder = imap.SelectFolder("Drafts")
             
            'number of items in the folder
            Dim count As Integer = drafts.MessageCount
             
            'save the RFC2822 formatted file to the "drafts" folder
            Dim fs As FileStream = File.OpenRead("c:\temp\draft.eml")
            drafts.MessageClient.Append(fs, Flag.ConvertToString(FlagTypes.Draft), DateTime.Now )
             
            'verify it is saved by checking the count, and downloading the latest message
            drafts.Refresh()
            count = drafts.MessageCount
            Console.WriteLine(count)
             
            'download the message
            Dim [text] As String = drafts.FetchClient.MessageAsText(count, IndexType.Ordinal, False)
            Console.WriteLine([text])
             
            imap.Disconnect()
                </code>
            </example>
            <param name="stream">Stream containing the message data.</param>
            <param name="flags">Flags to apply to the message</param>
            <param name="dateTime">DateTime stamp to apply to the message.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Append(System.IO.Stream,System.String,System.DateTime,System.Text.Encoding)">
            <summary>
            Saves a stream of data to the server.
            </summary>
            <returns>True for success</returns>
            <example>
            	<code lang="CS">
            IMAP4 imap = new IMAP4( "mail.example.com" );
             
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
             
            imap.Logger.Path = "C:\\imap.log";
            imap.Login("test@example.com", "test"  );
             
            //get the 'Drafts' folder
            MailFolder drafts = imap.SelectFolder( "Drafts" );
             
            //number of items in the folder
            int count = drafts.MessageCount;
             
            //save the RFC2822 formatted file to the "drafts" folder
            FileStream fs = File.OpenRead( "c:\\temp\\draft.eml" );
            drafts.MessageClient.Append( fs, Flag.ConvertToString( FlagTypes.Draft ), DateTime.Now, Encoding.Default );
             
            //verify it is saved by checking the count, and downloading the latest message
            drafts.Refresh();
            count = drafts.MessageCount;
            Console.WriteLine( count );
             
            //download the message
            string text = drafts.FetchClient.MessageAsText( count, IndexType.Ordinal, false );
            Console.WriteLine( text );
             
            imap.Disconnect();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
             
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
             
            imap.Logger.Path = "C:\imap.log"
            imap.Login("test@example.com", "test")
             
            'get the 'Drafts' folder
            Dim drafts As MailFolder = imap.SelectFolder("Drafts")
             
            'number of items in the folder
            Dim count As Integer = drafts.MessageCount
             
            'save the RFC2822 formatted file to the "drafts" folder
            Dim fs As FileStream = File.OpenRead("c:\temp\draft.eml")
            drafts.MessageClient.Append(fs, Flag.ConvertToString(FlagTypes.Draft), DateTime.Now, Encoding.Default )
             
            'verify it is saved by checking the count, and downloading the latest message
            drafts.Refresh()
            count = drafts.MessageCount
            Console.WriteLine(count)
             
            'download the message
            Dim [text] As String = drafts.FetchClient.MessageAsText(count, IndexType.Ordinal, False)
            Console.WriteLine([text])
             
            imap.Disconnect()
                </code>
            </example>
            <param name="stream">Stream containing data.</param>
            <param name="flags">Flags used to mark the message</param>
            <param name="dateTime">DateTime to mark the message as saved.</param>
            <param name="encoding">The encoding used to read the data found in the stream.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Append(System.Byte[])">
            <summary>
            Saves a byte array of data to the folder.
            </summary>
            <param name="data">Byte array to save.</param>
            <returns>True for success</returns>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            
            imap.Logger.Path = "C:\\imap.log";
            imap.Login("test@example.com", "test"  );
            
            //get the 'Drafts' folder
            MailFolder drafts = imap.SelectFolder( "Drafts" );
            
            //number of items in the folder
            int count = drafts.MessageCount;
            
            //save the RFC2822 formatted file from Sql Server to the "drafts" folder
            byte[] data = SqlServerDocument(); //a method that returns a byte array from Sql server.
            drafts.MessageClient.Append( data  );
            
            //verify it is saved by checking the count, and downloading the latest message
            drafts.Refresh();
            count = drafts.MessageCount;
            Console.WriteLine( count );
            
            //download the message
            string content = drafts.FetchClient.MessageAsText( count, IndexType.Ordinal, false );
            Console.WriteLine( content );
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            
            imap.Logger.Path = "C:\imap.log"
            imap.Login("test@example.com", "test")
            
            'get the 'Drafts' folder
            Dim drafts As MailFolder = imap.SelectFolder("Drafts")
            
            'number of items in the folder
            Dim count As Integer = drafts.MessageCount
            
            'save the RFC2822 formatted file from Sql Server to the "drafts" folder
            Dim data As Byte() = SqlServerDocument() 'a method that returns a byte array from Sql server.
            drafts.MessageClient.Append(data )
            
            'verify it is saved by checking the count, and downloading the latest message
            drafts.Refresh()
            count = drafts.MessageCount
            Console.WriteLine(count)
            
            'download the message
            Dim content As String = drafts.FetchClient.MessageAsText(count, IndexType.Ordinal, False)
            Console.WriteLine(content)
            
            imap.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Append(System.Byte[],System.String)">
            <summary>
            Saves a byte array of data to the folder.
            </summary>
            <param name="data">Byte array of data to save.</param>
            <param name="flags">Flags used to mark the data</param>
            <returns>True for success</returns>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            
            imap.Logger.Path = "C:\\imap.log";
            imap.Login("test@example.com", "test"  );
            
            //get the 'Drafts' folder
            MailFolder drafts = imap.SelectFolder( "Drafts" );
            
            //number of items in the folder
            int count = drafts.MessageCount;
            
            //save the RFC2822 formatted file from Sql Server to the "drafts" folder
            byte[] data = SqlServerDocument(); //a method that returns a byte array from Sql server.
            drafts.MessageClient.Append( data , Flag.ConvertToString( FlagTypes.Draft ) );
            
            //verify it is saved by checking the count, and downloading the latest message
            drafts.Refresh();
            count = drafts.MessageCount;
            Console.WriteLine( count );
            
            //download the message
            string content = drafts.FetchClient.MessageAsText( count, IndexType.Ordinal, false );
            Console.WriteLine( content );
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            
            imap.Logger.Path = "C:\imap.log"
            imap.Login("test@example.com", "test")
            
            'get the 'Drafts' folder
            Dim drafts As MailFolder = imap.SelectFolder("Drafts")
            
            'number of items in the folder
            Dim count As Integer = drafts.MessageCount
            
            'save the RFC2822 formatted file from Sql Server to the "drafts" folder
            Dim data As Byte() = SqlServerDocument() 'a method that returns a byte array from Sql server.
            drafts.MessageClient.Append(data, Flag.ConvertToString(FlagTypes.Draft))
            
            'verify it is saved by checking the count, and downloading the latest message
            drafts.Refresh()
            count = drafts.MessageCount
            Console.WriteLine(count)
            
            'download the message
            Dim content As String = drafts.FetchClient.MessageAsText(count, IndexType.Ordinal, False)
            Console.WriteLine(content)
            
            imap.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Append(System.Byte[],System.String,System.DateTime)">
            <summary>
            Saves a byte array of data to the folder.
            </summary>
            <param name="data">Byte array of data</param>
            <param name="flags">Flags used to mark the data</param>
            <param name="dateTime">The time to mark the message as saved.</param>
            <returns>True for success</returns>
            <example>
            <code lang="C#">
            IMAP4 imap = new IMAP4( "mail.example.com" );
            
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            
            imap.Logger.Path = "C:\\imap.log";
            imap.Login("test@example.com", "test"  );
            
            //get the 'Drafts' folder
            MailFolder drafts = imap.SelectFolder( "Drafts" );
            
            //number of items in the folder
            int count = drafts.MessageCount;
            
            //save the RFC2822 formatted file from Sql Server to the "drafts" folder
            byte[] data = SqlServerDocument(); //a method that returns a byte array from Sql server.
            drafts.MessageClient.Append( data , Flag.ConvertToString( FlagTypes.Draft ), DateTime.Now );
            
            //verify it is saved by checking the count, and downloading the latest message
            drafts.Refresh();
            count = drafts.MessageCount;
            Console.WriteLine( count );
            
            //download the message
            string content = drafts.FetchClient.MessageAsText( count, IndexType.Ordinal, false );
            Console.WriteLine( content );
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
            Dim imap As New IMAP4("mail.example.com")
            
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            
            imap.Logger.Path = "C:\imap.log"
            imap.Login("test@example.com", "test")
            
            'get the 'Drafts' folder
            Dim drafts As MailFolder = imap.SelectFolder("Drafts")
            
            'number of items in the folder
            Dim count As Integer = drafts.MessageCount
            
            'save the RFC2822 formatted file from Sql Server to the "drafts" folder
            Dim data As Byte() = SqlServerDocument() 'a method that returns a byte array from Sql server.
            drafts.MessageClient.Append(data, Flag.ConvertToString(FlagTypes.Draft), DateTime.Now )
            
            'verify it is saved by checking the count, and downloading the latest message
            drafts.Refresh()
            count = drafts.MessageCount
            Console.WriteLine(count)
            
            'download the message
            Dim content As String = drafts.FetchClient.MessageAsText(count, IndexType.Ordinal, False)
            Console.WriteLine(content)
            
            imap.Disconnect()
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MessageClient.CancelDelete(System.Int32)">
            <remarks>By default, the message number is an ordinal index type.</remarks>
            <summary>Cancels a pending delete on an ordinal index message number.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
                    
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
            FetchClient fc = inbox.FetchClient;
             
            //download the first message
            string contents = fc.MessageAsText(1);
             
            //do something with the message 
            Console.WriteLine( contents );
             
            //decide we want to delete it
            mc.Delete(1);
             
            //for whatever reason, cancel the deletes
            mc.CancelDelete(1);
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
            Dim fc As FetchClient = inbox.FetchClient
             
            'download the first message
            Dim contents As String = fc.MessageAsText(1)
             
            'do something with the message 
            Console.WriteLine(contents)
             
            'decide we want to delete it
            mc.Delete(1)
             
            'for whatever reason, cancel the deletes
            mc.CancelDelete(1)
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal message number.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.CancelDelete(System.Int32,aspNetIMAP.IndexType)">
            <summary>Deletes a message number, based upon its Index type.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
                    
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
            FetchClient fc = inbox.FetchClient;
             
            //download the first message
            string contents = fc.MessageAsText(1, IndexType.Ordinal);
             
            //do something with the message 
            Console.WriteLine( contents );
             
            //decide we want to delete it
            mc.Delete(1);
             
            //for whatever reason, cancel the deletes
            mc.CancelDelete(1);
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
            Dim fc As FetchClient = inbox.FetchClient
             
            'download the first message
            Dim contents As String = fc.MessageAsText(1,IndexType.Ordinal)
             
            'do something with the message 
            Console.WriteLine(contents)
             
            'decide we want to delete it
            mc.Delete(1)
             
            'for whatever reason, cancel the deletes
            mc.CancelDelete(1)
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The ordinal message number, or the UID number.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.CancelDelete(System.String)">
            <summary>Cancels a pending delete on an ordinal index message set.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
                    
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
            FetchClient fc = inbox.FetchClient;
             
            string messageSet = "1:3";
            //download the first message
            string[] contents = fc.MessagesAsText(messageSet);
             
            //do something with the messages
            foreach( string s in contents )
            {
                Console.WriteLine( s );
            }
             
            //decide we want to delete them
            mc.Delete( messageSet );
             
            //for whatever reason, cancel the deletes
            mc.CancelDelete( messageSet );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
            Dim fc As FetchClient = inbox.FetchClient
             
            Dim messageSet As String = "1:3"
            'download the first message
            Dim contents As String() = fc.MessagesAsText(messageSet )
             
            'do something with the messages
            Dim s As String
            For Each s In  contents
               Console.WriteLine(s)
            Next s
             
            'decide we want to delete them
            mc.Delete(messageSet)
             
            'for whatever reason, cancel the deletes
            mc.CancelDelete(messageSet)
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>
            Be sure to see <see cref="T:aspNetIMAP.MessageClient">MessageClient</see> for the complete
            explanation on message sets.
            </remarks>
            <param name="messageSet">The message set of ordinal indexes.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.CancelDelete(System.String,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
                    
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
            FetchClient fc = inbox.FetchClient;
             
            string messageSet = "1:3";
            //download the first message
            string[] contents = fc.MessagesAsText(messageSet , IndexType.Ordinal);
             
            //do something with the messages
            foreach( string s in contents )
            {
                Console.WriteLine( s );
            }
             
            //decide we want to delete them
            mc.Delete( messageSet );
             
            //for whatever reason, cancel the deletes
            mc.CancelDelete( messageSet );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
            Dim fc As FetchClient = inbox.FetchClient
             
            Dim messageSet As String = "1:3"
            'download the first message
            Dim contents As String() = fc.MessagesAsText(messageSet, IndexType.Ordinal)
             
            'do something with the messages
            Dim s As String
            For Each s In  contents
               Console.WriteLine(s)
            Next s
             
            'decide we want to delete them
            mc.Delete(messageSet)
             
            'for whatever reason, cancel the deletes
            mc.CancelDelete(messageSet)
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Cancels the pending delete of the message set.</summary>
            <remarks>
            Be sure to see <see cref="T:aspNetIMAP.MessageClient">MessageClient</see> for the complete
            explanation on message sets.
            </remarks>
            <param name="messageSet">The message set of ordinal or unique ids</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Copy(System.Int32,System.String)">
            <summary>Copy a message to the destination folder.</summary>
            <returns>True for success</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
                    
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
             
            //copy message 1 to a folder named "NewFolder" at the root level
            mc.Copy( 1, "NewFolder" );
             
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'copy message 1 to a folder named "NewFolder" at the root level
            mc.Copy(1, "NewFolder")
             
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>
            	<para>The destinationFolder must be the full path to the folder. So, if you need to
                copy the message to a sub folder of the current selected folder, you would specify
                the full path. For example, if you selected the inbox, and wanted to copy a message
                to a subfolder, the complete destinationFolder would be:</para>
            	<para>"inbox/subfolderName".</para>
            </remarks>
            <param name="messageNumber">Message number to copy.</param>
            <param name="destinationFolder">Destination folder.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Copy(System.Int32,System.String,aspNetIMAP.IndexType)">
            <summary>Copy a message to the destination folder.</summary>
            <returns>True for success</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
                    
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
             
            //copy message 1 to a folder named "NewFolder" at the root level
            mc.Copy( 1, "NewFolder", IndexType.Ordinal );
             
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'copy message 1 to a folder named "NewFolder" at the root level
            mc.Copy(1, "NewFolder", IndexType.Ordinal)
             
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>
            	<para>The destinationFolder must be the full path to the folder. So, if you need to
                copy the message to a sub folder of the current selected folder, you would specify
                the full path. For example, if you selected the inbox, and wanted to copy a message
                to a subfolder, the complete destinationFolder would be:</para>
            	<para>"inbox/subfolderName".</para>
            </remarks>
            <param name="messageNumber">The ordinal or UniqueId message number.</param>
            <param name="destinationFolder">Complete destination folder path.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Copy(System.String,System.String)">
            <summary>Copies a range of messages, using their ordinal indexes.</summary>
            <returns>True if the copy was successful</returns>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>.</para>
            </remarks>
            <remarks>
            	<para>The destinationFolder must be the full path to the folder. So, if you need to
                copy the message to a sub folder of the current selected folder, you would specify
                the full path. For example, if you selected the inbox, and wanted to copy a message
                to a subfolder, the complete destinationFolder would be:</para>
            	<para>"inbox/subfolderName".</para>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
                    
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
             
            //copy message 1-3 to a folder named "NewFolder" at the root level
            mc.Copy( "1:3", "NewFolder" );
             
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'copy message 1 to a folder named "NewFolder" at the root level
            mc.Copy("1:3", "NewFolder")
             
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">Message set of ordinal indexes.</param>
            <param name="destinationFolder">Destination folder to copy messages too.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Copy(System.String,System.String,aspNetIMAP.IndexType)">
            <summary>Copies a range of messages, based upon their IndexType.</summary>
            <returns>True if the copy was successful</returns>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>.</para>
            </remarks>
            <remarks>
            	<para>The destinationFolder must be the full path to the folder. So, if you need to
                copy the message to a sub folder of the current selected folder, you would specify
                the full path. For example, if you selected the inbox, and wanted to copy a message
                to a subfolder, the complete destinationFolder would be:</para>
            	<para>"inbox/subfolderName".</para>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
                    
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
             
            //copy message 1-3 to a folder named "NewFolder" at the root level
            mc.Copy( "1:3", "NewFolder", IndexType.Ordinal );
             
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'copy message 1 to a folder named "NewFolder" at the root level
            mc.Copy("1:3", "NewFolder", IndexType.Ordinal)
             
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">Message set of numbers.</param>
            <param name="destinationFolder">Complete path to the destination folder.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.InternalDate(System.Int32,aspNetIMAP.IndexType)">
            <summary>
            Server time of the message.
            </summary>
            <returns>
            The .NET framework DateTime object of the internal date found on the IMAP server
            for this message number.
            </returns>
            <remarks>This DateTime can be different than the RFC date time found inside the message header.</remarks>
            <param name="messageNumber">The IMAP server message number.</param>
            <param name="indexType">The type of index applied against messageNumber.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.InternalDateString(System.String,aspNetIMAP.IndexType)">
            <summary>The IMAP date of the message, by the IMAP format.</summary>
            <param name="messageNumber">Message number, either Ordinal or UniqueId</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Delete(System.Int32)">
            <summary>
            Marks a message for deletion.
            </summary>
            <returns>True for success</returns>
            <remarks>
            The message is not fully deleted until
            <see cref="M:aspNetIMAP.MessageClient.PurgeDeletedMessages">PurgeDeletedMessages()</see> is called. To cancel any
            pending deletes use <see cref="M:aspNetIMAP.MessageClient.CancelDelete(System.Int32)">CancelDelete()</see>.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
             
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
            FetchClient fc = inbox.FetchClient;
             
            //download the first message
            string contents = fc.MessageAsText(1);
             
            //do something with the message 
            Console.WriteLine( contents );
             
            //decide we want to delete it
            mc.Delete(1);
             
            //remove the deleted message(s)
            mc.PurgeDeletedMessages();
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
            Dim fc As FetchClient = inbox.FetchClient
             
            'download the first message
            Dim contents As String = fc.MessageAsText(1)
             
            'do something with the message 
            Console.WriteLine(contents)
             
            'decide we want to delete it
            mc.Delete(1)
             
            'remove the deleted message(s)
            mc.PurgeDeletedMessages()
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The message number to delete.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Delete(System.Int32,aspNetIMAP.IndexType)">
            <summary>Marks a message for deletion.</summary>
            <returns>True for success</returns>
            <remarks>
            The message is not fully deleted until
            <see cref="M:aspNetIMAP.MessageClient.PurgeDeletedMessages">PurgeDeletedMessages()</see> is called. To cancel any
            pending deletes use <see cref="M:aspNetIMAP.MessageClient.CancelDelete(System.Int32)">CancelDelete()</see>.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
             
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
            FetchClient fc = inbox.FetchClient;
             
            //download the first message
            string contents = fc.MessageAsText(1);
             
            //do something with the message 
            Console.WriteLine( contents );
             
            //decide we want to delete it
            mc.Delete(1, IndexType.Ordinal);
             
            //remove the deleted message(s)
            mc.PurgeDeletedMessages();
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
            Dim fc As FetchClient = inbox.FetchClient
             
            'download the first message
            Dim contents As String = fc.MessageAsText(1)
             
            'do something with the message 
            Console.WriteLine(contents)
             
            'decide we want to delete it
            mc.Delete(1, IndexType.Ordinal)
             
            'remove the deleted message(s)
            mc.PurgeDeletedMessages()
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal or UniqueId of the message.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Delete(System.String)">
            <summary>Marks a message set for deletion.</summary>
            <remarks>
            Be sure to check out <see cref="T:aspNetIMAP.MessageClient">MessageClient</see> for a complete
            explanation on message sets.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
             
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
            FetchClient fc = inbox.FetchClient;
             
            string messageSet = "1:3";
            //download the first message
            string[] contents = fc.MessagesAsText(messageSet);
             
            //do something with the messages
            foreach( string s in contents )
            {
                Console.WriteLine( s );
            }
             
            //decide we want to delete them
            mc.Delete( messageSet );
             
            //purge the deleted messages
            mc.PurgeDeletedMessages();
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
            Dim fc As FetchClient = inbox.FetchClient
             
            Dim messageSet As String = "1:3"
            'download the first message
            Dim contents As String() = fc.MessagesAsText(messageSet)
             
            'do something with the messages
            Dim s As String
            For Each s In  contents
               Console.WriteLine(s)
            Next s
             
            'decide we want to delete them
            mc.Delete(messageSet)
             
            'purge the deleted messages
            mc.PurgeDeletedMessages()
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP message set.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Delete(System.String,aspNetIMAP.IndexType)">
            <summary>Marks a message set for deletion.</summary>
            <remarks>
            Be sure to check out <see cref="T:aspNetIMAP.MessageClient">MessageClient</see> for a complete
            explanation on message sets.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
             
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
            FetchClient fc = inbox.FetchClient;
             
            string messageSet = "1:3";
            //download the first message
            string[] contents = fc.MessagesAsText(messageSet);
             
            //do something with the messages
            foreach( string s in contents )
            {
                Console.WriteLine( s );
            }
             
            //decide we want to delete them
            mc.Delete( messageSet, IndexType.Ordinal );
             
            //purge the deleted messages
            mc.PurgeDeletedMessages();
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
            Dim fc As FetchClient = inbox.FetchClient
             
            Dim messageSet As String = "1:3"
            'download the first message
            Dim contents As String() = fc.MessagesAsText(messageSet)
             
            'do something with the messages
            Dim s As String
            For Each s In  contents
               Console.WriteLine(s)
            Next s
             
            'decide we want to delete them
            mc.Delete(messageSet, IndexType.Ordinal)
             
            'purge the deleted messages
            mc.PurgeDeletedMessages()
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">IMAP message set of message numbers.</param>
            <param name="indexType">Ordinal or UniqueId message set.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.PurgeDeletedMessages">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
             
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
            FetchClient fc = inbox.FetchClient;
             
            string messageSet = "1:3";
            //download the first message
            string[] contents = fc.MessagesAsText(messageSet);
             
            //do something with the messages
            foreach( string s in contents )
            {
                Console.WriteLine( s );
            }
             
            //decide we want to delete them
            mc.Delete( messageSet );
             
            //purge the deleted messages
            mc.PurgeDeletedMessages();
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
            Dim fc As FetchClient = inbox.FetchClient
             
            Dim messageSet As String = "1:3"
            'download the first message
            Dim contents As String() = fc.MessagesAsText(messageSet)
             
            'do something with the messages
            Dim s As String
            For Each s In  contents
               Console.WriteLine(s)
            Next s
             
            'decide we want to delete them
            mc.Delete(messageSet)
             
            'purge the deleted messages
            mc.PurgeDeletedMessages()
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Permanently removes message from the IMAP server.</summary>
            <remarks>
            Messages are only marked for deletion. Its not until PugeDeletedMessages() is
            called, that messages are actually removed from the IMAP server.
            </remarks>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Move(System.Int32,System.String)">
            <summary>
            Moves a message to a destination folder.
            </summary>
            <returns>True for success</returns>
            <remarks>
            	<para>Because a Move is actually a copy and delete,
                <see cref="M:aspNetIMAP.MessageClient.PurgeDeletedMessages">PurgeDeletedMessages()</see> must be called to
                complete the Move.</para>
            	<para>The destinationFolder must be the full path to the folder. So, if you need to
                move the message to a sub folder of the current selected folder, you would specify
                the full path. For example, if you selected the inbox, and wanted to move a message
                to a subfolder, the complete destinationFolder would be:<br/>
                "inbox/subfolderName".</para>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
             
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
             
            //a move is a copy and delete. Thus the messages must be
            //purged to be fully moved.
            mc.Move( 1, "NewFolder" );
             
            //purge the moved messages
            mc.PurgeDeletedMessages();
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'a move is a copy and delete. Thus the messages must be
            'purged to be fully moved.
            mc.Move(1, "NewFolder")
             
            'purge the moved messages
            mc.PurgeDeletedMessages()
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Message number to move.</param>
            <param name="destinationFolder">Destination mail folder.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Move(System.Int32,System.String,aspNetIMAP.IndexType)">
            <summary>Moves a message to a destination folder.</summary>
            <returns>True for success</returns>
            <remarks>
            	<para>Because a Move is actually a copy and delete,
                <see cref="M:aspNetIMAP.MessageClient.PurgeDeletedMessages">PurgeDeletedMessages()</see> must be called to
                complete the Move.</para>
            	<para>The destinationFolder must be the full path to the folder. So, if you need to
                move the message to a sub folder of the current selected folder, you would specify
                the full path. For example, if you selected the inbox, and wanted to move a message
                to a subfolder, the complete destinationFolder would be:<br/>
                "inbox/subfolderName".</para>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
             
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
             
            //a move is a copy and delete. Thus the messages must be
            //purged to be fully moved.
            mc.Move( 1, "NewFolder", IndexType.Ordinal );
             
            //purge the moved messages
            mc.PurgeDeletedMessages();
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'a move is a copy and delete. Thus the messages must be
            'purged to be fully moved.
            mc.Move(1, "NewFolder", IndexType.Ordinal)
             
            'purge the moved messages
            mc.PurgeDeletedMessages()
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal or UniqueId message number.</param>
            <param name="destinationFolder">Complete destination folder path.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Move(System.String,System.String)">
            <summary>Moves a range of messages.</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            	<para>Because a Move is actually a copy and delete,
                <see cref="M:aspNetIMAP.MessageClient.PurgeDeletedMessages">PurgeDeletedMessages()</see> must be called to
                complete the Move.</para>
            	<para>The destinationFolder must be the full path to the folder. So, if you need to
                move the message to a sub folder of the current selected folder, you would specify
                the full path. For example, if you selected the inbox, and wanted to move a message
                to a subfolder, the complete destinationFolder would be:<br/>
                "inbox/subfolderName".</para>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
             
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
             
            //a move is a copy and delete. Thus the messages must be
            //purged to be fully moved.
            mc.Move( "1:3", "NewFolder" );
             
            //purge the moved messages
            mc.PurgeDeletedMessages();
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'a move is a copy and delete. Thus the messages must be
            'purged to be fully moved.
            mc.Move("1:3", "NewFolder")
             
            'purge the moved messages
            mc.PurgeDeletedMessages()
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">Message set of ordinal indexes.</param>
            <param name="destinationFolder">Destination folder to copy messages too.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Move(System.String,System.String,aspNetIMAP.IndexType)">
            <summary>Moves a range of messages.</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            	<para>Because a Move is actually a copy and delete,
                <see cref="M:aspNetIMAP.MessageClient.PurgeDeletedMessages">PurgeDeletedMessages()</see> must be called to
                complete the Move.</para>
            	<para>The destinationFolder must be the full path to the folder. So, if you need to
                move the message to a sub folder of the current selected folder, you would specify
                the full path. For example, if you selected the inbox, and wanted to move a message
                to a subfolder, the complete destinationFolder would be:<br/>
                "inbox/subfolderName".</para>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
             
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
             
            //a move is a copy and delete. Thus the messages must be
            //purged to be fully moved.
            mc.Move( "1:3", "NewFolder", IndexType.Ordinal );
             
            //purge the moved messages
            mc.PurgeDeletedMessages();
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'a move is a copy and delete. Thus the messages must be
            'purged to be fully moved.
            mc.Move("1:3", "NewFolder", IndexType.Ordinal)
             
            'purge the moved messages
            mc.PurgeDeletedMessages()
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="destinationFolder">Complete destination folder path.</param>
            <param name="indexType">Ordinal or UnqiueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Flags(System.Int32)">
            <summary>
            Retrieves a collection of flags about a message.
            </summary>
            <returns>FlagCollection</returns>
            <example>
            	<code>
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
             
            FlagCollection fc  = mc.Flags(1);
            Console.WriteLine( fc.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            Dim fc As FlagCollection = mc.Flags(1)
            Console.WriteLine(fc.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The ordinal index message number.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Flags(System.Int32,aspNetIMAP.IndexType)">
            <summary>Retrieves a collection of flags about a message.</summary>
            <returns>FlagCollection</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
             
            FlagCollection fc  = mc.Flags(1, IndexType.Ordinal);
            Console.WriteLine( fc.ToString());
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            Dim fc As FlagCollection = mc.Flags(1, IndexType.Ordinal)
            Console.WriteLine(fc.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="indexType">Ordinal or UniqueId.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Flags(System.String)">
            <summary>Returns an array of FlagCollections for a given message set.</summary>
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            FlagCollection[] fcs  = mc.Flags("1:3" );
             
            foreach( FlagCollection fc in fcs )
            {
                Console.WriteLine( fc.ToString()); 
            }
             
            imap.Disconnect(); 
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            Dim fcs As FlagCollection() = mc.Flags("1:3")
             
            Dim fc As FlagCollection
            For Each fc In  fcs
               Console.WriteLine(fc.ToString())
            Next fc
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP message set.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Flags(System.String,aspNetIMAP.IndexType)">
            <summary>Returns an array of FlagCollections for a given message set.</summary>
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            FlagCollection[] fcs  = mc.Flags("1:3", IndexType.Ordinal );
             
            foreach( FlagCollection fc in fcs )
            {
                Console.WriteLine( fc.ToString()); 
            }
             
            imap.Disconnect(); 
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            Dim fcs As FlagCollection() = mc.Flags("1:3", IndexType.Ordinal)
             
            Dim fc As FlagCollection
            For Each fc In  fcs
               Console.WriteLine(fc.ToString())
            Next fc
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.SetFlags(System.Int32,System.String)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //set the \answered and \seen flags 
            mc.SetFlags( 1, "\\answered \\seen" );
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'set the \answered and \seen flags 
            mc.SetFlags(1, "\answered \seen")
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Sets specific flags on an ordinal message number.</summary>
            <remarks>
            This method is provided for advanced developers, who know the various IMAP flags
            and their formats. To specify flags, without worrying about formatting, use a different
            overloaded method that accepts a FlagCollection.
            </remarks>
            <param name="messageNumber">Ordinal index message number.</param>
            <param name="flagList">The IMAP formatted flag list.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.SetFlags(System.Int32,System.String,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //set the \answered and \seen flags 
            mc.SetFlags( 1, "\\answered \\seen", IndexType.Ordinal );
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'set the \answered and \seen flags 
            mc.SetFlags(1, "\answered \seen", IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Sets specific flags on a message number.</summary>
            <remarks>
            This method is provided for advanced developers, who know the various IMAP flags
            and their formats. To specify flags, without worrying about formatting, use a different
            overloaded method that accepts a FlagCollection.
            </remarks>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="flagList">IMAP formatted list of flags.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.SetFlags(System.Int32,System.String,aspNetIMAP.IndexType,aspNetIMAP.SilentOption)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //set the \answered and \seen flags 
            mc.SetFlags( 1, "\\answered \\seen", IndexType.Ordinal, SilentOption.On );
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'set the \answered and \seen flags 
            mc.SetFlags(1, "\answered \seen", IndexType.Ordinal, SilentOption.On)
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Sets specific flags on a message number.</summary>
            <remarks>
            This method is provided for advanced developers, who know the various IMAP flags
            and their formats. To specify flags, without worrying about formatting, use a different
            overloaded method that accepts a FlagCollection.
            </remarks>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="flagList">IMAP formatted flag list.</param>
            <param name="indexType">Ordinal or UniqueId</param>
            <param name="silentOption">
            If the SilentOption is On, the silent option slightly reduces network
            traffic, as the final results are not set back from the IMAP server.
            </param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.SetFlags(System.Int32,aspNetIMAP.FlagCollection)">
            <summary>Sets flags on a message number, using a FlagCollection</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //build the FlagCollection
            FlagCollection fc = new FlagCollection();
            fc.Add( new Flag( FlagTypes.Answered) );
            fc.Add( new Flag( FlagTypes.Seen ) );
             
            //set the \answered and \seen flags 
            mc.SetFlags( 1, fc  );
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title="[New Example]">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'build the FlagCollection
            Dim fc As New FlagCollection()
            fc.Add(New Flag(FlagTypes.Answered))
            fc.Add(New Flag(FlagTypes.Seen))
             
            'set the \answered and \seen flags 
            mc.SetFlags(1, fc)
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The ordinal index message number.</param>
            <param name="flagCollection">A FlagCollection of Flags.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.SetFlags(System.Int32,aspNetIMAP.FlagCollection,aspNetIMAP.IndexType)">
            <summary>Sets specific flags on a message number.</summary>
            <summary>Sets flags on a message number, using a FlagCollection</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //build the FlagCollection
            FlagCollection fc = new FlagCollection();
            fc.Add( new Flag( FlagTypes.Answered) );
            fc.Add( new Flag( FlagTypes.Seen ) );
             
            //set the \answered and \seen flags 
            mc.SetFlags( 1, fc, IndexType.Ordinal  );
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'build the FlagCollection
            Dim fc As New FlagCollection()
            fc.Add(New Flag(FlagTypes.Answered))
            fc.Add(New Flag(FlagTypes.Seen))
             
            'set the \answered and \seen flags 
            mc.SetFlags(1, fc, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The ordinal index or UniqueId message number.</param>
            <param name="flagCollection">Collection of Flags</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.SetFlags(System.Int32,aspNetIMAP.FlagCollection,aspNetIMAP.IndexType,aspNetIMAP.SilentOption)">
            <summary>Sets flags on a message number, using a FlagCollection</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //build the FlagCollection
            FlagCollection fc = new FlagCollection();
            fc.Add( new Flag( FlagTypes.Answered) );
            fc.Add( new Flag( FlagTypes.Seen ) );
             
            //set the \answered and \seen flags 
            mc.SetFlags( 1, fc, IndexType.Ordinal, SilentOption.On  );
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'build the FlagCollection
            Dim fc As New FlagCollection()
            fc.Add(New Flag(FlagTypes.Answered))
            fc.Add(New Flag(FlagTypes.Seen))
             
            'set the \answered and \seen flags 
            mc.SetFlags(1, fc, IndexType.Ordinal, SilentOption.On)
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal index or UniqueId of the message.</param>
            <param name="flagCollection">Collection of Flags</param>
            <param name="indexType">Ordinal or UniqueId</param>
            <param name="silentOption">
            If the SilentOption is On, the silent option slightly reduces network
            traffic, as the final results are not set back from the IMAP server.
            </param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.SetFlags(System.String,aspNetIMAP.FlagCollection)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //build the FlagCollection
            FlagCollection fc = new FlagCollection();
            fc.Add( new Flag( FlagTypes.Answered) );
            fc.Add( new Flag( FlagTypes.Seen ) );
             
            //set the \answered and \seen flags 
            mc.SetFlags( "1:3", fc );
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'build the FlagCollection
            Dim fc As New FlagCollection()
            fc.Add(New Flag(FlagTypes.Answered))
            fc.Add(New Flag(FlagTypes.Seen))
             
            'set the \answered and \seen flags 
            mc.SetFlags("1:3", fc)
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Sets flags on an IMAP message set</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            </remarks>
            <param name="messageSet">An IMAP message set.</param>
            <param name="flagCollection">A FlagCollection of Flags</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.SetFlags(System.String,aspNetIMAP.FlagCollection,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //build the FlagCollection
            FlagCollection fc = new FlagCollection();
            fc.Add( new Flag( FlagTypes.Answered) );
            fc.Add( new Flag( FlagTypes.Seen ) );
             
            //set the \answered and \seen flags 
            mc.SetFlags( "1:3", fc, IndexType.Ordinal   );
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'build the FlagCollection
            Dim fc As New FlagCollection()
            fc.Add(New Flag(FlagTypes.Answered))
            fc.Add(New Flag(FlagTypes.Seen))
             
            'set the \answered and \seen flags 
            mc.SetFlags("1:3", fc, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Sets flags on an IMAP message set</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            </remarks>
            <param name="messageSet">An IMAP message set.</param>
            <param name="flagCollection">A FlagCollection of Flags</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.SetFlags(System.String,aspNetIMAP.FlagCollection,aspNetIMAP.IndexType,aspNetIMAP.SilentOption)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //build the FlagCollection
            FlagCollection fc = new FlagCollection();
            fc.Add( new Flag( FlagTypes.Answered) );
            fc.Add( new Flag( FlagTypes.Seen ) );
             
            //set the \answered and \seen flags 
            mc.SetFlags( "1:3", fc, IndexType.Ordinal, SilentOption.On  );
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'build the FlagCollection
            Dim fc As New FlagCollection()
            fc.Add(New Flag(FlagTypes.Answered))
            fc.Add(New Flag(FlagTypes.Seen))
             
            'set the \answered and \seen flags 
            mc.SetFlags("1:3", fc, IndexType.Ordinal, SilentOption.On)
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Sets flags on an IMAP message set</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            </remarks>
            <param name="messageSet">An IMAP message set.</param>
            <param name="flagCollection">A FlagCollection of Flags.</param>
            <param name="indexType">Ordinal or UniqueId</param>
            <param name="silentOption">
            If the SilentOption is On, the silent option slightly reduces network
            traffic, as the final results are not set back from the IMAP server.
            </param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.SetFlags(System.String,System.String)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
             
            //set the \answered and \seen flags 
            mc.SetFlags( "1:3", "\\seen \\answered" );
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'set the \answered and \seen flags 
            mc.SetFlags("1:3", "\seen \answered")
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Sets specific flags on an IMAP message set.</summary>
            <remarks>
            	<para>This method is provided for advanced developers, who know the various IMAP
                flags and their formats. To specify flags, without worrying about formatting, use a
                different overloaded method that accepts a FlagCollection.</para>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            </remarks>
            <param name="messageSet">An IMAP message set.</param>
            <param name="flagList">The IMAP formatted flag list.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.SetFlags(System.String,System.String,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
             
            //set the \answered and \seen flags 
            mc.SetFlags( "1:3", "\\seen \\answered", IndexType.Ordinal );
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'set the \answered and \seen flags 
            mc.SetFlags("1:3", "\seen \answered", IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Sets specific flags on an IMAP message set..</summary>
            <remarks>
            	<para>This method is provided for advanced developers, who know the various IMAP
                flags and their formats. To specify flags, without worrying about formatting, use a
                different overloaded method that accepts a FlagCollection.</para>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            </remarks>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="flagList">The IMAP formatted flag list.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.SetFlags(System.String,System.String,aspNetIMAP.IndexType,aspNetIMAP.SilentOption)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
             
            //set the \answered and \seen flags 
            mc.SetFlags( "1:3", "\\seen \\answered", IndexType.Ordinal, SilentOption.On );
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'set the \answered and \seen flags 
            mc.SetFlags("1:3", "\seen \answered", IndexType.Ordinal, SilentOption.On)
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Sets specific flags on an IMAP message set..</summary>
            <remarks>
            	<para>This method is provided for advanced developers, who know the various IMAP
                flags and their formats. To specify flags, without worrying about formatting, use a
                different overloaded method that accepts a FlagCollection.</para>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            </remarks>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="flagList">The IMAP formatted flag list.</param>
            <param name="indexType">Ordinal or UniqueId</param>
            <param name="silentOption">
            If the SilentOption is On, the silent option slightly reduces network
            traffic, as the final results are not set back from the IMAP server.
            </param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.IsMarked(System.Int32,aspNetIMAP.FlagTypes)">
            <summary>Checks to see if a message has been marked with a Flag.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //check to see if the message has been answered
            bool marked = mc.IsMarked( 1, FlagTypes.Answered );
            Console.WriteLine( marked );
             
            imap.Disconnect(); 
             
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'check to see if the message has been answered
            Dim marked As Boolean = mc.IsMarked(1, FlagTypes.Answered)
            Console.WriteLine(marked)
             
            imap.Disconnect()
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The ordinal index message number.</param>
            <param name="flag">An Flag.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.IsMarked(System.Int32,aspNetIMAP.FlagTypes,aspNetIMAP.IndexType)">
            <summary>Checks to see if a message has been marked with a Flag.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //check to see if the message has been answered
            bool marked = mc.IsMarked( 1, FlagTypes.Answered, IndexType.Ordinal );
            Console.WriteLine( marked );
             
            imap.Disconnect(); 
             
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'check to see if the message has been answered
            Dim marked As Boolean = mc.IsMarked(1, FlagTypes.Answered, IndexType.Ordinal)
            Console.WriteLine(marked)
             
            imap.Disconnect()
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal index or UniqueId message number.</param>
            <param name="flag">Flag to check.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.IsMarked(System.Int32,System.String)">
            <summary>Checks to see if an ordinal message number is marked with a flag.</summary>
            <remarks>
            This method is provided for advanced developers, who know the various IMAP flags
            and their formats. To specify flags, without worrying about formatting, use a different
            overloaded method that accepts a Flag object.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //check to see if the message has been answered
            bool marked = mc.IsMarked( 1, "\\answered");
            Console.WriteLine( marked );
             
            imap.Disconnect(); 
             
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'check to see if the message has been answered
            Dim marked As Boolean = mc.IsMarked(1, "\answered")
            Console.WriteLine(marked)
             
            imap.Disconnect()
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The ordinal index message number.</param>
            <param name="flag">The IMAP flag.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.IsMarked(System.Int32,System.String,aspNetIMAP.IndexType)">
            <summary>Checks to see if an ordinal message number is marked with a flag.</summary>
            <remarks>
            This method is provided for advanced developers, who know the various IMAP flags
            and their formats. To specify flags, without worrying about formatting, use a different
            overloaded method that accepts a Flag object.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //check to see if the message has been answered
            bool marked = mc.IsMarked( 1, "\\answered", IndexType.Ordinal);
            Console.WriteLine( marked );
             
            imap.Disconnect(); 
             
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'check to see if the message has been answered
            Dim marked As Boolean = mc.IsMarked(1, "\answered", IndexType.Ordinal)
            Console.WriteLine(marked)
             
            imap.Disconnect()
             
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="flag">The IMAP flag.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Mark(System.Int32,aspNetIMAP.FlagCollection,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log";
             
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //mark as answered and seen
            mc.Mark( 1, "\\answered \\seen", IndexType.Ordinal );
             
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'mark as answered and seen
            mc.Mark(1, "\answered \seen", IndexType.Ordinal )
             
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message number with various flags.</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            </remarks>
            <returns>Ordinal or UniqueId</returns>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="flags">FlagCollection of Flags</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Mark(System.String,aspNetIMAP.FlagCollection,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log";
             
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //mark as answered and seen
            FlagCollection[] fcs = mc.Mark( "1:3", "\\answered \\seen", IndexType.Ordinal );
             
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'mark as answered and seen
            Dim fcs As FlagCollection() = mc.Mark("1:3", "\answered \seen", IndexType.Ordinal )
             
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message set with various flags.</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            </remarks>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="flags">FlagCollection of Flags</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Mark(System.Int32,System.String)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log";
             
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //mark as answered and seen
            mc.Mark( 1, "\\answered \\seen" );
             
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'mark as answered and seen
            mc.Mark(1, "\answered \seen" )
             
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message number with various flags.</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            	<para>This method is provided for advanced developers, who know the various IMAP
                flags and their formats. To specify flags, without worrying about formatting, use a
                different overloaded method that accepts a Flag object.</para>
            </remarks>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="flagList">IMAP formatted flag list.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Mark(System.Int32,System.String,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log";
             
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //mark as answered and seen
            mc.Mark( 1, "\\answered \\seen", IndexType.Ordinal );
             
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'mark as answered and seen
            mc.Mark(1, "\answered \seen", IndexType.Ordinal )
             
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message number with various flags.</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            	<para>This method is provided for advanced developers, who know the various IMAP
                flags and their formats. To specify flags, without worrying about formatting, use a
                different overloaded method that accepts a Flag object.</para>
            </remarks>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="flagList">IMAP formatted flag list.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Mark(System.Int32,System.String,aspNetIMAP.IndexType,aspNetIMAP.SilentOption)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log";
             
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //mark as answered and seen
            mc.Mark( 1, "\\answered \\seen", IndexType.Ordinal, SilentOption.On );
             
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'mark as answered and seen
            mc.Mark(1, "\answered \seen", IndexType.Ordinal, SilentOption.On )
             
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message number with various flags.</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            	<para>This method is provided for advanced developers, who know the various IMAP
                flags and their formats. To specify flags, without worrying about formatting, use a
                different overloaded method that accepts a Flag object.</para>
            </remarks>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="flagList">IMAP formatted flag list.</param>
            <param name="indexType">Ordinal or UniqueId</param>
            <param name="silentOption">
            If the SilentOption is On, the silent option slightly reduces network
            traffic, as the final results are not set back from the IMAP server.
            </param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Mark(System.String,System.String)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log";
             
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //mark as answered and seen
            FlagCollection[] fcs = mc.Mark( "1:3", "\\answered \\seen" );
             
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'mark as answered and seen
            Dim fcs As FlagCollection() = mc.Mark("1:3", "\answered \seen" )
             
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks an ordinal index message set with various flags.</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            	<para>This method is provided for advanced developers, who know the various IMAP
                flags and their formats. To specify flags, without worrying about formatting, use a
                different overloaded method that accepts a Flag object.</para>
            </remarks>
            <param name="messageSet">A message set of ordinal indexes.</param>
            <param name="flagList">IMAP formatted flag list.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Mark(System.String,System.String,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log";
             
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //mark as answered and seen
            FlagCollection[] fcs = mc.Mark( "1:3", "\\answered \\seen", IndexType.Ordinal );
             
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'mark as answered and seen
            Dim fcs As FlagCollection() = mc.Mark("1:3", "\answered \seen", IndexType.Ordinal )
             
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message set with various flags.</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            	<para>This method is provided for advanced developers, who know the various IMAP
                flags and their formats. To specify flags, without worrying about formatting, use a
                different overloaded method that accepts a Flag object.</para>
            </remarks>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="flagList">IMAP formatted flag list.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Mark(System.String,System.String,aspNetIMAP.IndexType,aspNetIMAP.SilentOption)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log";
             
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //mark as answered and seen
            FlagCollection[] fcs = mc.Mark( "1:3", "\\answered \\seen", IndexType.Ordinal, SilentOption.On );
             
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'mark as answered and seen
            Dim fcs As FlagCollection() = mc.Mark("1:3", "\answered \seen", IndexType.Ordinal, SilentOption.On)
             
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message set with various flags.</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            	<para>This method is provided for advanced developers, who know the various IMAP
                flags and their formats. To specify flags, without worrying about formatting, use a
                different overloaded method that accepts a Flag object.</para>
            </remarks>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="flagList">IMAP formatted flag list.</param>
            <param name="indexType">Ordinal or UniqueId</param>
            <param name="silentOption">
            If the SilentOption is On, the silent option slightly reduces network
            traffic, as the final results are not set back from the IMAP server.
            </param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsAnswered(System.Int32)">
            <summary>Marks a message with the answered flag.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark as answered
            mc.MarkAsAnswered( 1  ); 
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title=" ">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark as answered
            mc.MarkAsAnswered(1 )
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">An ordinal index message number.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsAnswered(System.Int32,aspNetIMAP.IndexType)">
            <summary>Marks a message with the answered flag.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark as answered
            mc.MarkAsAnswered( 1, IndexType.Ordinal ); 
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title=" ">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark as answered
            mc.MarkAsAnswered(1, IndexType.Ordinal)
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsAnswered(System.String)">
            <summary>Marks an ordinal index message set with the answered flag.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark as answered
            mc.MarkAsAnswered( "1:3" ); 
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark as answered
            mc.MarkAsAnswered("1:3" )
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">Ordinal index message set.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsAnswered(System.String,aspNetIMAP.IndexType)">
            <summary>Marks a message set with the answered flag.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark as answered
            mc.MarkAsAnswered( "1:3", IndexType.Ordinal ); 
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark as answered
            mc.MarkAsAnswered("1:3", IndexType.Ordinal)
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="indexType">Ordinal or Unique,.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.IsAnswered(System.Int32)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //check message
            bool result = mc.IsAnswered( 1 ); 
             
            Console.WriteLine( result );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'check message
            Dim result As Boolean = mc.IsAnswered(1)
             
            Console.WriteLine(result)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Checks to see if an ordinal index message number has been answered.</summary>
            <param name="messageNumber">The ordinal message number</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.IsAnswered(System.Int32,aspNetIMAP.IndexType)">
            <summary>Checks to see if a message number has been answered.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //check message
            bool result = mc.IsAnswered( 1, IndexType.Ordinal ); 
             
            Console.WriteLine( result );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'check message
            Dim result As Boolean = mc.IsAnswered(1, IndexType.Ordinal)
             
            Console.WriteLine(result)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsDraft(System.Int32)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.MarkAsDraft( 1 ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.MarkAsDraft(1)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message with the draft  flag.</summary>
            <param name="messageNumber">The ordinal index message number.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsDraft(System.Int32,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.MarkAsDraft( 1, IndexType.Ordinal ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.MarkAsDraft(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message with the draft flag.</summary>
            <param name="messageNumber">The ordinal index, or the UniqueId, message number.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsDraft(System.String)">
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.MarkAsDraft( "1:3" ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.MarkAsDraft("1:3" )
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message set with the draft flag.</summary>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsDraft(System.String,aspNetIMAP.IndexType)">
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.MarkAsDraft( "1:3", IndexType.Ordinal ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.MarkAsDraft("1:3", IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message with the draf flag.</summary>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.IsDrafted(System.Int32)">
            <summary>Checks to see if a message number is a draft.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //check message
            bool result = mc.IsDrafted( 1 ); 
             
            Console.WriteLine( result );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'check message
            Dim result As Boolean = mc.IsDrafted(1)
             
            Console.WriteLine(result)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal index message number.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.IsDrafted(System.Int32,aspNetIMAP.IndexType)">
            <summary>Checks to see if a message number is a draft.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //check message
            bool result = mc.IsDrafted( 1, IndexType.Ordinal ); 
             
            Console.WriteLine( result );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'check message
            Dim result As Boolean = mc.IsDrafted(1, IndexType.Ordinal)
             
            Console.WriteLine(result)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsFlagged(System.Int32)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.MarkAsFlagged( 1 ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.MarkAsFlagged(1)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message with the flagged  flag.</summary>
            <param name="messageNumber">The ordinal index message number.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsFlagged(System.Int32,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.MarkAsFlagged( 1, IndexType.Ordinal ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.MarkAsFlagged(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message with the flagged flag.</summary>
            <param name="messageNumber">The ordinal index, or the UniqueId, message number.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsFlagged(System.String)">
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.MarkAsFlagged( "1:3" ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.MarkAsFlagged("1:3" )
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message set with the flagged flag.</summary>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsFlagged(System.String,aspNetIMAP.IndexType)">
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.MarkAsFlagged( "1:3", IndexType.Ordinal ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.MarkAsFlagged("1:3", IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message with the flagged flag.</summary>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.IsFlagged(System.Int32)">
            <summary>Checks to see if a message number is flagged.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //check message
            bool result = mc.IsFlagged( 1 ); 
             
            Console.WriteLine( result );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'check message
            Dim result As Boolean = mc.IsFlagged(1 )
             
            Console.WriteLine(result)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal index message number.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.IsFlagged(System.Int32,aspNetIMAP.IndexType)">
            <summary>Checks to see if a message number is flagged.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //check message
            bool result = mc.IsFlagged( 1, IndexType.Ordinal ); 
             
            Console.WriteLine( result );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'check message
            Dim result As Boolean = mc.IsFlagged(1, IndexType.Ordinal)
             
            Console.WriteLine(result)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAllAsRead">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.MarkAllAsRead(); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.MarkAllAsRead()
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks all messages with the seen  flag.</summary>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsRead(System.Int32)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.MarkAsRead( 1 ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.MarkAsRead(1)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message with the seen  flag.</summary>
            <param name="messageNumber">The ordinal index message number.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsRead(System.Int32,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.MarkAsRead( 1, IndexType.Ordinal ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.MarkAsRead(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message with the seen flag.</summary>
            <param name="messageNumber">The ordinal index, or the UniqueId, message number.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsRead(System.String)">
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.MarkAsRead( "1:3" ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.MarkAsRead("1:3" )
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message set with the seen flag.</summary>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsRead(System.String,aspNetIMAP.IndexType)">
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.MarkAsRead( "1:3", IndexType.Ordinal ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.MarkAsRead("1:3", IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message with the seen flag.</summary>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.IsRead(System.Int32)">
            <summary>Checks to see if a message number has been read.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //check message
            bool result = mc.IsRead( 1, IndexType  ); 
             
            Console.WriteLine( result );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'check message
            Dim result As Boolean = mc.IsRead(1 )
             
            Console.WriteLine(result)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal index message number.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.IsRead(System.Int32,aspNetIMAP.IndexType)">
            <summary>Checks to see if a message number has been read.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //check message
            bool result = mc.IsRead( 1, IndexType.Ordinal ); 
             
            Console.WriteLine( result );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'check message
            Dim result As Boolean = mc.IsRead(1, IndexType.Ordinal)
             
            Console.WriteLine(result)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsRecent(System.Int32)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.MarkAsRecent( 1 ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.MarkAsRecent(1)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message with the recent flag.</summary>
            <param name="messageNumber">The ordinal index message number.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsRecent(System.Int32,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.MarkAsRecent( 1, IndexType.Ordinal ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.MarkAsRecent(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message with the recent flag.</summary>
            <param name="messageNumber">The ordinal index, or the UniqueId, message number.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsRecent(System.String)">
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.MarkAsRecent( "1:3" ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.MarkAsRecent("1:3" )
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message set with the recent flag.</summary>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.MarkAsRecent(System.String,aspNetIMAP.IndexType)">
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.MarkAsRecent( "1:3", IndexType.Ordinal ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.MarkAsRecent("1:3", IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message with the recent flag.</summary>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.IsRecent(System.Int32)">
            <summary>Checks to see if a message number is recent.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //check message
            bool result = mc.IsRecent( 1 ); 
             
            Console.WriteLine( result );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'check message
            Dim result As Boolean = mc.IsRecent(1)
             
            Console.WriteLine(result)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The ordinal message number.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.IsRecent(System.Int32,aspNetIMAP.IndexType)">
            <summary>Checks to see if a message number is recent.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //check message
            bool result = mc.IsRecent( 1, IndexType.Ordinal ); 
             
            Console.WriteLine( result );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'check message
            Dim result As Boolean = mc.IsRecent(1, IndexType.Ordinal)
             
            Console.WriteLine(result)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMark(System.Int32,System.String)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log";
             
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //mark as answered and seen
            mc.UnMark( 1, "\\answered \\seen" );
             
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'mark as answered and seen
            mc.UnMark(1, "\answered \seen" )
             
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Marks a message number with various flags.</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            	<para>This method is provided for advanced developers, who know the various IMAP
                flags and their formats. To specify flags, without worrying about formatting, use a
                different overloaded method that accepts a Flag object.</para>
            </remarks>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="flagList">IMAP formatted flag list.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMark(System.Int32,System.String,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log";
             
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //mark as answered and seen
            mc.UnMark( 1, "\\answered \\seen", IndexType.Ordinal );
             
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'mark as answered and seen
            mc.UnMark(1, "\answered \seen", IndexType.Ordinal )
             
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message number with various flags.</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            	<para>This method is provided for advanced developers, who know the various IMAP
                flags and their formats. To specify flags, without worrying about formatting, use a
                different overloaded method that accepts a Flag object.</para>
            </remarks>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="flagList">IMAP formatted flag list.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMark(System.Int32,System.String,aspNetIMAP.IndexType,aspNetIMAP.SilentOption)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log";
             
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //mark as answered and seen
            mc.UnMark( 1, "\\answered \\seen", IndexType.Ordinal, SilentOption.On );
             
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'mark as answered and seen
            mc.UnMark(1, "\answered \seen", IndexType.Ordinal, SilentOption.On )
             
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message number with various flags.</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            	<para>This method is provided for advanced developers, who know the various IMAP
                flags and their formats. To specify flags, without worrying about formatting, use a
                different overloaded method that accepts a Flag object.</para>
            </remarks>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="flagList">IMAP formatted flag list.</param>
            <param name="indexType">Ordinal or UniqueId</param>
            <param name="silentOption">
            If the SilentOption is On, the silent option slightly reduces network
            traffic, as the final results are not set back from the IMAP server.
            </param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMark(System.String,aspNetIMAP.FlagCollection)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log";
             
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //mark as answered and seen
            FlagCollection[] fcs = mc.UnMark( "1:3", "\\answered \\seen" );
             
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'mark as answered and seen
            Dim fcs As FlagCollection() = mc.UnMark("1:3", "\answered \seen" )
             
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message set with various flags.</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            </remarks>
            <param name="messageSet">Message set of ordinal indexes.</param>
            <param name="flags">FlagCollection of Flags</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMark(System.String,aspNetIMAP.FlagCollection,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log";
             
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //mark as answered and seen
            FlagCollection[] fcs = mc.UnMark( "1:3", "\\answered \\seen", IndexType.Ordinal );
             
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'mark as answered and seen
            Dim fcs As FlagCollection() = mc.UnMark("1:3", "\answered \seen", IndexType.Ordinal )
             
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message set with various flags.</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            </remarks>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="flags">FlagCollection of Flags</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMark(System.String,System.String)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log";
             
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //mark as answered and seen
            FlagCollection[] fcs = mc.UnMark( "1:3", "\\answered \\seen" );
             
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'mark as answered and seen
            Dim fcs As FlagCollection() = mc.UnMark("1:3", "\answered \seen" )
             
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks an ordinal index message set with various flags.</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            	<para>This method is provided for advanced developers, who know the various IMAP
                flags and their formats. To specify flags, without worrying about formatting, use a
                different overloaded method that accepts a Flag object.</para>
            </remarks>
            <param name="messageSet">A message set of ordinal indexes.</param>
            <param name="flagList">IMAP formatted flag list.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMark(System.String,System.String,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log";
             
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //mark as answered and seen
            FlagCollection[] fcs = mc.UnMark( "1:3", "\\answered \\seen", IndexType.Ordinal );
             
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'mark as answered and seen
            Dim fcs As FlagCollection() = mc.UnMark("1:3", "\answered \seen", IndexType.Ordinal )
             
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message set with various flags.</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            	<para>This method is provided for advanced developers, who know the various IMAP
                flags and their formats. To specify flags, without worrying about formatting, use a
                different overloaded method that accepts a Flag object.</para>
            </remarks>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="flagList">IMAP formatted flag list.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMark(System.String,System.String,aspNetIMAP.IndexType,aspNetIMAP.SilentOption)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  ); 
             
            //set some logging properties 
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.InMemory = true;
            imap.Logger.Path = "c:\\imap.log";
             
             
            imap.Login(); 
             
            MailFolder inbox = imap.SelectInbox(); 
            MessageClient mc = inbox.MessageClient; 
             
            //mark as answered and seen
            FlagCollection[] fcs = mc.Mark( "1:3", "\\answered \\seen", IndexType.Ordinal, SilentOption.On );
             
             
            imap.Disconnect(); 
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            Console.WriteLine( "Done" ); 
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties 
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'mark as answered and seen
            Dim fcs As FlagCollection() = mc.Mark("1:3", "\answered \seen", IndexType.Ordinal, SilentOption.On)
             
             
            imap.Disconnect()
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message set with various flags.</summary>
            <remarks>
            	<para>Be sure to check out the complete messageSet explanation at
                <see cref="T:aspNetIMAP.MessageClient">MessageClient</see></para>
            	<para>This method is provided for advanced developers, who know the various IMAP
                flags and their formats. To specify flags, without worrying about formatting, use a
                different overloaded method that accepts a Flag object.</para>
            </remarks>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="flagList">IMAP formatted flag list.</param>
            <param name="indexType">Ordinal or UniqueId</param>
            <param name="silentOption">
            If the SilentOption is On, the silent option slightly reduces network
            traffic, as the final results are not set back from the IMAP server.
            </param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsAnswered(System.Int32)">
            <summary>UnMarks a message with the answered flag.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //unmark as answered
            mc.UnMarkAsAnswered( 1  ); 
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title=" ">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'unmark as answered
            mc.UnMarkAsAnswered(1 )
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">An ordinal index message number.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsAnswered(System.Int32,aspNetIMAP.IndexType)">
            <summary>UnMarks a message with the answered flag.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //unmark as answered
            mc.UnMarkAsAnswered( 1, IndexType.Ordinal ); 
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET" title=" ">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'unmark as answered
            mc.UnMarkAsAnswered(1, IndexType.Ordinal)
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsAnswered(System.String)">
            <summary>UnMarks an ordinal index message set with the answered flag.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //unmark as answered
            mc.UnMarkAsAnswered( "1:3" ); 
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'unmark as answered
            mc.UnMarkAsAnswered("1:3" )
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">Ordinal index message set.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsAnswered(System.String,aspNetIMAP.IndexType)">
            <summary>UnMarks a message set with the answered flag.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //unmark as answered
            mc.UnMarkAsAnswered( "1:3", IndexType.Ordinal ); 
             
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'unmark as answered
            mc.UnMarkAsAnswered("1:3", IndexType.Ordinal)
             
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="indexType">Ordinal or Unique,.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsDraft(System.Int32)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.UnMarkAsDraft( 1 ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.UnMarkAsDraft(1)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message with the draft flag.</summary>
            <param name="messageNumber">The ordinal message number.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsDraft(System.Int32,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.UnMarkAsDraft( 1, IndexType.Ordinal ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.UnMarkAsDraft(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message with the draft flag.</summary>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsDraft(System.String)">
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.UnMarkAsDraft( "1:3" ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.UnMarkAsDraft("1:3" )
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message set with the draft flag.</summary>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsDraft(System.String,aspNetIMAP.IndexType)">
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.UnMarkAsDraft( "1:3", IndexType.Ordinal ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.UnMarkAsDraft("1:3", IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message set with the draft flag.</summary>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsFlagged(System.Int32)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.UnMarkAsFlagged( 1 ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.UnMarkAsFlagged(1)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message with the seen flag.</summary>
            <param name="messageNumber">The ordinal message number.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsFlagged(System.Int32,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.UnMarkAsFlagged( 1, IndexType.Ordinal ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.UnMarkAsFlagged(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message with the flag flag.</summary>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsFlagged(System.String)">
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.UnMarkAsFlagged( "1:3" ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.UnMarkAsFlagged("1:3" )
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message set with the flag flag.</summary>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsFlagged(System.String,aspNetIMAP.IndexType)">
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.UnMarkAsFlagged( "1:3", IndexType.Ordinal ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.UnMarkAsFlagged("1:3", IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message set with the flag flag.</summary>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAllAsRead">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.UnMarkAllAsRead(); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.UnMarkAllAsRead()
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks all messages with the seen  flag.</summary>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsRead(System.Int32)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.UnMarkAsRead( 1 ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.UnMarkAsRead(1)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message with the seen flag.</summary>
            <param name="messageNumber">The ordinal message number.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsRead(System.Int32,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.UnMarkAsRead( 1, IndexType.Ordinal ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.UnMarkAsRead(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message with the seen flag.</summary>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsRead(System.String)">
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.UnMarkAsRead( "1:3" ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.UnMarkAsRead("1:3" )
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message set with the seen flag.</summary>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsRead(System.String,aspNetIMAP.IndexType)">
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.UnMarkAsRead( "1:3", IndexType.Ordinal ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.UnMarkAsRead("1:3", IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message set with the seen flag.</summary>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsRecent(System.Int32)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.UnMarkAsRecent( 1 ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.UnMarkAsRecent(1)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message with the recent flag.</summary>
            <param name="messageNumber">The ordinal message number.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsRecent(System.Int32,aspNetIMAP.IndexType)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.UnMarkAsRecent( 1, IndexType.Ordinal ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.UnMarkAsRecent(1, IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message with the recent flag.</summary>
            <param name="messageNumber">The ordinal message number, or the UniqueId.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsRecent(System.String)">
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.UnMarkAsRecent( "1:3" ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.UnMarkAsRecent("1:3" )
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message set with the recent flag.</summary>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.UnMarkAsRecent(System.String,aspNetIMAP.IndexType)">
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
             
            imap.Login();  
             
            MailFolder inbox = imap.SelectInbox();  
            MessageClient mc = inbox.MessageClient;  
             
             
            //mark with flag
            mc.UnMarkAsRecent( "1:3", IndexType.Ordinal ); 
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
             
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
             
            'mark with flag
            mc.UnMarkAsRecent("1:3", IndexType.Ordinal)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>UnMarks a message set with the recent flag.</summary>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Size(System.Int32)">
            <summary>
            Gets the size of a message, in bytes.
            </summary>
            <returns>Number of bytes.</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
             
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
             
            //get the size of the first message
            int messageSize = mc.Size(1);
            Console.WriteLine( messageSize );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'get the size of the first message
            Dim messageSize As Integer = mc.Size(1)
            Console.WriteLine(messageSize)
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">Ordinal index message number</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.Size(System.String,aspNetIMAP.IndexType)">
            <summary>Returns an array of sizes for the message set.</summary>
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
             
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
             
            //get the size of the first message
            int[] messageSizes = mc.Size("1:3", IndexType.Ordinal );
            foreach( int size in messageSizes )
            {
                Console.WriteLine( size );
            }
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            'get the size of the first message
            Dim messageSizes As Integer() = mc.Size("1:3", IndexType.Ordinal)
            Dim size As Integer
            For Each size In  messageSizes
               Console.WriteLine(size)
            Next size
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">Message set of ordinal or UniqueId indexes.</param>
            <param name="indexType">Ordinal or UniqueId</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.IsBlackListedSpam(System.Int32,aspNetIMAP.IndexType,System.Boolean)">
            <summary>
            Uses the IMAP4.BlackListChecker to see if a message has been black listed as spam.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1" );
            imap.Logger = new IMAPLog();
             
            //if we have write permissions to the filesystem, we can write out a physical log file
            imap.Logger.Path = "c:\\imap.log";
             
            //if we don't have write permissions to a file, we can always keep an in-memory log
            imap.Logger.InMemory = true;
             
            imap.Username = "dave@blah.com";
            imap.Password = "test";
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
             
            //load the BlackListChecker with 2 databases: spamhaus and sorbs
            imap.BlackListChecker.AddDNSBlackList( "sbl-xbl.spamhaus.org", "127.0.0.2" );
            imap.BlackListChecker.AddDNSBlackList( "dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12" );
             
            //check to see if the first message is spam
            bool result = inbox.MessageClient.IsBlackListedSpam( 1, IndexType.Ordinal, false );
            Console.WriteLine( result );
             
            //write out the log
            Console.WriteLine( imap.Logger.ToString() );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1")
            imap.Logger = New IMAPLog()
             
            'if we have write permissions to the filesystem, we can write out a physical log file
            imap.Logger.Path = "c:\imap.log"
             
            'if we don't have write permissions to a file, we can always keep an in-memory log
            imap.Logger.InMemory = True
             
            imap.Username = "dave@blah.com"
            imap.Password = "test"
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
             
            'load the BlackListChecker with 2 databases: spamhaus and sorbs
            imap.BlackListChecker.AddDNSBlackList("sbl-xbl.spamhaus.org", "127.0.0.2")
            imap.BlackListChecker.AddDNSBlackList("dnsbl.sorbs.net", "127.0.0.2, 127.0.0.3, 127.0.0.4, 127.0.0.5, 127.0.0.6, 127.0.0.7, 127.0.0.8, 127.0.0.9, 127.0.0.10, 127.0.0.11, 127.0.0.12")
             
            'check to see if the first message is spam
            Dim result As Boolean = inbox.MessageClient.IsBlackListedSpam(1, IndexType.Ordinal, False)
            Console.WriteLine(result)
             
            'write out the log
            Console.WriteLine(imap.Logger.ToString())
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.MessageClient.ToUniqueId(System.Int32)">
            <summary>Converts an ordinal index of a message number, to it's UniqueId</summary>
            <returns>The Unique Id</returns>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
             
            int uniqueId = mc.ToUniqueId( 1 );
            Console.WriteLine( uniqueId );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            Dim uniqueId As Integer = mc.ToUniqueId(1)
            Console.WriteLine(uniqueId)
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageNumber">The ordinal message number</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.ToUniqueIds(System.String)">
            <summary>Converts a set of messages to their UniqueIds</summary>
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
             
            int[] uniqueIds = mc.ToUniqueIds( "1:3" );
            foreach( int uid in uniqueIds )
            {
                Console.WriteLine( uid );
            }
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            Dim uniqueIds As Integer() = mc.ToUniqueIds("1:3")
            Dim uid As Integer
            For Each uid In  uniqueIds
               Console.WriteLine(uid)
            Next uid
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">An IMAP message set of ordinal indexes.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.ToUniqueIds(System.String,aspNetIMAP.IndexType)">
            <summary>Converts a set of messages to their UniqueIds</summary>
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <param name="messageSet">An IMAP message set of ordinal indexes.</param>
            <param name="indexType">Returns the UnqiueIds, based upon the messageSet index type.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.ToUniqueIdSet(System.String)">
            <summary>Converts an ordianl index message set to a unique id message set.</summary>
            <remarks>
            Be sure to check out the complete messageSet explanation at
            <see cref="T:aspNetIMAP.MessageClient">MessageClient</see>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
             
            string uidSet = mc.ToUniqueIdSet( "1,3,5,7:13" );
            Console.WriteLine( uidSet );
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
             
            Dim uidSet As String = mc.ToUniqueIdSet("1,3,5,7:13")
            Console.WriteLine(uidSet)
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="messageSet">AnIMAP message set of ordinal indexes.</param>
        </member>
        <member name="M:aspNetIMAP.MessageClient.ToMessageSet(System.Int32,System.Int32)">
            <summary>Converts a range of ordinal indexes to a message set.</summary>
            <param name="startIndex">Starting index number.</param>
            <param name="count">Number of messages.</param>
        </member>
        <member name="P:aspNetIMAP.MessageClient.Folder">
            <summary>
            The parent mail folder.
            </summary>
            <remarks>This property is set internally by aspNetIMAP. This property should only be needed to be accessed for advanced functionality.</remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test" );
             
            //set some logging properties
            imap.Logger = new IMAPLog();
            imap.Logger.Overwrite = true;
            imap.Logger.Path = "c:\\imap.log";
             
            //login
            imap.Login();
             
            MailFolder inbox = imap.SelectInbox();
            MessageClient mc = inbox.MessageClient;
            FetchClient fc = inbox.FetchClient;
             
            //download the first message
            string contents = fc.MessageAsText(1);
             
            //do something with the message 
            Console.WriteLine( contents );
             
            //decide we want to delete it
            mc.Delete(1);
             
            //remove the deleted message(s)
            mc.PurgeDeletedMessages();
             
            imap.Disconnect();
             
            Console.WriteLine( "Done" );
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.Path = "c:\imap.log"
             
            'login
            imap.Login()
             
            Dim inbox As MailFolder = imap.SelectInbox()
            Dim mc As MessageClient = inbox.MessageClient
            Dim fc As FetchClient = inbox.FetchClient
             
            'download the first message
            Dim contents As String = fc.MessageAsText(1)
             
            'do something with the message 
            Console.WriteLine(contents)
             
            'decide we want to delete it
            mc.Delete(1)
             
            'remove the deleted message(s)
            mc.PurgeDeletedMessages()
             
            imap.Disconnect()
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="T:aspNetIMAP.Quota">
            <summary>
            The QUOTA extension of IMAP4 that allows you to query the
            limits on resource usage (used and total available).
            </summary>
            <example>
            <code lang="C#">
            //load the imap object from the .config file
            IMAP4 imap = new IMAP4( true, false );
            imap.Login();
            
            //get the quota for the account
            Quota q = imap.GetQuota();
            Console.WriteLine( q.ToString() );
            
            //get the quota for the inbox
            q = imap.GetQuotaRoot( "INBOX" );
            Console.WriteLine( q.ToString() );
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
             'load the imap object from the .config file
            Dim imap As New IMAP4(True, False)
            imap.Login()
            
            'get the quota for the account
            Dim q As Quota = imap.GetQuota()
            Console.WriteLine(q.ToString())
            
            'get the quota for the inbox
            q = imap.GetQuotaRoot("INBOX")
            Console.WriteLine(q.ToString())
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.Quota.#ctor">
            <summary>
            Creates an instance of the Quota class
            </summary>
            <example>
            <code lang="C#">
            //load the imap object from the .config file
            IMAP4 imap = new IMAP4( true, false );
            imap.Login();
            
            //get the quota for the account
            Quota q = imap.GetQuota();
            Console.WriteLine( q.ToString() );
            
            //get the quota for the inbox
            q = imap.GetQuotaRoot( "INBOX" );
            Console.WriteLine( q.ToString() );
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
             'load the imap object from the .config file
            Dim imap As New IMAP4(True, False)
            imap.Login()
            
            'get the quota for the account
            Dim q As Quota = imap.GetQuota()
            Console.WriteLine(q.ToString())
            
            'get the quota for the inbox
            q = imap.GetQuotaRoot("INBOX")
            Console.WriteLine(q.ToString())
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.Quota.ToString">
            <summary>
            Formats the quota object to list out the values in a string.
            </summary>
            <returns></returns>
            <example>
            <code lang="C#">
            //load the imap object from the .config file
            IMAP4 imap = new IMAP4( true, false );
            imap.Login();
            
            //get the quota for the account
            Quota q = imap.GetQuota();
            Console.WriteLine( q.ToString() );
            
            //get the quota for the inbox
            q = imap.GetQuotaRoot( "INBOX" );
            Console.WriteLine( q.ToString() );
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
             'load the imap object from the .config file
            Dim imap As New IMAP4(True, False)
            imap.Login()
            
            'get the quota for the account
            Dim q As Quota = imap.GetQuota()
            Console.WriteLine(q.ToString())
            
            'get the quota for the inbox
            q = imap.GetQuotaRoot("INBOX")
            Console.WriteLine(q.ToString())
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.Quota.MessageTotal">
            <summary>
            Total messages
            </summary>
            <example>
            <code lang="C#">
            //load the imap object from the .config file
            IMAP4 imap = new IMAP4( true, false );
            imap.Login();
            
            //get the quota for the account
            Quota q = imap.GetQuota();
            Console.WriteLine( q.ToString() );
            
            //get the quota for the inbox
            q = imap.GetQuotaRoot( "INBOX" );
            Console.WriteLine( q.ToString() );
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
             'load the imap object from the .config file
            Dim imap As New IMAP4(True, False)
            imap.Login()
            
            'get the quota for the account
            Dim q As Quota = imap.GetQuota()
            Console.WriteLine(q.ToString())
            
            'get the quota for the inbox
            q = imap.GetQuotaRoot("INBOX")
            Console.WriteLine(q.ToString())
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.Quota.MessageUsed">
            <summary>
            Messages used.
            </summary>
            <example>
            <code lang="C#">
            //load the imap object from the .config file
            IMAP4 imap = new IMAP4( true, false );
            imap.Login();
            
            //get the quota for the account
            Quota q = imap.GetQuota();
            Console.WriteLine( q.ToString() );
            
            //get the quota for the inbox
            q = imap.GetQuotaRoot( "INBOX" );
            Console.WriteLine( q.ToString() );
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
             'load the imap object from the .config file
            Dim imap As New IMAP4(True, False)
            imap.Login()
            
            'get the quota for the account
            Dim q As Quota = imap.GetQuota()
            Console.WriteLine(q.ToString())
            
            'get the quota for the inbox
            q = imap.GetQuotaRoot("INBOX")
            Console.WriteLine(q.ToString())
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.Quota.StorageTotal">
            <summary>
            Total storage in units of 1024 bytes (1K).
            </summary>
            <example>
            <code lang="C#">
            //load the imap object from the .config file
            IMAP4 imap = new IMAP4( true, false );
            imap.Login();
            
            //get the quota for the account
            Quota q = imap.GetQuota();
            Console.WriteLine( q.ToString() );
            
            //get the quota for the inbox
            q = imap.GetQuotaRoot( "INBOX" );
            Console.WriteLine( q.ToString() );
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
             'load the imap object from the .config file
            Dim imap As New IMAP4(True, False)
            imap.Login()
            
            'get the quota for the account
            Dim q As Quota = imap.GetQuota()
            Console.WriteLine(q.ToString())
            
            'get the quota for the inbox
            q = imap.GetQuotaRoot("INBOX")
            Console.WriteLine(q.ToString())
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="P:aspNetIMAP.Quota.StorageUsed">
            <summary>
            Total storage used in units of 1024 bytes (1K).
            </summary>
            <example>
            <code lang="C#">
            //load the imap object from the .config file
            IMAP4 imap = new IMAP4( true, false );
            imap.Login();
            
            //get the quota for the account
            Quota q = imap.GetQuota();
            Console.WriteLine( q.ToString() );
            
            //get the quota for the inbox
            q = imap.GetQuotaRoot( "INBOX" );
            Console.WriteLine( q.ToString() );
            
            imap.Disconnect();
            
            </code>
            <code lang="VB.NET">
             'load the imap object from the .config file
            Dim imap As New IMAP4(True, False)
            imap.Login()
            
            'get the quota for the account
            Dim q As Quota = imap.GetQuota()
            Console.WriteLine(q.ToString())
            
            'get the quota for the inbox
            q = imap.GetQuotaRoot("INBOX")
            Console.WriteLine(q.ToString())
            
            imap.Disconnect()
            
            </code>
            </example>
        </member>
        <member name="T:aspNetIMAP.SearchClient">
            <summary>
            Summary description for SearchClient.
            </summary>
            <remarks>
            	<para>A word about searching for addresses.</para>
            	<para>When email addresses are searched, they are not searched in their entirety.
                Instead their parsed Envelope elements are searched. Some more information about
                IMAP Envelopes can be found below, and also at the
                <see cref="T:aspNetIMAP.Envelope">Envelope</see> class.</para>
            	<para><strong>The IMAP Envelope</strong></para>
            	<para>Envelope structures simplify querying IMAP servers for information about
                specific messages. An envelope structure is a subset of the message header that
                provides a convenient subset of the message for folder summaries.</para>
            	<para><strong>Background Information From the RFCs</strong></para>
            	<para>IMAP envelope fields are presented in the following format:</para>
            	<para>Date<br/>
                Subject<br/>
                From<br/>
                Sender<br/>
                Reply-To<br/>
                To<br/>
                Cc<br/>
                Bcc<br/>
                In-Reply-To<br/>
                Message-Id</para>
            	<para>If the contents of the ReplyTo field are not found, they are populated with
                the value in the From field. With the exception of the Address fields, the contents
                are presented as a quoted strings.</para>
            	<para><strong>Address Fields</strong></para>
            	<para>The address fields (From, Sender, Reply-To, To, Cc, Bcc ) are presented as a
                parenthetical list that contains the parsed elements of the address. This is
                important to know, because it's these elements that are searched against, not the
                email address in its entirety.</para>
            	<para>Each address is divided into the following elements, in this order:</para>
            	<para>Personal Name<br/>
                SMTP Source Route<br/>
                Mailbox Name<br/>
                Domain Name</para>
            	<para>For any of these values, that don't exist, a NIL string is inserted. This is
                important to note, because only these elements can be searched, not the address in
                its entirety, as a string.</para>
            	<para><strong>Some Address Examples<br/></strong>So what does a parsed address
                look like? Lets take for example "Terry Gray &lt;gray@cac.washington.edu&gt;", this
                address is parsed into the following string<br/>
                (("Terry Gray" NIL "gray" "cac.washington.edu"))</para>
            	<para>
            		<para>Thus, if you wanted to search for this address, using the SearchClient,
                    some code might look like:</para>
            		<para>//get the inbox<br/>
                    MailFolder mf = imap.SelectInbox();<br/>
                    //search for an address with "cac.washington.edu" in it.<br/>
                    string results = mf.SearchClient.SearchFrom( "cac.washington.edu" );</para>
            		<para>'results' would contain an IMAP list of messages that have
                    "cac.washington.edu" in the domain.</para>
            	</para>
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //search the subject header for the word "number"
            string results = mf.SearchClient.SearchSubject(  "number" );
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'search the subject header for the word "number"
            Dim results As String = mf.SearchClient.SearchSubject("number")
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.#ctor">
            <summary>Creates a new instance of a SearchClient object.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //search the subject header for the word "number"
            string results = mf.SearchClient.SearchSubject(  "number" );
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'search the subject header for the word "number"
            Dim results As String = mf.SearchClient.SearchSubject("number")
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>
            This constructor is called internally by aspNetIMAP, and should not need to be
            called by the developer.
            </remarks>
        </member>
        <member name="M:aspNetIMAP.SearchClient.#ctor(aspNetIMAP.MailFolder)">
            <summary>Creates a new instance of a SearchClient object.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //search the subject header for the word "number"
            string results = mf.SearchClient.SearchSubject(  "number" );
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'search the subject header for the word "number"
            Dim results As String = mf.SearchClient.SearchSubject("number")
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>
            This constructor is called internally by aspNetIMAP, and should not need to be
            called by the developer.
            </remarks>
        </member>
        <member name="M:aspNetIMAP.SearchClient.Search(System.String)">
            <summary>Searches a MailFolder with a properly formatted IMAP query string.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //explicitly search the 'FROM' header for dave@blah.com
            //which is different than searching the From Envelope.
            string queryString = "header FROM \"dave@blah.com\"";
            string results = mf.SearchClient.Search( queryString );
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'explicitly search the 'FROM' header for dave@blah.com
            'which is different than searching the From Envelope.
            Dim queryString As String = "header FROM ""dave@blah.com"""
            Dim results As String = mf.SearchClient.Search(queryString)
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.Search(System.String,aspNetIMAP.SearchOperators)">
            <summary>Searches a MailFolder with a properly formatted IMAP query string.</summary>
            <param name="query">IMAP formatted querystring</param>
            <param name="logical">Logical 'AND' or 'OR' operator.</param>
        </member>
        <member name="M:aspNetIMAP.SearchClient.MessagesBefore(System.DateTime)">
            <summary>Returns a list of all messages before a certain date.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //get all the messages that are older than 30 days
            string results = mf.SearchClient.MessagesBefore( DateTime.Now.AddDays( -30 ) );
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'get all the messages that are older than 30 days
            Dim results As String = mf.SearchClient.MessagesBefore(DateTime.Now.AddDays(- 30))
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.MessagesOn(System.DateTime)">
            <summary>Returns a list of all messages that arrived on a certain day.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //all of the messages that arrived today
            string results = mf.SearchClient.MessagesOn( DateTime.Now );
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'all of the messages that arrived today
            Dim results As String = mf.SearchClient.MessagesOn(DateTime.Now)
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>
            The Day value is extracted from the DateTime value to determine the day searched
            upon.
            </remarks>
        </member>
        <member name="M:aspNetIMAP.SearchClient.MessagesSince(System.DateTime)">
            <summary>Returns a list of all messages after a certain date.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //get all the messages that are new than 30 days
            string results = mf.SearchClient.MessagesSince( DateTime.Now.AddDays( -30 ) );
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'get all the messages that are new than 30 days
            Dim results As String = mf.SearchClient.MessagesSince(DateTime.Now.AddDays(- 30))
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.MessagesSentBefore(System.DateTime)">
            <summary>Returns a list of all messages sent before a certain date.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string results = mf.SearchClient.MessagesSentBefore( DateTime.Now.AddDays( -30 ) );
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim results As String = mf.SearchClient.MessagesSentBefore(DateTime.Now.AddDays(- 30))
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.MessagesSentOn(System.DateTime)">
            <summary>Returns a list of all messages that were sent on a certain day.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string results = mf.SearchClient.MessagesSentOn( DateTime.Now );
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim results As String = mf.SearchClient.MessagesSentOn(DateTime.Now)
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <remarks>
            The Day value is extracted from the DateTime value to determine the day searched
            upon.
            </remarks>
        </member>
        <member name="M:aspNetIMAP.SearchClient.MessagesSentSince(System.DateTime)">
            <summary>Returns a list of all messages sent after a certain date.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string results = mf.SearchClient.MessagesSentSince( DateTime.Now.AddDays( -30 ) );
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim results As String = mf.SearchClient.MessagesSentSince(DateTime.Now.AddDays(- 30))
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.SearchByDate(aspNetIMAP.SearchDates,System.DateTime)">
            <summary>A generic method by using the SearchDates enumeration to search messages.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //all of the messages that arrived today
            string results = mf.SearchClient.SearchByDate( SearchDates.On, DateTime.Now );
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'all of the messages that arrived today
            Dim results As String = mf.SearchClient.SearchByDate(SearchDates.On, DateTime.Now)
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.SearchBcc(System.String)">
            <summary>Searches the BCC field.</summary>
            <remarks>
            See Search<see cref="T:aspNetIMAP.SearchClient">SearchClient Class</see>Client for more
            information about how to specifically search on addresses.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string results = mf.SearchClient.SearchBcc( "microsoft.com" );
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim results As String = mf.SearchClient.SearchBcc("microsoft.com")
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.SearchBody(System.String)">
            <summary>Searches the body for some text.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //search the bodies for "word doc"
            string results = mf.SearchClient.SearchBody( "word doc");
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'search the bodies for "word doc"
            Dim results As String = mf.SearchClient.SearchBody("word doc")
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.SearchCc(System.String)">
            <summary>Searches the CC field.</summary>
            <remarks>
            See SearchCli<see cref="T:aspNetIMAP.SearchClient">SearchClient Class</see>ent for more
            information about how to specifically search on addresses.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string results = mf.SearchClient.SearchCc( "microsoft.com" );
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim results As String = mf.SearchClient.SearchCc("microsoft.com")
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.SearchFrom(System.String)">
            <summary>Searches the From field.</summary>
            <remarks>
            See <see cref="T:aspNetIMAP.SearchClient">SearchClient</see> for more information about how to
            specifically search on addresses.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string results = mf.SearchClient.SearchFrom( "microsoft.com" );
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim results As String = mf.SearchClient.SearchFrom("microsoft.com")
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.SearchHeader(System.String,System.String)">
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //search the subject header for the word "number"
            string results = mf.SearchClient.SearchHeader( "subject", "number" );
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'search the subject header for the word "number"
            Dim results As String = mf.SearchClient.SearchHeader("subject", "number")
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <summary>Searches any header for a value</summary>
        </member>
        <member name="M:aspNetIMAP.SearchClient.SearchSubject(System.String)">
            <summary>Searches the Subject header.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //search the subject header for the word "number"
            string results = mf.SearchClient.SearchSubject(  "number" );
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'search the subject header for the word "number"
            Dim results As String = mf.SearchClient.SearchSubject("number")
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.SearchText(System.String)">
            <summary>Searches the complete email (headers and body) for a phrase.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string results = mf.SearchClient.SearchText(  "order number");
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim results As String = mf.SearchClient.SearchText("order number")
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.SearchTo(System.String)">
            <summary>Searches the To field.</summary>
            <remarks>
            See <see cref="T:aspNetIMAP.SearchClient">SearchClient</see> for more information about how to
            specifically search on addresses.
            </remarks>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string results = mf.SearchClient.SearchTo( "microsoft.com" );
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim results As String = mf.SearchClient.SearchTo("microsoft.com")
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.SearchField(aspNetIMAP.SearchFields,System.String)">
            <summary>Searches the message using any one of the SearchFields enumeration.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string results = mf.SearchClient.SearchField( SearchFields.Subject, "number");
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim results As String = mf.SearchClient.SearchField(SearchFields.Subject, "number")
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.AnsweredSet">
            <summary>Returns an IMAP Message set of answered messages.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string answeredSet= mf.SearchClient.AnsweredSet();
             
            Console.WriteLine( answeredSet );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim answeredSet As String = mf.SearchClient.AnsweredSet()
             
            Console.WriteLine(answeredSet)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.DeletedSet">
            <summary>Returns an IMAP Message set of messages marked for deletion.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string deletedSet= mf.SearchClient.DeletedSet();
             
            Console.WriteLine( deletedSet );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim DeletedSet As String = mf.SearchClient.DeletedSet()
             
            Console.WriteLine(DeletedSet)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.DraftSet">
            <summary>Returns an IMAP Message set of messages marked as drafts.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string DraftSet= mf.SearchClient.DraftSet();
             
            Console.WriteLine( DraftSet );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim DraftSet As String = mf.SearchClient.DraftSet()
             
            Console.WriteLine(DraftSet)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.FlaggedSet">
            <summary>Returns an IMAP Message set of messages marked with flags.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string FlaggedSet= mf.SearchClient.FlaggedSet();
             
            Console.WriteLine( FlaggedSet );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim FlaggedSet As String = mf.SearchClient.FlaggedSet()
             
            Console.WriteLine(FlaggedSet)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.RecentSet">
            <summary>Returns an IMAP Message set of messages marked as recent.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string recentSet = mf.SearchClient.RecentSet();
             
            Console.WriteLine( recentSet );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim recentSet  As String = mf.SearchClient.RecentSet()
             
            Console.WriteLine( recentSet )
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.SeenSet">
            <summary>Returns an IMAP Message set of messages marked as seen.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string SeenSet= mf.SearchClient.SeenSet();
             
            Console.WriteLine( SeenSet );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim SeenSet As String = mf.SearchClient.SeenSet()
             
            Console.WriteLine(SeenSet)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.OldSet">
            <summary>
            Returns an IMAP Message set of messages that do not have the recent flag
            set..
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string OldSet= mf.SearchClient.OldSet();
             
            Console.WriteLine( OldSet );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim OldSet As String = mf.SearchClient.OldSet()
             
            Console.WriteLine(OldSet)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.NewSet">
            <summary>
            Returns an IMAP Message set of messages that have the recent flag set, but not
            seen.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string NewSet= mf.SearchClient.NewSet();
             
            Console.WriteLine( NewSet );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim NewSet As String = mf.SearchClient.NewSet()
             
            Console.WriteLine(NewSet)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.NotAnsweredSet">
            <summary>Returns an IMAP Message set of messages that have not been answered.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string NotAnsweredSet = mf.SearchClient.NotAnsweredSet();
             
            Console.WriteLine( NotAnsweredSet );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim NotAnsweredSet As String = mf.SearchClient.NotAnsweredSet()
             
            Console.WriteLine(NotAnsweredSet)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.NotDeletedSet">
            <summary>
            Returns an IMAP Message set of messages that have not been marked as
            deleted.
            </summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string NotDeletedSet = mf.SearchClient.NotDeletedSet();
             
            Console.WriteLine( NotDeletedSet );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim NotDeletedSet As String = mf.SearchClient.NotDeletedSet()
             
            Console.WriteLine(NotDeletedSet)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.NotDraftSet">
            <summary>Returns an IMAP Message set of messages that are not drafts.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string NotDraftSet = mf.SearchClient.NotDraftSet();
             
            Console.WriteLine( NotDraftSet );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim NotDraftSet As String = mf.SearchClient.NotDraftSet()
             
            Console.WriteLine(NotDraftSet)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.NotFlaggedSet">
            <summary>Returns an IMAP Message set of messages that have not been flagged.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string NotFlaggedSet = mf.SearchClient.NotFlaggedSet();
             
            Console.WriteLine( NotFlaggedSet );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim NotAnsweredSet As String = mf.SearchClient.NotAnsweredSet()
             
            Console.WriteLine(NotAnsweredSet)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.NotSeenSet">
            <summary>Returns an IMAP Message set of messages that have not been seen.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            string NotSeenSet = mf.SearchClient.NotSeenSet();
             
            Console.WriteLine( NotSeenSet );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            Dim NotSeenSet As String = mf.SearchClient.NotSeenSet()
             
            Console.WriteLine(NotSeenSet)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
        </member>
        <member name="M:aspNetIMAP.SearchClient.FlagSet(aspNetIMAP.SearchFlags)">
            <summary>Searches for a messages set with the flag set.</summary>
            <example>
            	<code lang="C#">
            IMAP4 imap = new IMAP4( "127.0.0.1", "dave@blah.com", "test"  );  
             
            //set some logging properties  
            imap.Logger = new IMAPLog(); 
            imap.Logger.Overwrite = true; 
            imap.Logger.InMemory = true; 
            imap.Logger.Path = "c:\\imap.log"; 
             
            imap.Login();  
             
            MailFolder mf = imap.SelectInbox();
             
            //return all of the Recent messages
            string results = mf.SearchClient.FlagSet( SearchFlags.Recent );
             
            Console.WriteLine( results );
             
            imap.Disconnect();  
             
            //write out the log 
            Console.WriteLine( imap.Logger.ToString() ); 
             
            Console.WriteLine( "Done" );  
            Console.ReadLine();
                </code>
            	<code lang="VB.NET">
            Dim imap As New IMAP4("127.0.0.1", "dave@blah.com", "test")
             
            'set some logging properties  
            imap.Logger = New IMAPLog()
            imap.Logger.Overwrite = True
            imap.Logger.InMemory = True
            imap.Logger.Path = "c:\imap.log"
             
            imap.Login()
             
            Dim mf As MailFolder = imap.SelectInbox()
             
            'return all of the Recent messages
            Dim results As String = mf.SearchClient.FlagSet(SearchFlags.Recent)
             
            Console.WriteLine(results)
             
            imap.Disconnect()
             
            'write out the log 
            Console.WriteLine(imap.Logger.ToString())
             
            Console.WriteLine("Done")
            Console.ReadLine()
                </code>
            </example>
            <param name="flag">A SearchFlags enumeration.</param>
        </member>
        <member name="M:aspNetIMAP.SearchClient.ConvertToPhrase(aspNetIMAP.SearchFlags)">
            <summary>Converts an aspNetIMAP SearchFlag to a IMAP formatted search string.</summary>
            <remarks>
            This method is exposed for advanced developers, and should not normally need to
            be used.
            </remarks>
            <param name="searchFlag">SearchFlags enumeration</param>
        </member>
        <member name="M:aspNetIMAP.SearchClient.ConvertToPhrase(aspNetIMAP.SearchFields,System.String)">
            <summary>Converts an aspNetIMAP SearchField to a IMAP formatted search string.</summary>
            <remarks>
            This method is exposed for advanced developers, and should not normally need to
            be used.
            </remarks>
            <param name="searchField">SearchFields enumeration</param>
            <param name="query">Value being queried.</param>
        </member>
        <member name="M:aspNetIMAP.SearchClient.ConvertToPhrase(aspNetIMAP.SearchDates,System.DateTime)">
            <summary>Converts an aspNetIMAP SearchDate to a IMAP formatted search string.</summary>
            <remarks>
            This method is exposed for advanced developers, and should not normally need to
            be used.
            </remarks>
            <param name="searchDate">SearchDates enumeration value.</param>
            <param name="dateTime">.NET framework DateTime value.</param>
        </member>
        <member name="P:aspNetIMAP.SearchClient.Folder">
            <summary>
            Parent MailFolder, used for executing IMAP commands.
            </summary>
        </member>
    </members>
</doc>
