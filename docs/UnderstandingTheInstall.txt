
The three databases must be built/restored:

		StateEval_Proto
		StateEval_Repo
		StateEval

It is a little challenging to install the application; the complexity is due to Windows Identity Framework.  Bear in mind that this is just an attempt to lend some understanding to the installer; in fact once it gets installed the first time on your system, the technology fades into the background and you never have to worry about it again.

background... you can skim this:

WIF... You can google for it; there's a lot.  It's pretty cool, and very current.  In a nutshell, it is a way for sites to delegate authentication to other places.  

The classic example is a liquor store selling alchohol.  You go to their to buy a bottle of chardonnay, and the clerk looks at you suspiciously and thinks that you are not old enough.  You present to him a drivers license, he checks the birthdate, and, assuming you *are* old enough, he sells the bottle.

Note that the liquor store (referred to as the "Relying Party" or "RP") doesn't really have any way of physically verifying your age.  However, it does trust the DMV (an "Identity Provider", or 'IP').  So, if you are carrying around a driver's license (a 'token') that says you are old enough, that is good enough.

The liquor store has essentially delegated the job of verifying majority to the DMV.

This is the essence of a WIF application.  In our case, stateeval is the RP, and a site at OSPI is the IP (it is also called the 'Secure Token Server'; for our purposes, the terms STS and IP are interchangeable).

Instead of walking into a liquor store, the user visits the site.  StateEval notices immediately that the request has not been authenticated yet, and redirects the request to the OSPI site.  The OSPI site checks the login credentials, and redirects the request back to StateEval, but with a token containing pieces of identity information, or 'claims' (this guys name is... this guys roles are... this guy is from this school...).

StateEval trusts tokens from the OSPI site; they are cryptographically signed ('secure'... hence the OSPI site is a 'secure token server').  It takes the claims and treats the user properly, according to his roles, what school/district he belongs to, what his login name is.

In development mode, we don't want to rely on the OSPI to be up while we test.  Therefore we make our own STS ("stateEval_localsSTS").  With web.config magic, we tell STateEval that, when it gets an unauthenticated request, to redirect to the local STS.  The local sts takes in the credentials, and simply verifies against the aspnet_* tables in the stateEval database.


Installing... 

Therefore, in order to install the application, you have to set up two applications; the actual application as well as the STS.

 

Now, because of some WIF funnies, you cannot use the built-in VS 2010 web server for either of these, so you must set up IIS web apps pointing to StateEval\src\web and StateEval\src\stateEval_LocalSTS.  The local STS *must* be named 'stateEval_LocalSTS', because this is bound up in what the StateEval expects to trust.

 

What this means also is that, unless you run VS with admin privileges, the web project will not load.

In addition to that, the tokens generated by the STS must be signed, so you must install a certificate for the sts to use.  This is where the Identity Framework training kit comes in.  If you go to "C:\IdentityTrainingKit\Labs\WebSitesAndIdentity\Source\Setup" (assuming the training kit was installed in the normal place), you can run SetupLab.cmd as an administrator, and it will set up a dummy certificate that can be used by the STS.

******************  This has changed in latest lab *************************

Setup script now at <WIF Trainer install>\Labs\WebSitesAndIdentity\Source\Setup\Scripts\SetupCertificates.cmd

*************************************************


Now, lots of things can go wrong throughout the process.  I think the easiest way to get this all done is to:

a) Install the certificate

b) set up the iis web applications pointing to stateeval, stateEval_LocalSTS

c) compile the project

d) do what's necessary to get the local sts working   

e) hit stateeval and verify it redirects to local sts and comes back

notes:


******************  Install Notes *************************

1. In IIS Manager, when you create the "StateEval" and "StateEval_LocalSTS", 
   create them with "Add Application" and not as a virtual directory.
   You can leave the IIS web root at the default location "C:\Inetpub\wwwroot" 
   or point it anywhere that doesn't root another web application.
   
2. In IIS, after you have used the WIF Training Kit to install certs,
   Open the "SSL Settings" feature icon and check the "Require SSL" checkbox, then apply.
   
3. Open the "stateeval" solution in Visual Studio (running as administrator), 
   then right click on the "web" project and select "Add STS Reference".
   Follow the steps in the wizard.  The location of the Federation metadata will be:
   <src root>\StateEval\src\StateEval_LocalSTS\FederationMetadata\2007-06\FederationMetadata.xml
   or https://localhost/StateEval_LocalSTS/FederationMetadata/2007-06/FederationMetadata.xml

4. Modify the web.config in both the "web" and "StateEval_LocalSTS" to have
   a valid connection string to the various databases.  
   You may wish to create a DB login for this project.  Make sure to assign appropriate execute
   permissions on sprocs and views, or make it db owner.
   
5. Insure that "aspnet_regsql" has been run to configure sql server session storage.  
   This util is located in "C:\Windows\Microsoft.NET\Framework\v4.0.30319\"
   or "C:\Windows\Microsoft.NET\Framework64\v4.0.30319"
   
6. In SQL studio, Grant the user the app will be running under dbo rights to tempdb.

7. In IIS Manager, go to the StateEval and StateEval_LocalSTS apps, click on 
   "Session State" feature, and configure connection string for "SQL Server" usage.
   Make sure to do this for each app.
   
   
************************************************************
   


-- you know you are done with 'c' when you get the error message that says... "The action '<EMPTY>' blah blah.. Expected actions are: 'wsignin1.0' or wsignout1.0'."  This says that the sts is trying to redirect back to the RP, which it can't, since you were hitting the sts directly.

-- at (d), when you hit the app, you see a login screen.  Take a look at the url bar and note where it went to.  When you login successfully, you will hit a page in the stateeval site.

-- check out the aspnet_users table of stateeval, and you can find out what all the usernames are.  in general, the pattern is... [LOCATION] [ROLE_CODE] where: 

 location is a school or district name, 
 and role code is 

  PR for principal, 
  T[1-4] for teachers one through four, 
  DA for district administrator, 
  DE for district evaluator, 
  SA for school admin

passwords for all the logins is 'password'

Once (e) is done, the application has been successfully installed.