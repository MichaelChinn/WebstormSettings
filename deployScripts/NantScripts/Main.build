<?xml version="1.0" encoding="UTF-8"?>
<project>
	<!-- INITIALIZE EMPTY PROPERTIES --> 
	<include buildfile="IN_deployments.include" />
	<include buildfile="WA_deployments.include" />
	<include buildfile="Common_deployment_tasks.include" />
	<include buildfile="Common_config_actions.include" />
 
	<property name="root.dir" value="${directory::get-current-directory()}" />
	<tstamp property="build.date" pattern="yyyy-MM-dd__HH-mm" verbose="true" />

	<!-- ENVIRONMENT DEPLOYMENT TARGETS -->

	<target name="CCNet_trunk_deploy">
		<property name="config" value="CCNet_trunk" />
		<call target="config_environment" />
		
		<call target="config_actions_rebuild_database"/>
		<call target="deploy_everything" />

		<call target="config_actions_deploy" />
		<call target="deploy_everything" />
	</target>

	<target name="CCNet_XDev_deploy">
		<property name="config" value="CCNet_XDev" />
		<call target="config_environment" />

		<call target="config_actions_rebuild_database"/>
		<call target="deploy_everything" />

		<call target="config_actions_deploy" />
		<call target="deploy_everything" />
	</target>

	<target name="CCNet_currentProd_deploy">
		<property name="config" value="CCNet_currentProd" />
		<call target="config_environment" />
		
		<call target="config_actions_rebuild_database"/>
		<call target="deploy_everything" />

		<call target="config_actions_deploy" />
		<call target="deploy_everything" />
	</target>

	<target name="Nunit_trunk_deploy_DB">
		<property name="config" value="Nunit_trunk" />
		<call target="config_environment" />
		
		<call target="config_actions_rebuild_database"/>
		<call target="deploy_everything" />
	</target>
	
	<target name="Nunit_currentProd_deploy_DB">
		<property name="config" value="Nunit_currentProd" />
		<call target="config_environment" />
		
		<call target="config_actions_rebuild_database"/>
		<call target="deploy_everything" />
	</target>
	
	<target name="Nunit_trunk_run_tests">
		<property name="config" value="Nunit_trunk" />
		<call target="config_environment" />
		
		<call target="nUnit" />
	</target>

	<target name="Nunit_currentProd_run_tests">
		<property name="config" value="Nunit_currentProd" />
		<call target="config_environment" />
		
		<call target="nUnit" />
	</target>

	<!-- ENVIRONMENT CONFIGURATION TARGETS -->
	<target name="config_environment">
		<call target="config_${config}_preset" />
		<call target="config_${config}_readonly" if="${target::exists('config_' + config + '_readonly')}"/>
		<call target="config_common" />
		<call target="config_${config}_overrides"  if="${target::exists('config_' + config + '_overrides')}" />
	</target>
	
	<target name="config_CCNet_trunk_preset">
		<property name="environment.name"							value="trunk" />
		
		<property name="root.deployment.dir"						value="D:\Web\StateEval_trunk" />
		<property name="database.server"							value="localhost" />
		<property name="database.name"								value="StateEval_${environment.name}" />
		<property name="database.customization"						value="" />

		<property name="certificate.name"							value="CN=detroit" />
		<property name="certificate.hash"							value="c9a53e9c882ce712fd02ded9912221eb0c7e58c2" />
		<property name="host.name"									value="detroit" />

		<property name="use.microsoft.identityModel"				value="true" />
	</target>

	<target name="config_CCNet_trunk_readonly">
	</target>
	
	<target name="config_CCNet_trunk_overrides">
	</target>

	<target name="config_CCNet_XDev_preset">
		<property name="environment.name"							value="XDev" />
		
		<property name="root.deployment.dir"						value="D:\Web\StateEval_XDev" />
		<property name="database.server"							value="localhost" />
		<property name="database.name"								value="StateEval_${environment.name}" />
		<property name="database.customization"						value="" />

		<property name="certificate.name"							value="CN=detroit" />
		<property name="certificate.hash"							value="c9a53e9c882ce712fd02ded9912221eb0c7e58c2" />
		<property name="host.name"									value="detroit" />

		<property name="use.microsoft.identityModel"				value="true" />
	</target>

	<target name="config_CCNet_currentProd_preset">
		<property name="environment.name"							value="currentProd" />
		
		<property name="root.releases.dir"							value="D:\Releases\StateEval" />
		<property name="root.deployment.dir"						value="D:\Web\StateEval_currentProd" />
		<property name="database.server"							value="localhost" />
		<property name="database.name"								value="StateEval_${environment.name}" />
		<property name="database.customization"						value="custom\Demo" />

		<property name="certificate.name"							value="CN=detroit" />
		<property name="certificate.hash"							value="c9a53e9c882ce712fd02ded9912221eb0c7e58c2" />
		<property name="host.name"									value="detroit" />

		<property name="use.microsoft.identityModel"				value="true" />
	</target>

	<target name="config_Nunit_trunk_preset">
		<property name="environment.name"							value="Nunit_trunk" />
		
		<property name="root.deployment.dir"						value="D:\Web\StateEval_${environment.name}" />
		<property name="database.server"							value="localhost" />
		<property name="database.name"								value="StateEval_${environment.name}" />
		<property name="database.customization"						value="custom\Test" />
		<property name="database.user.name"							value="sa" />
		<property name="database.user.password"						value="mumBleFr@tz" />

		<property name="certificate.name"							value="" />
		<property name="certificate.hash"							value="" />
		<property name="host.name"									value="detroit" />

		<property name="use.microsoft.identityModel"				value="false" />
	</target>

	<target name="config_Nunit_currentProd_preset">
		<property name="environment.name"							value="Nunit_currentProd" />
		
		<property name="root.deployment.dir"						value="D:\Web\StateEval_${environment.name}" />
		<property name="database.server"							value="localhost" />
		<property name="database.name"								value="StateEval_${environment.name}" />
		<property name="database.customization"						value="custom\Test" />
		<property name="database.user.name"							value="sa" />
		<property name="database.user.password"						value="mumBleFr@tz" />

		<property name="certificate.name"							value="" />
		<property name="certificate.hash"							value="" />
		<property name="host.name"									value="detroit" />

		<property name="use.microsoft.identityModel"				value="false" />
	</target>

	<target name="config_common">
		<property name="root.source.dir"							value="${root.dir}\src" />

		<property name="database.user.name"							value="" />
		<property name="database.user.password"						value="" />

		<property name="database.user.name.for.application"			value="StateEvalDbUser_${environment.name}" />
		<property name="database.user.password.for.application"		value="fingleGommit" />

		<property name="customErrors.mode"							value="RemoteOnly" />
		<property name="compilation.debug"							value="false" />

		<property name="root.deployment.dir.for.config"				value="${root.deployment.dir}" />

		<property name="database.SEDbConnection"					value="data source=${database.server};database=${database.name};uid=${database.user.name.for.application};pwd=${database.user.password.for.application};Pooling=true;Max Pool Size=2000" />
		<property name="database.sessionState"						value="data source=${database.server};user id=${database.user.name.for.application};password=${database.user.password.for.application};" />
		<property name="database.EvalEntities"						value="metadata=res://stateevallib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null/DataModels.DatabaseEntities.csdl|res://stateevallib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null/DataModels.DatabaseEntities.ssdl|res://stateevallib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null/DataModels.DatabaseEntities.msl;provider=System.Data.SqlClient;provider connection string=&amp;quot;data source=${database.server};initial catalog=${database.name};uid=${database.user.name.for.application};pwd=${database.user.password.for.application};multipleactiveresultsets=True;App=EntityFramework&amp;quot;" />
		<property name="database.StateEvalEntities"					value="metadata=res://*/StateEvalDataContext.csdl|res://*/StateEvalDataContext.ssdl|res://*/StateEvalDataContext.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=${database.server};initial catalog=${database.name};user id=${database.user.name.for.application};password=${database.user.password.for.application};multipleactiveresultsets=True;application name=EntityFramework&quot;" />    

		<property name="StateEval.web.address"						value="https://${host.name}/StateEval_${environment.name}" />
		<property name="StateEval.source.dir"						value="${root.source.dir}\web" />
		<property name="StateEval.deployment.dir"					value="${root.deployment.dir}\StateEval" />
		<property name="StateEval.application.pool"					value="StateEval_${environment.name}" />
		<property name="StateEval.include.cs"						value="false" />
		
		<property name="StateEval_LocalSTS.web.address"				value="https://${host.name}/StateEval_LocalSTS_${environment.name}" />
		<property name="StateEval_LocalSTS.source.dir"				value="${root.source.dir}\StateEval_LocalSTS" />
		<property name="StateEval_LocalSTS.deployment.dir"			value="${root.deployment.dir}\StateEval_LocalSTS" />
		<property name="StateEval_LocalSTS.application.pool"		value="StateEval_LocalSTS_${environment.name}" />
		<property name="StateEval_LocalSTS.include.cs"				value="true" />
		<property name="StateEval_LocalSTS.FederationMetadataLocation"		value="${root.deployment.dir.for.config}\StateEval_LocalSTS\FederationMetadata\2007-06\FederationMetadata.xml" />
		<property name="StateEval_LocalSTS.issuer"					value="${StateEval_LocalSTS.web.address}" />
 
		<property name="StateEval_WebAPI.web.address"				value="https://${host.name}/StateEval_WebAPI_${environment.name}" />
		<property name="StateEval_WebAPI.source.dir"				value="${root.source.dir}\webAPI" />
		<property name="StateEval_WebAPI.deployment.dir"			value="${root.deployment.dir}\StateEval_WebAPI" />
		<property name="StateEval_WebAPI.application.pool"			value="StateEval_WebAPI_${environment.name}" />
		<property name="StateEval_WebAPI.include.cs"				value="true" />
	</target>
	
	
	<!-- PROJECT DEPLOYMENT TARGETS -->
	<target name="deploy_everything">
		<call target="backup_data_before_database_rebuild" /> 
		<call target="deploy_database" /> 
		
		<call target="deploy_StateEval" /> 
		<call target="deploy_StateEval_LocalSTS" /> 
		<call target="deploy_StateEval_WebAPI" /> 
	</target>

	<target name="deploy_StateEval">
		<property name="project.name" value="StateEval" />

		<call target="deploy_web_application" />
	</target>
	
	<target name="deploy_StateEval_LocalSTS" if="${use.microsoft.identityModel}" >
		<property name="project.name" value="StateEval_LocalSTS" />

		<property name="config.file.1" value="web.config" />

		<call target="deploy_web_application" />
	</target>
	
	<target name="update.StateEval_LocalSTS.web.config" >
		<xmlpoke
			file="${config.file.full.path}"
			xpath="/configuration/appSettings/add[@key = 'SigningCertificateName']/@value"
			value="${certificate.name}" />
		<xmlpoke
			file="${config.file.full.path}"
			xpath="/configuration/connectionStrings/add[@name = 'SEDbConnection']/@connectionString"
			value="${database.SEDbConnection}" />
		<xmlpoke
			file="${config.file.full.path}"
			xpath="/configuration/system.web/sessionState/@sqlConnectionString"
			value="${database.sessionState}" />
		<xmlpoke
			file="${config.file.full.path}"
			xpath="/configuration/system.web/compilation/@debug"
			value="${compilation.debug}" />
	</target>
	
	<target name="deploy_StateEval_WebAPI">
		<property name="project.name" value="StateEval_WebAPI" />

		<property name="config.file.1" value="web.config" />

		<call target="deploy_web_application" />
	</target>
	
	<target name="update.StateEval_WebAPI.web.config" >
		<xmlpoke
			file="${config.file.full.path}"
			xpath="/configuration/connectionStrings/add[@name = 'SEDbConnection']/@connectionString"
			value="${database.SEDbConnection}" />
		<xmlpoke
			file="${config.file.full.path}"
			xpath="/configuration/connectionStrings/add[@name = 'StateEvalEntities']/@connectionString"
			value="${database.StateEvalEntities}" />
		<xmlpoke
			file="${config.file.full.path}"
			xpath="/configuration/system.web/compilation/@debug"
			value="${compilation.debug}" />
	</target>
	
	
	<!-- PROJECT SPECIFIC DEPLOYMENT TASKS TARGETS -->
	
	<target name="backup_data_before_database_rebuild"	if="${do_backup_data_before_database_rebuild}" >
		<property name="customization.argument"	value=""/>
		<property name="customization.argument"	value="/customization:${database.customization}" if="${database.customization != ''}"/>

		<echo message="Using database customization: ${database.customization}" 	if="${database.customization != ''}" />
		
		<mkdir dir="${root.source.dir}\sql\${database.customization}\Init" />
		
		<exec program="sqlCmd">
			<arg value="-S" />
			<arg value="${database.server}" />
			<arg value="-E" />
			<arg value="-d" />
			<arg value="${database.name}" />
			<arg value="-h" />
			<arg value="-1" />
			<arg value="-o" />
			<arg value="${root.source.dir}\sql\${database.customization}\Init\InitFrameworks2Load.sql" />
			<arg value="-Q" />
			<arg value="set nocount on select ' insert dbo.ProtoFrameworksToLoad (dest, src, placeName, SchoolYear) values ('''  + dest + ''', ''' + src + ''',''' + placeName + ''',' + Convert(varchar(10),SchoolYear) + ')' from dbo.ProtoFrameworksToLoad" />
		</exec>
		
	</target>

	<target name="deploy_database" >
		<property name="database.login.argument"	value=""/>
		<property name="database.login.argument"	value="/user:${database.user.name} /password:${database.user.password}" if="${database.user.name != '' and database.user.password != ''}"/>

		<property name="customization.argument"		value=""/>
		<property name="customization.argument"		value="/customization:${database.customization}" if="${database.customization != ''}"/>

		<!-- Same StateEval_Proto database is used for all environments and this database must be always rebuild from scripts -->
		<property name="rebuild.argument"			value="/rebuild" />
		<property name="database.name.full"			value="StateEval_Proto"/>
		<property name="sql.dir"					value="${root.source.dir}\Tools\Prototypes\src\sql"/>
		
		<if test="${do_update_database}">
			<property name="do_rebuild_database"	value="true" />
			<call target="rebuild_database" />
			<property name="do_rebuild_database"	value="false" />
		</if>
		<call target="rebuild_database" />

		<property name="rebuild.argument"			value="/rebuild" />
		<property name="database.name.full"			value="${database.name}"/>
		<property name="sql.dir"					value="${root.source.dir}\sql"/>
		
		<call target="backup_database" />
		<call target="update_database" />
		<call target="rebuild_database" />
	</target>

	<!-- HELPER TARGETS -->
	
	<target name="remove_microsoft_identityModel" >
		<script language="C#">
			<references>
				<include name="System.dll" />
				<include name="System.Xml.dll" />
			</references>
			<imports>
				<import namespace="System.Text.RegularExpressions" />
				<import namespace="System.Xml" />
				<import namespace="System.Xml.XPath" />
			</imports>
			<code><![CDATA[
			public static void ScriptMain(Project project)
			{
				string fileName = project.Properties["config.file.full.path"];
	
				StreamReader reader = new StreamReader(fileName);
				string contents = reader.ReadToEnd();
				reader.Close();

				contents = Regex.Replace(contents, "<section.+name=\"microsoft.identityModel\".+/>", "");
				contents = Regex.Replace(contents, "<add.+key=\"FederationMetadataLocation\".+/>", "");
				contents = Regex.Replace(contents, "<add.+key=\"EDSLoginPage\".+/>", "");
				contents = Regex.Replace(contents, "<assemblies>[\\s\\S]+</assemblies>", "");
				contents = Regex.Replace(contents, "<add.+name=\"WSFederationAuthenticationModule\".+/>", "");
				contents = Regex.Replace(contents, "<add.+name=\"SessionAuthenticationModule\".+/>", "");
				contents = Regex.Replace(contents, "<location.+path=\"elmah.axd\"[\\s\\S]+?</location>", "");
				contents = Regex.Replace(contents, "<location.+path=\"FederationMetadata\"[\\s\\S]+?</location>", "");
				contents = Regex.Replace(contents, "<microsoft.identityModel>[\\s\\S]+</microsoft.identityModel>", "");

				
				StreamWriter writer = new StreamWriter(fileName, false);
				writer.Write(contents);
				writer.Close();
     			}
			]]></code>
    		</script>		
	</target>
	
	<target name="prepare_install_nightly">
		<property name="ccnet.dir" 									value="C:\Program Files (x86)\CruiseControl.NET\server" />
		<property name="StateEval_trunk_continuous.state.file" 		value="${ccnet.dir}\StateEval_trunk_continuous.state" />
		<property name="StateEval_trunk_deploy_ccnet.state.file"	value="${ccnet.dir}\StateEval_trunk_deploy_ccnet.state" />
		
		<xmlpeek
			file="${StateEval_trunk_continuous.state.file}"
			xpath="/IntegrationResult/Status"
			property="StateEval_trunk_continuous.status" >
			<namespaces>
				<namespace prefix="xsi" uri="http://www.w3.org/2001/XMLSchema-instance" />
				<namespace prefix="xsd" uri="http://www.w3.org/2001/XMLSchema" />
			</namespaces>
		</xmlpeek>

		<xmlpeek
			file="${StateEval_trunk_deploy_ccnet.state.file}"
			xpath="/IntegrationResult/Status"
			property="StateEval_trunk_deploy_ccnet.status">
			<namespaces>
				<namespace prefix="xsi" uri="http://www.w3.org/2001/XMLSchema-instance" />
				<namespace prefix="xsd" uri="http://www.w3.org/2001/XMLSchema" />
			</namespaces>
		</xmlpeek>

		<if test="${StateEval_trunk_continuous.status != 'Success'}" >
			<fail message="StateEval_trunk_continuous project status is not Success " />
		</if>
		
		<if test="${StateEval_trunk_deploy_ccnet.status != 'Success'}" >
			<fail message="StateEval_trunk_deploy_ccnet project status is not Success " />
		</if>
		
		<property name="package.file" 		value="D:\Releases\StateEval\StateEval_nightly.7z" readonly="true"/>

		<call target="prepare_install" />
	</target>

	<target name="prepare_install">
		<property name="packages.dir" 			value="D:\Releases\StateEval" />
		<property name="version" 				value="${CCNetLabel}" />
		<property name="root.source.dir"		value="${root.dir}\src" />
		
		<delete dir="${install.dir}" />
	
		<copy todir="${install.dir}\deployScripts\NantScripts" >
			<fileset basedir="${root.dir}\deployScripts\NantScripts">
				<include name="**\*.build" />
				<include name="**\*.include" />
			</fileset>
		</copy>
		
		<copy todir="${install.dir}\src\sql" >
			<fileset basedir="${root.source.dir}\sql">
				<include name="**\*.sql" />
				<include name="**\*.bat" />
				<include name="**\*.wsf" />
			</fileset>
		</copy>

		<copy todir="${install.dir}\src\tools\Prototypes\src\sql" >
			<fileset basedir="${root.source.dir}\tools\Prototypes\src\sql">
				<include name="**\*.sql" />
				<include name="**\*.bat" />
				<include name="**\*.wsf" />
			</fileset>
		</copy>

		<copy todir="${install.dir}\src\web" >
			<fileset basedir="${root.source.dir}\web">
				<include name="**\*.*" />
				<!-- exclude name="**\*.pdb" / -->
				<exclude name="**\*.cs" /> 
				<exclude name="**\*.csproj" />
				<exclude name="obj\**" />
			</fileset>
		</copy>
		
		<copy todir="${install.dir}\src\StateEval_LocalSTS" >
			<fileset basedir="${root.source.dir}\StateEval_LocalSTS">
				<include name="**\*.*" />
				<!-- exclude name="**\*.pdb" / -->
				<exclude name="**\*.csproj" />
				<exclude name="obj\**" />
			</fileset>
		</copy>
		
		<copy todir="${install.dir}\src\StateEval_LocalSTS\bin" >
			<fileset basedir="${root.source.dir}\web\bin">
				<include name="Microsoft.IdentityModel.dll" />
			</fileset>
		</copy>
		
		<xmlpoke
			file="${install.dir}\src\StateEval_LocalSTS\web.config"
			xpath="/configuration/appSettings/add[@key = 'version']/@value"
			value="${version}" />

		<copy todir="${install.dir}\src\webAPI" >
			<fileset basedir="${root.source.dir}\webAPI">
				<include name="**\*.*" />
				<!-- exclude name="**\*.pdb" / -->
				<exclude name="**\*.cs" /> 
				<exclude name="**\*.csproj" />
				<exclude name="obj\**" />
			</fileset>
		</copy>

		<xmlpoke
			file="${install.dir}\src\webAPI\web.config"
			xpath="/configuration/appSettings/add[@key = 'webpages:Version']/@value"
			value="${version}" />
		
		<if test="${prepare.package}">
			<property name="ftp.tool.dir"		value="C:\Program Files (x86)\CoreFTP" />
			<property name="zip.tool.dir" 		value="C:\Program Files\7-Zip" />
			<property name="ftp.site"  			value="HocProfessionalSFTP" />
			<property name="ftp.dir"  			value="/Releases/StateEval/" />
			
			<property name="package.file" 		value="${packages.dir}\StateEval_${version}.7z" />

			<delete file="${package.file}" />
		
			<exec program="7z.exe" basedir="${zip.tool.dir}" workingdir="${install.dir}">
				<arg value="a" />
				<arg value="${package.file}" />
				<arg value=".\*" />
			</exec>

			<echo message="Uploading package ${package.file} file to ${ftp.site} directory ${ftp.dir}" />
			
			<exec program="coreftp.exe" basedir="${ftp.tool.dir}" workingdir="${root.dir}">
				<arg value="-s" />
				<arg value="-u" />
				<arg value="${package.file}" />
				<arg value="-site" />
				<arg value="${ftp.site}" />
				<arg value="-p" />
				<arg value="${ftp.dir}" />
				<arg value="-O" />
			</exec>		
			
			<call target="create_svn_tag" />
		</if>
	</target>

	<target name="create_svn_tag" >
		<property name="build.tool.svn.dir" value="C:\Program Files\TortoiseSVN\bin" />
		<property name="svn.tag.url" value="https://dev.hocprofessional.com/svn/StateEval/tags/StateEval_${version}" />		
		
		<exec program="svn.exe" basedir="${build.tool.svn.dir}" resultproperty="svn.result"  failonerror="false">
			<arg value="info" />
			<arg value="${svn.tag.url}" />
		</exec>
		
		<if test="${svn.result == '0'}">
			<echo message="Tag ${svn.tag.url} already exist" />
		</if>

		<if test="${svn.result != '0'}">
			<echo message="Tag ${svn.tag.url} does not exist" />
			<property name="svn.log.args" value="&#34;${root.dir}&#34; -r COMMITTED --xml" />
			<echo message="${svn.log.args}" />

			<exec program="svn.exe" basedir="${build.tool.svn.dir}" output="${root.dir}\svnlog.log" failonerror="true" >
				<arg line="log ${svn.log.args}" />
			</exec>

			<xmlpeek
				file="${root.dir}\svnlog.log"
				xpath="/log/logentry/@revision"
				property="svn.revision">
			</xmlpeek>

			<exec program="svn.exe" basedir="${build.tool.svn.dir}" output="${root.dir}\svnlog.log" failonerror="true" >
				<arg line="info ${svn.log.args}" />
			</exec>

			<xmlpeek
				file="${root.dir}\svnlog.log"
				xpath="/info/entry/url"
				property="svn.url">
			</xmlpeek>

			<exec program="svn.exe" basedir="${build.tool.svn.dir}" failonerror="true">
				<arg line='copy "${svn.url}" -r "${svn.revision}" "${svn.tag.url}" --message "Tagging StateEval version ${version}"' />
			</exec>
		</if>
	</target>
	
	<target name="nUnit" >
		<property name="nunit.tool.dir" value="C:\Program Files (x86)\NUnit 2.5.10\bin\net-2.0" />
		<property name="open.cover.tool.dir" value="C:\Program Files (x86)\OpenCover" />
		<property name="report.generator.tool.dir" value="D:\Installs\ReportGenerator" />
		
		<delete file="nUnit.log.xml"/>
		<delete file="coverage.xml"/>
		<delete file="Summary.xml"/>
		
		<property name="config.file.full.path" value="${root.dir}\src\stateevallib.tests\bin\Debug\stateevallib.tests.dll.config" />
		<xmlpoke
			file="${config.file.full.path}"
			xpath="/configuration/connectionStrings/add[@name = 'StateEval.tests.Properties.Settings.stateevalConnectionString']/@connectionString"
			value="${database.SEDbConnection}" />
			
		<xmlpoke
			file="${config.file.full.path}"
			xpath="/configuration/connectionStrings/add[@name = 'EvalEntities']/@connectionString"
			value="${database.EvalEntities}" />

		<xmlpoke
			file="${config.file.full.path}"
			xpath="/configuration/connectionStrings/add[@name = 'SEDbConnection']/@connectionString"
			value="${database.SEDbConnection}" />
		
		<exec program="OpenCover.Console.exe" basedir="${open.cover.tool.dir}" workingdir="${root.dir}" resultproperty="nunit.result" failonerror="false">
			<arg value="-target:${nunit.tool.dir}\nunit-console.exe" />
			<arg value="-targetargs:&quot;src\stateevallib.tests\bin\Debug\stateevallib.tests.dll /xml=nUnit.log.xml /noshadow /nologo /nodots&quot;" />
			<arg value="-filter:+[*]* -[*tests]* -[*UnitTests]* -[*HtmlAgilityPack]*" />			
			<arg value="-output:coverage.xml" />			
			<arg value="-returntargetcode" />			
		</exec>
		
		<exec program="ReportGenerator.exe " basedir="${report.generator.tool.dir}" workingdir="${root.dir}">
			<arg value="coverage.xml" />
			<arg value=".\" />
			<arg value="XmlSummary" />			
		</exec>
		
		<exec program="ReportGenerator.exe " basedir="${report.generator.tool.dir}" workingdir="${root.dir}">
			<arg value="coverage.xml" />
			<arg value="${CCNetArtifactDirectory}\LatestOpenCoverReport" />
			<arg value="Html" />			
		</exec>
		
		<fail if="${nunit.result != '0'}" />
	</target>	
	
	<target name="FxCop">
		<property name="fxcop.tool.dir" value="C:\Program Files (x86)\Microsoft Fxcop 10.0" />
		<property name="fxcop.log.file" value="${root.dir}\fxcop.log.xml" />
		
		<delete file="${fxcop.log.file}"/>

		<exec program="FxCopCmd.exe " basedir="${fxcop.tool.dir}" workingdir="${root.dir}">
			<arg value="/project:StateEval.fxcop" />
			<arg value="/out:${fxcop.log.file}" />
		</exec>
		
		<fail message="FxCop found errors."  if="${file::exists(fxcop.log.file)}" />
	</target>

	<target name="Simian">
		<property name="simian.tool.dir" value="D:\Installs\simian-2.3.33.tar\bin" />
		<property name="simian.log.file" value="${root.dir}\simian.log.xml" />
		
		<delete file="${simian.log.file}"/>

		<exec program="simian-2.3.33.exe " basedir="${simian.tool.dir}" workingdir="${root.dir}">
			<arg value="-config=simian.config" />
		</exec>
	</target>
</project>